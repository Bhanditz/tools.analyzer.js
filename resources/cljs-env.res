{^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core {:ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :mappings {^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash])} ->PersistentHashSet ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentHashSet [^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash])} ->PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause])} ->ExceptionInfo ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause])} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause])} ->ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 7434, :column 4, :line 7434, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7434, :column 5, :line 7434, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7434, :column 7, :line 7434, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7434, :column 9, :line 7434, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 7428, :column 7, :line 7428, :file "cljs/core.cljs"} js->clj ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 7434, :column 4, :line 7434, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7434, :column 5, :line 7434, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7434, :column 7, :line 7434, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7434, :column 9, :line 7434, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 7428, :column 7, :line 7428, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7434, :column 5, :line 7434, :file "cljs/core.cljs"} x & ^{:end-column 14, :end-line 7434, :column 9, :line 7434, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 7434, :column 4, :line 7434, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7434, :column 5, :line 7434, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7434, :column 7, :line 7434, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7434, :column 9, :line 7434, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 7428, :column 7, :line 7428, :file "cljs/core.cljs"} js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1416, :column 4, :line 1416, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1416, :column 5, :line 1416, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1416, :column 11, :line 1416, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1418, :column 4, :line 1418, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1418, :column 5, :line 1418, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1418, :column 11, :line 1418, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1418, :column 16, :line 1418, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1411, :column 7, :line 1411, :file "cljs/core.cljs"} sort-by ^{:arglists (^{:end-column 16, :end-line 1416, :column 4, :line 1416, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1416, :column 5, :line 1416, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1416, :column 11, :line 1416, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1418, :column 4, :line 1418, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1418, :column 5, :line 1418, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1418, :column 11, :line 1418, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1418, :column 16, :line 1418, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1411, :column 7, :line 1411, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1416, :column 5, :line 1416, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1416, :column 11, :line 1416, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1418, :column 5, :line 1418, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1418, :column 11, :line 1418, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1418, :column 16, :line 1418, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1416, :column 4, :line 1416, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1416, :column 5, :line 1416, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1416, :column 11, :line 1416, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1418, :column 4, :line 1418, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1418, :column 5, :line 1418, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1418, :column 11, :line 1418, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1418, :column 16, :line 1418, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1411, :column 7, :line 1411, :file "cljs/core.cljs"} sort-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 36, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} ITransientAssociative ^{:impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :protocol-symbol true, :end-column 36, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 36, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} ITransientAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} chunk-first ^{:arglists (^{:end-column 22, :end-line 2382, :column 19, :line 2382, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2382, :column 20, :line 2382, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2382, :column 7, :line 2382, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 2382, :column 20, :line 2382, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2382, :column 19, :line 2382, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2382, :column 20, :line 2382, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2382, :column 7, :line 2382, :file "cljs/core.cljs"} chunk-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 391, :column 3, :line 391, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 391, :column 5, :line 391, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 391, :column 16, :line 391, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 388, :column 7, :line 388, :file "cljs/core.cljs"} pr-str* ^{:arglists (^{:end-column 20, :end-line 391, :column 3, :line 391, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 391, :column 5, :line 391, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 391, :column 16, :line 391, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 388, :column 7, :line 388, :file "cljs/core.cljs"} {:arglists ([^{:tag ^{:end-column 16, :end-line 391, :column 5, :line 391, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 391, :column 16, :line 391, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 391, :column 3, :line 391, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 391, :column 5, :line 391, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 391, :column 16, :line 391, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 388, :column 7, :line 388, :file "cljs/core.cljs"} pr-str*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3141, :column 5, :line 3141, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3141, :column 13, :line 3141, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3141, :column 22, :line 3141, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3134, :column 7, :line 3134, :file "cljs/core.cljs"} tree-seq ^{:arglists (^{:end-column 27, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3141, :column 5, :line 3141, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3141, :column 13, :line 3141, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3141, :column 22, :line 3141, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3134, :column 7, :line 3134, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 13, :end-line 3141, :column 5, :line 3141, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3141, :column 13, :line 3141, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3141, :column 22, :line 3141, :file "cljs/core.cljs"} root]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3141, :column 5, :line 3141, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3141, :column 13, :line 3141, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3141, :column 22, :line 3141, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3134, :column 7, :line 3134, :file "cljs/core.cljs"} tree-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 1675, :column 31, :line 1675, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1675, :column 32, :line 1675, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1675, :column 34, :line 1675, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1675, :column 7, :line 1675, :file "cljs/core.cljs"} unchecked-remainder-int ^{:arglists (^{:end-column 36, :end-line 1675, :column 31, :line 1675, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1675, :column 32, :line 1675, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1675, :column 34, :line 1675, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1675, :column 7, :line 1675, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1675, :column 32, :line 1675, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1675, :column 34, :line 1675, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 1675, :column 31, :line 1675, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1675, :column 32, :line 1675, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1675, :column 34, :line 1675, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1675, :column 7, :line 1675, :file "cljs/core.cljs"} unchecked-remainder-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 474, :column 3, :line 474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 474, :column 4, :line 474, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 470, :column 8, :line 470, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 470, :column 12, :line 470, :file "cljs/core.cljs"} seq ^{:arglists (^{:end-column 9, :end-line 474, :column 3, :line 474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 474, :column 4, :line 474, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 470, :column 8, :line 470, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 470, :column 12, :line 470, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 474, :column 4, :line 474, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 474, :column 3, :line 474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 474, :column 4, :line 474, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 470, :column 8, :line 470, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 470, :column 12, :line 470, :file "cljs/core.cljs"} seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 189, :column 10, :line 189, :file "cljs/core.cljs"} reduce ^{:arglists (^{:end-column 12, :end-line 1455, :column 4, :line 1455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1455, :column 5, :line 1455, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1455, :column 7, :line 1455, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1471, :column 5, :line 1471, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1471, :column 7, :line 1471, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1471, :column 11, :line 1471, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1445, :column 7, :line 1445, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1455, :column 5, :line 1455, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1455, :column 7, :line 1455, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1471, :column 5, :line 1471, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1471, :column 7, :line 1471, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1471, :column 11, :line 1471, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1455, :column 4, :line 1455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1455, :column 5, :line 1455, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1455, :column 7, :line 1455, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1471, :column 5, :line 1471, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1471, :column 7, :line 1471, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1471, :column 11, :line 1471, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1445, :column 7, :line 1445, :file "cljs/core.cljs"} reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1306, :column 3, :line 1306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1306, :column 4, :line 1306, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1306, :column 9, :line 1306, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1300, :column 8, :line 1300, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1300, :column 16, :line 1300, :file "cljs/core.cljs"} contains? ^{:arglists (^{:end-column 11, :end-line 1306, :column 3, :line 1306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1306, :column 4, :line 1306, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1306, :column 9, :line 1306, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1300, :column 8, :line 1300, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1300, :column 16, :line 1300, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 1306, :column 4, :line 1306, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1306, :column 9, :line 1306, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1306, :column 3, :line 1306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1306, :column 4, :line 1306, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1306, :column 9, :line 1306, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1300, :column 8, :line 1300, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1300, :column 16, :line 1300, :file "cljs/core.cljs"} contains?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 2698, :column 3, :line 2698, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2698, :column 4, :line 2698, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2698, :column 9, :line 2698, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 2695, :column 8, :line 2695, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 2695, :column 16, :line 2695, :file "cljs/core.cljs"} every? ^{:arglists (^{:end-column 14, :end-line 2698, :column 3, :line 2698, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2698, :column 4, :line 2698, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2698, :column 9, :line 2698, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 2695, :column 8, :line 2695, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 2695, :column 16, :line 2695, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2698, :column 4, :line 2698, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2698, :column 9, :line 2698, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 2698, :column 3, :line 2698, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2698, :column 4, :line 2698, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2698, :column 9, :line 2698, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 2695, :column 8, :line 2695, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 2695, :column 16, :line 2695, :file "cljs/core.cljs"} every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2859, :column 4, :line 2859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2859, :column 5, :line 2859, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 20, :end-line 2855, :column 7, :line 2855, :file "cljs/core.cljs"} keep-indexed ^{:arglists (^{:end-column 12, :end-line 2859, :column 4, :line 2859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2859, :column 5, :line 2859, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 20, :end-line 2855, :column 7, :line 2855, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 2859, :column 5, :line 2859, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2859, :column 4, :line 2859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2859, :column 5, :line 2859, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 20, :end-line 2855, :column 7, :line 2855, :file "cljs/core.cljs"} keep-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash])} ->PersistentQueueSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentQueueSeq [^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash])} ->PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1873, :column 5, :line 1873, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1873, :column 7, :line 1873, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 1874, :column 4, :line 1874, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1874, :column 5, :line 1874, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 1874, :column 13, :line 1874, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 1870, :column 7, :line 1870, :file "cljs/core.cljs"} subs ^{:arglists (^{:end-column 13, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1873, :column 5, :line 1873, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1873, :column 7, :line 1873, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 1874, :column 4, :line 1874, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1874, :column 5, :line 1874, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 1874, :column 13, :line 1874, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 1870, :column 7, :line 1870, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1873, :column 5, :line 1873, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1873, :column 7, :line 1873, :file "cljs/core.cljs"} start] [^{:end-column 7, :end-line 1874, :column 5, :line 1874, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 1874, :column 13, :line 1874, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1873, :column 5, :line 1873, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1873, :column 7, :line 1873, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 1874, :column 4, :line 1874, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1874, :column 5, :line 1874, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 1874, :column 13, :line 1874, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 1870, :column 7, :line 1870, :file "cljs/core.cljs"} subs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6455, :column 3, :line 6455, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6455, :column 4, :line 6455, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 6453, :column 7, :line 6453, :file "cljs/core.cljs"} set ^{:arglists (^{:end-column 9, :end-line 6455, :column 3, :line 6455, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6455, :column 4, :line 6455, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 6453, :column 7, :line 6453, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 6455, :column 4, :line 6455, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6455, :column 3, :line 6455, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6455, :column 4, :line 6455, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 6453, :column 7, :line 6453, :file "cljs/core.cljs"} set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1368, :column 5, :line 1368, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1368, :column 8, :line 1368, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1375, :column 5, :line 1375, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1375, :column 8, :line 1375, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1375, :column 11, :line 1375, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1375, :column 15, :line 1375, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1366, :column 17, :line 1366, :file "cljs/core.cljs"} compare-indexed ^{:arglists (^{:end-column 11, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1368, :column 5, :line 1368, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1368, :column 8, :line 1368, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1375, :column 5, :line 1375, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1375, :column 8, :line 1375, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1375, :column 11, :line 1375, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1375, :column 15, :line 1375, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1366, :column 17, :line 1366, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1368, :column 5, :line 1368, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1368, :column 8, :line 1368, :file "cljs/core.cljs"} ys] ^^{:end-column 15, :end-line 1345, :column 8, :line 1345, :file "cljs/core.cljs"} number [^{:end-column 8, :end-line 1375, :column 5, :line 1375, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1375, :column 8, :line 1375, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1375, :column 11, :line 1375, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1375, :column 15, :line 1375, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1368, :column 5, :line 1368, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1368, :column 8, :line 1368, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1375, :column 5, :line 1375, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1375, :column 8, :line 1375, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1375, :column 11, :line 1375, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1375, :column 15, :line 1375, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1366, :column 17, :line 1366, :file "cljs/core.cljs"} compare-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3020, :column 3, :line 3020, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3020, :column 4, :line 3020, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3020, :column 6, :line 3020, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3017, :column 7, :line 3017, :file "cljs/core.cljs"} take-last ^{:arglists (^{:end-column 11, :end-line 3020, :column 3, :line 3020, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3020, :column 4, :line 3020, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3020, :column 6, :line 3020, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3017, :column 7, :line 3017, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 6, :end-line 3020, :column 4, :line 3020, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3020, :column 6, :line 3020, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3020, :column 3, :line 3020, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3020, :column 4, :line 3020, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3020, :column 6, :line 3020, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3017, :column 7, :line 3017, :file "cljs/core.cljs"} take-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 462, :column 29, :line 462, :file "cljs/core.cljs"} IndexedSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 672, :column 10, :line 672, :file "cljs/core.cljs"} IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 28, :end-line 672, :column 21, :line 672, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i], :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 8, :end-line 1789, :column 3, :line 1789, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1789, :column 6, :line 1789, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1787, :column 7, :line 1787, :file "cljs/core.cljs"} bit-set ^{:arglists (^{:end-column 8, :end-line 1789, :column 3, :line 1789, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1789, :column 6, :line 1789, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1787, :column 7, :line 1787, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1789, :column 6, :line 1789, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1789, :column 3, :line 1789, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1789, :column 6, :line 1789, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1787, :column 7, :line 1787, :file "cljs/core.cljs"} bit-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 32, :end-line 1139, :column 1, :line 1139, :file "cljs/core.cljs"} string-hash-cache-count ^{:end-column 32, :end-line 1139, :column 1, :line 1139, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 32, :end-line 1139, :column 1, :line 1139, :file "cljs/core.cljs"} string-hash-cache-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 5801, :column 21, :line 5801, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5801, :column 22, :line 5801, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 5801, :column 27, :line 5801, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 5801, :column 32, :line 5801, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 5801, :column 34, :line 5801, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 5801, :column 36, :line 5801, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 5801, :column 8, :line 5801, :file "cljs/core.cljs"} tree-map-add ^{:arglists (^{:end-column 42, :end-line 5801, :column 21, :line 5801, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5801, :column 22, :line 5801, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 5801, :column 27, :line 5801, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 5801, :column 32, :line 5801, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 5801, :column 34, :line 5801, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 5801, :column 36, :line 5801, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 5801, :column 8, :line 5801, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 5801, :column 22, :line 5801, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 5801, :column 27, :line 5801, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 5801, :column 32, :line 5801, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 5801, :column 34, :line 5801, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 5801, :column 36, :line 5801, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 5801, :column 21, :line 5801, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5801, :column 22, :line 5801, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 5801, :column 27, :line 5801, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 5801, :column 32, :line 5801, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 5801, :column 34, :line 5801, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 5801, :column 36, :line 5801, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 5801, :column 8, :line 5801, :file "cljs/core.cljs"} tree-map-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 289, :column 20, :line 289, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 289, :column 21, :line 289, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 289, :column 23, :line 289, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 289, :column 5, :line 289, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 289, :column 9, :line 289, :file "cljs/core.cljs"} -with-meta ^{:arglists (^{:end-column 28, :end-line 289, :column 20, :line 289, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 289, :column 21, :line 289, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 289, :column 23, :line 289, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 289, :column 5, :line 289, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 289, :column 9, :line 289, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 289, :column 21, :line 289, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 289, :column 23, :line 289, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 289, :column 20, :line 289, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 289, :column 21, :line 289, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 289, :column 23, :line 289, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 289, :column 5, :line 289, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 289, :column 9, :line 289, :file "cljs/core.cljs"} -with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 57, :end-line 7634, :column 3, :line 7634, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 7634, :column 17, :line 7634, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 7634, :column 30, :line 7634, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 7634, :column 47, :line 7634, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 7633, :column 8, :line 7633, :file "cljs/core.cljs"} reset-cache ^{:arglists (^{:end-column 57, :end-line 7634, :column 3, :line 7634, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 7634, :column 17, :line 7634, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 7634, :column 30, :line 7634, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 7634, :column 47, :line 7634, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 7633, :column 8, :line 7633, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 7634, :column 17, :line 7634, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 7634, :column 30, :line 7634, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 7634, :column 47, :line 7634, :file "cljs/core.cljs"} hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 57, :end-line 7634, :column 3, :line 7634, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 7634, :column 17, :line 7634, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 7634, :column 30, :line 7634, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 7634, :column 47, :line 7634, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 7633, :column 8, :line 7633, :file "cljs/core.cljs"} reset-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 6514, :column 15, :line 6514, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6514, :column 16, :line 6514, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 6514, :column 7, :line 6514, :file "cljs/core.cljs"} butlast ^{:arglists (^{:end-column 18, :end-line 6514, :column 15, :line 6514, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6514, :column 16, :line 6514, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 6514, :column 7, :line 6514, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 18, :end-line 6514, :column 16, :line 6514, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 6514, :column 15, :line 6514, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6514, :column 16, :line 6514, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 6514, :column 7, :line 6514, :file "cljs/core.cljs"} butlast, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 3287, :column 17, :line 3287, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3287, :column 18, :line 3287, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} tail-off ^{:arglists (^{:end-column 21, :end-line 3287, :column 17, :line 3287, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3287, :column 18, :line 3287, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 3287, :column 18, :line 3287, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 3287, :column 17, :line 3287, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3287, :column 18, :line 3287, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} tail-off, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 6696, :column 3, :line 6696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6696, :column 4, :line 6696, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 6696, :column 6, :line 6696, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.", :end-column 16, :end-line 6694, :column 7, :line 6694, :file "cljs/core.cljs"} take-nth ^{:arglists (^{:end-column 11, :end-line 6696, :column 3, :line 6696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6696, :column 4, :line 6696, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 6696, :column 6, :line 6696, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.", :end-column 16, :end-line 6694, :column 7, :line 6694, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 6696, :column 4, :line 6696, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 6696, :column 6, :line 6696, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6696, :column 3, :line 6696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6696, :column 4, :line 6696, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 6696, :column 6, :line 6696, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.", :end-column 16, :end-line 6694, :column 7, :line 6694, :file "cljs/core.cljs"} take-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 496, :column 3, :line 496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 496, :column 4, :line 496, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} first ^{:arglists (^{:end-column 9, :end-line 496, :column 3, :line 496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 496, :column 4, :line 496, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 496, :column 4, :line 496, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 496, :column 3, :line 496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 496, :column 4, :line 496, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 109, :column 3, :line 109, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 109, :column 4, :line 109, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 109, :column 6, :line 109, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} native-satisfies? ^{:arglists (^{:end-column 8, :end-line 109, :column 3, :line 109, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 109, :column 4, :line 109, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 109, :column 6, :line 109, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 109, :column 4, :line 109, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 109, :column 6, :line 109, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 109, :column 3, :line 109, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 109, :column 4, :line 109, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 109, :column 6, :line 109, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} native-satisfies?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1276, :column 3, :line 1276, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1276, :column 4, :line 1276, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1274, :column 8, :line 1274, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1274, :column 16, :line 1274, :file "cljs/core.cljs"} seq? ^{:arglists (^{:end-column 6, :end-line 1276, :column 3, :line 1276, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1276, :column 4, :line 1276, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1274, :column 8, :line 1274, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1274, :column 16, :line 1274, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1276, :column 4, :line 1276, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1276, :column 3, :line 1276, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1276, :column 4, :line 1276, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1274, :column 8, :line 1274, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1274, :column 16, :line 1274, :file "cljs/core.cljs"} seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 38, :end-line 7523, :column 1, :line 7523, :file "cljs/core.cljs"} -global-hierarchy ^{:private true, :end-column 38, :end-line 7523, :column 1, :line 7523, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:private true, :end-column 38, :end-line 7523, :column 1, :line 7523, :file "cljs/core.cljs"} -global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 7903, :column 10, :line 7903, :file "cljs/core.cljs"} UUID {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 7903, :column 10, :line 7903, :file "cljs/core.cljs"} UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 21, :end-line 7903, :column 15, :line 7903, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 45, :end-line 320, :column 26, :line 320, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 320, :column 27, :line 320, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 320, :column 32, :line 320, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 320, :column 34, :line 320, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} -sorted-seq-from ^{:arglists (^{:end-column 45, :end-line 320, :column 26, :line 320, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 320, :column 27, :line 320, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 320, :column 32, :line 320, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 320, :column 34, :line 320, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 320, :column 27, :line 320, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 320, :column 32, :line 320, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 320, :column 34, :line 320, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 320, :column 26, :line 320, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 320, :column 27, :line 320, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 320, :column 32, :line 320, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 320, :column 34, :line 320, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} -sorted-seq-from, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7046, :column 3, :line 7046, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7046, :column 4, :line 7046, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7046, :column 6, :line 7046, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} println-str ^{:arglists (^{:end-column 11, :end-line 7046, :column 3, :line 7046, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7046, :column 4, :line 7046, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7046, :column 6, :line 7046, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7046, :column 6, :line 7046, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7046, :column 3, :line 7046, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7046, :column 4, :line 7046, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7046, :column 6, :line 7046, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} println-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 884, :column 4, :line 884, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 884, :column 5, :line 884, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 884, :column 10, :line 884, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 893, :column 4, :line 893, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 893, :column 5, :line 893, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 893, :column 10, :line 893, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 893, :column 12, :line 893, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 883, :column 8, :line 883, :file "cljs/core.cljs"} linear-traversal-nth ^{:arglists (^{:end-column 12, :end-line 884, :column 4, :line 884, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 884, :column 5, :line 884, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 884, :column 10, :line 884, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 893, :column 4, :line 893, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 893, :column 5, :line 893, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 893, :column 10, :line 893, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 893, :column 12, :line 893, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 883, :column 8, :line 883, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 884, :column 5, :line 884, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 884, :column 10, :line 884, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 893, :column 5, :line 893, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 893, :column 10, :line 893, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 893, :column 12, :line 893, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 884, :column 4, :line 884, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 884, :column 5, :line 884, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 884, :column 10, :line 884, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 893, :column 4, :line 893, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 893, :column 5, :line 893, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 893, :column 10, :line 893, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 893, :column 12, :line 893, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 883, :column 8, :line 883, :file "cljs/core.cljs"} linear-traversal-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3067, :column 3, :line 3067, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3067, :column 4, :line 3067, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3067, :column 6, :line 3067, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3064, :column 7, :line 3064, :file "cljs/core.cljs"} iterate ^{:arglists (^{:end-column 8, :end-line 3067, :column 3, :line 3067, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3067, :column 4, :line 3067, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3067, :column 6, :line 3067, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3064, :column 7, :line 3064, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 3067, :column 4, :line 3067, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3067, :column 6, :line 3067, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3067, :column 3, :line 3067, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3067, :column 4, :line 3067, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3067, :column 6, :line 3067, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3064, :column 7, :line 3064, :file "cljs/core.cljs"} iterate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 233, :column 12, :line 233, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 233, :column 4, :line 233, :file "cljs/core.cljs"} -empty ^{:arglists (^{:end-column 17, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 233, :column 12, :line 233, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 233, :column 4, :line 233, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 233, :column 12, :line 233, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 233, :column 12, :line 233, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 233, :column 4, :line 233, :file "cljs/core.cljs"} -empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7002, :column 15, :line 7002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7002, :column 16, :line 7002, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7002, :column 7, :line 7002, :file "cljs/core.cljs"} newline ^{:arglists (^{:end-column 21, :end-line 7002, :column 15, :line 7002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7002, :column 16, :line 7002, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7002, :column 7, :line 7002, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 21, :end-line 7002, :column 16, :line 7002, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7002, :column 15, :line 7002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7002, :column 16, :line 7002, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7002, :column 7, :line 7002, :file "cljs/core.cljs"} newline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 253, :column 14, :line 253, :file "cljs/core.cljs"} ILookup ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/TransientHashMap cljs.core/PersistentVector cljs.core/TransientArrayMap cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 253, :column 14, :line 253, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 253, :column 14, :line 253, :file "cljs/core.cljs"} ILookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 372, :column 18, :line 372, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 372, :column 19, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} -chunked-rest ^{:arglists (^{:end-column 24, :end-line 372, :column 18, :line 372, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 372, :column 19, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 372, :column 19, :line 372, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 372, :column 18, :line 372, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 372, :column 19, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} -chunked-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 6865, :column 17, :line 6865, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6865, :column 18, :line 6865, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 6865, :column 25, :line 6865, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 6865, :column 27, :line 6865, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} write-all ^{:arglists (^{:end-column 30, :end-line 6865, :column 17, :line 6865, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6865, :column 18, :line 6865, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 6865, :column 25, :line 6865, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 6865, :column 27, :line 6865, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 6865, :column 18, :line 6865, :file "cljs/core.cljs"} writer & ^{:end-column 30, :end-line 6865, :column 27, :line 6865, :file "cljs/core.cljs"} ss]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 6865, :column 17, :line 6865, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6865, :column 18, :line 6865, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 6865, :column 25, :line 6865, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 6865, :column 27, :line 6865, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} write-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1038, :column 20, :line 1038, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1038, :column 21, :line 1038, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1038, :column 8, :line 1038, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1038, :column 16, :line 1038, :file "cljs/core.cljs"} fn? ^{:arglists (^{:end-column 23, :end-line 1038, :column 20, :line 1038, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1038, :column 21, :line 1038, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1038, :column 8, :line 1038, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1038, :column 16, :line 1038, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1039, :column 8, :line 1039, :file "cljs/core.cljs"} boolean [^{:end-column 23, :end-line 1038, :column 21, :line 1038, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1038, :column 20, :line 1038, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1038, :column 21, :line 1038, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1038, :column 8, :line 1038, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1038, :column 16, :line 1038, :file "cljs/core.cljs"} fn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 51, :end-line 7689, :column 19, :line 7689, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7689, :column 20, :line 7689, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7689, :column 23, :line 7689, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 7689, :column 36, :line 7689, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7689, :column 4, :line 7689, :file "cljs/core.cljs"} -prefer-method ^{:arglists (^{:end-column 51, :end-line 7689, :column 19, :line 7689, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7689, :column 20, :line 7689, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7689, :column 23, :line 7689, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 7689, :column 36, :line 7689, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7689, :column 4, :line 7689, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 7689, :column 20, :line 7689, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7689, :column 23, :line 7689, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 7689, :column 36, :line 7689, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 51, :end-line 7689, :column 19, :line 7689, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7689, :column 20, :line 7689, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7689, :column 23, :line 7689, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 7689, :column 36, :line 7689, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7689, :column 4, :line 7689, :file "cljs/core.cljs"} -prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 259, :column 16, :line 259, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 259, :column 17, :line 259, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 259, :column 22, :line 259, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 259, :column 24, :line 259, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 259, :column 5, :line 259, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 259, :column 9, :line 259, :file "cljs/core.cljs"} -assoc ^{:arglists (^{:end-column 26, :end-line 259, :column 16, :line 259, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 259, :column 17, :line 259, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 259, :column 22, :line 259, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 259, :column 24, :line 259, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 259, :column 5, :line 259, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 259, :column 9, :line 259, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 259, :column 17, :line 259, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 259, :column 22, :line 259, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 259, :column 24, :line 259, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 259, :column 16, :line 259, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 259, :column 17, :line 259, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 259, :column 22, :line 259, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 259, :column 24, :line 259, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 259, :column 5, :line 259, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 259, :column 9, :line 259, :file "cljs/core.cljs"} -assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 6796, :column 4, :line 6796, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6796, :column 5, :line 6796, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 6789, :column 7, :line 6789, :file "cljs/core.cljs"} doall ^{:arglists (^{:end-column 10, :end-line 6796, :column 4, :line 6796, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6796, :column 5, :line 6796, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 6789, :column 7, :line 6789, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 6796, :column 5, :line 6796, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 6796, :column 4, :line 6796, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6796, :column 5, :line 6796, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 6789, :column 7, :line 6789, :file "cljs/core.cljs"} doall, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 2167, :column 35, :line 2167, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2167, :column 36, :line 2167, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2167, :column 38, :line 2167, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2167, :column 8, :line 2167, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2167, :column 16, :line 2167, :file "cljs/core.cljs"} keyword-identical? ^{:arglists (^{:end-column 40, :end-line 2167, :column 35, :line 2167, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2167, :column 36, :line 2167, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2167, :column 38, :line 2167, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2167, :column 8, :line 2167, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2167, :column 16, :line 2167, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 38, :end-line 2167, :column 36, :line 2167, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2167, :column 38, :line 2167, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 2167, :column 35, :line 2167, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2167, :column 36, :line 2167, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2167, :column 38, :line 2167, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2167, :column 8, :line 2167, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2167, :column 16, :line 2167, :file "cljs/core.cljs"} keyword-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 3281, :column 16, :line 3281, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3281, :column 17, :line 3281, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3281, :column 22, :line 3281, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3281, :column 26, :line 3281, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3281, :column 8, :line 3281, :file "cljs/core.cljs"} pv-aset ^{:arglists (^{:end-column 30, :end-line 3281, :column 16, :line 3281, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3281, :column 17, :line 3281, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3281, :column 22, :line 3281, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3281, :column 26, :line 3281, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3281, :column 8, :line 3281, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3281, :column 17, :line 3281, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3281, :column 22, :line 3281, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3281, :column 26, :line 3281, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 3281, :column 16, :line 3281, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3281, :column 17, :line 3281, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3281, :column 22, :line 3281, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3281, :column 26, :line 3281, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3281, :column 8, :line 3281, :file "cljs/core.cljs"} pv-aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7899, :column 3, :line 7899, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7899, :column 4, :line 7899, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 7897, :column 7, :line 7897, :file "cljs/core.cljs"} prefers ^{:arglists (^{:end-column 12, :end-line 7899, :column 3, :line 7899, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7899, :column 4, :line 7899, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 7897, :column 7, :line 7897, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7899, :column 4, :line 7899, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7899, :column 3, :line 7899, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7899, :column 4, :line 7899, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 7897, :column 7, :line 7897, :file "cljs/core.cljs"} prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 7426, :column 13, :line 7426, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7426, :column 14, :line 7426, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 7426, :column 16, :line 7426, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 7426, :column 4, :line 7426, :file "cljs/core.cljs"} -js->clj ^{:arglists (^{:end-column 24, :end-line 7426, :column 13, :line 7426, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7426, :column 14, :line 7426, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 7426, :column 16, :line 7426, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 7426, :column 4, :line 7426, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7426, :column 14, :line 7426, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 7426, :column 16, :line 7426, :file "cljs/core.cljs"} options]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 7426, :column 13, :line 7426, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7426, :column 14, :line 7426, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 7426, :column 16, :line 7426, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 7426, :column 4, :line 7426, :file "cljs/core.cljs"} -js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} LazySeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 2197, :column 18, :line 2197, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 43, :end-line 3787, :column 37, :line 3787, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 3787, :column 38, :line 3787, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 3787, :column 41, :line 3787, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 3787, :column 8, :line 3787, :file "cljs/core.cljs"} unchecked-editable-array-for ^{:arglists (^{:end-column 43, :end-line 3787, :column 37, :line 3787, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 3787, :column 38, :line 3787, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 3787, :column 41, :line 3787, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 3787, :column 8, :line 3787, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 3787, :column 38, :line 3787, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 3787, :column 41, :line 3787, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 3787, :column 37, :line 3787, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 3787, :column 38, :line 3787, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 3787, :column 41, :line 3787, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 3787, :column 8, :line 3787, :file "cljs/core.cljs"} unchecked-editable-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3273, :column 10, :line 3273, :file "cljs/core.cljs"} VectorNode {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3273, :column 10, :line 3273, :file "cljs/core.cljs"} VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 3273, :column 21, :line 3273, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr], :protocols #{}}, ^{:arglists (^{:end-column 10, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1027, :column 5, :line 1027, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1028, :column 4, :line 1028, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1028, :column 5, :line 1028, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1028, :column 10, :line 1028, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1031, :column 5, :line 1031, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1031, :column 10, :line 1031, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1031, :column 12, :line 1031, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1031, :column 14, :line 1031, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1024, :column 7, :line 1024, :file "cljs/core.cljs"} dissoc ^{:arglists (^{:end-column 10, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1027, :column 5, :line 1027, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1028, :column 4, :line 1028, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1028, :column 5, :line 1028, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1028, :column 10, :line 1028, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1031, :column 5, :line 1031, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1031, :column 10, :line 1031, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1031, :column 12, :line 1031, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1031, :column 14, :line 1031, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1024, :column 7, :line 1024, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1027, :column 5, :line 1027, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1028, :column 5, :line 1028, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1028, :column 10, :line 1028, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1031, :column 5, :line 1031, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1031, :column 10, :line 1031, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1031, :column 14, :line 1031, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1027, :column 5, :line 1027, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1028, :column 4, :line 1028, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1028, :column 5, :line 1028, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1028, :column 10, :line 1028, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1031, :column 5, :line 1031, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1031, :column 10, :line 1031, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1031, :column 12, :line 1031, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1031, :column 14, :line 1031, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1024, :column 7, :line 1024, :file "cljs/core.cljs"} dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 73, :end-line 4555, :column 68, :line 4555, :file "cljs/core.cljs"} atom ^{:arglists (^{:end-column 7, :end-line 7223, :column 4, :line 7223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7223, :column 5, :line 7223, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 7224, :column 4, :line 7224, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7224, :column 5, :line 7224, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7224, :column 7, :line 7224, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 7224, :column 9, :line 7224, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 7224, :column 16, :line 7224, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7224, :column 17, :line 7224, :file "cljs/core.cljs"} meta ^{:end-column 32, :end-line 7224, :column 22, :line 7224, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 12, :end-line 7209, :column 7, :line 7209, :file "cljs/core.cljs"} {:arglists (^cljs.core/Atom [^{:end-column 7, :end-line 7223, :column 5, :line 7223, :file "cljs/core.cljs"} x] ^cljs.core/Atom [^{:end-column 7, :end-line 7224, :column 5, :line 7224, :file "cljs/core.cljs"} x & p__9341]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7223, :column 4, :line 7223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7223, :column 5, :line 7223, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 7224, :column 4, :line 7224, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7224, :column 5, :line 7224, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7224, :column 7, :line 7224, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 7224, :column 9, :line 7224, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 7224, :column 16, :line 7224, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7224, :column 17, :line 7224, :file "cljs/core.cljs"} meta ^{:end-column 32, :end-line 7224, :column 22, :line 7224, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 12, :end-line 7209, :column 7, :line 7209, :file "cljs/core.cljs"} atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1803, :column 3, :line 1803, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1803, :column 4, :line 1803, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1803, :column 6, :line 1803, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} bit-shift-right ^{:arglists (^{:end-column 8, :end-line 1803, :column 3, :line 1803, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1803, :column 4, :line 1803, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1803, :column 6, :line 1803, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1803, :column 4, :line 1803, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1803, :column 6, :line 1803, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1803, :column 3, :line 1803, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1803, :column 4, :line 1803, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1803, :column 6, :line 1803, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version* ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 247, :column 11, :line 247, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 247, :column 12, :line 247, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -first ^{:arglists (^{:end-column 17, :end-line 247, :column 11, :line 247, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 247, :column 12, :line 247, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 247, :column 12, :line 247, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 247, :column 11, :line 247, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 247, :column 12, :line 247, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1111, :column 3, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1108, :column 7, :line 1108, :file "cljs/core.cljs"} peek ^{:arglists (^{:end-column 9, :end-line 1111, :column 3, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1108, :column 7, :line 1108, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1111, :column 3, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1108, :column 7, :line 1108, :file "cljs/core.cljs"} peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 294, :column 14, :line 294, :file "cljs/core.cljs"} IKVReduce ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/PersistentTreeMap}, :protocol-symbol true, :end-column 24, :end-line 294, :column 14, :line 294, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 294, :column 14, :line 294, :file "cljs/core.cljs"} IKVReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 172, :column 4, :line 172, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 172, :column 5, :line 172, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 172, :column 11, :line 172, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 174, :column 5, :line 174, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 174, :column 11, :line 174, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 174, :column 13, :line 174, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 174, :column 15, :line 174, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 170, :column 7, :line 170, :file "cljs/core.cljs"} aget ^{:arglists (^{:end-column 13, :end-line 172, :column 4, :line 172, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 172, :column 5, :line 172, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 172, :column 11, :line 172, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 174, :column 5, :line 174, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 174, :column 11, :line 174, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 174, :column 13, :line 174, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 174, :column 15, :line 174, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 170, :column 7, :line 170, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 172, :column 5, :line 172, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 172, :column 11, :line 172, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 174, :column 5, :line 174, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 174, :column 11, :line 174, :file "cljs/core.cljs"} i & ^{:end-column 20, :end-line 174, :column 15, :line 174, :file "cljs/core.cljs"} idxs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 172, :column 4, :line 172, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 172, :column 5, :line 172, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 172, :column 11, :line 172, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 174, :column 5, :line 174, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 174, :column 11, :line 174, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 174, :column 13, :line 174, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 174, :column 15, :line 174, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 170, :column 7, :line 170, :file "cljs/core.cljs"} aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5403, :column 10, :line 5403, :file "cljs/core.cljs"} PersistentTreeMapSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5403, :column 10, :line 5403, :file "cljs/core.cljs"} PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 84, :end-line 5403, :column 31, :line 5403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 21, :end-line 325, :column 11, :line 325, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 325, :column 12, :line 325, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 325, :column 19, :line 325, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} -write ^{:arglists (^{:end-column 21, :end-line 325, :column 11, :line 325, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 325, :column 12, :line 325, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 325, :column 19, :line 325, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 325, :column 12, :line 325, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 325, :column 19, :line 325, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 325, :column 11, :line 325, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 325, :column 12, :line 325, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 325, :column 19, :line 325, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} -write, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 6575, :column 3, :line 6575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6575, :column 4, :line 6575, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 6575, :column 7, :line 6575, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 6575, :column 12, :line 6575, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 6574, :column 7, :line 6574, :file "cljs/core.cljs"} mk-bound-fn ^{:arglists (^{:end-column 16, :end-line 6575, :column 3, :line 6575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6575, :column 4, :line 6575, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 6575, :column 7, :line 6575, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 6575, :column 12, :line 6575, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 6574, :column 7, :line 6574, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 6575, :column 4, :line 6575, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 6575, :column 7, :line 6575, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 6575, :column 12, :line 6575, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 6575, :column 3, :line 6575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6575, :column 4, :line 6575, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 6575, :column 7, :line 6575, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 6575, :column 12, :line 6575, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 6574, :column 7, :line 6574, :file "cljs/core.cljs"} mk-bound-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 825, :column 7, :line 825, :file "cljs/core.cljs"} last ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 825, :column 7, :line 825, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 825, :column 7, :line 825, :file "cljs/core.cljs"} last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7022, :column 3, :line 7022, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7022, :column 4, :line 7022, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7022, :column 6, :line 7022, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7017, :column 7, :line 7017, :file "cljs/core.cljs"} pr ^{:arglists (^{:end-column 11, :end-line 7022, :column 3, :line 7022, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7022, :column 4, :line 7022, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7022, :column 6, :line 7022, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7017, :column 7, :line 7017, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7022, :column 6, :line 7022, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7022, :column 3, :line 7022, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7022, :column 4, :line 7022, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7022, :column 6, :line 7022, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7017, :column 7, :line 7017, :file "cljs/core.cljs"} pr, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 58, :end-line 5396, :column 26, :line 5396, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 5396, :column 27, :line 5396, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 5396, :column 32, :line 5396, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 5396, :column 39, :line 5396, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 5396, :column 47, :line 5396, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} tree-map-seq-push ^{:arglists (^{:end-column 58, :end-line 5396, :column 26, :line 5396, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 5396, :column 27, :line 5396, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 5396, :column 32, :line 5396, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 5396, :column 39, :line 5396, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 5396, :column 47, :line 5396, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 5396, :column 27, :line 5396, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 5396, :column 32, :line 5396, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 5396, :column 39, :line 5396, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 5396, :column 47, :line 5396, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 58, :end-line 5396, :column 26, :line 5396, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 5396, :column 27, :line 5396, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 5396, :column 32, :line 5396, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 5396, :column 39, :line 5396, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 5396, :column 47, :line 5396, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} tree-map-seq-push, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2177, :column 3, :line 2177, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2177, :column 4, :line 2177, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2175, :column 7, :line 2175, :file "cljs/core.cljs"} namespace ^{:arglists (^{:end-column 6, :end-line 2177, :column 3, :line 2177, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2177, :column 4, :line 2177, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2175, :column 7, :line 2175, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 379, :column 5, :line 379, :file "cljs/core.cljs"} string [^{:end-column 6, :end-line 2177, :column 4, :line 2177, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2177, :column 3, :line 2177, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2177, :column 4, :line 2177, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2175, :column 7, :line 2175, :file "cljs/core.cljs"} namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6057, :column 3, :line 6057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6057, :column 4, :line 6057, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6057, :column 6, :line 6057, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6054, :column 7, :line 6054, :file "cljs/core.cljs"} obj-map ^{:arglists (^{:end-column 14, :end-line 6057, :column 3, :line 6057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6057, :column 4, :line 6057, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6057, :column 6, :line 6057, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6054, :column 7, :line 6054, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 14, :end-line 6057, :column 6, :line 6057, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6057, :column 3, :line 6057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6057, :column 4, :line 6057, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6057, :column 6, :line 6057, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6054, :column 7, :line 6054, :file "cljs/core.cljs"} obj-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 584, :column 10, :line 584, :file "cljs/core.cljs"} Reduced {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 584, :column 10, :line 584, :file "cljs/core.cljs"} Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 584, :column 18, :line 584, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val], :protocols #{cljs.core/IDeref}}, ^{:arglists (^{:end-column 23, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 236, :column 16, :line 236, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 236, :column 9, :line 236, :file "cljs/core.cljs"} -conj ^{:arglists (^{:end-column 23, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 236, :column 16, :line 236, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 236, :column 9, :line 236, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 236, :column 16, :line 236, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 236, :column 16, :line 236, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 236, :column 9, :line 236, :file "cljs/core.cljs"} -conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5049, :column 10, :line 5049, :file "cljs/core.cljs"} NodeSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5049, :column 10, :line 5049, :file "cljs/core.cljs"} NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 5049, :column 18, :line 5049, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:declared true, :end-column 42, :end-line 400, :column 40, :line 400, :file "cljs/core.cljs"} = ^{:arglists (^{:end-column 7, :end-line 531, :column 4, :line 531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 531, :column 5, :line 531, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 532, :column 4, :line 532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 532, :column 5, :line 532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 537, :column 4, :line 537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 537, :column 5, :line 537, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 537, :column 7, :line 537, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 537, :column 9, :line 537, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 537, :column 11, :line 537, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 526, :column 8, :line 526, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 526, :column 16, :line 526, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 531, :column 5, :line 531, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 532, :column 5, :line 532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 537, :column 5, :line 537, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 537, :column 7, :line 537, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 537, :column 11, :line 537, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 531, :column 4, :line 531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 531, :column 5, :line 531, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 532, :column 4, :line 532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 532, :column 5, :line 532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 537, :column 4, :line 537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 537, :column 5, :line 537, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 537, :column 7, :line 537, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 537, :column 9, :line 537, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 537, :column 11, :line 537, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 526, :column 8, :line 526, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 526, :column 16, :line 526, :file "cljs/core.cljs"} =, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 354, :column 14, :line 354, :file "cljs/core.cljs"} ITransientMap ^{:impls #{cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :protocol-symbol true, :end-column 28, :end-line 354, :column 14, :line 354, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 354, :column 14, :line 354, :file "cljs/core.cljs"} ITransientMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 3303, :column 18, :line 3303, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3303, :column 19, :line 3303, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3303, :column 22, :line 3303, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3303, :column 28, :line 3303, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3303, :column 35, :line 3303, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3303, :column 8, :line 3303, :file "cljs/core.cljs"} push-tail ^{:arglists (^{:end-column 44, :end-line 3303, :column 18, :line 3303, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3303, :column 19, :line 3303, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3303, :column 22, :line 3303, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3303, :column 28, :line 3303, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3303, :column 35, :line 3303, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3303, :column 8, :line 3303, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 22, :end-line 3303, :column 19, :line 3303, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3303, :column 22, :line 3303, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3303, :column 28, :line 3303, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3303, :column 35, :line 3303, :file "cljs/core.cljs"} tailnode]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 3303, :column 18, :line 3303, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3303, :column 19, :line 3303, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3303, :column 22, :line 3303, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3303, :column 28, :line 3303, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3303, :column 35, :line 3303, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3303, :column 8, :line 3303, :file "cljs/core.cljs"} push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2996, :column 3, :line 2996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2996, :column 4, :line 2996, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 2996, :column 6, :line 2996, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.", :end-column 12, :end-line 2993, :column 7, :line 2993, :file "cljs/core.cljs"} take ^{:arglists (^{:end-column 11, :end-line 2996, :column 3, :line 2996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2996, :column 4, :line 2996, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 2996, :column 6, :line 2996, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.", :end-column 12, :end-line 2993, :column 7, :line 2993, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 2996, :column 4, :line 2996, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 2996, :column 6, :line 2996, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2996, :column 3, :line 2996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2996, :column 4, :line 2996, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 2996, :column 6, :line 2996, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.", :end-column 12, :end-line 2993, :column 7, :line 2993, :file "cljs/core.cljs"} take, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1221, :column 3, :line 1221, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1219, :column 8, :line 1219, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1219, :column 16, :line 1219, :file "cljs/core.cljs"} vector? ^{:arglists (^{:end-column 6, :end-line 1221, :column 3, :line 1221, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1219, :column 8, :line 1219, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1219, :column 16, :line 1219, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1221, :column 3, :line 1221, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1219, :column 8, :line 1219, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1219, :column 16, :line 1219, :file "cljs/core.cljs"} vector?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 46, :end-line 4581, :column 34, :line 4581, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 4581, :column 35, :line 4581, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 4581, :column 42, :line 4581, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 4581, :column 8, :line 4581, :file "cljs/core.cljs"} bitmap-indexed-node-index ^{:arglists (^{:end-column 46, :end-line 4581, :column 34, :line 4581, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 4581, :column 35, :line 4581, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 4581, :column 42, :line 4581, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 4581, :column 8, :line 4581, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 42, :end-line 4581, :column 35, :line 4581, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 4581, :column 42, :line 4581, :file "cljs/core.cljs"} bit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 4581, :column 34, :line 4581, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 4581, :column 35, :line 4581, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 4581, :column 42, :line 4581, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 4581, :column 8, :line 4581, :file "cljs/core.cljs"} bitmap-indexed-node-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1286, :column 24, :line 1286, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1286, :column 25, :line 1286, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1286, :column 8, :line 1286, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1286, :column 16, :line 1286, :file "cljs/core.cljs"} boolean ^{:arglists (^{:end-column 27, :end-line 1286, :column 24, :line 1286, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1286, :column 25, :line 1286, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1286, :column 8, :line 1286, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1286, :column 16, :line 1286, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 27, :end-line 1286, :column 25, :line 1286, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1286, :column 24, :line 1286, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1286, :column 25, :line 1286, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1286, :column 8, :line 1286, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1286, :column 16, :line 1286, :file "cljs/core.cljs"} boolean, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} IChunk ^{:impls #{cljs.core/ArrayChunk}, :protocol-symbol true, :end-column 21, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} IChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1799, :column 3, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1799, :column 6, :line 1799, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1797, :column 7, :line 1797, :file "cljs/core.cljs"} bit-shift-left ^{:arglists (^{:end-column 8, :end-line 1799, :column 3, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1799, :column 6, :line 1799, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1797, :column 7, :line 1797, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1799, :column 6, :line 1799, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1799, :column 3, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1799, :column 6, :line 1799, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1797, :column 7, :line 1797, :file "cljs/core.cljs"} bit-shift-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1755, :column 3, :line 1755, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1755, :column 4, :line 1755, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} rand-int ^{:arglists (^{:end-column 6, :end-line 7499, :column 3, :line 7499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7499, :column 4, :line 7499, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 7497, :column 7, :line 7497, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7499, :column 4, :line 7499, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7499, :column 3, :line 7499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7499, :column 4, :line 7499, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 7497, :column 7, :line 7497, :file "cljs/core.cljs"} rand-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 155, :column 3, :line 155, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 155, :column 4, :line 155, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 153, :column 7, :line 153, :file "cljs/core.cljs"} aclone ^{:arglists (^{:end-column 8, :end-line 155, :column 3, :line 155, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 155, :column 4, :line 155, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 153, :column 7, :line 153, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 155, :column 4, :line 155, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 155, :column 3, :line 155, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 155, :column 4, :line 155, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 153, :column 7, :line 153, :file "cljs/core.cljs"} aclone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 5455, :column 18, :line 5455, :file "cljs/core.cljs"} BlackNode {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 5558, :column 10, :line 5558, :file "cljs/core.cljs"} BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 57, :end-line 5558, :column 20, :line 5558, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 16, :end-line 2379, :column 13, :line 2379, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2379, :column 14, :line 2379, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} chunk ^{:arglists (^{:end-column 16, :end-line 2379, :column 13, :line 2379, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2379, :column 14, :line 2379, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2379, :column 14, :line 2379, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 2379, :column 13, :line 2379, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2379, :column 14, :line 2379, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1584, :column 3, :line 1584, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1582, :column 7, :line 1582, :file "cljs/core.cljs"} dec ^{:arglists (^{:end-column 6, :end-line 1584, :column 3, :line 1584, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1582, :column 7, :line 1582, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1584, :column 3, :line 1584, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1582, :column 7, :line 1582, :file "cljs/core.cljs"} dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1876, :column 10, :line 1876, :file "cljs/core.cljs"} map ^{:arglists (^{:end-column 12, :end-line 2962, :column 4, :line 2962, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2962, :column 5, :line 2962, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2962, :column 7, :line 2962, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2979, :column 5, :line 2979, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2979, :column 7, :line 2979, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2979, :column 10, :line 2979, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2979, :column 13, :line 2979, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 2985, :column 4, :line 2985, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2985, :column 5, :line 2985, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2985, :column 7, :line 2985, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2985, :column 10, :line 2985, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2985, :column 13, :line 2985, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 2985, :column 16, :line 2985, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2985, :column 18, :line 2985, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 2962, :column 5, :line 2962, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2962, :column 7, :line 2962, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2979, :column 5, :line 2979, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2979, :column 7, :line 2979, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2979, :column 10, :line 2979, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2979, :column 13, :line 2979, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 2985, :column 5, :line 2985, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2985, :column 7, :line 2985, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2985, :column 10, :line 2985, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2985, :column 13, :line 2985, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 2985, :column 18, :line 2985, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2962, :column 4, :line 2962, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2962, :column 5, :line 2962, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2962, :column 7, :line 2962, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2979, :column 5, :line 2979, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2979, :column 7, :line 2979, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2979, :column 10, :line 2979, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2979, :column 13, :line 2979, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 2985, :column 4, :line 2985, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2985, :column 5, :line 2985, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2985, :column 7, :line 2985, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2985, :column 10, :line 2985, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2985, :column 13, :line 2985, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 2985, :column 16, :line 2985, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2985, :column 18, :line 2985, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 6746, :column 4, :line 6746, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6746, :column 5, :line 6746, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 6753, :column 4, :line 6753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6753, :column 5, :line 6753, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6753, :column 7, :line 6753, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 6760, :column 4, :line 6760, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6760, :column 5, :line 6760, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6760, :column 7, :line 6760, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6760, :column 9, :line 6760, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 6767, :column 4, :line 6767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6767, :column 5, :line 6767, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6767, :column 7, :line 6767, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6767, :column 9, :line 6767, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 6767, :column 11, :line 6767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 6767, :column 13, :line 6767, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 6740, :column 7, :line 6740, :file "cljs/core.cljs"} juxt ^{:arglists (^{:end-column 7, :end-line 6746, :column 4, :line 6746, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6746, :column 5, :line 6746, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 6753, :column 4, :line 6753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6753, :column 5, :line 6753, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6753, :column 7, :line 6753, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 6760, :column 4, :line 6760, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6760, :column 5, :line 6760, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6760, :column 7, :line 6760, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6760, :column 9, :line 6760, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 6767, :column 4, :line 6767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6767, :column 5, :line 6767, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6767, :column 7, :line 6767, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6767, :column 9, :line 6767, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 6767, :column 11, :line 6767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 6767, :column 13, :line 6767, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 6740, :column 7, :line 6740, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 6746, :column 5, :line 6746, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 6753, :column 5, :line 6753, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6753, :column 7, :line 6753, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 6760, :column 5, :line 6760, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6760, :column 7, :line 6760, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6760, :column 9, :line 6760, :file "cljs/core.cljs"} h] ^function [^{:end-column 7, :end-line 6767, :column 5, :line 6767, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6767, :column 7, :line 6767, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6767, :column 9, :line 6767, :file "cljs/core.cljs"} h & ^{:end-column 16, :end-line 6767, :column 13, :line 6767, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 6746, :column 4, :line 6746, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6746, :column 5, :line 6746, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 6753, :column 4, :line 6753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6753, :column 5, :line 6753, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6753, :column 7, :line 6753, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 6760, :column 4, :line 6760, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6760, :column 5, :line 6760, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6760, :column 7, :line 6760, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6760, :column 9, :line 6760, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 6767, :column 4, :line 6767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6767, :column 5, :line 6767, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6767, :column 7, :line 6767, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6767, :column 9, :line 6767, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 6767, :column 11, :line 6767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 6767, :column 13, :line 6767, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 6740, :column 7, :line 6740, :file "cljs/core.cljs"} juxt, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1537, :column 4, :line 1537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1537, :column 5, :line 1537, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1538, :column 5, :line 1538, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1538, :column 7, :line 1538, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1539, :column 4, :line 1539, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1539, :column 5, :line 1539, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1539, :column 7, :line 1539, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1539, :column 9, :line 1539, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1539, :column 11, :line 1539, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1534, :column 8, :line 1534, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1534, :column 16, :line 1534, :file "cljs/core.cljs"} < ^{:arglists (^{:end-column 7, :end-line 1537, :column 4, :line 1537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1537, :column 5, :line 1537, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1538, :column 5, :line 1538, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1538, :column 7, :line 1538, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1539, :column 4, :line 1539, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1539, :column 5, :line 1539, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1539, :column 7, :line 1539, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1539, :column 9, :line 1539, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1539, :column 11, :line 1539, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1534, :column 8, :line 1534, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1534, :column 16, :line 1534, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1537, :column 5, :line 1537, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1538, :column 5, :line 1538, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1538, :column 7, :line 1538, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1539, :column 5, :line 1539, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1539, :column 7, :line 1539, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1539, :column 11, :line 1539, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1537, :column 4, :line 1537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1537, :column 5, :line 1537, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1538, :column 5, :line 1538, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1538, :column 7, :line 1538, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1539, :column 4, :line 1539, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1539, :column 5, :line 1539, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1539, :column 7, :line 1539, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1539, :column 9, :line 1539, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1539, :column 11, :line 1539, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1534, :column 8, :line 1534, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1534, :column 16, :line 1534, :file "cljs/core.cljs"} <, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4598, :column 24, :line 4598, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4598, :column 25, :line 4598, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 4598, :column 29, :line 4598, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 4598, :column 31, :line 4598, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 4598, :column 8, :line 4598, :file "cljs/core.cljs"} inode-kv-reduce ^{:arglists (^{:end-column 36, :end-line 4598, :column 24, :line 4598, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4598, :column 25, :line 4598, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 4598, :column 29, :line 4598, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 4598, :column 31, :line 4598, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 4598, :column 8, :line 4598, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 4598, :column 25, :line 4598, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 4598, :column 29, :line 4598, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 4598, :column 31, :line 4598, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4598, :column 24, :line 4598, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4598, :column 25, :line 4598, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 4598, :column 29, :line 4598, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 4598, :column 31, :line 4598, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 4598, :column 8, :line 4598, :file "cljs/core.cljs"} inode-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4068, :column 26, :line 4068, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4068, :column 27, :line 4068, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4068, :column 29, :line 4068, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4068, :column 31, :line 4068, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4068, :column 8, :line 4068, :file "cljs/core.cljs"} obj-map->hash-map ^{:arglists (^{:end-column 33, :end-line 4068, :column 26, :line 4068, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4068, :column 27, :line 4068, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4068, :column 29, :line 4068, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4068, :column 31, :line 4068, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4068, :column 8, :line 4068, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 4068, :column 27, :line 4068, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4068, :column 29, :line 4068, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4068, :column 31, :line 4068, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4068, :column 26, :line 4068, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4068, :column 27, :line 4068, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4068, :column 29, :line 4068, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4068, :column 31, :line 4068, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4068, :column 8, :line 4068, :file "cljs/core.cljs"} obj-map->hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 507, :column 3, :line 507, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 507, :column 4, :line 507, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 504, :column 8, :line 504, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 504, :column 12, :line 504, :file "cljs/core.cljs"} rest ^{:arglists (^{:end-column 9, :end-line 507, :column 3, :line 507, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 507, :column 4, :line 507, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 504, :column 8, :line 504, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 504, :column 12, :line 504, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 507, :column 4, :line 507, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 507, :column 3, :line 507, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 507, :column 4, :line 507, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 504, :column 8, :line 504, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 504, :column 12, :line 504, :file "cljs/core.cljs"} rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7940, :column 3, :line 7940, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7940, :column 4, :line 7940, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 7936, :column 7, :line 7936, :file "cljs/core.cljs"} ex-data ^{:arglists (^{:end-column 7, :end-line 7940, :column 3, :line 7940, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7940, :column 4, :line 7940, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 7936, :column 7, :line 7936, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7940, :column 4, :line 7940, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7940, :column 3, :line 7940, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7940, :column 4, :line 7940, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 7936, :column 7, :line 7936, :file "cljs/core.cljs"} ex-data, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 4277, :column 10, :line 4277, :file "cljs/core.cljs"} PersistentArrayMapSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 4277, :column 10, :line 4277, :file "cljs/core.cljs"} PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 4277, :column 32, :line 4277, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 22, :end-line 368, :column 16, :line 368, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 368, :column 4, :line 368, :file "cljs/core.cljs"} -drop-first ^{:arglists (^{:end-column 22, :end-line 368, :column 16, :line 368, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 368, :column 4, :line 368, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 368, :column 16, :line 368, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 368, :column 4, :line 368, :file "cljs/core.cljs"} -drop-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7539, :column 4, :line 7539, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7539, :column 5, :line 7539, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 7539, :column 11, :line 7539, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 7540, :column 4, :line 7540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7540, :column 5, :line 7540, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7540, :column 7, :line 7540, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 7540, :column 13, :line 7540, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 7533, :column 8, :line 7533, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 7533, :column 16, :line 7533, :file "cljs/core.cljs"} isa? ^{:arglists (^{:end-column 18, :end-line 7539, :column 4, :line 7539, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7539, :column 5, :line 7539, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 7539, :column 11, :line 7539, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 7540, :column 4, :line 7540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7540, :column 5, :line 7540, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7540, :column 7, :line 7540, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 7540, :column 13, :line 7540, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 7533, :column 8, :line 7533, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 7533, :column 16, :line 7533, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 7539, :column 5, :line 7539, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 7539, :column 11, :line 7539, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 7540, :column 5, :line 7540, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7540, :column 7, :line 7540, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 7540, :column 13, :line 7540, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7539, :column 4, :line 7539, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7539, :column 5, :line 7539, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 7539, :column 11, :line 7539, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 7540, :column 4, :line 7540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7540, :column 5, :line 7540, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7540, :column 7, :line 7540, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 7540, :column 13, :line 7540, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 7533, :column 8, :line 7533, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 7533, :column 16, :line 7533, :file "cljs/core.cljs"} isa?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 227, :column 16, :line 227, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 227, :column 9, :line 227, :file "cljs/core.cljs"} -clone ^{:arglists (^{:end-column 23, :end-line 227, :column 16, :line 227, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 227, :column 9, :line 227, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 227, :column 16, :line 227, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 227, :column 9, :line 227, :file "cljs/core.cljs"} -clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([])} ->NeverEquiv ^{:file "cljs/core.cljs", :arglists ([])} {:arglists (^cljs.core/NeverEquiv []), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([])} ->NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6831, :column 3, :line 6831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6831, :column 4, :line 6831, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6831, :column 7, :line 6831, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 6829, :column 7, :line 6829, :file "cljs/core.cljs"} re-seq ^{:arglists (^{:end-column 9, :end-line 6831, :column 3, :line 6831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6831, :column 4, :line 6831, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6831, :column 7, :line 6831, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 6829, :column 7, :line 6829, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6831, :column 4, :line 6831, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6831, :column 7, :line 6831, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6831, :column 3, :line 6831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6831, :column 4, :line 6831, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6831, :column 7, :line 6831, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 6829, :column 7, :line 6829, :file "cljs/core.cljs"} re-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 7521, :column 3, :line 7521, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} make-hierarchy ^{:arglists (^{:end-column 5, :end-line 7521, :column 3, :line 7521, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 7521, :column 3, :line 7521, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} make-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 400, :column 33, :line 400, :file "cljs/core.cljs"} Symbol {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 423, :column 10, :line 423, :file "cljs/core.cljs"} Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 423, :column 17, :line 423, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 48, :end-line 3761, :column 21, :line 3761, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 3761, :column 22, :line 3761, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 3761, :column 25, :line 3761, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 3761, :column 31, :line 3761, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 3761, :column 38, :line 3761, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 3761, :column 8, :line 3761, :file "cljs/core.cljs"} tv-push-tail ^{:arglists (^{:end-column 48, :end-line 3761, :column 21, :line 3761, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 3761, :column 22, :line 3761, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 3761, :column 25, :line 3761, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 3761, :column 31, :line 3761, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 3761, :column 38, :line 3761, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 3761, :column 8, :line 3761, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 3761, :column 22, :line 3761, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 3761, :column 25, :line 3761, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 3761, :column 31, :line 3761, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 3761, :column 38, :line 3761, :file "cljs/core.cljs"} tail-node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 48, :end-line 3761, :column 21, :line 3761, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 3761, :column 22, :line 3761, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 3761, :column 25, :line 3761, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 3761, :column 31, :line 3761, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 3761, :column 38, :line 3761, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 3761, :column 8, :line 3761, :file "cljs/core.cljs"} tv-push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 292, :column 12, :line 292, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 292, :column 13, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 292, :column 18, :line 292, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 292, :column 21, :line 292, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 292, :column 22, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 292, :column 27, :line 292, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 292, :column 29, :line 292, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 292, :column 4, :line 292, :file "cljs/core.cljs"} -reduce ^{:arglists (^{:end-column 20, :end-line 292, :column 12, :line 292, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 292, :column 13, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 292, :column 18, :line 292, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 292, :column 21, :line 292, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 292, :column 22, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 292, :column 27, :line 292, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 292, :column 29, :line 292, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 292, :column 4, :line 292, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 292, :column 13, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 292, :column 18, :line 292, :file "cljs/core.cljs"} f] [^{:end-column 27, :end-line 292, :column 22, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 292, :column 27, :line 292, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 292, :column 29, :line 292, :file "cljs/core.cljs"} start]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 292, :column 12, :line 292, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 292, :column 13, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 292, :column 18, :line 292, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 292, :column 21, :line 292, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 292, :column 22, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 292, :column 27, :line 292, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 292, :column 29, :line 292, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 292, :column 4, :line 292, :file "cljs/core.cljs"} -reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 230, :column 20, :line 230, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} number, :end-column 19, :end-line 230, :column 12, :line 230, :file "cljs/core.cljs"} -count ^{:arglists (^{:end-column 25, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 230, :column 20, :line 230, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} number, :end-column 19, :end-line 230, :column 12, :line 230, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 230, :column 20, :line 230, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 230, :column 20, :line 230, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} number, :end-column 19, :end-line 230, :column 12, :line 230, :file "cljs/core.cljs"} -count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 12, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} keep ^{:arglists (^{:end-column 12, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 12, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 12, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} keep, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1604, :column 3, :line 1604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} char ^{:arglists (^{:end-column 6, :end-line 1604, :column 3, :line 1604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1604, :column 3, :line 1604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3104, :column 4, :line 3104, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3104, :column 5, :line 3104, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3106, :column 4, :line 3106, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3106, :column 5, :line 3106, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3106, :column 7, :line 3106, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3106, :column 12, :line 3106, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3106, :column 14, :line 3106, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3101, :column 7, :line 3101, :file "cljs/core.cljs"} mapcat ^{:arglists (^{:end-column 12, :end-line 3104, :column 4, :line 3104, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3104, :column 5, :line 3104, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3106, :column 4, :line 3106, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3106, :column 5, :line 3106, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3106, :column 7, :line 3106, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3106, :column 12, :line 3106, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3106, :column 14, :line 3106, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3101, :column 7, :line 3101, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3104, :column 5, :line 3104, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3106, :column 5, :line 3106, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3106, :column 7, :line 3106, :file "cljs/core.cljs"} coll & ^{:end-column 20, :end-line 3106, :column 14, :line 3106, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3104, :column 4, :line 3104, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3104, :column 5, :line 3104, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3106, :column 4, :line 3106, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3106, :column 5, :line 3106, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3106, :column 7, :line 3106, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3106, :column 12, :line 3106, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3106, :column 14, :line 3106, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3101, :column 7, :line 3101, :file "cljs/core.cljs"} mapcat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1714, :column 3, :line 1714, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1712, :column 7, :line 1712, :file "cljs/core.cljs"} unchecked-long ^{:arglists (^{:end-column 6, :end-line 1714, :column 3, :line 1714, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1712, :column 7, :line 1712, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1714, :column 3, :line 1714, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1712, :column 7, :line 1712, :file "cljs/core.cljs"} unchecked-long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1667, :column 24, :line 1667, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1667, :column 25, :line 1667, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} unchecked-negate ^{:arglists (^{:end-column 27, :end-line 1667, :column 24, :line 1667, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1667, :column 25, :line 1667, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1667, :column 25, :line 1667, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1667, :column 24, :line 1667, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1667, :column 25, :line 1667, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} unchecked-negate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2056, :column 3, :line 2056, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2056, :column 4, :line 2056, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2054, :column 7, :line 2054, :file "cljs/core.cljs"} reverse ^{:arglists (^{:end-column 9, :end-line 2056, :column 3, :line 2056, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2056, :column 4, :line 2056, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2054, :column 7, :line 2054, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2056, :column 4, :line 2056, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2056, :column 3, :line 2056, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2056, :column 4, :line 2056, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2054, :column 7, :line 2054, :file "cljs/core.cljs"} reverse, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 6689, :column 4, :line 6689, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 6690, :column 4, :line 6690, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6690, :column 5, :line 6690, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 6691, :column 4, :line 6691, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6691, :column 5, :line 6691, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6691, :column 11, :line 6691, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 6692, :column 4, :line 6692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6692, :column 5, :line 6692, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6692, :column 11, :line 6692, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 6692, :column 15, :line 6692, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 6685, :column 7, :line 6685, :file "cljs/core.cljs"} range ^{:arglists (^{:end-column 6, :end-line 6689, :column 4, :line 6689, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 6690, :column 4, :line 6690, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6690, :column 5, :line 6690, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 6691, :column 4, :line 6691, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6691, :column 5, :line 6691, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6691, :column 11, :line 6691, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 6692, :column 4, :line 6692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6692, :column 5, :line 6692, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6692, :column 11, :line 6692, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 6692, :column 15, :line 6692, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 6685, :column 7, :line 6685, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 9, :end-line 6690, :column 5, :line 6690, :file "cljs/core.cljs"} end] [^{:end-column 11, :end-line 6691, :column 5, :line 6691, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6691, :column 11, :line 6691, :file "cljs/core.cljs"} end] ^cljs.core/Range [^{:end-column 11, :end-line 6692, :column 5, :line 6692, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6692, :column 11, :line 6692, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 6692, :column 15, :line 6692, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6689, :column 4, :line 6689, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 6690, :column 4, :line 6690, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6690, :column 5, :line 6690, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 6691, :column 4, :line 6691, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6691, :column 5, :line 6691, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6691, :column 11, :line 6691, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 6692, :column 4, :line 6692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6692, :column 5, :line 6692, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6692, :column 11, :line 6692, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 6692, :column 15, :line 6692, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 6685, :column 7, :line 6685, :file "cljs/core.cljs"} range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1815, :column 3, :line 1815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1815, :column 4, :line 1815, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1813, :column 7, :line 1813, :file "cljs/core.cljs"} bit-count ^{:arglists (^{:end-column 6, :end-line 1815, :column 3, :line 1815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1815, :column 4, :line 1815, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1813, :column 7, :line 1813, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1815, :column 4, :line 1815, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1815, :column 3, :line 1815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1815, :column 4, :line 1815, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1813, :column 7, :line 1813, :file "cljs/core.cljs"} bit-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 68, :end-line 4555, :column 56, :line 4555, :file "cljs/core.cljs"} create-node ^{:arglists (^{:end-column 40, :end-line 5032, :column 4, :line 5032, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5032, :column 5, :line 5032, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5032, :column 11, :line 5032, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5032, :column 16, :line 5032, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5032, :column 21, :line 5032, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5032, :column 30, :line 5032, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5032, :column 35, :line 5032, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5040, :column 4, :line 5040, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5040, :column 5, :line 5040, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5040, :column 10, :line 5040, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5040, :column 16, :line 5040, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5040, :column 21, :line 5040, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5040, :column 26, :line 5040, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5040, :column 35, :line 5040, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5040, :column 40, :line 5040, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5031, :column 8, :line 5031, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5032, :column 5, :line 5032, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5032, :column 11, :line 5032, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5032, :column 16, :line 5032, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5032, :column 21, :line 5032, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5032, :column 30, :line 5032, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5032, :column 35, :line 5032, :file "cljs/core.cljs"} val2] [^{:end-column 10, :end-line 5040, :column 5, :line 5040, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5040, :column 10, :line 5040, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5040, :column 16, :line 5040, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5040, :column 21, :line 5040, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5040, :column 26, :line 5040, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5040, :column 35, :line 5040, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5040, :column 40, :line 5040, :file "cljs/core.cljs"} val2]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5032, :column 4, :line 5032, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5032, :column 5, :line 5032, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5032, :column 11, :line 5032, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5032, :column 16, :line 5032, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5032, :column 21, :line 5032, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5032, :column 30, :line 5032, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5032, :column 35, :line 5032, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5040, :column 4, :line 5040, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5040, :column 5, :line 5040, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5040, :column 10, :line 5040, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5040, :column 16, :line 5040, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5040, :column 21, :line 5040, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5040, :column 26, :line 5040, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5040, :column 35, :line 5040, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5040, :column 40, :line 5040, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5031, :column 8, :line 5031, :file "cljs/core.cljs"} create-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1403, :column 5, :line 1403, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1403, :column 10, :line 1403, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} sort ^{:arglists (^{:end-column 10, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1403, :column 5, :line 1403, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1403, :column 10, :line 1403, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1403, :column 5, :line 1403, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1403, :column 10, :line 1403, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1403, :column 5, :line 1403, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1403, :column 10, :line 1403, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} sort, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta])} ->MetaFn ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/MetaFn [^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta])} ->MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1650, :column 25, :line 1650, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1650, :column 26, :line 1650, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1650, :column 7, :line 1650, :file "cljs/core.cljs"} unchecked-inc-int ^{:arglists (^{:end-column 28, :end-line 1650, :column 25, :line 1650, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1650, :column 26, :line 1650, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1650, :column 7, :line 1650, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1650, :column 26, :line 1650, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1650, :column 25, :line 1650, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1650, :column 26, :line 1650, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1650, :column 7, :line 1650, :file "cljs/core.cljs"} unchecked-inc-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 365, :column 21, :line 365, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 365, :column 24, :line 365, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} number, :end-column 21, :end-line 365, :column 12, :line 365, :file "cljs/core.cljs"} -compare ^{:arglists (^{:end-column 26, :end-line 365, :column 21, :line 365, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 365, :column 24, :line 365, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} number, :end-column 21, :end-line 365, :column 12, :line 365, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 365, :column 24, :line 365, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 365, :column 21, :line 365, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 365, :column 24, :line 365, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} number, :end-column 21, :end-line 365, :column 12, :line 365, :file "cljs/core.cljs"} -compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2820, :column 3, :line 2820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2820, :column 6, :line 2820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 2815, :column 7, :line 2815, :file "cljs/core.cljs"} map-indexed ^{:arglists (^{:end-column 11, :end-line 2820, :column 3, :line 2820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2820, :column 6, :line 2820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 2815, :column 7, :line 2815, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2820, :column 6, :line 2820, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2820, :column 3, :line 2820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2820, :column 6, :line 2820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 2815, :column 7, :line 2815, :file "cljs/core.cljs"} map-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7505, :column 3, :line 7505, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7505, :column 4, :line 7505, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} rand-nth ^{:arglists (^{:end-column 9, :end-line 7505, :column 3, :line 7505, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7505, :column 4, :line 7505, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7505, :column 4, :line 7505, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7505, :column 3, :line 7505, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7505, :column 4, :line 7505, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} rand-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2754, :column 4, :line 2754, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2755, :column 4, :line 2755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2755, :column 5, :line 2755, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 2756, :column 4, :line 2756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2756, :column 5, :line 2756, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2756, :column 7, :line 2756, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 2763, :column 4, :line 2763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2763, :column 5, :line 2763, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2763, :column 7, :line 2763, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 2763, :column 9, :line 2763, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 2770, :column 8, :line 2770, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 2770, :column 14, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2770, :column 16, :line 2770, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} comp ^{:arglists (^{:end-column 6, :end-line 2754, :column 4, :line 2754, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2755, :column 4, :line 2755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2755, :column 5, :line 2755, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 2756, :column 4, :line 2756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2756, :column 5, :line 2756, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2756, :column 7, :line 2756, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 2763, :column 4, :line 2763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2763, :column 5, :line 2763, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2763, :column 7, :line 2763, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 2763, :column 9, :line 2763, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 2770, :column 8, :line 2770, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 2770, :column 14, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2770, :column 16, :line 2770, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 7, :end-line 2755, :column 5, :line 2755, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 2756, :column 5, :line 2756, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2756, :column 7, :line 2756, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 2763, :column 5, :line 2763, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2763, :column 7, :line 2763, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 2763, :column 9, :line 2763, :file "cljs/core.cljs"} h] ^function [^{:end-column 8, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 2770, :column 8, :line 2770, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} f3 & ^{:end-column 19, :end-line 2770, :column 16, :line 2770, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2754, :column 4, :line 2754, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2755, :column 4, :line 2755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2755, :column 5, :line 2755, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 2756, :column 4, :line 2756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2756, :column 5, :line 2756, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2756, :column 7, :line 2756, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 2763, :column 4, :line 2763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2763, :column 5, :line 2763, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2763, :column 7, :line 2763, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 2763, :column 9, :line 2763, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 2770, :column 8, :line 2770, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 2770, :column 14, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2770, :column 16, :line 2770, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} comp, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2304, :column 4, :line 2304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2304, :column 5, :line 2304, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2306, :column 4, :line 2306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2306, :column 5, :line 2306, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2306, :column 9, :line 2306, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2308, :column 4, :line 2308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2308, :column 5, :line 2308, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2308, :column 9, :line 2308, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2308, :column 13, :line 2308, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2303, :column 7, :line 2303, :file "cljs/core.cljs"} array-chunk ^{:arglists (^{:end-column 9, :end-line 2304, :column 4, :line 2304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2304, :column 5, :line 2304, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2306, :column 4, :line 2306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2306, :column 5, :line 2306, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2306, :column 9, :line 2306, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2308, :column 4, :line 2308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2308, :column 5, :line 2308, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2308, :column 9, :line 2308, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2308, :column 13, :line 2308, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2303, :column 7, :line 2303, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2304, :column 5, :line 2304, :file "cljs/core.cljs"} arr] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2306, :column 5, :line 2306, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2306, :column 9, :line 2306, :file "cljs/core.cljs"} off] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2308, :column 5, :line 2308, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2308, :column 9, :line 2308, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2308, :column 13, :line 2308, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2304, :column 4, :line 2304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2304, :column 5, :line 2304, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2306, :column 4, :line 2306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2306, :column 5, :line 2306, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2306, :column 9, :line 2306, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2308, :column 4, :line 2308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2308, :column 5, :line 2308, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2308, :column 9, :line 2308, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2308, :column 13, :line 2308, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2303, :column 7, :line 2303, :file "cljs/core.cljs"} array-chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1807, :column 3, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 6, :line 1807, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1805, :column 7, :line 1805, :file "cljs/core.cljs"} bit-shift-right-zero-fill ^{:arglists (^{:end-column 8, :end-line 1807, :column 3, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 6, :line 1807, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1805, :column 7, :line 1805, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 6, :line 1807, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1807, :column 3, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 6, :line 1807, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1805, :column 7, :line 1805, :file "cljs/core.cljs"} bit-shift-right-zero-fill, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 345, :column 23, :line 345, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 345, :column 24, :line 345, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 345, :column 9, :line 345, :file "cljs/core.cljs"} -as-transient ^{:arglists (^{:end-column 29, :end-line 345, :column 23, :line 345, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 345, :column 24, :line 345, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 345, :column 9, :line 345, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 345, :column 24, :line 345, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 345, :column 23, :line 345, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 345, :column 24, :line 345, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 345, :column 9, :line 345, :file "cljs/core.cljs"} -as-transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 6782, :column 4, :line 6782, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6782, :column 5, :line 6782, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6785, :column 4, :line 6785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6785, :column 5, :line 6785, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6785, :column 7, :line 6785, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 6776, :column 7, :line 6776, :file "cljs/core.cljs"} dorun ^{:arglists (^{:end-column 10, :end-line 6782, :column 4, :line 6782, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6782, :column 5, :line 6782, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6785, :column 4, :line 6785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6785, :column 5, :line 6785, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6785, :column 7, :line 6785, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 6776, :column 7, :line 6776, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 10, :end-line 6782, :column 5, :line 6782, :file "cljs/core.cljs"} coll] ^clj-nil [^{:end-column 7, :end-line 6785, :column 5, :line 6785, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6785, :column 7, :line 6785, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 6782, :column 4, :line 6782, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6782, :column 5, :line 6782, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6785, :column 4, :line 6785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6785, :column 5, :line 6785, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6785, :column 7, :line 6785, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 6776, :column 7, :line 6776, :file "cljs/core.cljs"} dorun, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 3371, :column 10, :line 3371, :file "cljs/core.cljs"} pr-sequential-writer ^{:arglists (^{:end-column 70, :end-line 6846, :column 28, :line 6846, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 6846, :column 29, :line 6846, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 6846, :column 36, :line 6846, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 6846, :column 46, :line 6846, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 6846, :column 52, :line 6846, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 6846, :column 56, :line 6846, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 6846, :column 60, :line 6846, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 6846, :column 65, :line 6846, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 6846, :column 7, :line 6846, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 6846, :column 29, :line 6846, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 6846, :column 36, :line 6846, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 6846, :column 46, :line 6846, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 6846, :column 52, :line 6846, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 6846, :column 56, :line 6846, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 6846, :column 60, :line 6846, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 6846, :column 65, :line 6846, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 70, :end-line 6846, :column 28, :line 6846, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 6846, :column 29, :line 6846, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 6846, :column 36, :line 6846, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 6846, :column 46, :line 6846, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 6846, :column 52, :line 6846, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 6846, :column 56, :line 6846, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 6846, :column 60, :line 6846, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 6846, :column 65, :line 6846, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 6846, :column 7, :line 6846, :file "cljs/core.cljs"} pr-sequential-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 37, :end-line 856, :column 31, :line 856, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 856, :column 32, :line 856, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 856, :column 8, :line 856, :file "cljs/core.cljs"} accumulating-seq-count ^{:arglists (^{:end-column 37, :end-line 856, :column 31, :line 856, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 856, :column 32, :line 856, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 856, :column 8, :line 856, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 37, :end-line 856, :column 32, :line 856, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 37, :end-line 856, :column 31, :line 856, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 856, :column 32, :line 856, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 856, :column 8, :line 856, :file "cljs/core.cljs"} accumulating-seq-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 241, :column 14, :line 241, :file "cljs/core.cljs"} IIndexed ^{:impls #{cljs.core/TransientVector cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/Range cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 241, :column 14, :line 241, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 241, :column 14, :line 241, :file "cljs/core.cljs"} IIndexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1126, :column 4, :line 1126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1126, :column 5, :line 1126, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1127, :column 4, :line 1127, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1127, :column 5, :line 1127, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1127, :column 10, :line 1127, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1130, :column 4, :line 1130, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1130, :column 5, :line 1130, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1130, :column 10, :line 1130, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1130, :column 12, :line 1130, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1130, :column 14, :line 1130, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1123, :column 7, :line 1123, :file "cljs/core.cljs"} disj ^{:arglists (^{:end-column 10, :end-line 1126, :column 4, :line 1126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1126, :column 5, :line 1126, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1127, :column 4, :line 1127, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1127, :column 5, :line 1127, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1127, :column 10, :line 1127, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1130, :column 4, :line 1130, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1130, :column 5, :line 1130, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1130, :column 10, :line 1130, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1130, :column 12, :line 1130, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1130, :column 14, :line 1130, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1123, :column 7, :line 1123, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1126, :column 5, :line 1126, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1127, :column 5, :line 1127, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1127, :column 10, :line 1127, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1130, :column 5, :line 1130, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1130, :column 10, :line 1130, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1130, :column 14, :line 1130, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1126, :column 4, :line 1126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1126, :column 5, :line 1126, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1127, :column 4, :line 1127, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1127, :column 5, :line 1127, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1127, :column 10, :line 1127, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1130, :column 4, :line 1130, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1130, :column 5, :line 1130, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1130, :column 10, :line 1130, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1130, :column 12, :line 1130, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1130, :column 14, :line 1130, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1123, :column 7, :line 1123, :file "cljs/core.cljs"} disj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IPrintWithWriter ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 31, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IPrintWithWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid])} ->UUID ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid])} {:arglists (^cljs.core/UUID [^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid])} ->UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} IVector ^{:impls #{cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} IVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2 ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3284, :column 22, :line 3284, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3284, :column 23, :line 3284, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3284, :column 8, :line 3284, :file "cljs/core.cljs"} pv-clone-node ^{:arglists (^{:end-column 28, :end-line 3284, :column 22, :line 3284, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3284, :column 23, :line 3284, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3284, :column 8, :line 3284, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3284, :column 23, :line 3284, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3284, :column 22, :line 3284, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3284, :column 23, :line 3284, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3284, :column 8, :line 3284, :file "cljs/core.cljs"} pv-clone-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 25, :end-line 662, :column 20, :line 662, :file "cljs/core.cljs"} cons ^{:arglists (^{:end-column 11, :end-line 2123, :column 3, :line 2123, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2123, :column 4, :line 2123, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2123, :column 6, :line 2123, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2121, :column 7, :line 2121, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 2123, :column 4, :line 2123, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2123, :column 6, :line 2123, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2123, :column 3, :line 2123, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2123, :column 4, :line 2123, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2123, :column 6, :line 2123, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2121, :column 7, :line 2121, :file "cljs/core.cljs"} cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6371, :column 10, :line 6371, :file "cljs/core.cljs"} PersistentTreeSet {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6371, :column 10, :line 6371, :file "cljs/core.cljs"} PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 6371, :column 28, :line 6371, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 17, :end-line 1722, :column 14, :line 1722, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1722, :column 15, :line 1722, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1722, :column 7, :line 1722, :file "cljs/core.cljs"} floats ^{:arglists (^{:end-column 17, :end-line 1722, :column 14, :line 1722, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1722, :column 15, :line 1722, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1722, :column 7, :line 1722, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1722, :column 15, :line 1722, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1722, :column 14, :line 1722, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1722, :column 15, :line 1722, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1722, :column 7, :line 1722, :file "cljs/core.cljs"} floats, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 60, :end-line 3370, :column 44, :line 3370, :file "cljs/core.cljs"} TransientVector {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 3803, :column 10, :line 3803, :file "cljs/core.cljs"} TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 3806, :column 26, :line 3803, :file "cljs/core.cljs"} [^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail], :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1835, :column 3, :line 1835, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 1833, :column 8, :line 1833, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1833, :column 16, :line 1833, :file "cljs/core.cljs"} pos? ^{:arglists (^{:end-column 6, :end-line 1835, :column 3, :line 1835, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 1833, :column 8, :line 1833, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1833, :column 16, :line 1833, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1835, :column 3, :line 1835, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 1833, :column 8, :line 1833, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1833, :column 16, :line 1833, :file "cljs/core.cljs"} pos?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2798, :column 7, :line 2798, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 2804, :column 4, :line 2804, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2804, :column 5, :line 2804, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2804, :column 9, :line 2804, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 2809, :column 4, :line 2809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2809, :column 5, :line 2809, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2809, :column 7, :line 2809, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2809, :column 9, :line 2809, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2809, :column 11, :line 2809, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 2792, :column 7, :line 2792, :file "cljs/core.cljs"} fnil ^{:arglists (^{:end-column 9, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2798, :column 7, :line 2798, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 2804, :column 4, :line 2804, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2804, :column 5, :line 2804, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2804, :column 9, :line 2804, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 2809, :column 4, :line 2809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2809, :column 5, :line 2809, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2809, :column 7, :line 2809, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2809, :column 9, :line 2809, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2809, :column 11, :line 2809, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 2792, :column 7, :line 2792, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2798, :column 7, :line 2798, :file "cljs/core.cljs"} x] ^function [^{:end-column 7, :end-line 2804, :column 5, :line 2804, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2804, :column 9, :line 2804, :file "cljs/core.cljs"} y] ^function [^{:end-column 7, :end-line 2809, :column 5, :line 2809, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2809, :column 7, :line 2809, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2809, :column 9, :line 2809, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2809, :column 11, :line 2809, :file "cljs/core.cljs"} z]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2798, :column 7, :line 2798, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 2804, :column 4, :line 2804, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2804, :column 5, :line 2804, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2804, :column 9, :line 2804, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 2809, :column 4, :line 2809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2809, :column 5, :line 2809, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2809, :column 7, :line 2809, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2809, :column 9, :line 2809, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2809, :column 11, :line 2809, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 2792, :column 7, :line 2792, :file "cljs/core.cljs"} fnil, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 6227, :column 3, :line 6227, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6227, :column 4, :line 6227, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6227, :column 6, :line 6227, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6227, :column 8, :line 6227, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6222, :column 7, :line 6222, :file "cljs/core.cljs"} merge-with ^{:arglists (^{:end-column 13, :end-line 6227, :column 3, :line 6227, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6227, :column 4, :line 6227, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6227, :column 6, :line 6227, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6227, :column 8, :line 6227, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6222, :column 7, :line 6222, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 6227, :column 4, :line 6227, :file "cljs/core.cljs"} f & ^{:end-column 13, :end-line 6227, :column 8, :line 6227, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6227, :column 3, :line 6227, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6227, :column 4, :line 6227, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6227, :column 6, :line 6227, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6227, :column 8, :line 6227, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6222, :column 7, :line 6222, :file "cljs/core.cljs"} merge-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1202, :column 3, :line 1202, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1202, :column 4, :line 1202, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1200, :column 8, :line 1200, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1200, :column 16, :line 1200, :file "cljs/core.cljs"} sequential? ^{:arglists (^{:end-column 6, :end-line 1202, :column 3, :line 1202, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1202, :column 4, :line 1202, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1200, :column 8, :line 1200, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1200, :column 16, :line 1200, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1202, :column 4, :line 1202, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1202, :column 3, :line 1202, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1202, :column 4, :line 1202, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1200, :column 8, :line 1200, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1200, :column 16, :line 1200, :file "cljs/core.cljs"} sequential?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 5899, :column 25, :line 5899, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5899, :column 26, :line 5899, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 5899, :column 31, :line 5899, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 5899, :column 36, :line 5899, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 5899, :column 38, :line 5899, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 5899, :column 8, :line 5899, :file "cljs/core.cljs"} tree-map-replace ^{:arglists (^{:end-column 40, :end-line 5899, :column 25, :line 5899, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5899, :column 26, :line 5899, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 5899, :column 31, :line 5899, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 5899, :column 36, :line 5899, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 5899, :column 38, :line 5899, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 5899, :column 8, :line 5899, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 5899, :column 26, :line 5899, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 5899, :column 31, :line 5899, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 5899, :column 36, :line 5899, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 5899, :column 38, :line 5899, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5899, :column 25, :line 5899, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5899, :column 26, :line 5899, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 5899, :column 31, :line 5899, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 5899, :column 36, :line 5899, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 5899, :column 38, :line 5899, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 5899, :column 8, :line 5899, :file "cljs/core.cljs"} tree-map-replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr])} ->TransientArrayMap ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/TransientArrayMap [^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr])} ->TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 29, :end-line 462, :column 20, :line 462, :file "cljs/core.cljs"} prim-seq ^{:arglists (^{:end-column 10, :end-line 735, :column 4, :line 735, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 735, :column 5, :line 735, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 737, :column 4, :line 737, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 737, :column 5, :line 737, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 737, :column 10, :line 737, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 734, :column 7, :line 734, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 735, :column 5, :line 735, :file "cljs/core.cljs"} prim] [^{:end-column 10, :end-line 737, :column 5, :line 737, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 737, :column 10, :line 737, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 735, :column 4, :line 735, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 735, :column 5, :line 735, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 737, :column 4, :line 737, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 737, :column 5, :line 737, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 737, :column 10, :line 737, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 734, :column 7, :line 734, :file "cljs/core.cljs"} prim-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level* ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1438, :column 7, :line 1438, :file "cljs/core.cljs"} shuffle ^{:arglists (^{:end-column 9, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1438, :column 7, :line 1438, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1438, :column 7, :line 1438, :file "cljs/core.cljs"} shuffle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 33, :end-line 1223, :column 22, :line 1223, :file "cljs/core.cljs"} ChunkedSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 3555, :column 10, :line 3555, :file "cljs/core.cljs"} ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 59, :end-line 3555, :column 21, :line 3555, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 11, :end-line 1313, :column 3, :line 1313, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1313, :column 4, :line 1313, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1313, :column 9, :line 1313, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} find ^{:arglists (^{:end-column 11, :end-line 1313, :column 3, :line 1313, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1313, :column 4, :line 1313, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1313, :column 9, :line 1313, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1313, :column 4, :line 1313, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1313, :column 9, :line 1313, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1313, :column 3, :line 1313, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1313, :column 4, :line 1313, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1313, :column 9, :line 1313, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 186, :column 3, :line 186, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 186, :column 4, :line 186, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 184, :column 8, :line 184, :file "cljs/core.cljs"} number, :end-column 23, :end-line 184, :column 15, :line 184, :file "cljs/core.cljs"} alength ^{:arglists (^{:end-column 10, :end-line 186, :column 3, :line 186, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 186, :column 4, :line 186, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 184, :column 8, :line 184, :file "cljs/core.cljs"} number, :end-column 23, :end-line 184, :column 15, :line 184, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 10, :end-line 186, :column 4, :line 186, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 186, :column 3, :line 186, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 186, :column 4, :line 186, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 184, :column 8, :line 184, :file "cljs/core.cljs"} number, :end-column 23, :end-line 184, :column 15, :line 184, :file "cljs/core.cljs"} alength, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1759, :column 3, :line 1759, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1759, :column 4, :line 1759, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1759, :column 6, :line 1759, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1757, :column 7, :line 1757, :file "cljs/core.cljs"} bit-xor ^{:arglists (^{:end-column 8, :end-line 1759, :column 3, :line 1759, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1759, :column 4, :line 1759, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1759, :column 6, :line 1759, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1757, :column 7, :line 1757, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1759, :column 4, :line 1759, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1759, :column 6, :line 1759, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1759, :column 3, :line 1759, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1759, :column 4, :line 1759, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1759, :column 6, :line 1759, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1757, :column 7, :line 1757, :file "cljs/core.cljs"} bit-xor, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i])} ->IndexedSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i])} {:arglists (^cljs.core/IndexedSeq [^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i])} ->IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4092, :column 10, :line 4092, :file "cljs/core.cljs"} ObjMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4092, :column 10, :line 4092, :file "cljs/core.cljs"} ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4092, :column 17, :line 4092, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1811, :column 3, :line 1811, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1811, :column 4, :line 1811, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1811, :column 6, :line 1811, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} unsigned-bit-shift-right ^{:arglists (^{:end-column 8, :end-line 1811, :column 3, :line 1811, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1811, :column 4, :line 1811, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1811, :column 6, :line 1811, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1811, :column 4, :line 1811, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1811, :column 6, :line 1811, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1811, :column 3, :line 1811, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1811, :column 4, :line 1811, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1811, :column 6, :line 1811, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} unsigned-bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1842, :column 3, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 1840, :column 8, :line 1840, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1840, :column 16, :line 1840, :file "cljs/core.cljs"} neg? ^{:arglists (^{:end-column 6, :end-line 1842, :column 3, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 1840, :column 8, :line 1840, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1840, :column 16, :line 1840, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1842, :column 3, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 1840, :column 8, :line 1840, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1840, :column 16, :line 1840, :file "cljs/core.cljs"} neg?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2076, :column 10, :line 2076, :file "cljs/core.cljs"} Cons {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2076, :column 10, :line 2076, :file "cljs/core.cljs"} Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 49, :end-line 2076, :column 15, :line 2076, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 36, :end-line 7688, :column 19, :line 7688, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7688, :column 20, :line 7688, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7688, :column 23, :line 7688, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} -remove-method ^{:arglists (^{:end-column 36, :end-line 7688, :column 19, :line 7688, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7688, :column 20, :line 7688, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7688, :column 23, :line 7688, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 7688, :column 20, :line 7688, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7688, :column 23, :line 7688, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 7688, :column 19, :line 7688, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7688, :column 20, :line 7688, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7688, :column 23, :line 7688, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} -remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash])} ->List ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/List [^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash])} ->List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1617, :column 31, :line 1617, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1617, :column 32, :line 1617, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1617, :column 8, :line 1617, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1617, :column 15, :line 1617, :file "cljs/core.cljs"} unchecked-float ^{:arglists (^{:end-column 34, :end-line 1617, :column 31, :line 1617, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1617, :column 32, :line 1617, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1617, :column 8, :line 1617, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1617, :column 15, :line 1617, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1617, :column 32, :line 1617, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1617, :column 31, :line 1617, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1617, :column 32, :line 1617, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1617, :column 8, :line 1617, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1617, :column 15, :line 1617, :file "cljs/core.cljs"} unchecked-float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 1271, :column 27, :line 1271, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1271, :column 28, :line 1271, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1271, :column 8, :line 1271, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1271, :column 16, :line 1271, :file "cljs/core.cljs"} undefined? ^{:arglists (^{:end-column 30, :end-line 1271, :column 27, :line 1271, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1271, :column 28, :line 1271, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1271, :column 8, :line 1271, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1271, :column 16, :line 1271, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 30, :end-line 1271, :column 28, :line 1271, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 1271, :column 27, :line 1271, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1271, :column 28, :line 1271, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1271, :column 8, :line 1271, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1271, :column 16, :line 1271, :file "cljs/core.cljs"} undefined?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} IMeta ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet ^{:end-column 23, :end-line 567, :column 14, :line 567, :file "cljs/core.cljs"} function cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 20, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} IMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 595, :column 3, :line 595, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 595, :column 4, :line 595, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 593, :column 8, :line 593, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 593, :column 16, :line 593, :file "cljs/core.cljs"} reduced? ^{:arglists (^{:end-column 6, :end-line 595, :column 3, :line 595, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 595, :column 4, :line 595, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 593, :column 8, :line 593, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 593, :column 16, :line 593, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 595, :column 4, :line 595, :file "cljs/core.cljs"} r]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 595, :column 3, :line 595, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 595, :column 4, :line 595, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 593, :column 8, :line 593, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 593, :column 16, :line 593, :file "cljs/core.cljs"} reduced?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to ^{:file "cljs/core.cljs", :arglists ([f argc args])} {:arglists ([f argc args]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2604, :column 5, :line 2604, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2604, :column 11, :line 2604, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2606, :column 4, :line 2606, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2606, :column 5, :line 2606, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2606, :column 11, :line 2606, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2606, :column 15, :line 2606, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2606, :column 17, :line 2606, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2601, :column 7, :line 2601, :file "cljs/core.cljs"} disj! ^{:arglists (^{:end-column 15, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2604, :column 5, :line 2604, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2604, :column 11, :line 2604, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2606, :column 4, :line 2606, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2606, :column 5, :line 2606, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2606, :column 11, :line 2606, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2606, :column 15, :line 2606, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2606, :column 17, :line 2606, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2601, :column 7, :line 2601, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2604, :column 5, :line 2604, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2604, :column 11, :line 2604, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2606, :column 5, :line 2606, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2606, :column 11, :line 2606, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2606, :column 17, :line 2606, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2604, :column 5, :line 2604, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2604, :column 11, :line 2604, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2606, :column 4, :line 2606, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2606, :column 5, :line 2606, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2606, :column 11, :line 2606, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2606, :column 15, :line 2606, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2606, :column 17, :line 2606, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2601, :column 7, :line 2601, :file "cljs/core.cljs"} disj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 254, :column 12, :line 254, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 254, :column 13, :line 254, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 254, :column 15, :line 254, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 254, :column 18, :line 254, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 254, :column 19, :line 254, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 254, :column 21, :line 254, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 254, :column 23, :line 254, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 254, :column 4, :line 254, :file "cljs/core.cljs"} -lookup ^{:arglists (^{:end-column 17, :end-line 254, :column 12, :line 254, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 254, :column 13, :line 254, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 254, :column 15, :line 254, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 254, :column 18, :line 254, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 254, :column 19, :line 254, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 254, :column 21, :line 254, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 254, :column 23, :line 254, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 254, :column 4, :line 254, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 254, :column 13, :line 254, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 254, :column 15, :line 254, :file "cljs/core.cljs"} k] [^{:end-column 21, :end-line 254, :column 19, :line 254, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 254, :column 21, :line 254, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 254, :column 23, :line 254, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 254, :column 12, :line 254, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 254, :column 13, :line 254, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 254, :column 15, :line 254, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 254, :column 18, :line 254, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 254, :column 19, :line 254, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 254, :column 21, :line 254, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 254, :column 23, :line 254, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 254, :column 4, :line 254, :file "cljs/core.cljs"} -lookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 226, :column 14, :line 226, :file "cljs/core.cljs"} ICloneable ^{:impls #{cljs.core/PersistentHashMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Range}, :protocol-symbol true, :end-column 25, :end-line 226, :column 14, :line 226, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 226, :column 14, :line 226, :file "cljs/core.cljs"} ICloneable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 7425, :column 14, :line 7425, :file "cljs/core.cljs"} IEncodeClojure ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 7425, :column 14, :line 7425, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 7425, :column 14, :line 7425, :file "cljs/core.cljs"} IEncodeClojure, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1717, :column 16, :line 1717, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1717, :column 17, :line 1717, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} booleans ^{:arglists (^{:end-column 19, :end-line 1717, :column 16, :line 1717, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1717, :column 17, :line 1717, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 1717, :column 17, :line 1717, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1717, :column 16, :line 1717, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1717, :column 17, :line 1717, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} booleans, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 4221, :column 35, :line 4221, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4221, :column 36, :line 4221, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4221, :column 40, :line 4221, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4221, :column 42, :line 4221, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4221, :column 8, :line 4221, :file "cljs/core.cljs"} array-map-index-of-symbol? ^{:arglists (^{:end-column 44, :end-line 4221, :column 35, :line 4221, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4221, :column 36, :line 4221, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4221, :column 40, :line 4221, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4221, :column 42, :line 4221, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4221, :column 8, :line 4221, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 4221, :column 36, :line 4221, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4221, :column 40, :line 4221, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4221, :column 42, :line 4221, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 4221, :column 35, :line 4221, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4221, :column 36, :line 4221, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4221, :column 40, :line 4221, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4221, :column 42, :line 4221, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4221, :column 8, :line 4221, :file "cljs/core.cljs"} array-map-index-of-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 662, :column 25, :line 662, :file "cljs/core.cljs"} RSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 749, :column 10, :line 749, :file "cljs/core.cljs"} RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 749, :column 15, :line 749, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 4563, :column 13, :line 4563, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 4563, :column 14, :line 4563, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 4563, :column 19, :line 4563, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} mask ^{:arglists (^{:end-column 25, :end-line 4563, :column 13, :line 4563, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 4563, :column 14, :line 4563, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 4563, :column 19, :line 4563, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 19, :end-line 4563, :column 14, :line 4563, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 4563, :column 19, :line 4563, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 4563, :column 13, :line 4563, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 4563, :column 14, :line 4563, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 4563, :column 19, :line 4563, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} mask, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2417, :column 4, :line 2417, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2417, :column 5, :line 2417, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2421, :column 4, :line 2421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2421, :column 5, :line 2421, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2421, :column 10, :line 2421, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2416, :column 7, :line 2416, :file "cljs/core.cljs"} int-array ^{:arglists (^{:end-column 17, :end-line 2417, :column 4, :line 2417, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2417, :column 5, :line 2417, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2421, :column 4, :line 2421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2421, :column 5, :line 2421, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2421, :column 10, :line 2421, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2416, :column 7, :line 2416, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2417, :column 5, :line 2417, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2421, :column 5, :line 2421, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2421, :column 10, :line 2421, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2417, :column 4, :line 2417, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2417, :column 5, :line 2417, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2421, :column 4, :line 2421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2421, :column 5, :line 2421, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2421, :column 10, :line 2421, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2416, :column 7, :line 2416, :file "cljs/core.cljs"} int-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 88, :end-line 7661, :column 3, :line 7661, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7661, :column 4, :line 7661, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 7661, :column 9, :line 7661, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 7661, :column 22, :line 7661, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 7661, :column 32, :line 7661, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 7661, :column 45, :line 7661, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 7661, :column 58, :line 7661, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 7661, :column 71, :line 7661, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 7660, :column 8, :line 7660, :file "cljs/core.cljs"} find-and-cache-best-method ^{:arglists (^{:end-column 88, :end-line 7661, :column 3, :line 7661, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7661, :column 4, :line 7661, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 7661, :column 9, :line 7661, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 7661, :column 22, :line 7661, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 7661, :column 32, :line 7661, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 7661, :column 45, :line 7661, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 7661, :column 58, :line 7661, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 7661, :column 71, :line 7661, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 7660, :column 8, :line 7660, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7661, :column 4, :line 7661, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 7661, :column 9, :line 7661, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 7661, :column 22, :line 7661, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 7661, :column 32, :line 7661, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 7661, :column 45, :line 7661, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 7661, :column 58, :line 7661, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 7661, :column 71, :line 7661, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 88, :end-line 7661, :column 3, :line 7661, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7661, :column 4, :line 7661, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 7661, :column 9, :line 7661, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 7661, :column 22, :line 7661, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 7661, :column 32, :line 7661, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 7661, :column 45, :line 7661, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 7661, :column 58, :line 7661, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 7661, :column 71, :line 7661, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 7660, :column 8, :line 7660, :file "cljs/core.cljs"} find-and-cache-best-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1191, :column 3, :line 1191, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1191, :column 4, :line 1191, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1189, :column 8, :line 1189, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1189, :column 16, :line 1189, :file "cljs/core.cljs"} set? ^{:arglists (^{:end-column 6, :end-line 1191, :column 3, :line 1191, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1191, :column 4, :line 1191, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1189, :column 8, :line 1189, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1189, :column 16, :line 1189, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1191, :column 4, :line 1191, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1191, :column 3, :line 1191, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1191, :column 4, :line 1191, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1189, :column 8, :line 1189, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1189, :column 16, :line 1189, :file "cljs/core.cljs"} set?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 1525, :column 10, :line 1525, :file "cljs/core.cljs"} divide ^{:declared true, :end-column 17, :end-line 1525, :column 10, :line 1525, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 17, :end-line 1525, :column 10, :line 1525, :file "cljs/core.cljs"} divide, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 334, :column 15, :line 334, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 334, :column 16, :line 334, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 334, :column 18, :line 334, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 334, :column 25, :line 334, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 334, :column 4, :line 334, :file "cljs/core.cljs"} -pr-writer ^{:arglists (^{:end-column 30, :end-line 334, :column 15, :line 334, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 334, :column 16, :line 334, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 334, :column 18, :line 334, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 334, :column 25, :line 334, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 334, :column 4, :line 334, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 334, :column 16, :line 334, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 334, :column 18, :line 334, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 334, :column 25, :line 334, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 334, :column 15, :line 334, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 334, :column 16, :line 334, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 334, :column 18, :line 334, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 334, :column 25, :line 334, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 334, :column 4, :line 334, :file "cljs/core.cljs"} -pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6873, :column 13, :line 6873, :file "cljs/core.cljs"} []), :end-column 13, :end-line 6873, :column 7, :line 6873, :file "cljs/core.cljs"} flush ^{:arglists (^{:end-column 15, :end-line 6873, :column 13, :line 6873, :file "cljs/core.cljs"} []), :end-column 13, :end-line 6873, :column 7, :line 6873, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6873, :column 13, :line 6873, :file "cljs/core.cljs"} []), :end-column 13, :end-line 6873, :column 7, :line 6873, :file "cljs/core.cljs"} flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 6447, :column 28, :line 6447, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6447, :column 29, :line 6447, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 6447, :column 7, :line 6447, :file "cljs/core.cljs"} set-from-indexed-seq ^{:arglists (^{:end-column 34, :end-line 6447, :column 28, :line 6447, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6447, :column 29, :line 6447, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 6447, :column 7, :line 6447, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 34, :end-line 6447, :column 29, :line 6447, :file "cljs/core.cljs"} iseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 6447, :column 28, :line 6447, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6447, :column 29, :line 6447, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 6447, :column 7, :line 6447, :file "cljs/core.cljs"} set-from-indexed-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6568, :column 3, :line 6568, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6568, :column 4, :line 6568, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6568, :column 9, :line 6568, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.", :end-column 18, :end-line 6565, :column 7, :line 6565, :file "cljs/core.cljs"} take-while ^{:arglists (^{:end-column 14, :end-line 6568, :column 3, :line 6568, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6568, :column 4, :line 6568, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6568, :column 9, :line 6568, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.", :end-column 18, :end-line 6565, :column 7, :line 6565, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 6568, :column 4, :line 6568, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6568, :column 9, :line 6568, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6568, :column 3, :line 6568, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6568, :column 4, :line 6568, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6568, :column 9, :line 6568, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.", :end-column 18, :end-line 6565, :column 7, :line 6565, :file "cljs/core.cljs"} take-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2671, :column 4, :line 2671, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2671, :column 5, :line 2671, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2671, :column 9, :line 2671, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2673, :column 4, :line 2673, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2673, :column 5, :line 2673, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2673, :column 9, :line 2673, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2673, :column 11, :line 2673, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2675, :column 4, :line 2675, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2675, :column 5, :line 2675, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2675, :column 9, :line 2675, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2675, :column 11, :line 2675, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2675, :column 13, :line 2675, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2677, :column 4, :line 2677, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2677, :column 5, :line 2677, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2677, :column 9, :line 2677, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2677, :column 11, :line 2677, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2677, :column 13, :line 2677, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2677, :column 15, :line 2677, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2679, :column 4, :line 2679, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2679, :column 5, :line 2679, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2679, :column 9, :line 2679, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2679, :column 11, :line 2679, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2679, :column 13, :line 2679, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2679, :column 15, :line 2679, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2679, :column 17, :line 2679, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2681, :column 5, :line 2681, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2681, :column 9, :line 2681, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2681, :column 11, :line 2681, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2681, :column 13, :line 2681, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2681, :column 15, :line 2681, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2681, :column 17, :line 2681, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2681, :column 19, :line 2681, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2681, :column 21, :line 2681, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2668, :column 7, :line 2668, :file "cljs/core.cljs"} vary-meta ^{:arglists (^{:end-column 11, :end-line 2671, :column 4, :line 2671, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2671, :column 5, :line 2671, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2671, :column 9, :line 2671, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2673, :column 4, :line 2673, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2673, :column 5, :line 2673, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2673, :column 9, :line 2673, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2673, :column 11, :line 2673, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2675, :column 4, :line 2675, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2675, :column 5, :line 2675, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2675, :column 9, :line 2675, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2675, :column 11, :line 2675, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2675, :column 13, :line 2675, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2677, :column 4, :line 2677, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2677, :column 5, :line 2677, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2677, :column 9, :line 2677, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2677, :column 11, :line 2677, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2677, :column 13, :line 2677, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2677, :column 15, :line 2677, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2679, :column 4, :line 2679, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2679, :column 5, :line 2679, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2679, :column 9, :line 2679, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2679, :column 11, :line 2679, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2679, :column 13, :line 2679, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2679, :column 15, :line 2679, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2679, :column 17, :line 2679, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2681, :column 5, :line 2681, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2681, :column 9, :line 2681, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2681, :column 11, :line 2681, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2681, :column 13, :line 2681, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2681, :column 15, :line 2681, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2681, :column 17, :line 2681, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2681, :column 19, :line 2681, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2681, :column 21, :line 2681, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2668, :column 7, :line 2668, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2671, :column 5, :line 2671, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2671, :column 9, :line 2671, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 2673, :column 5, :line 2673, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2673, :column 9, :line 2673, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2673, :column 11, :line 2673, :file "cljs/core.cljs"} a] [^{:end-column 9, :end-line 2675, :column 5, :line 2675, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2675, :column 9, :line 2675, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2675, :column 11, :line 2675, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2675, :column 13, :line 2675, :file "cljs/core.cljs"} b] [^{:end-column 9, :end-line 2677, :column 5, :line 2677, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2677, :column 9, :line 2677, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2677, :column 11, :line 2677, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2677, :column 13, :line 2677, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2677, :column 15, :line 2677, :file "cljs/core.cljs"} c] [^{:end-column 9, :end-line 2679, :column 5, :line 2679, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2679, :column 9, :line 2679, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2679, :column 11, :line 2679, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2679, :column 13, :line 2679, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2679, :column 15, :line 2679, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2679, :column 17, :line 2679, :file "cljs/core.cljs"} d] [^{:end-column 9, :end-line 2681, :column 5, :line 2681, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2681, :column 9, :line 2681, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2681, :column 11, :line 2681, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2681, :column 13, :line 2681, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2681, :column 15, :line 2681, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2681, :column 17, :line 2681, :file "cljs/core.cljs"} d & ^{:end-column 26, :end-line 2681, :column 21, :line 2681, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2671, :column 4, :line 2671, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2671, :column 5, :line 2671, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2671, :column 9, :line 2671, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2673, :column 4, :line 2673, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2673, :column 5, :line 2673, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2673, :column 9, :line 2673, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2673, :column 11, :line 2673, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2675, :column 4, :line 2675, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2675, :column 5, :line 2675, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2675, :column 9, :line 2675, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2675, :column 11, :line 2675, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2675, :column 13, :line 2675, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2677, :column 4, :line 2677, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2677, :column 5, :line 2677, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2677, :column 9, :line 2677, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2677, :column 11, :line 2677, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2677, :column 13, :line 2677, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2677, :column 15, :line 2677, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2679, :column 4, :line 2679, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2679, :column 5, :line 2679, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2679, :column 9, :line 2679, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2679, :column 11, :line 2679, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2679, :column 13, :line 2679, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2679, :column 15, :line 2679, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2679, :column 17, :line 2679, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2681, :column 5, :line 2681, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2681, :column 9, :line 2681, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2681, :column 11, :line 2681, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2681, :column 13, :line 2681, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2681, :column 15, :line 2681, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2681, :column 17, :line 2681, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2681, :column 19, :line 2681, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2681, :column 21, :line 2681, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2668, :column 7, :line 2668, :file "cljs/core.cljs"} vary-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} INext ^{:impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Range}, :protocol-symbol true, :end-column 20, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} INext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 118, :column 3, :line 118, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 118, :column 4, :line 118, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 117, :column 7, :line 117, :file "cljs/core.cljs"} is_proto_ ^{:arglists (^{:end-column 6, :end-line 118, :column 3, :line 118, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 118, :column 4, :line 118, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 117, :column 7, :line 117, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 118, :column 4, :line 118, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 118, :column 3, :line 118, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 118, :column 4, :line 118, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 117, :column 7, :line 117, :file "cljs/core.cljs"} is_proto_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 229, :column 14, :line 229, :file "cljs/core.cljs"} ICounted ^{:impls #{nil cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/TransientHashMap cljs.core/ChunkBuffer cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/TransientArrayMap cljs.core/RSeq cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/ArrayChunk cljs.core/PersistentTreeSet cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 229, :column 14, :line 229, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 229, :column 14, :line 229, :file "cljs/core.cljs"} ICounted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} IMapEntry ^{:impls #{cljs.core/BlackNode cljs.core/PersistentVector cljs.core/RedNode}, :protocol-symbol true, :end-column 24, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} IMapEntry, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1549, :column 4, :line 1549, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1549, :column 5, :line 1549, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1550, :column 5, :line 1550, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1550, :column 7, :line 1550, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1551, :column 4, :line 1551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1551, :column 5, :line 1551, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1551, :column 7, :line 1551, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1551, :column 9, :line 1551, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1551, :column 11, :line 1551, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1546, :column 8, :line 1546, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1546, :column 16, :line 1546, :file "cljs/core.cljs"} <= ^{:arglists (^{:end-column 7, :end-line 1549, :column 4, :line 1549, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1549, :column 5, :line 1549, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1550, :column 5, :line 1550, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1550, :column 7, :line 1550, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1551, :column 4, :line 1551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1551, :column 5, :line 1551, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1551, :column 7, :line 1551, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1551, :column 9, :line 1551, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1551, :column 11, :line 1551, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1546, :column 8, :line 1546, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1546, :column 16, :line 1546, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1549, :column 5, :line 1549, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1550, :column 5, :line 1550, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1550, :column 7, :line 1550, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1551, :column 5, :line 1551, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1551, :column 7, :line 1551, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1551, :column 11, :line 1551, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1549, :column 4, :line 1549, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1549, :column 5, :line 1549, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1550, :column 5, :line 1550, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1550, :column 7, :line 1550, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1551, :column 4, :line 1551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1551, :column 5, :line 1551, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1551, :column 7, :line 1551, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1551, :column 9, :line 1551, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1551, :column 11, :line 1551, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1546, :column 8, :line 1546, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1546, :column 16, :line 1546, :file "cljs/core.cljs"} <=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2565, :column 4, :line 2565, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2565, :column 5, :line 2565, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2565, :column 11, :line 2565, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2567, :column 4, :line 2567, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2567, :column 5, :line 2567, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2567, :column 11, :line 2567, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2567, :column 15, :line 2567, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2567, :column 17, :line 2567, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2562, :column 7, :line 2562, :file "cljs/core.cljs"} conj! ^{:arglists (^{:end-column 15, :end-line 2565, :column 4, :line 2565, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2565, :column 5, :line 2565, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2565, :column 11, :line 2565, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2567, :column 4, :line 2567, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2567, :column 5, :line 2567, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2567, :column 11, :line 2567, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2567, :column 15, :line 2567, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2567, :column 17, :line 2567, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2562, :column 7, :line 2562, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2565, :column 5, :line 2565, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2565, :column 11, :line 2565, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2567, :column 5, :line 2567, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2567, :column 11, :line 2567, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2567, :column 17, :line 2567, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2565, :column 4, :line 2565, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2565, :column 5, :line 2565, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2565, :column 11, :line 2565, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2567, :column 4, :line 2567, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2567, :column 5, :line 2567, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2567, :column 11, :line 2567, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2567, :column 15, :line 2567, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2567, :column 17, :line 2567, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2562, :column 7, :line 2562, :file "cljs/core.cljs"} conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 274, :column 15, :line 274, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} -pop ^{:arglists (^{:end-column 20, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 274, :column 15, :line 274, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 274, :column 15, :line 274, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 274, :column 15, :line 274, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} -pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3061, :column 4, :line 3061, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3061, :column 5, :line 3061, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3062, :column 4, :line 3062, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3062, :column 5, :line 3062, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3062, :column 7, :line 3062, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3057, :column 7, :line 3057, :file "cljs/core.cljs"} repeatedly ^{:arglists (^{:end-column 7, :end-line 3061, :column 4, :line 3061, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3061, :column 5, :line 3061, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3062, :column 4, :line 3062, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3062, :column 5, :line 3062, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3062, :column 7, :line 3062, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3057, :column 7, :line 3057, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3061, :column 5, :line 3061, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3062, :column 5, :line 3062, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3062, :column 7, :line 3062, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3061, :column 4, :line 3061, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3061, :column 5, :line 3061, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3062, :column 4, :line 3062, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3062, :column 5, :line 3062, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3062, :column 7, :line 3062, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3057, :column 7, :line 3057, :file "cljs/core.cljs"} repeatedly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6531, :column 3, :line 6531, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6531, :column 4, :line 6531, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 6531, :column 9, :line 6531, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 6529, :column 7, :line 6529, :file "cljs/core.cljs"} zipmap ^{:arglists (^{:end-column 14, :end-line 6531, :column 3, :line 6531, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6531, :column 4, :line 6531, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 6531, :column 9, :line 6531, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 6529, :column 7, :line 6529, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 6531, :column 4, :line 6531, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 6531, :column 9, :line 6531, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6531, :column 3, :line 6531, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6531, :column 4, :line 6531, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 6531, :column 9, :line 6531, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 6529, :column 7, :line 6529, :file "cljs/core.cljs"} zipmap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} IStack ^{:impls #{cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RedNode}, :protocol-symbol true, :end-column 21, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} IStack, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 342, :column 18, :line 342, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 342, :column 19, :line 342, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -remove-watch ^{:arglists (^{:end-column 28, :end-line 342, :column 18, :line 342, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 342, :column 19, :line 342, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 342, :column 19, :line 342, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 342, :column 18, :line 342, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 342, :column 19, :line 342, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.", :end-column 14, :end-line 3128, :column 7, :line 3128, :file "cljs/core.cljs"} remove ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.", :end-column 14, :end-line 3128, :column 7, :line 3128, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.", :end-column 14, :end-line 3128, :column 7, :line 3128, :file "cljs/core.cljs"} remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr])} ->BitmapIndexedNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/BitmapIndexedNode [^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr])} ->BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1521, :column 4, :line 1521, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1521, :column 5, :line 1521, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1522, :column 4, :line 1522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1522, :column 5, :line 1522, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1522, :column 7, :line 1522, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1523, :column 4, :line 1523, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1523, :column 5, :line 1523, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1523, :column 7, :line 1523, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1523, :column 9, :line 1523, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1523, :column 11, :line 1523, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1518, :column 15, :line 1518, :file "cljs/core.cljs"} * ^{:arglists (^{:end-column 6, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1521, :column 4, :line 1521, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1521, :column 5, :line 1521, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1522, :column 4, :line 1522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1522, :column 5, :line 1522, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1522, :column 7, :line 1522, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1523, :column 4, :line 1523, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1523, :column 5, :line 1523, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1523, :column 7, :line 1523, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1523, :column 9, :line 1523, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1523, :column 11, :line 1523, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1518, :column 15, :line 1518, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1521, :column 5, :line 1521, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1522, :column 5, :line 1522, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1522, :column 7, :line 1522, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1523, :column 5, :line 1523, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1523, :column 7, :line 1523, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1523, :column 11, :line 1523, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1521, :column 4, :line 1521, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1521, :column 5, :line 1521, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1522, :column 4, :line 1522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1522, :column 5, :line 1522, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1522, :column 7, :line 1522, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1523, :column 4, :line 1523, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1523, :column 5, :line 1523, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1523, :column 7, :line 1523, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1523, :column 9, :line 1523, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1523, :column 11, :line 1523, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1518, :column 15, :line 1518, :file "cljs/core.cljs"} *, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 6840, :column 3, :line 6840, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6840, :column 4, :line 6840, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 6838, :column 7, :line 6838, :file "cljs/core.cljs"} re-pattern ^{:arglists (^{:end-column 6, :end-line 6840, :column 3, :line 6840, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6840, :column 4, :line 6840, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 6838, :column 7, :line 6838, :file "cljs/core.cljs"} {:arglists (^js/RegExp [^{:end-column 6, :end-line 6840, :column 4, :line 6840, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6840, :column 3, :line 6840, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6840, :column 4, :line 6840, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 6838, :column 7, :line 6838, :file "cljs/core.cljs"} re-pattern, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1596, :column 4, :line 1596, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1596, :column 5, :line 1596, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1596, :column 7, :line 1596, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1597, :column 5, :line 1597, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1597, :column 7, :line 1597, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1597, :column 9, :line 1597, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1597, :column 11, :line 1597, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1593, :column 8, :line 1593, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1593, :column 15, :line 1593, :file "cljs/core.cljs"} min ^{:arglists (^{:end-column 7, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1596, :column 4, :line 1596, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1596, :column 5, :line 1596, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1596, :column 7, :line 1596, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1597, :column 5, :line 1597, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1597, :column 7, :line 1597, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1597, :column 9, :line 1597, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1597, :column 11, :line 1597, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1593, :column 8, :line 1593, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1593, :column 15, :line 1593, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1596, :column 5, :line 1596, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1596, :column 7, :line 1596, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1597, :column 5, :line 1597, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1597, :column 7, :line 1597, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1597, :column 11, :line 1597, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1596, :column 4, :line 1596, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1596, :column 5, :line 1596, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1596, :column 7, :line 1596, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1597, :column 5, :line 1597, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1597, :column 7, :line 1597, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1597, :column 9, :line 1597, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1597, :column 11, :line 1597, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1593, :column 8, :line 1593, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1593, :column 15, :line 1593, :file "cljs/core.cljs"} min, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 4202, :column 32, :line 4202, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4202, :column 33, :line 4202, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4202, :column 37, :line 4202, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4202, :column 39, :line 4202, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4202, :column 8, :line 4202, :file "cljs/core.cljs"} array-map-index-of-nil? ^{:arglists (^{:end-column 41, :end-line 4202, :column 32, :line 4202, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4202, :column 33, :line 4202, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4202, :column 37, :line 4202, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4202, :column 39, :line 4202, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4202, :column 8, :line 4202, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4202, :column 33, :line 4202, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4202, :column 37, :line 4202, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4202, :column 39, :line 4202, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 4202, :column 32, :line 4202, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4202, :column 33, :line 4202, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4202, :column 37, :line 4202, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4202, :column 39, :line 4202, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4202, :column 8, :line 4202, :file "cljs/core.cljs"} array-map-index-of-nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 349, :column 22, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} -persistent! ^{:arglists (^{:end-column 29, :end-line 349, :column 22, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 349, :column 22, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} -persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 242, :column 9, :line 242, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 242, :column 10, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 242, :column 15, :line 242, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 242, :column 18, :line 242, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 242, :column 19, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 242, :column 24, :line 242, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 242, :column 26, :line 242, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 242, :column 4, :line 242, :file "cljs/core.cljs"} -nth ^{:arglists (^{:end-column 17, :end-line 242, :column 9, :line 242, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 242, :column 10, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 242, :column 15, :line 242, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 242, :column 18, :line 242, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 242, :column 19, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 242, :column 24, :line 242, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 242, :column 26, :line 242, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 242, :column 4, :line 242, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 242, :column 10, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 242, :column 15, :line 242, :file "cljs/core.cljs"} n] [^{:end-column 24, :end-line 242, :column 19, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 242, :column 24, :line 242, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 242, :column 26, :line 242, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 242, :column 9, :line 242, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 242, :column 10, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 242, :column 15, :line 242, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 242, :column 18, :line 242, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 242, :column 19, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 242, :column 24, :line 242, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 242, :column 26, :line 242, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 242, :column 4, :line 242, :file "cljs/core.cljs"} -nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2598, :column 3, :line 2598, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2598, :column 4, :line 2598, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} pop! ^{:arglists (^{:end-column 10, :end-line 2598, :column 3, :line 2598, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2598, :column 4, :line 2598, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2598, :column 4, :line 2598, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2598, :column 3, :line 2598, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2598, :column 4, :line 2598, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2376, :column 20, :line 2376, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2376, :column 21, :line 2376, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2376, :column 23, :line 2376, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2376, :column 7, :line 2376, :file "cljs/core.cljs"} chunk-append ^{:arglists (^{:end-column 25, :end-line 2376, :column 20, :line 2376, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2376, :column 21, :line 2376, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2376, :column 23, :line 2376, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2376, :column 7, :line 2376, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 2376, :column 21, :line 2376, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2376, :column 23, :line 2376, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2376, :column 20, :line 2376, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2376, :column 21, :line 2376, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2376, :column 23, :line 2376, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2376, :column 7, :line 2376, :file "cljs/core.cljs"} chunk-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7014, :column 3, :line 7014, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7014, :column 4, :line 7014, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7014, :column 6, :line 7014, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} prn-str ^{:arglists (^{:end-column 11, :end-line 7014, :column 3, :line 7014, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7014, :column 4, :line 7014, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7014, :column 6, :line 7014, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7014, :column 6, :line 7014, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7014, :column 3, :line 7014, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7014, :column 4, :line 7014, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7014, :column 6, :line 7014, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} prn-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 315, :column 14, :line 315, :file "cljs/core.cljs"} IReversible ^{:impls #{cljs.core/IndexedSeq cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 26, :end-line 315, :column 14, :line 315, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 315, :column 14, :line 315, :file "cljs/core.cljs"} IReversible, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 2048, :column 28, :line 2048, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2048, :column 29, :line 2048, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2048, :column 8, :line 2048, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2048, :column 16, :line 2048, :file "cljs/core.cljs"} reversible? ^{:arglists (^{:end-column 34, :end-line 2048, :column 28, :line 2048, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2048, :column 29, :line 2048, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2048, :column 8, :line 2048, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2048, :column 16, :line 2048, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 34, :end-line 2048, :column 29, :line 2048, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 2048, :column 28, :line 2048, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2048, :column 29, :line 2048, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2048, :column 8, :line 2048, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2048, :column 16, :line 2048, :file "cljs/core.cljs"} reversible?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 337, :column 24, :line 337, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 337, :column 25, :line 337, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 337, :column 5, :line 337, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 337, :column 13, :line 337, :file "cljs/core.cljs"} -realized? ^{:arglists (^{:end-column 27, :end-line 337, :column 24, :line 337, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 337, :column 25, :line 337, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 337, :column 5, :line 337, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 337, :column 13, :line 337, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 337, :column 25, :line 337, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 337, :column 24, :line 337, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 337, :column 25, :line 337, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 337, :column 5, :line 337, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 337, :column 13, :line 337, :file "cljs/core.cljs"} -realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 341, :column 15, :line 341, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 341, :column 16, :line 341, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 341, :column 21, :line 341, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -add-watch ^{:arglists (^{:end-column 27, :end-line 341, :column 15, :line 341, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 341, :column 16, :line 341, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 341, :column 21, :line 341, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 341, :column 16, :line 341, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 341, :column 21, :line 341, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 341, :column 15, :line 341, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 341, :column 16, :line 341, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 341, :column 21, :line 341, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 283, :column 24, :line 283, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 283, :column 25, :line 283, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 283, :column 27, :line 283, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 283, :column 32, :line 283, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -deref-with-timeout ^{:arglists (^{:end-column 44, :end-line 283, :column 24, :line 283, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 283, :column 25, :line 283, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 283, :column 27, :line 283, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 283, :column 32, :line 283, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 283, :column 25, :line 283, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 283, :column 27, :line 283, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 283, :column 32, :line 283, :file "cljs/core.cljs"} timeout-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 283, :column 24, :line 283, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 283, :column 25, :line 283, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 283, :column 27, :line 283, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 283, :column 32, :line 283, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -deref-with-timeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 841, :column 4, :line 841, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 841, :column 5, :line 841, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 841, :column 10, :line 841, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 845, :column 10, :line 845, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 845, :column 12, :line 845, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 845, :column 14, :line 845, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 837, :column 7, :line 837, :file "cljs/core.cljs"} conj ^{:arglists (^{:end-column 12, :end-line 841, :column 4, :line 841, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 841, :column 5, :line 841, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 841, :column 10, :line 841, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 845, :column 10, :line 845, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 845, :column 12, :line 845, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 845, :column 14, :line 845, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 837, :column 7, :line 837, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 841, :column 5, :line 841, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 841, :column 10, :line 841, :file "cljs/core.cljs"} x] [^{:end-column 10, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 845, :column 10, :line 845, :file "cljs/core.cljs"} x & ^{:end-column 17, :end-line 845, :column 14, :line 845, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 841, :column 4, :line 841, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 841, :column 5, :line 841, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 841, :column 10, :line 841, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 845, :column 10, :line 845, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 845, :column 12, :line 845, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 845, :column 14, :line 845, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 837, :column 7, :line 837, :file "cljs/core.cljs"} conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 319, :column 21, :line 319, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 319, :column 22, :line 319, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 319, :column 27, :line 319, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 319, :column 5, :line 319, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 319, :column 9, :line 319, :file "cljs/core.cljs"} -sorted-seq ^{:arglists (^{:end-column 38, :end-line 319, :column 21, :line 319, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 319, :column 22, :line 319, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 319, :column 27, :line 319, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 319, :column 5, :line 319, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 319, :column 9, :line 319, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 319, :column 22, :line 319, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 319, :column 27, :line 319, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 319, :column 21, :line 319, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 319, :column 22, :line 319, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 319, :column 27, :line 319, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 319, :column 5, :line 319, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 319, :column 9, :line 319, :file "cljs/core.cljs"} -sorted-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3092, :column 3, :line 3092, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3092, :column 4, :line 3092, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3089, :column 8, :line 3089, :file "cljs/core.cljs"} flatten1 ^{:arglists (^{:end-column 10, :end-line 3092, :column 3, :line 3092, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3092, :column 4, :line 3092, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3089, :column 8, :line 3089, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 10, :end-line 3092, :column 4, :line 3092, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3092, :column 3, :line 3092, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3092, :column 4, :line 3092, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3089, :column 8, :line 3089, :file "cljs/core.cljs"} flatten1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 7354, :column 1, :line 7354, :file "cljs/core.cljs"} fixture1 ^{:end-column 17, :end-line 7354, :column 1, :line 7354, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 7354, :column 1, :line 7354, :file "cljs/core.cljs"} fixture1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7176, :column 11, :line 7176, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7176, :column 12, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 7176, :column 14, :line 7176, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 7176, :column 17, :line 7176, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7176, :column 18, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 7176, :column 20, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 7176, :column 22, :line 7176, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 7176, :column 25, :line 7176, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 7176, :column 26, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 7176, :column 28, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 7176, :column 30, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 7176, :column 32, :line 7176, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 7176, :column 35, :line 7176, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 7176, :column 36, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 7176, :column 38, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 7176, :column 40, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 7176, :column 42, :line 7176, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 7176, :column 44, :line 7176, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 7176, :column 4, :line 7176, :file "cljs/core.cljs"} -swap! ^{:arglists (^{:end-column 16, :end-line 7176, :column 11, :line 7176, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7176, :column 12, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 7176, :column 14, :line 7176, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 7176, :column 17, :line 7176, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7176, :column 18, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 7176, :column 20, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 7176, :column 22, :line 7176, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 7176, :column 25, :line 7176, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 7176, :column 26, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 7176, :column 28, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 7176, :column 30, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 7176, :column 32, :line 7176, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 7176, :column 35, :line 7176, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 7176, :column 36, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 7176, :column 38, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 7176, :column 40, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 7176, :column 42, :line 7176, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 7176, :column 44, :line 7176, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 7176, :column 4, :line 7176, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 7176, :column 12, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 7176, :column 14, :line 7176, :file "cljs/core.cljs"} f] [^{:end-column 20, :end-line 7176, :column 18, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 7176, :column 20, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 7176, :column 22, :line 7176, :file "cljs/core.cljs"} a] [^{:end-column 28, :end-line 7176, :column 26, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 7176, :column 28, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 7176, :column 30, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 7176, :column 32, :line 7176, :file "cljs/core.cljs"} b] [^{:end-column 38, :end-line 7176, :column 36, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 7176, :column 38, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 7176, :column 40, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 7176, :column 42, :line 7176, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 7176, :column 44, :line 7176, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7176, :column 11, :line 7176, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7176, :column 12, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 7176, :column 14, :line 7176, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 7176, :column 17, :line 7176, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7176, :column 18, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 7176, :column 20, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 7176, :column 22, :line 7176, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 7176, :column 25, :line 7176, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 7176, :column 26, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 7176, :column 28, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 7176, :column 30, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 7176, :column 32, :line 7176, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 7176, :column 35, :line 7176, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 7176, :column 36, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 7176, :column 38, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 7176, :column 40, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 7176, :column 42, :line 7176, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 7176, :column 44, :line 7176, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 7176, :column 4, :line 7176, :file "cljs/core.cljs"} -swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length* ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 1240, :column 17, :line 1240, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1240, :column 18, :line 1240, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1240, :column 22, :line 1240, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1240, :column 7, :line 1240, :file "cljs/core.cljs"} js-delete ^{:arglists (^{:end-column 26, :end-line 1240, :column 17, :line 1240, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1240, :column 18, :line 1240, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1240, :column 22, :line 1240, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1240, :column 7, :line 1240, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1240, :column 18, :line 1240, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1240, :column 22, :line 1240, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 1240, :column 17, :line 1240, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1240, :column 18, :line 1240, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1240, :column 22, :line 1240, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1240, :column 7, :line 1240, :file "cljs/core.cljs"} js-delete, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_ ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy])} ->MultiFn ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy])} {:arglists (^cljs.core/MultiFn [^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy])} ->MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7394, :column 15, :line 7394, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7394, :column 16, :line 7394, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 7394, :column 7, :line 7394, :file "cljs/core.cljs"} key->js ^{:arglists (^{:end-column 18, :end-line 7394, :column 15, :line 7394, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7394, :column 16, :line 7394, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 7394, :column 7, :line 7394, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 7394, :column 16, :line 7394, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7394, :column 15, :line 7394, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7394, :column 16, :line 7394, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 7394, :column 7, :line 7394, :file "cljs/core.cljs"} key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 7387, :column 14, :line 7387, :file "cljs/core.cljs"} IEncodeJS ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 7387, :column 14, :line 7387, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 7387, :column 14, :line 7387, :file "cljs/core.cljs"} IEncodeJS, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3293, :column 17, :line 3293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3293, :column 18, :line 3293, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3293, :column 23, :line 3293, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3293, :column 29, :line 3293, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3293, :column 8, :line 3293, :file "cljs/core.cljs"} new-path ^{:arglists (^{:end-column 34, :end-line 3293, :column 17, :line 3293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3293, :column 18, :line 3293, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3293, :column 23, :line 3293, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3293, :column 29, :line 3293, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3293, :column 8, :line 3293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 3293, :column 18, :line 3293, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3293, :column 23, :line 3293, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3293, :column 29, :line 3293, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3293, :column 17, :line 3293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3293, :column 18, :line 3293, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3293, :column 23, :line 3293, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3293, :column 29, :line 3293, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3293, :column 8, :line 3293, :file "cljs/core.cljs"} new-path, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 7273, :column 3, :line 7273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7273, :column 4, :line 7273, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 7273, :column 6, :line 7273, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 7273, :column 13, :line 7273, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 7269, :column 7, :line 7269, :file "cljs/core.cljs"} compare-and-set! ^{:arglists (^{:end-column 20, :end-line 7273, :column 3, :line 7273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7273, :column 4, :line 7273, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 7273, :column 6, :line 7273, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 7273, :column 13, :line 7273, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 7269, :column 7, :line 7269, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 7273, :column 4, :line 7273, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 7273, :column 6, :line 7273, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 7273, :column 13, :line 7273, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7273, :column 3, :line 7273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7273, :column 4, :line 7273, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 7273, :column 6, :line 7273, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 7273, :column 13, :line 7273, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 7269, :column 7, :line 7269, :file "cljs/core.cljs"} compare-and-set!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 462, :column 10, :line 462, :file "cljs/core.cljs"} array-seq ^{:arglists (^{:end-column 11, :end-line 742, :column 4, :line 742, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 742, :column 5, :line 742, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 744, :column 4, :line 744, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 744, :column 5, :line 744, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 744, :column 11, :line 744, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 741, :column 7, :line 741, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 742, :column 5, :line 742, :file "cljs/core.cljs"} array] [^{:end-column 11, :end-line 744, :column 5, :line 744, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 744, :column 11, :line 744, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 742, :column 4, :line 742, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 742, :column 5, :line 742, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 744, :column 4, :line 744, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 744, :column 5, :line 744, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 744, :column 11, :line 744, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 741, :column 7, :line 741, :file "cljs/core.cljs"} array-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1252, :column 4, :line 1252, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1252, :column 5, :line 1252, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1252, :column 10, :line 1252, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1252, :column 12, :line 1252, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1252, :column 15, :line 1252, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1252, :column 17, :line 1252, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1251, :column 8, :line 1251, :file "cljs/core.cljs"} array-copy-downward ^{:arglists (^{:end-column 21, :end-line 1252, :column 4, :line 1252, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1252, :column 5, :line 1252, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1252, :column 10, :line 1252, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1252, :column 12, :line 1252, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1252, :column 15, :line 1252, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1252, :column 17, :line 1252, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1251, :column 8, :line 1251, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1252, :column 5, :line 1252, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1252, :column 10, :line 1252, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1252, :column 12, :line 1252, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1252, :column 15, :line 1252, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1252, :column 17, :line 1252, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1252, :column 4, :line 1252, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1252, :column 5, :line 1252, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1252, :column 10, :line 1252, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1252, :column 12, :line 1252, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1252, :column 15, :line 1252, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1252, :column 17, :line 1252, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1251, :column 8, :line 1251, :file "cljs/core.cljs"} array-copy-downward, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4814, :column 24, :line 4814, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 4814, :column 25, :line 4814, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 4814, :column 36, :line 4814, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 4814, :column 41, :line 4814, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 4814, :column 8, :line 4814, :file "cljs/core.cljs"} pack-array-node ^{:arglists (^{:end-column 45, :end-line 4814, :column 24, :line 4814, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 4814, :column 25, :line 4814, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 4814, :column 36, :line 4814, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 4814, :column 41, :line 4814, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 4814, :column 8, :line 4814, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 4814, :column 25, :line 4814, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 4814, :column 36, :line 4814, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 4814, :column 41, :line 4814, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4814, :column 24, :line 4814, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 4814, :column 25, :line 4814, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 4814, :column 36, :line 4814, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 4814, :column 41, :line 4814, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 4814, :column 8, :line 4814, :file "cljs/core.cljs"} pack-array-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3071, :column 4, :line 3071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3071, :column 5, :line 3071, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3071, :column 8, :line 3071, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3077, :column 4, :line 3077, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3077, :column 5, :line 3077, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3077, :column 8, :line 3077, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3077, :column 11, :line 3077, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3077, :column 13, :line 3077, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3069, :column 7, :line 3069, :file "cljs/core.cljs"} interleave ^{:arglists (^{:end-column 11, :end-line 3071, :column 4, :line 3071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3071, :column 5, :line 3071, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3071, :column 8, :line 3071, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3077, :column 4, :line 3077, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3077, :column 5, :line 3077, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3077, :column 8, :line 3077, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3077, :column 11, :line 3077, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3077, :column 13, :line 3077, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3069, :column 7, :line 3069, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3071, :column 5, :line 3071, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3071, :column 8, :line 3071, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 8, :end-line 3077, :column 5, :line 3077, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3077, :column 8, :line 3077, :file "cljs/core.cljs"} c2 & ^{:end-column 19, :end-line 3077, :column 13, :line 3077, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3071, :column 4, :line 3071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3071, :column 5, :line 3071, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3071, :column 8, :line 3071, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3077, :column 4, :line 3077, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3077, :column 5, :line 3077, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3077, :column 8, :line 3077, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3077, :column 11, :line 3077, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3077, :column 13, :line 3077, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3069, :column 7, :line 3069, :file "cljs/core.cljs"} interleave, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 6893, :column 10, :line 6893, :file "cljs/core.cljs"} print-map ^{:arglists (^{:end-column 42, :end-line 7056, :column 17, :line 7056, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7056, :column 18, :line 7056, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7056, :column 20, :line 7056, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7056, :column 30, :line 7056, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7056, :column 37, :line 7056, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 7056, :column 7, :line 7056, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 7056, :column 18, :line 7056, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7056, :column 20, :line 7056, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7056, :column 30, :line 7056, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7056, :column 37, :line 7056, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 7056, :column 17, :line 7056, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7056, :column 18, :line 7056, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7056, :column 20, :line 7056, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7056, :column 30, :line 7056, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7056, :column 37, :line 7056, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 7056, :column 7, :line 7056, :file "cljs/core.cljs"} print-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1214, :column 3, :line 1214, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1214, :column 4, :line 1214, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1212, :column 8, :line 1212, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} map? ^{:arglists (^{:end-column 6, :end-line 1214, :column 3, :line 1214, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1214, :column 4, :line 1214, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1212, :column 8, :line 1212, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1214, :column 4, :line 1214, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1214, :column 3, :line 1214, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1214, :column 4, :line 1214, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1212, :column 8, :line 1212, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} map?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 969, :column 4, :line 969, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 969, :column 5, :line 969, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 969, :column 7, :line 969, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 987, :column 4, :line 987, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 987, :column 5, :line 987, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 987, :column 7, :line 987, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 987, :column 9, :line 987, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 967, :column 7, :line 967, :file "cljs/core.cljs"} get ^{:arglists (^{:end-column 9, :end-line 969, :column 4, :line 969, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 969, :column 5, :line 969, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 969, :column 7, :line 969, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 987, :column 4, :line 987, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 987, :column 5, :line 987, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 987, :column 7, :line 987, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 987, :column 9, :line 987, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 967, :column 7, :line 967, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 969, :column 5, :line 969, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 969, :column 7, :line 969, :file "cljs/core.cljs"} k] [^{:end-column 7, :end-line 987, :column 5, :line 987, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 987, :column 7, :line 987, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 987, :column 9, :line 987, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 969, :column 4, :line 969, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 969, :column 5, :line 969, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 969, :column 7, :line 969, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 987, :column 4, :line 987, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 987, :column 5, :line 987, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 987, :column 7, :line 987, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 987, :column 9, :line 987, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 967, :column 7, :line 967, :file "cljs/core.cljs"} get, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2733, :column 16, :line 2733, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 2733, :column 17, :line 2733, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 2733, :column 7, :line 2733, :file "cljs/core.cljs"} identity ^{:arglists (^{:end-column 19, :end-line 2733, :column 16, :line 2733, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 2733, :column 17, :line 2733, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 2733, :column 7, :line 2733, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 2733, :column 17, :line 2733, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2733, :column 16, :line 2733, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 2733, :column 17, :line 2733, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 2733, :column 7, :line 2733, :file "cljs/core.cljs"} identity, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3160, :column 3, :line 3160, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3160, :column 4, :line 3160, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3160, :column 7, :line 3160, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", :end-column 12, :end-line 3157, :column 7, :line 3157, :file "cljs/core.cljs"} into ^{:arglists (^{:end-column 12, :end-line 3160, :column 3, :line 3160, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3160, :column 4, :line 3160, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3160, :column 7, :line 3160, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", :end-column 12, :end-line 3157, :column 7, :line 3157, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3160, :column 4, :line 3160, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3160, :column 7, :line 3160, :file "cljs/core.cljs"} from]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3160, :column 3, :line 3160, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3160, :column 4, :line 3160, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3160, :column 7, :line 3160, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", :end-column 12, :end-line 3157, :column 7, :line 3157, :file "cljs/core.cljs"} into, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1709, :column 3, :line 1709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1707, :column 7, :line 1707, :file "cljs/core.cljs"} long ^{:arglists (^{:end-column 6, :end-line 1709, :column 3, :line 1709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1707, :column 7, :line 1707, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1709, :column 3, :line 1709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1707, :column 7, :line 1707, :file "cljs/core.cljs"} long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1612, :column 22, :line 1612, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1612, :column 23, :line 1612, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1612, :column 15, :line 1612, :file "cljs/core.cljs"} double ^{:arglists (^{:end-column 25, :end-line 1612, :column 22, :line 1612, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1612, :column 23, :line 1612, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1612, :column 15, :line 1612, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 1612, :column 23, :line 1612, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1612, :column 22, :line 1612, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1612, :column 23, :line 1612, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1612, :column 15, :line 1612, :file "cljs/core.cljs"} double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2262, :column 10, :line 2262, :file "cljs/core.cljs"} ChunkBuffer {:op :type, :name ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2262, :column 10, :line 2262, :file "cljs/core.cljs"} ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 2262, :column 22, :line 2262, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end], :protocols #{Object cljs.core/ICounted}}, ^{:arglists (^{:end-column 15, :end-line 266, :column 9, :line 266, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 266, :column 10, :line 266, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 266, :column 4, :line 266, :file "cljs/core.cljs"} -key ^{:arglists (^{:end-column 15, :end-line 266, :column 9, :line 266, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 266, :column 10, :line 266, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 266, :column 4, :line 266, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 266, :column 10, :line 266, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 266, :column 9, :line 266, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 266, :column 10, :line 266, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 266, :column 4, :line 266, :file "cljs/core.cljs"} -key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} nfirst ^{:arglists (^{:end-column 9, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} nfirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 383, :column 10, :line 383, :file "cljs/core.cljs"} StringBufferWriter {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 383, :column 10, :line 383, :file "cljs/core.cljs"} StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 383, :column 29, :line 383, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb], :protocols #{cljs.core/IWriter}}, ^{:arglists (^{:end-column 6, :end-line 1103, :column 3, :line 1103, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1103, :column 4, :line 1103, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1101, :column 7, :line 1101, :file "cljs/core.cljs"} meta ^{:arglists (^{:end-column 6, :end-line 1103, :column 3, :line 1103, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1103, :column 4, :line 1103, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1101, :column 7, :line 1101, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1103, :column 4, :line 1103, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1103, :column 3, :line 1103, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1103, :column 4, :line 1103, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1101, :column 7, :line 1101, :file "cljs/core.cljs"} meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 44, :end-line 3370, :column 27, :line 3370, :file "cljs/core.cljs"} tv-editable-tail ^{:arglists (^{:end-column 29, :end-line 3756, :column 25, :line 3756, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 3756, :column 26, :line 3756, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 3756, :column 8, :line 3756, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 29, :end-line 3756, :column 26, :line 3756, :file "cljs/core.cljs"} tl]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 3756, :column 25, :line 3756, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 3756, :column 26, :line 3756, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 3756, :column 8, :line 3756, :file "cljs/core.cljs"} tv-editable-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 295, :column 15, :line 295, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 295, :column 16, :line 295, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 295, :column 21, :line 295, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 295, :column 23, :line 295, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 295, :column 4, :line 295, :file "cljs/core.cljs"} -kv-reduce ^{:arglists (^{:end-column 28, :end-line 295, :column 15, :line 295, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 295, :column 16, :line 295, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 295, :column 21, :line 295, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 295, :column 23, :line 295, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 295, :column 4, :line 295, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 295, :column 16, :line 295, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 295, :column 21, :line 295, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 295, :column 23, :line 295, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 295, :column 15, :line 295, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 295, :column 16, :line 295, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 295, :column 21, :line 295, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 295, :column 23, :line 295, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 295, :column 4, :line 295, :file "cljs/core.cljs"} -kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 300, :column 14, :line 300, :file "cljs/core.cljs"} IHash ^{:impls #{cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq ^{:end-column 22, :end-line 572, :column 14, :line 572, :file "cljs/core.cljs"} default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 20, :end-line 300, :column 14, :line 300, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 300, :column 14, :line 300, :file "cljs/core.cljs"} IHash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1771, :column 3, :line 1771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1771, :column 4, :line 1771, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1771, :column 6, :line 1771, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1769, :column 7, :line 1769, :file "cljs/core.cljs"} bit-and-not ^{:arglists (^{:end-column 8, :end-line 1771, :column 3, :line 1771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1771, :column 4, :line 1771, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1771, :column 6, :line 1771, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1769, :column 7, :line 1769, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1771, :column 4, :line 1771, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1771, :column 6, :line 1771, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1771, :column 3, :line 1771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1771, :column 4, :line 1771, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1771, :column 6, :line 1771, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1769, :column 7, :line 1769, :file "cljs/core.cljs"} bit-and-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 322, :column 16, :line 322, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 322, :column 17, :line 322, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 322, :column 4, :line 322, :file "cljs/core.cljs"} -comparator ^{:arglists (^{:end-column 22, :end-line 322, :column 16, :line 322, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 322, :column 17, :line 322, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 322, :column 4, :line 322, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 322, :column 17, :line 322, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 322, :column 16, :line 322, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 322, :column 17, :line 322, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 322, :column 4, :line 322, :file "cljs/core.cljs"} -comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1629, :column 4, :line 1629, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1630, :column 4, :line 1630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1630, :column 5, :line 1630, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1631, :column 4, :line 1631, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1631, :column 5, :line 1631, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1631, :column 7, :line 1631, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1632, :column 9, :line 1632, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1632, :column 11, :line 1632, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1627, :column 8, :line 1627, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1627, :column 15, :line 1627, :file "cljs/core.cljs"} unchecked-add-int ^{:arglists (^{:end-column 6, :end-line 1629, :column 4, :line 1629, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1630, :column 4, :line 1630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1630, :column 5, :line 1630, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1631, :column 4, :line 1631, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1631, :column 5, :line 1631, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1631, :column 7, :line 1631, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1632, :column 9, :line 1632, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1632, :column 11, :line 1632, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1627, :column 8, :line 1627, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1627, :column 15, :line 1627, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1630, :column 5, :line 1630, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1631, :column 5, :line 1631, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1631, :column 7, :line 1631, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1632, :column 11, :line 1632, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1629, :column 4, :line 1629, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1630, :column 4, :line 1630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1630, :column 5, :line 1630, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1631, :column 4, :line 1631, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1631, :column 5, :line 1631, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1631, :column 7, :line 1631, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1632, :column 9, :line 1632, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1632, :column 11, :line 1632, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1627, :column 8, :line 1627, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1627, :column 15, :line 1627, :file "cljs/core.cljs"} unchecked-add-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1932, :column 3, :line 1932, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 1932, :column 8, :line 1932, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 1927, :column 8, :line 1927, :file "cljs/core.cljs"} extend-object! ^{:arglists (^{:end-column 15, :end-line 1932, :column 3, :line 1932, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 1932, :column 8, :line 1932, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 1927, :column 8, :line 1927, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 1932, :column 8, :line 1932, :file "cljs/core.cljs"} fn-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1932, :column 3, :line 1932, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 1932, :column 8, :line 1932, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 1927, :column 8, :line 1927, :file "cljs/core.cljs"} extend-object!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 3346, :column 17, :line 3346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3346, :column 18, :line 3346, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3346, :column 21, :line 3346, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3346, :column 27, :line 3346, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3346, :column 32, :line 3346, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3346, :column 34, :line 3346, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3346, :column 8, :line 3346, :file "cljs/core.cljs"} do-assoc ^{:arglists (^{:end-column 38, :end-line 3346, :column 17, :line 3346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3346, :column 18, :line 3346, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3346, :column 21, :line 3346, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3346, :column 27, :line 3346, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3346, :column 32, :line 3346, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3346, :column 34, :line 3346, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3346, :column 8, :line 3346, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 21, :end-line 3346, :column 18, :line 3346, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3346, :column 21, :line 3346, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3346, :column 27, :line 3346, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3346, :column 32, :line 3346, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3346, :column 34, :line 3346, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 3346, :column 17, :line 3346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3346, :column 18, :line 3346, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3346, :column 21, :line 3346, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3346, :column 27, :line 3346, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3346, :column 32, :line 3346, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3346, :column 34, :line 3346, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3346, :column 8, :line 3346, :file "cljs/core.cljs"} do-assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7304, :column 3, :line 7304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7304, :column 4, :line 7304, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7304, :column 9, :line 7304, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 7302, :column 7, :line 7302, :file "cljs/core.cljs"} reset-meta! ^{:arglists (^{:end-column 11, :end-line 7304, :column 3, :line 7304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7304, :column 4, :line 7304, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7304, :column 9, :line 7304, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 7302, :column 7, :line 7302, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7304, :column 4, :line 7304, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7304, :column 9, :line 7304, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7304, :column 3, :line 7304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7304, :column 4, :line 7304, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7304, :column 9, :line 7304, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 7302, :column 7, :line 7302, :file "cljs/core.cljs"} reset-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta])} ->KeySeq ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/KeySeq [^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta])} ->KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 297, :column 14, :line 297, :file "cljs/core.cljs"} IEquiv ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq ^{:end-column 21, :end-line 561, :column 14, :line 561, :file "cljs/core.cljs"} number ^{:end-column 22, :end-line 833, :column 14, :line 833, :file "cljs/core.cljs"} default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/NeverEquiv Date cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 21, :end-line 297, :column 14, :line 297, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 297, :column 14, :line 297, :file "cljs/core.cljs"} IEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 5542, :column 27, :line 5542, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5542, :column 28, :line 5542, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 5542, :column 33, :line 5542, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 5542, :column 35, :line 5542, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 5542, :column 8, :line 5542, :file "cljs/core.cljs"} tree-map-kv-reduce ^{:arglists (^{:end-column 40, :end-line 5542, :column 27, :line 5542, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5542, :column 28, :line 5542, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 5542, :column 33, :line 5542, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 5542, :column 35, :line 5542, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 5542, :column 8, :line 5542, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 5542, :column 28, :line 5542, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 5542, :column 33, :line 5542, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 5542, :column 35, :line 5542, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5542, :column 27, :line 5542, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5542, :column 28, :line 5542, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 5542, :column 33, :line 5542, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 5542, :column 35, :line 5542, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 5542, :column 8, :line 5542, :file "cljs/core.cljs"} tree-map-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3039, :column 3, :line 3039, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3039, :column 4, :line 3039, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3037, :column 7, :line 3037, :file "cljs/core.cljs"} cycle ^{:arglists (^{:end-column 9, :end-line 3039, :column 3, :line 3039, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3039, :column 4, :line 3039, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3037, :column 7, :line 3037, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3039, :column 4, :line 3039, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3039, :column 3, :line 3039, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3039, :column 4, :line 3039, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3037, :column 7, :line 3037, :file "cljs/core.cljs"} cycle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 280, :column 10, :line 280, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 280, :column 11, :line 280, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 280, :column 3, :line 280, :file "cljs/core.cljs"} -deref ^{:arglists (^{:end-column 13, :end-line 280, :column 10, :line 280, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 280, :column 11, :line 280, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 280, :column 3, :line 280, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 280, :column 11, :line 280, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 280, :column 10, :line 280, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 280, :column 11, :line 280, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 280, :column 3, :line 280, :file "cljs/core.cljs"} -deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1179, :column 3, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1176, :column 8, :line 1176, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1176, :column 16, :line 1176, :file "cljs/core.cljs"} empty? ^{:arglists (^{:end-column 9, :end-line 1179, :column 3, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1176, :column 8, :line 1176, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1176, :column 16, :line 1176, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1179, :column 3, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1176, :column 8, :line 1176, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1176, :column 16, :line 1176, :file "cljs/core.cljs"} empty?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1610, :column 21, :line 1610, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1610, :column 22, :line 1610, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1610, :column 8, :line 1610, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1610, :column 15, :line 1610, :file "cljs/core.cljs"} short ^{:arglists (^{:end-column 24, :end-line 1610, :column 21, :line 1610, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1610, :column 22, :line 1610, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1610, :column 8, :line 1610, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1610, :column 15, :line 1610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1610, :column 22, :line 1610, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1610, :column 21, :line 1610, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1610, :column 22, :line 1610, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1610, :column 8, :line 1610, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1610, :column 15, :line 1610, :file "cljs/core.cljs"} short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7388, :column 13, :line 7388, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7388, :column 14, :line 7388, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7388, :column 4, :line 7388, :file "cljs/core.cljs"} -clj->js ^{:arglists (^{:end-column 16, :end-line 7388, :column 13, :line 7388, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7388, :column 14, :line 7388, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7388, :column 4, :line 7388, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7388, :column 14, :line 7388, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7388, :column 13, :line 7388, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7388, :column 14, :line 7388, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7388, :column 4, :line 7388, :file "cljs/core.cljs"} -clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 371, :column 20, :line 371, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 371, :column 4, :line 371, :file "cljs/core.cljs"} -chunked-first ^{:arglists (^{:end-column 25, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 371, :column 20, :line 371, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 371, :column 4, :line 371, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 371, :column 20, :line 371, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 371, :column 20, :line 371, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 371, :column 4, :line 371, :file "cljs/core.cljs"} -chunked-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3186, :column 3, :line 3186, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3186, :column 4, :line 3186, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3186, :column 9, :line 3186, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} filterv ^{:arglists (^{:end-column 14, :end-line 3186, :column 3, :line 3186, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3186, :column 4, :line 3186, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3186, :column 9, :line 3186, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 3186, :column 4, :line 3186, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3186, :column 9, :line 3186, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3186, :column 3, :line 3186, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3186, :column 4, :line 3186, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3186, :column 9, :line 3186, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} filterv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 3370, :column 10, :line 3370, :file "cljs/core.cljs"} tv-editable-root ^{:arglists (^{:end-column 31, :end-line 3753, :column 25, :line 3753, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 3753, :column 26, :line 3753, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 3753, :column 8, :line 3753, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 31, :end-line 3753, :column 26, :line 3753, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 3753, :column 25, :line 3753, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 3753, :column 26, :line 3753, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 3753, :column 8, :line 3753, :file "cljs/core.cljs"} tv-editable-root, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 33, :end-line 400, :column 28, :line 400, :file "cljs/core.cljs"} hash ^{:arglists (^{:end-column 15, :end-line 1156, :column 12, :line 1156, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1156, :column 13, :line 1156, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 1156, :column 7, :line 1156, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1156, :column 13, :line 1156, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1156, :column 12, :line 1156, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1156, :column 13, :line 1156, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 1156, :column 7, :line 1156, :file "cljs/core.cljs"} hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1738, :column 3, :line 1738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1738, :column 6, :line 1738, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1736, :column 7, :line 1736, :file "cljs/core.cljs"} quot ^{:arglists (^{:end-column 8, :end-line 1738, :column 3, :line 1738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1738, :column 6, :line 1738, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1736, :column 7, :line 1736, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1738, :column 6, :line 1738, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1738, :column 3, :line 1738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1738, :column 6, :line 1738, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1736, :column 7, :line 1736, :file "cljs/core.cljs"} quot, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1618, :column 32, :line 1618, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1618, :column 33, :line 1618, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1618, :column 8, :line 1618, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1618, :column 15, :line 1618, :file "cljs/core.cljs"} unchecked-double ^{:arglists (^{:end-column 35, :end-line 1618, :column 32, :line 1618, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1618, :column 33, :line 1618, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1618, :column 8, :line 1618, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1618, :column 15, :line 1618, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 1618, :column 33, :line 1618, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1618, :column 32, :line 1618, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1618, :column 33, :line 1618, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1618, :column 8, :line 1618, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1618, :column 15, :line 1618, :file "cljs/core.cljs"} unchecked-double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash])} ->ChunkedCons ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ChunkedCons [^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash])} ->ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 357, :column 14, :line 357, :file "cljs/core.cljs"} ITransientVector ^{:impls #{cljs.core/TransientVector}, :protocol-symbol true, :end-column 31, :end-line 357, :column 14, :line 357, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 357, :column 14, :line 357, :file "cljs/core.cljs"} ITransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1904, :column 10, :line 1904, :file "cljs/core.cljs"} key ^{:arglists (^{:end-column 14, :end-line 6147, :column 3, :line 6147, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6147, :column 4, :line 6147, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6145, :column 7, :line 6145, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6147, :column 4, :line 6147, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6147, :column 3, :line 6147, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6147, :column 4, :line 6147, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6145, :column 7, :line 6145, :file "cljs/core.cljs"} key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1724, :column 13, :line 1724, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1724, :column 14, :line 1724, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} longs ^{:arglists (^{:end-column 16, :end-line 1724, :column 13, :line 1724, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1724, :column 14, :line 1724, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1724, :column 14, :line 1724, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1724, :column 13, :line 1724, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1724, :column 14, :line 1724, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} longs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2686, :column 4, :line 2686, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2686, :column 5, :line 2686, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2687, :column 4, :line 2687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2687, :column 5, :line 2687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2687, :column 7, :line 2687, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2688, :column 7, :line 2688, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2688, :column 9, :line 2688, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2688, :column 11, :line 2688, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2684, :column 8, :line 2684, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2684, :column 16, :line 2684, :file "cljs/core.cljs"} not= ^{:arglists (^{:end-column 7, :end-line 2686, :column 4, :line 2686, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2686, :column 5, :line 2686, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2687, :column 4, :line 2687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2687, :column 5, :line 2687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2687, :column 7, :line 2687, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2688, :column 7, :line 2688, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2688, :column 9, :line 2688, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2688, :column 11, :line 2688, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2684, :column 8, :line 2684, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2684, :column 16, :line 2684, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 2686, :column 5, :line 2686, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 2687, :column 5, :line 2687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2687, :column 7, :line 2687, :file "cljs/core.cljs"} y] ^cljs.core/boolean [^{:end-column 7, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2688, :column 7, :line 2688, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2688, :column 11, :line 2688, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2686, :column 4, :line 2686, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2686, :column 5, :line 2686, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2687, :column 4, :line 2687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2687, :column 5, :line 2687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2687, :column 7, :line 2687, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2688, :column 7, :line 2688, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2688, :column 9, :line 2688, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2688, :column 11, :line 2688, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2684, :column 8, :line 2684, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2684, :column 16, :line 2684, :file "cljs/core.cljs"} not=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 103, :column 24, :line 103, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 103, :column 25, :line 103, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 103, :column 8, :line 103, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 103, :column 16, :line 103, :file "cljs/core.cljs"} string? ^{:arglists (^{:end-column 27, :end-line 103, :column 24, :line 103, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 103, :column 25, :line 103, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 103, :column 8, :line 103, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 103, :column 16, :line 103, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 103, :column 25, :line 103, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 103, :column 24, :line 103, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 103, :column 25, :line 103, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 103, :column 8, :line 103, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 103, :column 16, :line 103, :file "cljs/core.cljs"} string?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 7359, :column 10, :line 7359, :file "cljs/core.cljs"} Delay {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 7359, :column 10, :line 7359, :file "cljs/core.cljs"} Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 25, :end-line 7359, :column 16, :line 7359, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f], :protocols #{cljs.core/IPending cljs.core/IDeref}}, ^{:arglists (^{:end-column 14, :end-line 6982, :column 3, :line 6982, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6982, :column 4, :line 6982, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6982, :column 9, :line 6982, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 6979, :column 7, :line 6979, :file "cljs/core.cljs"} pr-str-with-opts ^{:arglists (^{:end-column 14, :end-line 6982, :column 3, :line 6982, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6982, :column 4, :line 6982, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6982, :column 9, :line 6982, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 6979, :column 7, :line 6979, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 6982, :column 4, :line 6982, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6982, :column 9, :line 6982, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6982, :column 3, :line 6982, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6982, :column 4, :line 6982, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6982, :column 9, :line 6982, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 6979, :column 7, :line 6979, :file "cljs/core.cljs"} pr-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta])} ->Symbol ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/Symbol [^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta])} ->Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline* ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1663, :column 4, :line 1663, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1663, :column 5, :line 1663, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1664, :column 4, :line 1664, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1664, :column 5, :line 1664, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1664, :column 7, :line 1664, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1665, :column 4, :line 1665, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1665, :column 5, :line 1665, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1665, :column 9, :line 1665, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1665, :column 11, :line 1665, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1660, :column 8, :line 1660, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1660, :column 15, :line 1660, :file "cljs/core.cljs"} unchecked-multiply-int ^{:arglists (^{:end-column 6, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1663, :column 4, :line 1663, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1663, :column 5, :line 1663, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1664, :column 4, :line 1664, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1664, :column 5, :line 1664, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1664, :column 7, :line 1664, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1665, :column 4, :line 1665, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1665, :column 5, :line 1665, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1665, :column 9, :line 1665, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1665, :column 11, :line 1665, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1660, :column 8, :line 1660, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1660, :column 15, :line 1660, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1663, :column 5, :line 1663, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1664, :column 5, :line 1664, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1664, :column 7, :line 1664, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1665, :column 5, :line 1665, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1665, :column 11, :line 1665, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1663, :column 4, :line 1663, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1663, :column 5, :line 1663, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1664, :column 4, :line 1664, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1664, :column 5, :line 1664, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1664, :column 7, :line 1664, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1665, :column 4, :line 1665, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1665, :column 5, :line 1665, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1665, :column 9, :line 1665, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1665, :column 11, :line 1665, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1660, :column 8, :line 1660, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1660, :column 15, :line 1660, :file "cljs/core.cljs"} unchecked-multiply-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 38, :end-line 1925, :column 27, :line 1925, :file "cljs/core.cljs"} chunk-rest ^{:arglists (^{:end-column 21, :end-line 2385, :column 18, :line 2385, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2385, :column 19, :line 2385, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2385, :column 7, :line 2385, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2385, :column 19, :line 2385, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2385, :column 18, :line 2385, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2385, :column 19, :line 2385, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2385, :column 7, :line 2385, :file "cljs/core.cljs"} chunk-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7874, :column 2, :line 7874, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7874, :column 3, :line 7874, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 7872, :column 7, :line 7872, :file "cljs/core.cljs"} remove-all-methods ^{:arglists (^{:end-column 11, :end-line 7874, :column 2, :line 7874, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7874, :column 3, :line 7874, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 7872, :column 7, :line 7872, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 7874, :column 3, :line 7874, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7874, :column 2, :line 7874, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7874, :column 3, :line 7874, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 7872, :column 7, :line 7872, :file "cljs/core.cljs"} remove-all-methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7483, :column 5, :line 7483, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 7488, :column 4, :line 7488, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7488, :column 5, :line 7488, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7488, :column 7, :line 7488, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7488, :column 9, :line 7488, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 7475, :column 7, :line 7475, :file "cljs/core.cljs"} trampoline ^{:arglists (^{:end-column 7, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7483, :column 5, :line 7483, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 7488, :column 4, :line 7488, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7488, :column 5, :line 7488, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7488, :column 7, :line 7488, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7488, :column 9, :line 7488, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 7475, :column 7, :line 7475, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7483, :column 5, :line 7483, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 7488, :column 5, :line 7488, :file "cljs/core.cljs"} f & ^{:end-column 14, :end-line 7488, :column 9, :line 7488, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7483, :column 5, :line 7483, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 7488, :column 4, :line 7488, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7488, :column 5, :line 7488, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7488, :column 7, :line 7488, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7488, :column 9, :line 7488, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 7475, :column 7, :line 7475, :file "cljs/core.cljs"} trampoline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1 ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1436, :column 10, :line 1436, :file "cljs/core.cljs"} vec ^{:arglists (^{:end-column 17, :end-line 3542, :column 11, :line 3542, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3542, :column 12, :line 3542, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3542, :column 7, :line 3542, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 17, :end-line 3542, :column 12, :line 3542, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3542, :column 11, :line 3542, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3542, :column 12, :line 3542, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3542, :column 7, :line 3542, :file "cljs/core.cljs"} vec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta* ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 340, :column 20, :line 340, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 340, :column 21, :line 340, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 340, :column 26, :line 340, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 340, :column 33, :line 340, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 340, :column 4, :line 340, :file "cljs/core.cljs"} -notify-watches ^{:arglists (^{:end-column 40, :end-line 340, :column 20, :line 340, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 340, :column 21, :line 340, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 340, :column 26, :line 340, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 340, :column 33, :line 340, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 340, :column 4, :line 340, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 340, :column 21, :line 340, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 340, :column 26, :line 340, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 340, :column 33, :line 340, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 340, :column 20, :line 340, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 340, :column 21, :line 340, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 340, :column 26, :line 340, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 340, :column 33, :line 340, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 340, :column 4, :line 340, :file "cljs/core.cljs"} -notify-watches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 7697, :column 10, :line 7697, :file "cljs/core.cljs"} MultiFn {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 7697, :column 10, :line 7697, :file "cljs/core.cljs"} MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 75, :end-line 7698, :column 18, :line 7697, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy], :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}}, ^{:arglists (^{:end-column 6, :end-line 1699, :column 3, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1697, :column 7, :line 1697, :file "cljs/core.cljs"} int ^{:arglists (^{:end-column 6, :end-line 1699, :column 3, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1697, :column 7, :line 1697, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1699, :column 3, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1697, :column 7, :line 1697, :file "cljs/core.cljs"} int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta])} ->ValSeq ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/ValSeq [^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta])} ->ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1750, :column 4, :line 1750, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).", :tag ^{:end-column 15, :end-line 1748, :column 8, :line 1748, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1748, :column 15, :line 1748, :file "cljs/core.cljs"} rand ^{:arglists (^{:end-column 6, :end-line 7494, :column 4, :line 7494, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 7491, :column 7, :line 7491, :file "cljs/core.cljs"} {:arglists ([] ^number [^{:end-column 7, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7494, :column 4, :line 7494, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 7491, :column 7, :line 7491, :file "cljs/core.cljs"} rand, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 802, :column 3, :line 802, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 802, :column 4, :line 802, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 800, :column 7, :line 800, :file "cljs/core.cljs"} second ^{:arglists (^{:end-column 9, :end-line 802, :column 3, :line 802, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 802, :column 4, :line 802, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 800, :column 7, :line 800, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 802, :column 4, :line 802, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 802, :column 3, :line 802, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 802, :column 4, :line 802, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 800, :column 7, :line 800, :file "cljs/core.cljs"} second, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 34, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IEditableCollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/PersistentHashSet}, :protocol-symbol true, :end-column 34, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 34, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IEditableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} hash-combine ^{:arglists (^{:end-column 31, :end-line 1890, :column 20, :line 1890, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1890, :column 21, :line 1890, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 1890, :column 26, :line 1890, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 1890, :column 7, :line 1890, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 1890, :column 21, :line 1890, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 1890, :column 26, :line 1890, :file "cljs/core.cljs"} hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1890, :column 20, :line 1890, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1890, :column 21, :line 1890, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 1890, :column 26, :line 1890, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 1890, :column 7, :line 1890, :file "cljs/core.cljs"} hash-combine, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1561, :column 5, :line 1561, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1562, :column 4, :line 1562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1562, :column 5, :line 1562, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1562, :column 7, :line 1562, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1563, :column 4, :line 1563, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1563, :column 5, :line 1563, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1563, :column 7, :line 1563, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1563, :column 9, :line 1563, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1563, :column 11, :line 1563, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1558, :column 8, :line 1558, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1558, :column 16, :line 1558, :file "cljs/core.cljs"} > ^{:arglists (^{:end-column 7, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1561, :column 5, :line 1561, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1562, :column 4, :line 1562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1562, :column 5, :line 1562, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1562, :column 7, :line 1562, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1563, :column 4, :line 1563, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1563, :column 5, :line 1563, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1563, :column 7, :line 1563, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1563, :column 9, :line 1563, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1563, :column 11, :line 1563, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1558, :column 8, :line 1558, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1558, :column 16, :line 1558, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1561, :column 5, :line 1561, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1562, :column 5, :line 1562, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1562, :column 7, :line 1562, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1563, :column 5, :line 1563, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1563, :column 7, :line 1563, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1563, :column 11, :line 1563, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1561, :column 5, :line 1561, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1562, :column 4, :line 1562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1562, :column 5, :line 1562, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1562, :column 7, :line 1562, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1563, :column 4, :line 1563, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1563, :column 5, :line 1563, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1563, :column 7, :line 1563, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1563, :column 9, :line 1563, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1563, :column 11, :line 1563, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1558, :column 8, :line 1558, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1558, :column 16, :line 1558, :file "cljs/core.cljs"} >, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 378, :column 18, :line 378, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} string, :end-column 18, :end-line 378, :column 12, :line 378, :file "cljs/core.cljs"} -name ^{:arglists (^{:end-column 21, :end-line 378, :column 18, :line 378, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} string, :end-column 18, :end-line 378, :column 12, :line 378, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 378, :column 18, :line 378, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} string, :end-column 18, :end-line 378, :column 12, :line 378, :file "cljs/core.cljs"} -name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6490, :column 3, :line 6490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6490, :column 4, :line 6490, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 6490, :column 9, :line 6490, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap", :end-column 15, :end-line 6486, :column 7, :line 6486, :file "cljs/core.cljs"} replace ^{:arglists (^{:end-column 14, :end-line 6490, :column 3, :line 6490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6490, :column 4, :line 6490, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 6490, :column 9, :line 6490, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap", :end-column 15, :end-line 6486, :column 7, :line 6486, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 6490, :column 4, :line 6490, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 6490, :column 9, :line 6490, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6490, :column 3, :line 6490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6490, :column 4, :line 6490, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 6490, :column 9, :line 6490, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap", :end-column 15, :end-line 6486, :column 7, :line 6486, :file "cljs/core.cljs"} replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash])} ->Subvec ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Subvec [^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash])} ->Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1198, :column 3, :line 1198, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1198, :column 4, :line 1198, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1196, :column 8, :line 1196, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1196, :column 16, :line 1196, :file "cljs/core.cljs"} associative? ^{:arglists (^{:end-column 6, :end-line 1198, :column 3, :line 1198, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1198, :column 4, :line 1198, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1196, :column 8, :line 1196, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1196, :column 16, :line 1196, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1198, :column 4, :line 1198, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1198, :column 3, :line 1198, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1198, :column 4, :line 1198, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1196, :column 8, :line 1196, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1196, :column 16, :line 1196, :file "cljs/core.cljs"} associative?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1704, :column 3, :line 1704, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1704, :column 4, :line 1704, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1702, :column 7, :line 1702, :file "cljs/core.cljs"} unchecked-int ^{:arglists (^{:end-column 6, :end-line 1704, :column 3, :line 1704, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1704, :column 4, :line 1704, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1702, :column 7, :line 1702, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1704, :column 4, :line 1704, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1704, :column 3, :line 1704, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1704, :column 4, :line 1704, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1702, :column 7, :line 1702, :file "cljs/core.cljs"} unchecked-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 1235, :column 15, :line 1235, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1235, :column 16, :line 1235, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1235, :column 7, :line 1235, :file "cljs/core.cljs"} js-keys ^{:arglists (^{:end-column 20, :end-line 1235, :column 15, :line 1235, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1235, :column 16, :line 1235, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1235, :column 7, :line 1235, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 20, :end-line 1235, :column 16, :line 1235, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 1235, :column 15, :line 1235, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1235, :column 16, :line 1235, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1235, :column 7, :line 1235, :file "cljs/core.cljs"} js-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 2164, :column 25, :line 2164, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2164, :column 26, :line 2164, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2164, :column 8, :line 2164, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2164, :column 16, :line 2164, :file "cljs/core.cljs"} keyword? ^{:arglists (^{:end-column 28, :end-line 2164, :column 25, :line 2164, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2164, :column 26, :line 2164, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2164, :column 8, :line 2164, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2164, :column 16, :line 2164, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 28, :end-line 2164, :column 26, :line 2164, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 2164, :column 25, :line 2164, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2164, :column 26, :line 2164, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2164, :column 8, :line 2164, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2164, :column 16, :line 2164, :file "cljs/core.cljs"} keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7377, :column 3, :line 7377, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 7375, :column 7, :line 7375, :file "cljs/core.cljs"} force ^{:arglists (^{:end-column 6, :end-line 7377, :column 3, :line 7377, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 7375, :column 7, :line 7375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7377, :column 3, :line 7377, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 7375, :column 7, :line 7375, :file "cljs/core.cljs"} force, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7512, :column 6, :line 7512, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 7508, :column 7, :line 7508, :file "cljs/core.cljs"} group-by ^{:arglists (^{:end-column 11, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7512, :column 6, :line 7512, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 7508, :column 7, :line 7508, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7512, :column 6, :line 7512, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7512, :column 6, :line 7512, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 7508, :column 7, :line 7508, :file "cljs/core.cljs"} group-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 316, :column 15, :line 316, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 316, :column 16, :line 316, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 316, :column 5, :line 316, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 316, :column 9, :line 316, :file "cljs/core.cljs"} -rseq ^{:arglists (^{:end-column 21, :end-line 316, :column 15, :line 316, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 316, :column 16, :line 316, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 316, :column 5, :line 316, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 316, :column 9, :line 316, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 316, :column 16, :line 316, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 316, :column 15, :line 316, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 316, :column 16, :line 316, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 316, :column 5, :line 316, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 316, :column 9, :line 316, :file "cljs/core.cljs"} -rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7051, :column 3, :line 7051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7051, :column 4, :line 7051, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7051, :column 6, :line 7051, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7049, :column 7, :line 7049, :file "cljs/core.cljs"} prn ^{:arglists (^{:end-column 11, :end-line 7051, :column 3, :line 7051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7051, :column 4, :line 7051, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7051, :column 6, :line 7051, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7049, :column 7, :line 7049, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7051, :column 6, :line 7051, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7051, :column 3, :line 7051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7051, :column 4, :line 7051, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7051, :column 6, :line 7051, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7049, :column 7, :line 7049, :file "cljs/core.cljs"} prn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 3773, :column 20, :line 3773, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3773, :column 21, :line 3773, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 3773, :column 24, :line 3773, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3773, :column 30, :line 3773, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 3773, :column 8, :line 3773, :file "cljs/core.cljs"} tv-pop-tail ^{:arglists (^{:end-column 35, :end-line 3773, :column 20, :line 3773, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3773, :column 21, :line 3773, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 3773, :column 24, :line 3773, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3773, :column 30, :line 3773, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 3773, :column 8, :line 3773, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 3773, :column 21, :line 3773, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 3773, :column 24, :line 3773, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3773, :column 30, :line 3773, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 3773, :column 20, :line 3773, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3773, :column 21, :line 3773, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 3773, :column 24, :line 3773, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3773, :column 30, :line 3773, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 3773, :column 8, :line 3773, :file "cljs/core.cljs"} tv-pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches])} ->Atom ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches])} {:arglists (^cljs.core/Atom [^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches])} ->Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 45, :end-line 4542, :column 27, :line 4542, :file "cljs/core.cljs"} PersistentHashMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5171, :column 10, :line 5171, :file "cljs/core.cljs"} PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 86, :end-line 5171, :column 28, :line 5171, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1655, :column 4, :line 1655, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1656, :column 4, :line 1656, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1656, :column 5, :line 1656, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1657, :column 4, :line 1657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1657, :column 5, :line 1657, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1657, :column 7, :line 1657, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1658, :column 4, :line 1658, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1658, :column 5, :line 1658, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1658, :column 7, :line 1658, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1658, :column 9, :line 1658, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1658, :column 11, :line 1658, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1653, :column 8, :line 1653, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1653, :column 15, :line 1653, :file "cljs/core.cljs"} unchecked-multiply ^{:arglists (^{:end-column 6, :end-line 1655, :column 4, :line 1655, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1656, :column 4, :line 1656, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1656, :column 5, :line 1656, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1657, :column 4, :line 1657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1657, :column 5, :line 1657, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1657, :column 7, :line 1657, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1658, :column 4, :line 1658, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1658, :column 5, :line 1658, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1658, :column 7, :line 1658, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1658, :column 9, :line 1658, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1658, :column 11, :line 1658, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1653, :column 8, :line 1653, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1653, :column 15, :line 1653, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1656, :column 5, :line 1656, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1657, :column 5, :line 1657, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1657, :column 7, :line 1657, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1658, :column 5, :line 1658, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1658, :column 7, :line 1658, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1658, :column 11, :line 1658, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1655, :column 4, :line 1655, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1656, :column 4, :line 1656, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1656, :column 5, :line 1656, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1657, :column 4, :line 1657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1657, :column 5, :line 1657, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1657, :column 7, :line 1657, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1658, :column 4, :line 1658, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1658, :column 5, :line 1658, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1658, :column 7, :line 1658, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1658, :column 9, :line 1658, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1658, :column 11, :line 1658, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1653, :column 8, :line 1653, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1653, :column 15, :line 1653, :file "cljs/core.cljs"} unchecked-multiply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5114, :column 10, :line 5114, :file "cljs/core.cljs"} ArrayNodeSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5114, :column 10, :line 5114, :file "cljs/core.cljs"} ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 5114, :column 23, :line 5114, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2723, :column 8, :line 2723, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2723, :column 16, :line 2723, :file "cljs/core.cljs"} even? ^{:arglists (^{:end-column 7, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2723, :column 8, :line 2723, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2723, :column 16, :line 2723, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2723, :column 8, :line 2723, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2723, :column 16, :line 2723, :file "cljs/core.cljs"} even?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1634, :column 21, :line 1634, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1634, :column 22, :line 1634, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1634, :column 7, :line 1634, :file "cljs/core.cljs"} unchecked-dec ^{:arglists (^{:end-column 24, :end-line 1634, :column 21, :line 1634, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1634, :column 22, :line 1634, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1634, :column 7, :line 1634, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1634, :column 22, :line 1634, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1634, :column 21, :line 1634, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1634, :column 22, :line 1634, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1634, :column 7, :line 1634, :file "cljs/core.cljs"} unchecked-dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 52, :end-line 4924, :column 39, :line 4924, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 4924, :column 44, :line 4924, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 4924, :column 48, :line 4924, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 4924, :column 8, :line 4924, :file "cljs/core.cljs"} hash-collision-node-find-index ^{:arglists (^{:end-column 52, :end-line 4924, :column 39, :line 4924, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 4924, :column 44, :line 4924, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 4924, :column 48, :line 4924, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 4924, :column 8, :line 4924, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 44, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 4924, :column 44, :line 4924, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 4924, :column 48, :line 4924, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 52, :end-line 4924, :column 39, :line 4924, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 4924, :column 44, :line 4924, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 4924, :column 48, :line 4924, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 4924, :column 8, :line 4924, :file "cljs/core.cljs"} hash-collision-node-find-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4328, :column 32, :line 4328, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4328, :column 33, :line 4328, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4328, :column 37, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4328, :column 39, :line 4328, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4328, :column 7, :line 4328, :file "cljs/core.cljs"} persistent-array-map-seq ^{:arglists (^{:end-column 45, :end-line 4328, :column 32, :line 4328, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4328, :column 33, :line 4328, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4328, :column 37, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4328, :column 39, :line 4328, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4328, :column 7, :line 4328, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4328, :column 33, :line 4328, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4328, :column 37, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4328, :column 39, :line 4328, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4328, :column 32, :line 4328, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4328, :column 33, :line 4328, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4328, :column 37, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4328, :column 39, :line 4328, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4328, :column 7, :line 4328, :file "cljs/core.cljs"} persistent-array-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2457, :column 4, :line 2457, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2457, :column 5, :line 2457, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2461, :column 4, :line 2461, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2461, :column 5, :line 2461, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2461, :column 10, :line 2461, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2456, :column 7, :line 2456, :file "cljs/core.cljs"} double-array ^{:arglists (^{:end-column 17, :end-line 2457, :column 4, :line 2457, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2457, :column 5, :line 2457, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2461, :column 4, :line 2461, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2461, :column 5, :line 2461, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2461, :column 10, :line 2461, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2456, :column 7, :line 2456, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2457, :column 5, :line 2457, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2461, :column 5, :line 2461, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2461, :column 10, :line 2461, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2457, :column 4, :line 2457, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2457, :column 5, :line 2457, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2461, :column 4, :line 2461, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2461, :column 5, :line 2461, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2461, :column 10, :line 2461, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2456, :column 7, :line 2456, :file "cljs/core.cljs"} double-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta])} ->EmptyList ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/EmptyList [^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta])} ->EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 747, :column 20, :line 747, :file "cljs/core.cljs"} seq-reduce ^{:arglists (^{:end-column 12, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1423, :column 5, :line 1423, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1423, :column 7, :line 1423, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1427, :column 4, :line 1427, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1427, :column 5, :line 1427, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1427, :column 7, :line 1427, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1427, :column 11, :line 1427, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1422, :column 8, :line 1422, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1423, :column 5, :line 1423, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1423, :column 7, :line 1423, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1427, :column 5, :line 1427, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1427, :column 7, :line 1427, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1427, :column 11, :line 1427, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1423, :column 5, :line 1423, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1423, :column 7, :line 1423, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1427, :column 4, :line 1427, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1427, :column 5, :line 1427, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1427, :column 7, :line 1427, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1427, :column 11, :line 1427, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1422, :column 8, :line 1422, :file "cljs/core.cljs"} seq-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2505, :column 3, :line 2505, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2505, :column 4, :line 2505, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2504, :column 7, :line 2504, :file "cljs/core.cljs"} spread ^{:arglists (^{:end-column 12, :end-line 2505, :column 3, :line 2505, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2505, :column 4, :line 2505, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2504, :column 7, :line 2504, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 2505, :column 4, :line 2505, :file "cljs/core.cljs"} arglist]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2505, :column 3, :line 2505, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2505, :column 4, :line 2505, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2504, :column 7, :line 2504, :file "cljs/core.cljs"} spread, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 5457, :column 21, :line 5457, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5457, :column 22, :line 5457, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 5457, :column 26, :line 5457, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5457, :column 30, :line 5457, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 5457, :column 34, :line 5457, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} balance-left ^{:arglists (^{:end-column 40, :end-line 5457, :column 21, :line 5457, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5457, :column 22, :line 5457, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 5457, :column 26, :line 5457, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5457, :column 30, :line 5457, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 5457, :column 34, :line 5457, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 5457, :column 22, :line 5457, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 5457, :column 26, :line 5457, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5457, :column 30, :line 5457, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 5457, :column 34, :line 5457, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5457, :column 21, :line 5457, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5457, :column 22, :line 5457, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 5457, :column 26, :line 5457, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5457, :column 30, :line 5457, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 5457, :column 34, :line 5457, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} balance-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 2051, :column 17, :line 2051, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2051, :column 18, :line 2051, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2051, :column 8, :line 2051, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2051, :column 12, :line 2051, :file "cljs/core.cljs"} rseq ^{:arglists (^{:end-column 23, :end-line 2051, :column 17, :line 2051, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2051, :column 18, :line 2051, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2051, :column 8, :line 2051, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2051, :column 12, :line 2051, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 316, :column 5, :line 316, :file "cljs/core.cljs"} clj [^{:end-column 23, :end-line 2051, :column 18, :line 2051, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2051, :column 17, :line 2051, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2051, :column 18, :line 2051, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2051, :column 8, :line 2051, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2051, :column 12, :line 2051, :file "cljs/core.cljs"} rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7957, :column 3, :line 7957, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7957, :column 4, :line 7957, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 7952, :column 7, :line 7952, :file "cljs/core.cljs"} ex-cause ^{:arglists (^{:end-column 7, :end-line 7957, :column 3, :line 7957, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7957, :column 4, :line 7957, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 7952, :column 7, :line 7952, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7957, :column 4, :line 7957, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7957, :column 3, :line 7957, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7957, :column 4, :line 7957, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 7952, :column 7, :line 7952, :file "cljs/core.cljs"} ex-cause, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 7172, :column 14, :line 7172, :file "cljs/core.cljs"} IReset ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 7172, :column 14, :line 7172, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 7172, :column 14, :line 7172, :file "cljs/core.cljs"} IReset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 232, :column 14, :line 232, :file "cljs/core.cljs"} IEmptyableCollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 35, :end-line 232, :column 14, :line 232, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 232, :column 14, :line 232, :file "cljs/core.cljs"} IEmptyableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4248, :column 27, :line 4248, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4248, :column 28, :line 4248, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4248, :column 30, :line 4248, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4248, :column 8, :line 4248, :file "cljs/core.cljs"} array-map-index-of ^{:arglists (^{:end-column 32, :end-line 4248, :column 27, :line 4248, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4248, :column 28, :line 4248, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4248, :column 30, :line 4248, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4248, :column 8, :line 4248, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 4248, :column 28, :line 4248, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4248, :column 30, :line 4248, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4248, :column 27, :line 4248, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4248, :column 28, :line 4248, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4248, :column 30, :line 4248, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4248, :column 8, :line 4248, :file "cljs/core.cljs"} array-map-index-of, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7948, :column 3, :line 7948, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7948, :column 4, :line 7948, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} ex-message ^{:arglists (^{:end-column 7, :end-line 7948, :column 3, :line 7948, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7948, :column 4, :line 7948, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7948, :column 4, :line 7948, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7948, :column 3, :line 7948, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7948, :column 4, :line 7948, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} ex-message, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 6869, :column 20, :line 6869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6869, :column 21, :line 6869, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 6869, :column 7, :line 6869, :file "cljs/core.cljs"} string-print ^{:arglists (^{:end-column 23, :end-line 6869, :column 20, :line 6869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6869, :column 21, :line 6869, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 6869, :column 7, :line 6869, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 23, :end-line 6869, :column 21, :line 6869, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 6869, :column 20, :line 6869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6869, :column 21, :line 6869, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 6869, :column 7, :line 6869, :file "cljs/core.cljs"} string-print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1611, :column 21, :line 1611, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1611, :column 22, :line 1611, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1611, :column 8, :line 1611, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1611, :column 15, :line 1611, :file "cljs/core.cljs"} float ^{:arglists (^{:end-column 24, :end-line 1611, :column 21, :line 1611, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1611, :column 22, :line 1611, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1611, :column 8, :line 1611, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1611, :column 15, :line 1611, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1611, :column 22, :line 1611, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1611, :column 21, :line 1611, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1611, :column 22, :line 1611, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1611, :column 8, :line 1611, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1611, :column 15, :line 1611, :file "cljs/core.cljs"} float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 7355, :column 1, :line 7355, :file "cljs/core.cljs"} fixture2 ^{:end-column 17, :end-line 7355, :column 1, :line 7355, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 7355, :column 1, :line 7355, :file "cljs/core.cljs"} fixture2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 312, :column 14, :line 312, :file "cljs/core.cljs"} IRecord ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 312, :column 14, :line 312, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 312, :column 14, :line 312, :file "cljs/core.cljs"} IRecord, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7009, :column 3, :line 7009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7009, :column 4, :line 7009, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7009, :column 6, :line 7009, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7007, :column 7, :line 7007, :file "cljs/core.cljs"} pr-str ^{:arglists (^{:end-column 11, :end-line 7009, :column 3, :line 7009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7009, :column 4, :line 7009, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7009, :column 6, :line 7009, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7007, :column 7, :line 7007, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7009, :column 6, :line 7009, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7009, :column 3, :line 7009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7009, :column 4, :line 7009, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7009, :column 6, :line 7009, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7007, :column 7, :line 7007, :file "cljs/core.cljs"} pr-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 3322, :column 32, :line 3322, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3322, :column 33, :line 3322, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3322, :column 8, :line 3322, :file "cljs/core.cljs"} first-array-for-longvec ^{:arglists (^{:end-column 36, :end-line 3322, :column 32, :line 3322, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3322, :column 33, :line 3322, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3322, :column 8, :line 3322, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 3322, :column 33, :line 3322, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 3322, :column 32, :line 3322, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3322, :column 33, :line 3322, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3322, :column 8, :line 3322, :file "cljs/core.cljs"} first-array-for-longvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2514, :column 4, :line 2514, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2515, :column 4, :line 2515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2515, :column 5, :line 2515, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2516, :column 4, :line 2516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2516, :column 5, :line 2516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2516, :column 7, :line 2516, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2524, :column 4, :line 2524, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2524, :column 5, :line 2524, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2524, :column 7, :line 2524, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2524, :column 9, :line 2524, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2524, :column 11, :line 2524, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2512, :column 7, :line 2512, :file "cljs/core.cljs"} concat ^{:arglists (^{:end-column 6, :end-line 2514, :column 4, :line 2514, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2515, :column 4, :line 2515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2515, :column 5, :line 2515, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2516, :column 4, :line 2516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2516, :column 5, :line 2516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2516, :column 7, :line 2516, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2524, :column 4, :line 2524, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2524, :column 5, :line 2524, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2524, :column 7, :line 2524, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2524, :column 9, :line 2524, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2524, :column 11, :line 2524, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2512, :column 7, :line 2512, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2515, :column 5, :line 2515, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2516, :column 5, :line 2516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2516, :column 7, :line 2516, :file "cljs/core.cljs"} y] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2524, :column 5, :line 2524, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2524, :column 7, :line 2524, :file "cljs/core.cljs"} y & ^{:end-column 14, :end-line 2524, :column 11, :line 2524, :file "cljs/core.cljs"} zs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2514, :column 4, :line 2514, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2515, :column 4, :line 2515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2515, :column 5, :line 2515, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2516, :column 4, :line 2516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2516, :column 5, :line 2516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2516, :column 7, :line 2516, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2524, :column 4, :line 2524, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2524, :column 5, :line 2524, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2524, :column 7, :line 2524, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2524, :column 9, :line 2524, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2524, :column 11, :line 2524, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2512, :column 7, :line 2512, :file "cljs/core.cljs"} concat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7691, :column 13, :line 7691, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7691, :column 14, :line 7691, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} -methods ^{:arglists (^{:end-column 17, :end-line 7691, :column 13, :line 7691, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7691, :column 14, :line 7691, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 7691, :column 14, :line 7691, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7691, :column 13, :line 7691, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7691, :column 14, :line 7691, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} -methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 282, :column 14, :line 282, :file "cljs/core.cljs"} IDerefWithTimeout ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 282, :column 14, :line 282, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 282, :column 14, :line 282, :file "cljs/core.cljs"} IDerefWithTimeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 450, :column 4, :line 450, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 450, :column 5, :line 450, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 454, :column 4, :line 454, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 454, :column 5, :line 454, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 454, :column 8, :line 454, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 449, :column 7, :line 449, :file "cljs/core.cljs"} symbol ^{:arglists (^{:end-column 10, :end-line 450, :column 4, :line 450, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 450, :column 5, :line 450, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 454, :column 4, :line 454, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 454, :column 5, :line 454, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 454, :column 8, :line 454, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 449, :column 7, :line 449, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 450, :column 5, :line 450, :file "cljs/core.cljs"} name] ^cljs.core/Symbol [^{:end-column 8, :end-line 454, :column 5, :line 454, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 454, :column 8, :line 454, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 450, :column 4, :line 450, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 450, :column 5, :line 450, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 454, :column 4, :line 454, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 454, :column 5, :line 454, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 454, :column 8, :line 454, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 449, :column 7, :line 449, :file "cljs/core.cljs"} symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2408, :column 3, :line 2408, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2408, :column 4, :line 2408, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2405, :column 7, :line 2405, :file "cljs/core.cljs"} to-array-2d ^{:arglists (^{:end-column 9, :end-line 2408, :column 3, :line 2408, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2408, :column 4, :line 2408, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2405, :column 7, :line 2405, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 9, :end-line 2408, :column 4, :line 2408, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2408, :column 3, :line 2408, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2408, :column 4, :line 2408, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2405, :column 7, :line 2405, :file "cljs/core.cljs"} to-array-2d, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 3634, :column 10, :line 3634, :file "cljs/core.cljs"} Subvec {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 3634, :column 10, :line 3634, :file "cljs/core.cljs"} Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 3634, :column 17, :line 3634, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 7921, :column 10, :line 7921, :file "cljs/core.cljs"} ExceptionInfo {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 7921, :column 10, :line 7921, :file "cljs/core.cljs"} ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 44, :end-line 7921, :column 24, :line 7921, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause], :protocols #{}}, ^{:declared true, :end-column 14, :end-line 1673, :column 10, :line 1673, :file "cljs/core.cljs"} mod ^{:arglists (^{:end-column 8, :end-line 1733, :column 3, :line 1733, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1733, :column 6, :line 1733, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1731, :column 7, :line 1731, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1733, :column 6, :line 1733, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1733, :column 3, :line 1733, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1733, :column 6, :line 1733, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1731, :column 7, :line 1731, :file "cljs/core.cljs"} mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} ISet ^{:impls #{cljs.core/PersistentHashSet cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 19, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} ISet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1119, :column 3, :line 1119, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1119, :column 4, :line 1119, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} pop ^{:arglists (^{:end-column 9, :end-line 1119, :column 3, :line 1119, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1119, :column 4, :line 1119, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1119, :column 4, :line 1119, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1119, :column 3, :line 1119, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1119, :column 4, :line 1119, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 336, :column 14, :line 336, :file "cljs/core.cljs"} IPending ^{:impls #{cljs.core/Delay}, :protocol-symbol true, :end-column 23, :end-line 336, :column 14, :line 336, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 336, :column 14, :line 336, :file "cljs/core.cljs"} IPending, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 321, :column 21, :line 321, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 321, :column 4, :line 321, :file "cljs/core.cljs"} -entry-key ^{:arglists (^{:end-column 27, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 321, :column 21, :line 321, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 321, :column 4, :line 321, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 321, :column 21, :line 321, :file "cljs/core.cljs"} entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 321, :column 21, :line 321, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 321, :column 4, :line 321, :file "cljs/core.cljs"} -entry-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 3356, :column 17, :line 3356, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3356, :column 18, :line 3356, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3356, :column 21, :line 3356, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3356, :column 27, :line 3356, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3356, :column 8, :line 3356, :file "cljs/core.cljs"} pop-tail ^{:arglists (^{:end-column 32, :end-line 3356, :column 17, :line 3356, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3356, :column 18, :line 3356, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3356, :column 21, :line 3356, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3356, :column 27, :line 3356, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3356, :column 8, :line 3356, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 3356, :column 18, :line 3356, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3356, :column 21, :line 3356, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3356, :column 27, :line 3356, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 3356, :column 17, :line 3356, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3356, :column 18, :line 3356, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3356, :column 21, :line 3356, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3356, :column 27, :line 3356, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3356, :column 8, :line 3356, :file "cljs/core.cljs"} pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2587, :column 5, :line 2587, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2587, :column 11, :line 2587, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2589, :column 4, :line 2589, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2589, :column 5, :line 2589, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2589, :column 11, :line 2589, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2589, :column 15, :line 2589, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2589, :column 17, :line 2589, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2585, :column 7, :line 2585, :file "cljs/core.cljs"} dissoc! ^{:arglists (^{:end-column 15, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2587, :column 5, :line 2587, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2587, :column 11, :line 2587, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2589, :column 4, :line 2589, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2589, :column 5, :line 2589, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2589, :column 11, :line 2589, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2589, :column 15, :line 2589, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2589, :column 17, :line 2589, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2585, :column 7, :line 2585, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2587, :column 5, :line 2587, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2587, :column 11, :line 2587, :file "cljs/core.cljs"} key] ^^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2589, :column 5, :line 2589, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2589, :column 11, :line 2589, :file "cljs/core.cljs"} key & ^{:end-column 20, :end-line 2589, :column 17, :line 2589, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2587, :column 5, :line 2587, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2587, :column 11, :line 2587, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2589, :column 4, :line 2589, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2589, :column 5, :line 2589, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2589, :column 11, :line 2589, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2589, :column 15, :line 2589, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2589, :column 17, :line 2589, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2585, :column 7, :line 2585, :file "cljs/core.cljs"} dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 6729, :column 4, :line 6729, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6729, :column 5, :line 6729, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6729, :column 7, :line 6729, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6734, :column 4, :line 6734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6734, :column 5, :line 6734, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6734, :column 7, :line 6734, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 6734, :column 12, :line 6734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 6726, :column 7, :line 6726, :file "cljs/core.cljs"} reductions ^{:arglists (^{:end-column 12, :end-line 6729, :column 4, :line 6729, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6729, :column 5, :line 6729, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6729, :column 7, :line 6729, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6734, :column 4, :line 6734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6734, :column 5, :line 6734, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6734, :column 7, :line 6734, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 6734, :column 12, :line 6734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 6726, :column 7, :line 6726, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 6729, :column 5, :line 6729, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6729, :column 7, :line 6729, :file "cljs/core.cljs"} coll] ^cljs.core/Cons [^{:end-column 7, :end-line 6734, :column 5, :line 6734, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6734, :column 7, :line 6734, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 6734, :column 12, :line 6734, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 6729, :column 4, :line 6729, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6729, :column 5, :line 6729, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6729, :column 7, :line 6729, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6734, :column 4, :line 6734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6734, :column 5, :line 6734, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6734, :column 7, :line 6734, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 6734, :column 12, :line 6734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 6726, :column 7, :line 6726, :file "cljs/core.cljs"} reductions, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 668, :column 16, :line 668, :file "cljs/core.cljs"} indexed? ^{:arglists (^{:end-column 6, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 668, :column 16, :line 668, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 668, :column 16, :line 668, :file "cljs/core.cljs"} indexed?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1514, :column 4, :line 1514, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1514, :column 5, :line 1514, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1515, :column 4, :line 1515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1515, :column 5, :line 1515, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1515, :column 7, :line 1515, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1516, :column 4, :line 1516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1516, :column 5, :line 1516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1516, :column 7, :line 1516, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1516, :column 9, :line 1516, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1516, :column 11, :line 1516, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1511, :column 15, :line 1511, :file "cljs/core.cljs"} - ^{:arglists (^{:end-column 7, :end-line 1514, :column 4, :line 1514, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1514, :column 5, :line 1514, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1515, :column 4, :line 1515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1515, :column 5, :line 1515, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1515, :column 7, :line 1515, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1516, :column 4, :line 1516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1516, :column 5, :line 1516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1516, :column 7, :line 1516, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1516, :column 9, :line 1516, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1516, :column 11, :line 1516, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1511, :column 15, :line 1511, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1514, :column 5, :line 1514, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1515, :column 5, :line 1515, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1515, :column 7, :line 1515, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1516, :column 5, :line 1516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1516, :column 7, :line 1516, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1516, :column 11, :line 1516, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1514, :column 4, :line 1514, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1514, :column 5, :line 1514, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1515, :column 4, :line 1515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1515, :column 5, :line 1515, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1515, :column 7, :line 1515, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1516, :column 4, :line 1516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1516, :column 5, :line 1516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1516, :column 7, :line 1516, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1516, :column 9, :line 1516, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1516, :column 11, :line 1516, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1511, :column 15, :line 1511, :file "cljs/core.cljs"} -, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 298, :column 20, :line 298, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 298, :column 21, :line 298, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 298, :column 23, :line 298, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 298, :column 5, :line 298, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 298, :column 13, :line 298, :file "cljs/core.cljs"} -equiv ^{:arglists (^{:end-column 29, :end-line 298, :column 20, :line 298, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 298, :column 21, :line 298, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 298, :column 23, :line 298, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 298, :column 5, :line 298, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 298, :column 13, :line 298, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 298, :column 21, :line 298, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 298, :column 23, :line 298, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 298, :column 20, :line 298, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 298, :column 21, :line 298, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 298, :column 23, :line 298, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 298, :column 5, :line 298, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 298, :column 13, :line 298, :file "cljs/core.cljs"} -equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr])} ->ArrayNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/ArrayNode [^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr])} ->ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2577, :column 4, :line 2577, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2577, :column 5, :line 2577, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2577, :column 11, :line 2577, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2577, :column 15, :line 2577, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2579, :column 4, :line 2579, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2579, :column 5, :line 2579, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2579, :column 11, :line 2579, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2579, :column 15, :line 2579, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2579, :column 19, :line 2579, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2579, :column 21, :line 2579, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2573, :column 7, :line 2573, :file "cljs/core.cljs"} assoc! ^{:arglists (^{:end-column 19, :end-line 2577, :column 4, :line 2577, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2577, :column 5, :line 2577, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2577, :column 11, :line 2577, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2577, :column 15, :line 2577, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2579, :column 4, :line 2579, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2579, :column 5, :line 2579, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2579, :column 11, :line 2579, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2579, :column 15, :line 2579, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2579, :column 19, :line 2579, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2579, :column 21, :line 2579, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2573, :column 7, :line 2573, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2577, :column 5, :line 2577, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2577, :column 11, :line 2577, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2577, :column 15, :line 2577, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2579, :column 5, :line 2579, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2579, :column 11, :line 2579, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2579, :column 15, :line 2579, :file "cljs/core.cljs"} val & ^{:end-column 25, :end-line 2579, :column 21, :line 2579, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2577, :column 4, :line 2577, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2577, :column 5, :line 2577, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2577, :column 11, :line 2577, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2577, :column 15, :line 2577, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2579, :column 4, :line 2579, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2579, :column 5, :line 2579, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2579, :column 11, :line 2579, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2579, :column 15, :line 2579, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2579, :column 19, :line 2579, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2579, :column 21, :line 2579, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2573, :column 7, :line 2573, :file "cljs/core.cljs"} assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 6471, :column 4, :line 6471, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 6472, :column 4, :line 6472, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6472, :column 5, :line 6472, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6472, :column 7, :line 6472, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 6470, :column 7, :line 6470, :file "cljs/core.cljs"} hash-set ^{:arglists (^{:end-column 6, :end-line 6471, :column 4, :line 6471, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 6472, :column 4, :line 6472, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6472, :column 5, :line 6472, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6472, :column 7, :line 6472, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 6470, :column 7, :line 6470, :file "cljs/core.cljs"} {:arglists (^cljs.core/ISet [] [& ^{:end-column 12, :end-line 6472, :column 7, :line 6472, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6471, :column 4, :line 6471, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 6472, :column 4, :line 6472, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6472, :column 5, :line 6472, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6472, :column 7, :line 6472, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 6470, :column 7, :line 6470, :file "cljs/core.cljs"} hash-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1495, :column 4, :line 1495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1495, :column 5, :line 1495, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1495, :column 7, :line 1495, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1495, :column 12, :line 1495, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} reduce-kv ^{:arglists (^{:end-column 17, :end-line 1495, :column 4, :line 1495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1495, :column 5, :line 1495, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1495, :column 7, :line 1495, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1495, :column 12, :line 1495, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1495, :column 5, :line 1495, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1495, :column 7, :line 1495, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1495, :column 12, :line 1495, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1495, :column 4, :line 1495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1495, :column 5, :line 1495, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1495, :column 7, :line 1495, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1495, :column 12, :line 1495, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} reduce-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 56, :end-line 4555, :column 49, :line 4555, :file "cljs/core.cljs"} reset! ^{:arglists (^{:end-column 16, :end-line 7229, :column 3, :line 7229, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7229, :column 4, :line 7229, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 7229, :column 6, :line 7229, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 14, :end-line 7226, :column 7, :line 7226, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7229, :column 4, :line 7229, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 7229, :column 6, :line 7229, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7229, :column 3, :line 7229, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7229, :column 4, :line 7229, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 7229, :column 6, :line 7229, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 14, :end-line 7226, :column 7, :line 7226, :file "cljs/core.cljs"} reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 1876, :column 14, :line 1876, :file "cljs/core.cljs"} name ^{:arglists (^{:end-column 6, :end-line 6522, :column 3, :line 6522, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6522, :column 4, :line 6522, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 6520, :column 7, :line 6520, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 6522, :column 4, :line 6522, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6522, :column 3, :line 6522, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6522, :column 4, :line 6522, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 6520, :column 7, :line 6520, :file "cljs/core.cljs"} name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash])} ->RedNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/RedNode [^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash])} ->RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3330, :column 28, :line 3330, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3330, :column 29, :line 3330, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3330, :column 32, :line 3330, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3330, :column 8, :line 3330, :file "cljs/core.cljs"} unchecked-array-for ^{:arglists (^{:end-column 34, :end-line 3330, :column 28, :line 3330, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3330, :column 29, :line 3330, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3330, :column 32, :line 3330, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3330, :column 8, :line 3330, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 3330, :column 29, :line 3330, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3330, :column 32, :line 3330, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3330, :column 28, :line 3330, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3330, :column 29, :line 3330, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3330, :column 32, :line 3330, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3330, :column 8, :line 3330, :file "cljs/core.cljs"} unchecked-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 17, :end-line 199, :column 14, :line 199, :file "cljs/core.cljs"} Fn ^{:impls #{^{:end-column 23, :end-line 567, :column 14, :line 567, :file "cljs/core.cljs"} function cljs.core/MetaFn}, :protocol-symbol true, :end-column 17, :end-line 199, :column 14, :line 199, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 17, :end-line 199, :column 14, :line 199, :file "cljs/core.cljs"} Fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 807, :column 3, :line 807, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 805, :column 7, :line 805, :file "cljs/core.cljs"} ffirst ^{:arglists (^{:end-column 9, :end-line 807, :column 3, :line 807, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 805, :column 7, :line 805, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 807, :column 3, :line 807, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 805, :column 7, :line 805, :file "cljs/core.cljs"} ffirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 6476, :column 4, :line 6476, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6476, :column 5, :line 6476, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6476, :column 7, :line 6476, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 6474, :column 7, :line 6474, :file "cljs/core.cljs"} sorted-set ^{:arglists (^{:end-column 12, :end-line 6476, :column 4, :line 6476, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6476, :column 5, :line 6476, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6476, :column 7, :line 6476, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 6474, :column 7, :line 6474, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 12, :end-line 6476, :column 7, :line 6476, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 6476, :column 4, :line 6476, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6476, :column 5, :line 6476, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6476, :column 7, :line 6476, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 6474, :column 7, :line 6474, :file "cljs/core.cljs"} sorted-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6999, :column 3, :line 6999, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6999, :column 4, :line 6999, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6999, :column 9, :line 6999, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 6996, :column 8, :line 6996, :file "cljs/core.cljs"} pr-with-opts ^{:arglists (^{:end-column 14, :end-line 6999, :column 3, :line 6999, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6999, :column 4, :line 6999, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6999, :column 9, :line 6999, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 6996, :column 8, :line 6996, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 6999, :column 4, :line 6999, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6999, :column 9, :line 6999, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6999, :column 3, :line 6999, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6999, :column 4, :line 6999, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6999, :column 9, :line 6999, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 6996, :column 8, :line 6996, :file "cljs/core.cljs"} pr-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} PersistentTreeMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 5908, :column 28, :line 5908, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 632, :column 4, :line 632, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 632, :column 5, :line 632, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 632, :column 9, :line 632, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 643, :column 4, :line 643, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 643, :column 5, :line 643, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 643, :column 9, :line 643, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 643, :column 11, :line 643, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 652, :column 4, :line 652, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 652, :column 5, :line 652, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 652, :column 9, :line 652, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 652, :column 11, :line 652, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 652, :column 15, :line 652, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 631, :column 8, :line 631, :file "cljs/core.cljs"} array-reduce ^{:arglists (^{:end-column 11, :end-line 632, :column 4, :line 632, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 632, :column 5, :line 632, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 632, :column 9, :line 632, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 643, :column 4, :line 643, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 643, :column 5, :line 643, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 643, :column 9, :line 643, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 643, :column 11, :line 643, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 652, :column 4, :line 652, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 652, :column 5, :line 652, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 652, :column 9, :line 652, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 652, :column 11, :line 652, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 652, :column 15, :line 652, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 631, :column 8, :line 631, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 632, :column 5, :line 632, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 632, :column 9, :line 632, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 643, :column 5, :line 643, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 643, :column 9, :line 643, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 643, :column 11, :line 643, :file "cljs/core.cljs"} val] [^{:end-column 9, :end-line 652, :column 5, :line 652, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 652, :column 9, :line 652, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 652, :column 11, :line 652, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 652, :column 15, :line 652, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 632, :column 4, :line 632, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 632, :column 5, :line 632, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 632, :column 9, :line 632, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 643, :column 4, :line 643, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 643, :column 5, :line 643, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 643, :column 9, :line 643, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 643, :column 11, :line 643, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 652, :column 4, :line 652, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 652, :column 5, :line 652, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 652, :column 9, :line 652, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 652, :column 11, :line 652, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 652, :column 15, :line 652, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 631, :column 8, :line 631, :file "cljs/core.cljs"} array-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 666, :column 3, :line 666, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 666, :column 4, :line 666, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 664, :column 8, :line 664, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 664, :column 16, :line 664, :file "cljs/core.cljs"} counted? ^{:arglists (^{:end-column 6, :end-line 666, :column 3, :line 666, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 666, :column 4, :line 666, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 664, :column 8, :line 664, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 664, :column 16, :line 664, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 666, :column 4, :line 666, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 666, :column 3, :line 666, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 666, :column 4, :line 666, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 664, :column 8, :line 664, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 664, :column 16, :line 664, :file "cljs/core.cljs"} counted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7039, :column 3, :line 7039, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7039, :column 4, :line 7039, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7039, :column 6, :line 7039, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7037, :column 7, :line 7037, :file "cljs/core.cljs"} println ^{:arglists (^{:end-column 11, :end-line 7039, :column 3, :line 7039, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7039, :column 4, :line 7039, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7039, :column 6, :line 7039, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7037, :column 7, :line 7037, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7039, :column 6, :line 7039, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7039, :column 3, :line 7039, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7039, :column 4, :line 7039, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7039, :column 6, :line 7039, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7037, :column 7, :line 7037, :file "cljs/core.cljs"} println, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3239, :column 3, :line 3239, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3239, :column 4, :line 3239, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3239, :column 6, :line 3239, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3239, :column 7, :line 3239, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3239, :column 9, :line 3239, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3239, :column 11, :line 3239, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3239, :column 15, :line 3239, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3235, :column 7, :line 3235, :file "cljs/core.cljs"} assoc-in ^{:arglists (^{:end-column 17, :end-line 3239, :column 3, :line 3239, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3239, :column 4, :line 3239, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3239, :column 6, :line 3239, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3239, :column 7, :line 3239, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3239, :column 9, :line 3239, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3239, :column 11, :line 3239, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3239, :column 15, :line 3239, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3235, :column 7, :line 3235, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3239, :column 4, :line 3239, :file "cljs/core.cljs"} m p__8389 ^{:end-column 17, :end-line 3239, :column 15, :line 3239, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3239, :column 3, :line 3239, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3239, :column 4, :line 3239, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3239, :column 6, :line 3239, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3239, :column 7, :line 3239, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3239, :column 9, :line 3239, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3239, :column 11, :line 3239, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3239, :column 15, :line 3239, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3235, :column 7, :line 3235, :file "cljs/core.cljs"} assoc-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6256, :column 10, :line 6256, :file "cljs/core.cljs"} PersistentHashSet {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6256, :column 10, :line 6256, :file "cljs/core.cljs"} PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 6256, :column 28, :line 6256, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1794, :column 3, :line 1794, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1794, :column 4, :line 1794, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1794, :column 6, :line 1794, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} bit-test ^{:arglists (^{:end-column 8, :end-line 1794, :column 3, :line 1794, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1794, :column 4, :line 1794, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1794, :column 6, :line 1794, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1794, :column 4, :line 1794, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1794, :column 6, :line 1794, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1794, :column 3, :line 1794, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1794, :column 4, :line 1794, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1794, :column 6, :line 1794, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} bit-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 4542, :column 10, :line 4542, :file "cljs/core.cljs"} TransientHashMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5291, :column 10, :line 5291, :file "cljs/core.cljs"} TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 5295, :column 27, :line 5291, :file "cljs/core.cljs"} [^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val], :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash])} ->PersistentHashMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentHashMap [^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash])} ->PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7175, :column 14, :line 7175, :file "cljs/core.cljs"} ISwap ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7175, :column 14, :line 7175, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7175, :column 14, :line 7175, :file "cljs/core.cljs"} ISwap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 1223, :column 10, :line 1223, :file "cljs/core.cljs"} ChunkedCons {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2311, :column 10, :line 2311, :file "cljs/core.cljs"} ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 2311, :column 22, :line 2311, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 7465, :column 3, :line 7465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7465, :column 4, :line 7465, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} memoize ^{:arglists (^{:end-column 6, :end-line 7465, :column 3, :line 7465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7465, :column 4, :line 7465, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7465, :column 4, :line 7465, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7465, :column 3, :line 7465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7465, :column 4, :line 7465, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} memoize, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7299, :column 3, :line 7299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7299, :column 4, :line 7299, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7299, :column 9, :line 7299, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 7299, :column 11, :line 7299, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7299, :column 13, :line 7299, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 7293, :column 7, :line 7293, :file "cljs/core.cljs"} alter-meta! ^{:arglists (^{:end-column 18, :end-line 7299, :column 3, :line 7299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7299, :column 4, :line 7299, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7299, :column 9, :line 7299, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 7299, :column 11, :line 7299, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7299, :column 13, :line 7299, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 7293, :column 7, :line 7293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7299, :column 4, :line 7299, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7299, :column 9, :line 7299, :file "cljs/core.cljs"} f & ^{:end-column 18, :end-line 7299, :column 13, :line 7299, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7299, :column 3, :line 7299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7299, :column 4, :line 7299, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7299, :column 9, :line 7299, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 7299, :column 11, :line 7299, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7299, :column 13, :line 7299, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 7293, :column 7, :line 7293, :file "cljs/core.cljs"} alter-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb])} ->StringBufferWriter ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb])} {:arglists (^cljs.core/StringBufferWriter [^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb])} ->StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1837, :column 22, :line 1837, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1837, :column 23, :line 1837, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1837, :column 16, :line 1837, :file "cljs/core.cljs"} zero? ^{:arglists (^{:end-column 25, :end-line 1837, :column 22, :line 1837, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1837, :column 23, :line 1837, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1837, :column 16, :line 1837, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 1837, :column 23, :line 1837, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1837, :column 22, :line 1837, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1837, :column 23, :line 1837, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1837, :column 16, :line 1837, :file "cljs/core.cljs"} zero?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 3748, :column 27, :line 3748, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3748, :column 28, :line 3748, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 3748, :column 33, :line 3748, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 3748, :column 8, :line 3748, :file "cljs/core.cljs"} tv-ensure-editable ^{:arglists (^{:end-column 38, :end-line 3748, :column 27, :line 3748, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3748, :column 28, :line 3748, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 3748, :column 33, :line 3748, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 3748, :column 8, :line 3748, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 3748, :column 28, :line 3748, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 3748, :column 33, :line 3748, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 3748, :column 27, :line 3748, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3748, :column 28, :line 3748, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 3748, :column 33, :line 3748, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 3748, :column 8, :line 3748, :file "cljs/core.cljs"} tv-ensure-editable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 125, :column 1, :line 121, :file "cljs/core.cljs"} *main-cli-fn* ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 125, :column 1, :line 121, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 125, :column 1, :line 121, :file "cljs/core.cljs"} *main-cli-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 277, :column 18, :line 277, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 277, :column 19, :line 277, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 277, :column 24, :line 277, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 277, :column 26, :line 277, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 277, :column 5, :line 277, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 277, :column 9, :line 277, :file "cljs/core.cljs"} -assoc-n ^{:arglists (^{:end-column 30, :end-line 277, :column 18, :line 277, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 277, :column 19, :line 277, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 277, :column 24, :line 277, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 277, :column 26, :line 277, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 277, :column 5, :line 277, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 277, :column 9, :line 277, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 277, :column 19, :line 277, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 277, :column 24, :line 277, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 277, :column 26, :line 277, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 277, :column 18, :line 277, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 277, :column 19, :line 277, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 277, :column 24, :line 277, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 277, :column 26, :line 277, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 277, :column 5, :line 277, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 277, :column 9, :line 277, :file "cljs/core.cljs"} -assoc-n, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1637, :column 25, :line 1637, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1637, :column 26, :line 1637, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1637, :column 7, :line 1637, :file "cljs/core.cljs"} unchecked-dec-int ^{:arglists (^{:end-column 28, :end-line 1637, :column 25, :line 1637, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1637, :column 26, :line 1637, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1637, :column 7, :line 1637, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1637, :column 26, :line 1637, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1637, :column 25, :line 1637, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1637, :column 26, :line 1637, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1637, :column 7, :line 1637, :file "cljs/core.cljs"} unchecked-dec-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1906, :column 18, :line 1906, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1906, :column 19, :line 1906, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 1906, :column 8, :line 1906, :file "cljs/core.cljs"} hash-imap ^{:arglists (^{:end-column 21, :end-line 1906, :column 18, :line 1906, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1906, :column 19, :line 1906, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 1906, :column 8, :line 1906, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 1906, :column 19, :line 1906, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1906, :column 18, :line 1906, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1906, :column 19, :line 1906, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 1906, :column 8, :line 1906, :file "cljs/core.cljs"} hash-imap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7657, :column 3, :line 7657, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7657, :column 4, :line 7657, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7657, :column 6, :line 7657, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7657, :column 8, :line 7657, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 7656, :column 8, :line 7656, :file "cljs/core.cljs"} dominates ^{:arglists (^{:end-column 21, :end-line 7657, :column 3, :line 7657, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7657, :column 4, :line 7657, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7657, :column 6, :line 7657, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7657, :column 8, :line 7657, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 7656, :column 8, :line 7656, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7657, :column 4, :line 7657, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7657, :column 6, :line 7657, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7657, :column 8, :line 7657, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7657, :column 3, :line 7657, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7657, :column 4, :line 7657, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7657, :column 6, :line 7657, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7657, :column 8, :line 7657, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 7656, :column 8, :line 7656, :file "cljs/core.cljs"} dominates, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2559, :column 3, :line 2559, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2559, :column 4, :line 2559, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} persistent! ^{:arglists (^{:end-column 10, :end-line 2559, :column 3, :line 2559, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2559, :column 4, :line 2559, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2559, :column 4, :line 2559, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2559, :column 3, :line 2559, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2559, :column 4, :line 2559, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn! ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} nnext ^{:arglists (^{:end-column 9, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} nnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 4553, :column 10, :line 4553, :file "cljs/core.cljs"} Box {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 4553, :column 10, :line 4553, :file "cljs/core.cljs"} Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 29, :end-line 4553, :column 14, :line 4553, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val], :protocols #{}}, StringBuffer goog.string.StringBuffer, ^{:arglists (^{:end-column 40, :end-line 5482, :column 22, :line 5482, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5482, :column 23, :line 5482, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 5482, :column 27, :line 5482, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 5482, :column 31, :line 5482, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5482, :column 36, :line 5482, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 5482, :column 8, :line 5482, :file "cljs/core.cljs"} balance-right ^{:arglists (^{:end-column 40, :end-line 5482, :column 22, :line 5482, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5482, :column 23, :line 5482, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 5482, :column 27, :line 5482, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 5482, :column 31, :line 5482, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5482, :column 36, :line 5482, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 5482, :column 8, :line 5482, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 5482, :column 23, :line 5482, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 5482, :column 27, :line 5482, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 5482, :column 31, :line 5482, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5482, :column 36, :line 5482, :file "cljs/core.cljs"} ins]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5482, :column 22, :line 5482, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5482, :column 23, :line 5482, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 5482, :column 27, :line 5482, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 5482, :column 31, :line 5482, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5482, :column 36, :line 5482, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 5482, :column 8, :line 5482, :file "cljs/core.cljs"} balance-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 7694, :column 30, :line 7694, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7694, :column 31, :line 7694, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 7694, :column 36, :line 7694, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 7694, :column 8, :line 7694, :file "cljs/core.cljs"} throw-no-method-error ^{:arglists (^{:end-column 49, :end-line 7694, :column 30, :line 7694, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7694, :column 31, :line 7694, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 7694, :column 36, :line 7694, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 7694, :column 8, :line 7694, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 36, :end-line 7694, :column 31, :line 7694, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 7694, :column 36, :line 7694, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 7694, :column 30, :line 7694, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7694, :column 31, :line 7694, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 7694, :column 36, :line 7694, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 7694, :column 8, :line 7694, :file "cljs/core.cljs"} throw-no-method-error, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7328, :column 3, :line 7328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7328, :column 4, :line 7328, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7328, :column 9, :line 7328, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 7328, :column 13, :line 7328, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} add-watch ^{:arglists (^{:end-column 15, :end-line 7328, :column 3, :line 7328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7328, :column 4, :line 7328, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7328, :column 9, :line 7328, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 7328, :column 13, :line 7328, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7328, :column 4, :line 7328, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7328, :column 9, :line 7328, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 7328, :column 13, :line 7328, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7328, :column 3, :line 7328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7328, :column 4, :line 7328, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7328, :column 9, :line 7328, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 7328, :column 13, :line 7328, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 2707, :column 3, :line 2707, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2707, :column 4, :line 2707, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2707, :column 9, :line 2707, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 2704, :column 8, :line 2704, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2704, :column 16, :line 2704, :file "cljs/core.cljs"} not-every? ^{:arglists (^{:end-column 14, :end-line 2707, :column 3, :line 2707, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2707, :column 4, :line 2707, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2707, :column 9, :line 2707, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 2704, :column 8, :line 2704, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2704, :column 16, :line 2704, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 2707, :column 4, :line 2707, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2707, :column 9, :line 2707, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 2707, :column 3, :line 2707, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2707, :column 4, :line 2707, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2707, :column 9, :line 2707, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 2704, :column 8, :line 2704, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2704, :column 16, :line 2704, :file "cljs/core.cljs"} not-every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1744, :column 3, :line 1744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1744, :column 4, :line 1744, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1744, :column 6, :line 1744, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1742, :column 7, :line 1742, :file "cljs/core.cljs"} rem ^{:arglists (^{:end-column 8, :end-line 1744, :column 3, :line 1744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1744, :column 4, :line 1744, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1744, :column 6, :line 1744, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1742, :column 7, :line 1742, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1744, :column 4, :line 1744, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1744, :column 6, :line 1744, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1744, :column 3, :line 1744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1744, :column 4, :line 1744, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1744, :column 6, :line 1744, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1742, :column 7, :line 1742, :file "cljs/core.cljs"} rem, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 6972, :column 24, :line 6972, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6972, :column 25, :line 6972, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 6972, :column 30, :line 6972, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 6972, :column 8, :line 6972, :file "cljs/core.cljs"} pr-sb-with-opts ^{:arglists (^{:end-column 35, :end-line 6972, :column 24, :line 6972, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6972, :column 25, :line 6972, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 6972, :column 30, :line 6972, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 6972, :column 8, :line 6972, :file "cljs/core.cljs"} {:arglists (^/ [^{:end-column 30, :end-line 6972, :column 25, :line 6972, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 6972, :column 30, :line 6972, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 6972, :column 24, :line 6972, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6972, :column 25, :line 6972, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 6972, :column 30, :line 6972, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 6972, :column 8, :line 6972, :file "cljs/core.cljs"} pr-sb-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 4616, :column 10, :line 4616, :file "cljs/core.cljs"} BitmapIndexedNode {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 4616, :column 10, :line 4616, :file "cljs/core.cljs"} BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4616, :column 28, :line 4616, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash])} ->NodeSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/NodeSeq [^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash])} ->NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 2714, :column 3, :line 2714, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2714, :column 4, :line 2714, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2714, :column 9, :line 2714, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 2709, :column 7, :line 2709, :file "cljs/core.cljs"} some ^{:arglists (^{:end-column 14, :end-line 2714, :column 3, :line 2714, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2714, :column 4, :line 2714, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2714, :column 9, :line 2714, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 2709, :column 7, :line 2709, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2714, :column 4, :line 2714, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2714, :column 9, :line 2714, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 2714, :column 3, :line 2714, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2714, :column 4, :line 2714, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2714, :column 9, :line 2714, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 2709, :column 7, :line 2709, :file "cljs/core.cljs"} some, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} INamed ^{:impls #{cljs.core/Keyword cljs.core/Symbol}, :protocol-symbol true, :end-column 21, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} INamed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val])} ->Box ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val])} {:arglists (^cljs.core/Box [^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val])} ->Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 291, :column 14, :line 291, :file "cljs/core.cljs"} IReduce ^{:impls #{cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ArrayChunk cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 291, :column 14, :line 291, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 291, :column 14, :line 291, :file "cljs/core.cljs"} IReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3004, :column 3, :line 3004, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3004, :column 4, :line 3004, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3004, :column 6, :line 3004, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.", :end-column 12, :end-line 3002, :column 7, :line 3002, :file "cljs/core.cljs"} drop ^{:arglists (^{:end-column 11, :end-line 3004, :column 3, :line 3004, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3004, :column 4, :line 3004, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3004, :column 6, :line 3004, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.", :end-column 12, :end-line 3002, :column 7, :line 3002, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3004, :column 4, :line 3004, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3004, :column 6, :line 3004, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3004, :column 3, :line 3004, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3004, :column 4, :line 3004, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3004, :column 6, :line 3004, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.", :end-column 12, :end-line 3002, :column 7, :line 3002, :file "cljs/core.cljs"} drop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1230, :column 4, :line 1230, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1232, :column 7, :line 1232, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1229, :column 7, :line 1229, :file "cljs/core.cljs"} js-obj ^{:arglists (^{:end-column 6, :end-line 1230, :column 4, :line 1230, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1232, :column 7, :line 1232, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1229, :column 7, :line 1229, :file "cljs/core.cljs"} {:arglists (^object [] [& ^{:end-column 15, :end-line 1232, :column 7, :line 1232, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1230, :column 4, :line 1230, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1232, :column 7, :line 1232, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1229, :column 7, :line 1229, :file "cljs/core.cljs"} js-obj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 347, :column 14, :line 347, :file "cljs/core.cljs"} ITransientCollection ^{:impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientHashSet}, :protocol-symbol true, :end-column 35, :end-line 347, :column 14, :line 347, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 347, :column 14, :line 347, :file "cljs/core.cljs"} ITransientCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :end-column 15, :end-line 7178, :column 10, :line 7178, :file "cljs/core.cljs"} Atom {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :end-column 15, :end-line 7178, :column 10, :line 7178, :file "cljs/core.cljs"} Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 7178, :column 15, :line 7178, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches], :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 12, :end-line 908, :column 4, :line 908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 908, :column 5, :line 908, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 908, :column 10, :line 908, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 936, :column 4, :line 936, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 936, :column 5, :line 936, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 936, :column 10, :line 936, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 936, :column 12, :line 936, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 903, :column 7, :line 903, :file "cljs/core.cljs"} nth ^{:arglists (^{:end-column 12, :end-line 908, :column 4, :line 908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 908, :column 5, :line 908, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 908, :column 10, :line 908, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 936, :column 4, :line 936, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 936, :column 5, :line 936, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 936, :column 10, :line 936, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 936, :column 12, :line 936, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 903, :column 7, :line 903, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 908, :column 5, :line 908, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 908, :column 10, :line 908, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 936, :column 5, :line 936, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 936, :column 10, :line 936, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 936, :column 12, :line 936, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 908, :column 4, :line 908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 908, :column 5, :line 908, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 908, :column 10, :line 908, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 936, :column 4, :line 936, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 936, :column 5, :line 936, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 936, :column 10, :line 936, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 936, :column 12, :line 936, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 903, :column 7, :line 903, :file "cljs/core.cljs"} nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1206, :column 3, :line 1206, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1206, :column 4, :line 1206, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1204, :column 8, :line 1204, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1204, :column 16, :line 1204, :file "cljs/core.cljs"} sorted? ^{:arglists (^{:end-column 6, :end-line 1206, :column 3, :line 1206, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1206, :column 4, :line 1206, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1204, :column 8, :line 1204, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1204, :column 16, :line 1204, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1206, :column 4, :line 1206, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1206, :column 3, :line 1206, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1206, :column 4, :line 1206, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1204, :column 8, :line 1204, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1204, :column 16, :line 1204, :file "cljs/core.cljs"} sorted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil? ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3045, :column 3, :line 3045, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3045, :column 4, :line 3045, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3045, :column 6, :line 3045, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3043, :column 7, :line 3043, :file "cljs/core.cljs"} split-at ^{:arglists (^{:end-column 11, :end-line 3045, :column 3, :line 3045, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3045, :column 4, :line 3045, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3045, :column 6, :line 3045, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3043, :column 7, :line 3043, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 6, :end-line 3045, :column 4, :line 3045, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3045, :column 6, :line 3045, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3045, :column 3, :line 3045, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3045, :column 4, :line 3045, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3045, :column 6, :line 3045, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3043, :column 7, :line 3043, :file "cljs/core.cljs"} split-at, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 6254, :column 10, :line 6254, :file "cljs/core.cljs"} TransientHashSet {:op :type, :name ^{:skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 6334, :column 10, :line 6334, :file "cljs/core.cljs"} TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 6334, :column 27, :line 6334, :file "cljs/core.cljs"} [^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map], :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, ^{:arglists (^{:end-column 35, :end-line 4263, :column 28, :line 4263, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4263, :column 29, :line 4263, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4263, :column 31, :line 4263, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4263, :column 33, :line 4263, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4263, :column 8, :line 4263, :file "cljs/core.cljs"} array-map-extend-kv ^{:arglists (^{:end-column 35, :end-line 4263, :column 28, :line 4263, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4263, :column 29, :line 4263, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4263, :column 31, :line 4263, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4263, :column 33, :line 4263, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4263, :column 8, :line 4263, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 31, :end-line 4263, :column 29, :line 4263, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4263, :column 31, :line 4263, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4263, :column 33, :line 4263, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4263, :column 28, :line 4263, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4263, :column 29, :line 4263, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4263, :column 31, :line 4263, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4263, :column 33, :line 4263, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4263, :column 8, :line 4263, :file "cljs/core.cljs"} array-map-extend-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6989, :column 3, :line 6989, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6989, :column 4, :line 6989, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6989, :column 9, :line 6989, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 6987, :column 7, :line 6987, :file "cljs/core.cljs"} prn-str-with-opts ^{:arglists (^{:end-column 14, :end-line 6989, :column 3, :line 6989, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6989, :column 4, :line 6989, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6989, :column 9, :line 6989, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 6987, :column 7, :line 6987, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 6989, :column 4, :line 6989, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6989, :column 9, :line 6989, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6989, :column 3, :line 6989, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6989, :column 4, :line 6989, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6989, :column 9, :line 6989, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 6987, :column 7, :line 6987, :file "cljs/core.cljs"} prn-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6240, :column 3, :line 6240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6240, :column 4, :line 6240, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6240, :column 8, :line 6240, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6238, :column 7, :line 6238, :file "cljs/core.cljs"} select-keys ^{:arglists (^{:end-column 15, :end-line 6240, :column 3, :line 6240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6240, :column 4, :line 6240, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6240, :column 8, :line 6240, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6238, :column 7, :line 6238, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap [^{:end-column 8, :end-line 6240, :column 4, :line 6240, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6240, :column 8, :line 6240, :file "cljs/core.cljs"} keyseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6240, :column 3, :line 6240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6240, :column 4, :line 6240, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6240, :column 8, :line 6240, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6238, :column 7, :line 6238, :file "cljs/core.cljs"} select-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1763, :column 3, :line 1763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1763, :column 6, :line 1763, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1761, :column 7, :line 1761, :file "cljs/core.cljs"} bit-and ^{:arglists (^{:end-column 8, :end-line 1763, :column 3, :line 1763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1763, :column 6, :line 1763, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1761, :column 7, :line 1761, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1763, :column 6, :line 1763, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1763, :column 3, :line 1763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1763, :column 6, :line 1763, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1761, :column 7, :line 1761, :file "cljs/core.cljs"} bit-and, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2496, :column 22, :line 2496, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2496, :column 23, :line 2496, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2496, :column 25, :line 2496, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2496, :column 8, :line 2496, :file "cljs/core.cljs"} bounded-count ^{:arglists (^{:end-column 27, :end-line 2496, :column 22, :line 2496, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2496, :column 23, :line 2496, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2496, :column 25, :line 2496, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2496, :column 8, :line 2496, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2496, :column 23, :line 2496, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2496, :column 25, :line 2496, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2496, :column 22, :line 2496, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2496, :column 23, :line 2496, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2496, :column 25, :line 2496, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2496, :column 8, :line 2496, :file "cljs/core.cljs"} bounded-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 25, :end-line 7340, :column 1, :line 7340, :file "cljs/core.cljs"} gensym_counter ^{:end-column 25, :end-line 7340, :column 1, :line 7340, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 25, :end-line 7340, :column 1, :line 7340, :file "cljs/core.cljs"} gensym_counter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2540, :column 4, :line 2540, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2540, :column 5, :line 2540, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2541, :column 4, :line 2541, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2541, :column 5, :line 2541, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2541, :column 7, :line 2541, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2542, :column 4, :line 2542, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2542, :column 5, :line 2542, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2542, :column 7, :line 2542, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2542, :column 9, :line 2542, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2543, :column 4, :line 2543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2543, :column 5, :line 2543, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2543, :column 7, :line 2543, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2543, :column 9, :line 2543, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2543, :column 11, :line 2543, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2544, :column 4, :line 2544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2544, :column 5, :line 2544, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2544, :column 7, :line 2544, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2544, :column 9, :line 2544, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2544, :column 11, :line 2544, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2544, :column 13, :line 2544, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2544, :column 15, :line 2544, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2537, :column 7, :line 2537, :file "cljs/core.cljs"} list* ^{:arglists (^{:end-column 10, :end-line 2540, :column 4, :line 2540, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2540, :column 5, :line 2540, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2541, :column 4, :line 2541, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2541, :column 5, :line 2541, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2541, :column 7, :line 2541, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2542, :column 4, :line 2542, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2542, :column 5, :line 2542, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2542, :column 7, :line 2542, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2542, :column 9, :line 2542, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2543, :column 4, :line 2543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2543, :column 5, :line 2543, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2543, :column 7, :line 2543, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2543, :column 9, :line 2543, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2543, :column 11, :line 2543, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2544, :column 4, :line 2544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2544, :column 5, :line 2544, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2544, :column 7, :line 2544, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2544, :column 9, :line 2544, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2544, :column 11, :line 2544, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2544, :column 13, :line 2544, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2544, :column 15, :line 2544, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2537, :column 7, :line 2537, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 10, :end-line 2540, :column 5, :line 2540, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2541, :column 5, :line 2541, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2541, :column 7, :line 2541, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2542, :column 5, :line 2542, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2542, :column 7, :line 2542, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2542, :column 9, :line 2542, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2543, :column 5, :line 2543, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2543, :column 7, :line 2543, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2543, :column 9, :line 2543, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2543, :column 11, :line 2543, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2544, :column 5, :line 2544, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2544, :column 7, :line 2544, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2544, :column 9, :line 2544, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2544, :column 11, :line 2544, :file "cljs/core.cljs"} d & ^{:end-column 20, :end-line 2544, :column 15, :line 2544, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2540, :column 4, :line 2540, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2540, :column 5, :line 2540, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2541, :column 4, :line 2541, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2541, :column 5, :line 2541, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2541, :column 7, :line 2541, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2542, :column 4, :line 2542, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2542, :column 5, :line 2542, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2542, :column 7, :line 2542, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2542, :column 9, :line 2542, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2543, :column 4, :line 2543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2543, :column 5, :line 2543, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2543, :column 7, :line 2543, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2543, :column 9, :line 2543, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2543, :column 11, :line 2543, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2544, :column 4, :line 2544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2544, :column 5, :line 2544, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2544, :column 7, :line 2544, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2544, :column 9, :line 2544, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2544, :column 11, :line 2544, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2544, :column 13, :line 2544, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2544, :column 15, :line 2544, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2537, :column 7, :line 2537, :file "cljs/core.cljs"} list*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash])} ->Keyword ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash])} {:arglists (^cljs.core/Keyword [^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash])} ->Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3250, :column 5, :line 3250, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3250, :column 7, :line 3250, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3250, :column 8, :line 3250, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3250, :column 10, :line 3250, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3250, :column 12, :line 3250, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3250, :column 16, :line 3250, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3254, :column 4, :line 3254, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3254, :column 5, :line 3254, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3254, :column 7, :line 3254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3254, :column 8, :line 3254, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3254, :column 10, :line 3254, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3254, :column 12, :line 3254, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3254, :column 16, :line 3254, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3254, :column 18, :line 3254, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3258, :column 8, :line 3258, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3258, :column 10, :line 3258, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3258, :column 12, :line 3258, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3258, :column 16, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3258, :column 18, :line 3258, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3258, :column 20, :line 3258, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3262, :column 4, :line 3262, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3262, :column 5, :line 3262, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3262, :column 8, :line 3262, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3262, :column 10, :line 3262, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3262, :column 12, :line 3262, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3262, :column 16, :line 3262, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3262, :column 18, :line 3262, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3262, :column 20, :line 3262, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3262, :column 22, :line 3262, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3266, :column 4, :line 3266, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3266, :column 5, :line 3266, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3266, :column 8, :line 3266, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3266, :column 10, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3266, :column 12, :line 3266, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3266, :column 16, :line 3266, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3266, :column 18, :line 3266, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3266, :column 20, :line 3266, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3266, :column 22, :line 3266, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3266, :column 24, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3266, :column 26, :line 3266, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} update-in ^{:arglists (^{:end-column 18, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3250, :column 5, :line 3250, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3250, :column 7, :line 3250, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3250, :column 8, :line 3250, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3250, :column 10, :line 3250, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3250, :column 12, :line 3250, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3250, :column 16, :line 3250, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3254, :column 4, :line 3254, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3254, :column 5, :line 3254, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3254, :column 7, :line 3254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3254, :column 8, :line 3254, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3254, :column 10, :line 3254, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3254, :column 12, :line 3254, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3254, :column 16, :line 3254, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3254, :column 18, :line 3254, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3258, :column 8, :line 3258, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3258, :column 10, :line 3258, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3258, :column 12, :line 3258, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3258, :column 16, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3258, :column 18, :line 3258, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3258, :column 20, :line 3258, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3262, :column 4, :line 3262, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3262, :column 5, :line 3262, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3262, :column 8, :line 3262, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3262, :column 10, :line 3262, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3262, :column 12, :line 3262, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3262, :column 16, :line 3262, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3262, :column 18, :line 3262, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3262, :column 20, :line 3262, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3262, :column 22, :line 3262, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3266, :column 4, :line 3266, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3266, :column 5, :line 3266, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3266, :column 8, :line 3266, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3266, :column 10, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3266, :column 12, :line 3266, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3266, :column 16, :line 3266, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3266, :column 18, :line 3266, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3266, :column 20, :line 3266, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3266, :column 22, :line 3266, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3266, :column 24, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3266, :column 26, :line 3266, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3250, :column 5, :line 3250, :file "cljs/core.cljs"} m p__8392 ^{:end-column 18, :end-line 3250, :column 16, :line 3250, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3254, :column 5, :line 3254, :file "cljs/core.cljs"} m p__8395 ^{:end-column 18, :end-line 3254, :column 16, :line 3254, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3254, :column 18, :line 3254, :file "cljs/core.cljs"} a] [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} m p__8398 ^{:end-column 18, :end-line 3258, :column 16, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3258, :column 18, :line 3258, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3258, :column 20, :line 3258, :file "cljs/core.cljs"} b] [^{:end-column 7, :end-line 3262, :column 5, :line 3262, :file "cljs/core.cljs"} m p__8401 ^{:end-column 18, :end-line 3262, :column 16, :line 3262, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3262, :column 18, :line 3262, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3262, :column 20, :line 3262, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3262, :column 22, :line 3262, :file "cljs/core.cljs"} c] [^{:end-column 7, :end-line 3266, :column 5, :line 3266, :file "cljs/core.cljs"} m p__8404 ^{:end-column 18, :end-line 3266, :column 16, :line 3266, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3266, :column 18, :line 3266, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3266, :column 20, :line 3266, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3266, :column 22, :line 3266, :file "cljs/core.cljs"} c & ^{:end-column 31, :end-line 3266, :column 26, :line 3266, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3250, :column 5, :line 3250, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3250, :column 7, :line 3250, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3250, :column 8, :line 3250, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3250, :column 10, :line 3250, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3250, :column 12, :line 3250, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3250, :column 16, :line 3250, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3254, :column 4, :line 3254, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3254, :column 5, :line 3254, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3254, :column 7, :line 3254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3254, :column 8, :line 3254, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3254, :column 10, :line 3254, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3254, :column 12, :line 3254, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3254, :column 16, :line 3254, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3254, :column 18, :line 3254, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3258, :column 8, :line 3258, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3258, :column 10, :line 3258, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3258, :column 12, :line 3258, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3258, :column 16, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3258, :column 18, :line 3258, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3258, :column 20, :line 3258, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3262, :column 4, :line 3262, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3262, :column 5, :line 3262, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3262, :column 8, :line 3262, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3262, :column 10, :line 3262, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3262, :column 12, :line 3262, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3262, :column 16, :line 3262, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3262, :column 18, :line 3262, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3262, :column 20, :line 3262, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3262, :column 22, :line 3262, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3266, :column 4, :line 3266, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3266, :column 5, :line 3266, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3266, :column 8, :line 3266, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3266, :column 10, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3266, :column 12, :line 3266, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3266, :column 16, :line 3266, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3266, :column 18, :line 3266, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3266, :column 20, :line 3266, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3266, :column 22, :line 3266, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3266, :column 24, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3266, :column 26, :line 3266, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} update-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 7885, :column 3, :line 7885, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7885, :column 4, :line 7885, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 7885, :column 12, :line 7885, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 7885, :column 27, :line 7885, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 7882, :column 7, :line 7882, :file "cljs/core.cljs"} prefer-method ^{:arglists (^{:end-column 42, :end-line 7885, :column 3, :line 7885, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7885, :column 4, :line 7885, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 7885, :column 12, :line 7885, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 7885, :column 27, :line 7885, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 7882, :column 7, :line 7882, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7885, :column 4, :line 7885, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 7885, :column 12, :line 7885, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 7885, :column 27, :line 7885, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 7885, :column 3, :line 7885, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7885, :column 4, :line 7885, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 7885, :column 12, :line 7885, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 7885, :column 27, :line 7885, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 7882, :column 7, :line 7882, :file "cljs/core.cljs"} prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 408, :column 20, :line 408, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 408, :column 21, :line 408, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 408, :column 8, :line 408, :file "cljs/core.cljs"} hash-symbol ^{:arglists (^{:end-column 25, :end-line 408, :column 20, :line 408, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 408, :column 21, :line 408, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 408, :column 8, :line 408, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 408, :column 21, :line 408, :file "cljs/core.cljs"} sym]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 408, :column 20, :line 408, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 408, :column 21, :line 408, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 408, :column 8, :line 408, :file "cljs/core.cljs"} hash-symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 4588, :column 4, :line 4588, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4588, :column 5, :line 4588, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4588, :column 11, :line 4588, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4588, :column 16, :line 4588, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4588, :column 18, :line 4588, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 4592, :column 4, :line 4592, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4592, :column 5, :line 4592, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4592, :column 11, :line 4592, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4592, :column 16, :line 4592, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4592, :column 18, :line 4592, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 4592, :column 20, :line 4592, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 4592, :column 22, :line 4592, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 4587, :column 8, :line 4587, :file "cljs/core.cljs"} edit-and-set ^{:arglists (^{:end-column 20, :end-line 4588, :column 4, :line 4588, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4588, :column 5, :line 4588, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4588, :column 11, :line 4588, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4588, :column 16, :line 4588, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4588, :column 18, :line 4588, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 4592, :column 4, :line 4592, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4592, :column 5, :line 4592, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4592, :column 11, :line 4592, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4592, :column 16, :line 4592, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4592, :column 18, :line 4592, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 4592, :column 20, :line 4592, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 4592, :column 22, :line 4592, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 4587, :column 8, :line 4587, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 4588, :column 5, :line 4588, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4588, :column 11, :line 4588, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4588, :column 16, :line 4588, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4588, :column 18, :line 4588, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 4592, :column 5, :line 4592, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4592, :column 11, :line 4592, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4592, :column 16, :line 4592, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4592, :column 18, :line 4592, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 4592, :column 20, :line 4592, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 4592, :column 22, :line 4592, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 4588, :column 4, :line 4588, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4588, :column 5, :line 4588, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4588, :column 11, :line 4588, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4588, :column 16, :line 4588, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4588, :column 18, :line 4588, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 4592, :column 4, :line 4592, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4592, :column 5, :line 4592, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4592, :column 11, :line 4592, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4592, :column 16, :line 4592, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4592, :column 18, :line 4592, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 4592, :column 20, :line 4592, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 4592, :column 22, :line 4592, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 4587, :column 8, :line 4587, :file "cljs/core.cljs"} edit-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash])} ->PersistentArrayMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentArrayMap [^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash])} ->PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 76, :column 10, :line 76, :file "cljs/core.cljs"} instance? ^{:arglists (^{:end-column 31, :end-line 402, :column 26, :line 402, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 402, :column 27, :line 402, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 402, :column 29, :line 402, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 402, :column 8, :line 402, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 402, :column 16, :line 402, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 29, :end-line 402, :column 27, :line 402, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 402, :column 29, :line 402, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 402, :column 26, :line 402, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 402, :column 27, :line 402, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 402, :column 29, :line 402, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 402, :column 8, :line 402, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 402, :column 16, :line 402, :file "cljs/core.cljs"} instance?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6822, :column 3, :line 6822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6822, :column 4, :line 6822, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6822, :column 7, :line 6822, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 6817, :column 7, :line 6817, :file "cljs/core.cljs"} re-find ^{:arglists (^{:end-column 9, :end-line 6822, :column 3, :line 6822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6822, :column 4, :line 6822, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6822, :column 7, :line 6822, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 6817, :column 7, :line 6817, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6822, :column 4, :line 6822, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6822, :column 7, :line 6822, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6822, :column 3, :line 6822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6822, :column 4, :line 6822, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6822, :column 7, :line 6822, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 6817, :column 7, :line 6817, :file "cljs/core.cljs"} re-find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 17, :end-line 6884, :column 1, :line 6876, :file "cljs/core.cljs"} char-escapes ^{:private true, :end-column 17, :end-line 6884, :column 1, :line 6876, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 17, :end-line 6884, :column 1, :line 6876, :file "cljs/core.cljs"} char-escapes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 1904, :column 14, :line 1904, :file "cljs/core.cljs"} val ^{:arglists (^{:end-column 14, :end-line 6211, :column 3, :line 6211, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6211, :column 4, :line 6211, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 6209, :column 7, :line 6209, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6211, :column 4, :line 6211, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6211, :column 3, :line 6211, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6211, :column 4, :line 6211, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 6209, :column 7, :line 6209, :file "cljs/core.cljs"} val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1622, :column 4, :line 1622, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1623, :column 4, :line 1623, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1623, :column 5, :line 1623, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1624, :column 4, :line 1624, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1624, :column 5, :line 1624, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1624, :column 7, :line 1624, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1625, :column 4, :line 1625, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1625, :column 5, :line 1625, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1625, :column 7, :line 1625, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1625, :column 9, :line 1625, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1625, :column 11, :line 1625, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1620, :column 8, :line 1620, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1620, :column 15, :line 1620, :file "cljs/core.cljs"} unchecked-add ^{:arglists (^{:end-column 6, :end-line 1622, :column 4, :line 1622, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1623, :column 4, :line 1623, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1623, :column 5, :line 1623, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1624, :column 4, :line 1624, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1624, :column 5, :line 1624, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1624, :column 7, :line 1624, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1625, :column 4, :line 1625, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1625, :column 5, :line 1625, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1625, :column 7, :line 1625, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1625, :column 9, :line 1625, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1625, :column 11, :line 1625, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1620, :column 8, :line 1620, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1620, :column 15, :line 1620, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1623, :column 5, :line 1623, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1624, :column 5, :line 1624, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1624, :column 7, :line 1624, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1625, :column 5, :line 1625, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1625, :column 7, :line 1625, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1625, :column 11, :line 1625, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1622, :column 4, :line 1622, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1623, :column 4, :line 1623, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1623, :column 5, :line 1623, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1624, :column 4, :line 1624, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1624, :column 5, :line 1624, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1624, :column 7, :line 1624, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1625, :column 4, :line 1625, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1625, :column 5, :line 1625, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1625, :column 7, :line 1625, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1625, :column 9, :line 1625, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1625, :column 11, :line 1625, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1620, :column 8, :line 1620, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1620, :column 15, :line 1620, :file "cljs/core.cljs"} unchecked-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1384, :column 3, :line 1384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1384, :column 4, :line 1384, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1381, :column 17, :line 1381, :file "cljs/core.cljs"} fn->comparator ^{:arglists (^{:end-column 6, :end-line 1384, :column 3, :line 1384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1384, :column 4, :line 1384, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1381, :column 17, :line 1381, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 1384, :column 4, :line 1384, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1384, :column 3, :line 1384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1384, :column 4, :line 1384, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1381, :column 17, :line 1381, :file "cljs/core.cljs"} fn->comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 565, :column 10, :line 565, :file "cljs/core.cljs"} with-meta ^{:arglists (^{:end-column 11, :end-line 1095, :column 3, :line 1095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1095, :column 4, :line 1095, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1095, :column 6, :line 1095, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1092, :column 7, :line 1092, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1095, :column 4, :line 1095, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1095, :column 6, :line 1095, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1095, :column 3, :line 1095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1095, :column 4, :line 1095, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1095, :column 6, :line 1095, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1092, :column 7, :line 1092, :file "cljs/core.cljs"} with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 127, :column 12, :line 127, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 127, :column 13, :line 127, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 127, :column 7, :line 127, :file "cljs/core.cljs"} type ^{:arglists (^{:end-column 15, :end-line 127, :column 12, :line 127, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 127, :column 13, :line 127, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 127, :column 7, :line 127, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 127, :column 13, :line 127, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 127, :column 12, :line 127, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 127, :column 13, :line 127, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 127, :column 7, :line 127, :file "cljs/core.cljs"} type, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical? ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 379, :column 23, :line 379, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 379, :column 24, :line 379, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 379, :column 5, :line 379, :file "cljs/core.cljs"} string, :end-column 23, :end-line 379, :column 12, :line 379, :file "cljs/core.cljs"} -namespace ^{:arglists (^{:end-column 26, :end-line 379, :column 23, :line 379, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 379, :column 24, :line 379, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 379, :column 5, :line 379, :file "cljs/core.cljs"} string, :end-column 23, :end-line 379, :column 12, :line 379, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 379, :column 24, :line 379, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 379, :column 23, :line 379, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 379, :column 24, :line 379, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 379, :column 5, :line 379, :file "cljs/core.cljs"} string, :end-column 23, :end-line 379, :column 12, :line 379, :file "cljs/core.cljs"} -namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1643, :column 4, :line 1643, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1643, :column 5, :line 1643, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1644, :column 4, :line 1644, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1644, :column 5, :line 1644, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1644, :column 7, :line 1644, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1645, :column 9, :line 1645, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1645, :column 11, :line 1645, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1640, :column 8, :line 1640, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1640, :column 15, :line 1640, :file "cljs/core.cljs"} unchecked-divide-int ^{:arglists (^{:end-column 7, :end-line 1643, :column 4, :line 1643, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1643, :column 5, :line 1643, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1644, :column 4, :line 1644, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1644, :column 5, :line 1644, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1644, :column 7, :line 1644, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1645, :column 9, :line 1645, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1645, :column 11, :line 1645, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1640, :column 8, :line 1640, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1640, :column 15, :line 1640, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1643, :column 5, :line 1643, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1644, :column 5, :line 1644, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1644, :column 7, :line 1644, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1645, :column 11, :line 1645, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1643, :column 4, :line 1643, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1643, :column 5, :line 1643, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1644, :column 4, :line 1644, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1644, :column 5, :line 1644, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1644, :column 7, :line 1644, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1645, :column 9, :line 1645, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1645, :column 11, :line 1645, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1640, :column 8, :line 1640, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1640, :column 15, :line 1640, :file "cljs/core.cljs"} unchecked-divide-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 7530, :column 31, :line 7530, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7530, :column 32, :line 7530, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 7530, :column 34, :line 7530, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 7530, :column 36, :line 7530, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 7530, :column 8, :line 7530, :file "cljs/core.cljs"} swap-global-hierarchy! ^{:arglists (^{:end-column 41, :end-line 7530, :column 31, :line 7530, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7530, :column 32, :line 7530, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 7530, :column 34, :line 7530, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 7530, :column 36, :line 7530, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 7530, :column 8, :line 7530, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 7530, :column 32, :line 7530, :file "cljs/core.cljs"} f & ^{:end-column 41, :end-line 7530, :column 36, :line 7530, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 7530, :column 31, :line 7530, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7530, :column 32, :line 7530, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 7530, :column 34, :line 7530, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 7530, :column 36, :line 7530, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 7530, :column 8, :line 7530, :file "cljs/core.cljs"} swap-global-hierarchy!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6543, :column 4, :line 6543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6543, :column 5, :line 6543, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6543, :column 7, :line 6543, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6544, :column 4, :line 6544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6544, :column 5, :line 6544, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6544, :column 7, :line 6544, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6544, :column 9, :line 6544, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6545, :column 4, :line 6545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6545, :column 5, :line 6545, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6545, :column 7, :line 6545, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6545, :column 9, :line 6545, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6545, :column 11, :line 6545, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6545, :column 13, :line 6545, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 6541, :column 7, :line 6541, :file "cljs/core.cljs"} max-key ^{:arglists (^{:end-column 9, :end-line 6543, :column 4, :line 6543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6543, :column 5, :line 6543, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6543, :column 7, :line 6543, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6544, :column 4, :line 6544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6544, :column 5, :line 6544, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6544, :column 7, :line 6544, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6544, :column 9, :line 6544, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6545, :column 4, :line 6545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6545, :column 5, :line 6545, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6545, :column 7, :line 6545, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6545, :column 9, :line 6545, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6545, :column 11, :line 6545, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6545, :column 13, :line 6545, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 6541, :column 7, :line 6541, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6543, :column 5, :line 6543, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6543, :column 7, :line 6543, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 6544, :column 5, :line 6544, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6544, :column 7, :line 6544, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6544, :column 9, :line 6544, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 6545, :column 5, :line 6545, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6545, :column 7, :line 6545, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6545, :column 9, :line 6545, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 6545, :column 13, :line 6545, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6543, :column 4, :line 6543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6543, :column 5, :line 6543, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6543, :column 7, :line 6543, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6544, :column 4, :line 6544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6544, :column 5, :line 6544, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6544, :column 7, :line 6544, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6544, :column 9, :line 6544, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6545, :column 4, :line 6545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6545, :column 5, :line 6545, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6545, :column 7, :line 6545, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6545, :column 9, :line 6545, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6545, :column 11, :line 6545, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6545, :column 13, :line 6545, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 6541, :column 7, :line 6541, :file "cljs/core.cljs"} max-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash])} ->PersistentTreeSet ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeSet [^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash])} ->PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end])} ->ChunkBuffer ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end])} {:arglists (^cljs.core/ChunkBuffer [^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end])} ->ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6150, :column 10, :line 6150, :file "cljs/core.cljs"} ValSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6150, :column 10, :line 6150, :file "cljs/core.cljs"} ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6150, :column 17, :line 6150, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 17, :end-line 7692, :column 13, :line 7692, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7692, :column 14, :line 7692, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7692, :column 4, :line 7692, :file "cljs/core.cljs"} -prefers ^{:arglists (^{:end-column 17, :end-line 7692, :column 13, :line 7692, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7692, :column 14, :line 7692, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7692, :column 4, :line 7692, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 7692, :column 14, :line 7692, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7692, :column 13, :line 7692, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7692, :column 14, :line 7692, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7692, :column 4, :line 7692, :file "cljs/core.cljs"} -prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7285, :column 3, :line 7285, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7285, :column 4, :line 7285, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7285, :column 9, :line 7285, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 7278, :column 7, :line 7278, :file "cljs/core.cljs"} set-validator! ^{:arglists (^{:end-column 13, :end-line 7285, :column 3, :line 7285, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7285, :column 4, :line 7285, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7285, :column 9, :line 7285, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 7278, :column 7, :line 7278, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7285, :column 4, :line 7285, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7285, :column 9, :line 7285, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7285, :column 3, :line 7285, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7285, :column 4, :line 7285, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7285, :column 9, :line 7285, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 7278, :column 7, :line 7278, :file "cljs/core.cljs"} set-validator!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4240, :column 34, :line 4240, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4240, :column 35, :line 4240, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4240, :column 39, :line 4240, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4240, :column 41, :line 4240, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4240, :column 8, :line 4240, :file "cljs/core.cljs"} array-map-index-of-equiv? ^{:arglists (^{:end-column 43, :end-line 4240, :column 34, :line 4240, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4240, :column 35, :line 4240, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4240, :column 39, :line 4240, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4240, :column 41, :line 4240, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4240, :column 8, :line 4240, :file "cljs/core.cljs"} {:arglists ([^{:end-column 39, :end-line 4240, :column 35, :line 4240, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4240, :column 39, :line 4240, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4240, :column 41, :line 4240, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4240, :column 34, :line 4240, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4240, :column 35, :line 4240, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4240, :column 39, :line 4240, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4240, :column 41, :line 4240, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4240, :column 8, :line 4240, :file "cljs/core.cljs"} array-map-index-of-equiv?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 286, :column 22, :line 286, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 286, :column 23, :line 286, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 286, :column 16, :line 286, :file "cljs/core.cljs"} -meta ^{:arglists (^{:end-column 25, :end-line 286, :column 22, :line 286, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 286, :column 23, :line 286, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 286, :column 16, :line 286, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 286, :column 23, :line 286, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 286, :column 22, :line 286, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 286, :column 23, :line 286, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 286, :column 16, :line 286, :file "cljs/core.cljs"} -meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 5455, :column 10, :line 5455, :file "cljs/core.cljs"} RedNode {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 5660, :column 10, :line 5660, :file "cljs/core.cljs"} RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 5660, :column 18, :line 5660, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 40, :end-line 7687, :column 16, :line 7687, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7687, :column 17, :line 7687, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7687, :column 20, :line 7687, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 7687, :column 33, :line 7687, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7687, :column 4, :line 7687, :file "cljs/core.cljs"} -add-method ^{:arglists (^{:end-column 40, :end-line 7687, :column 16, :line 7687, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7687, :column 17, :line 7687, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7687, :column 20, :line 7687, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 7687, :column 33, :line 7687, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7687, :column 4, :line 7687, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 7687, :column 17, :line 7687, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7687, :column 20, :line 7687, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 7687, :column 33, :line 7687, :file "cljs/core.cljs"} method]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 7687, :column 16, :line 7687, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7687, :column 17, :line 7687, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7687, :column 20, :line 7687, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 7687, :column 33, :line 7687, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7687, :column 4, :line 7687, :file "cljs/core.cljs"} -add-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 5504, :column 25, :line 5504, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5504, :column 26, :line 5504, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 5504, :column 30, :line 5504, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 5504, :column 34, :line 5504, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 5504, :column 38, :line 5504, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 5504, :column 8, :line 5504, :file "cljs/core.cljs"} balance-left-del ^{:arglists (^{:end-column 44, :end-line 5504, :column 25, :line 5504, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5504, :column 26, :line 5504, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 5504, :column 30, :line 5504, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 5504, :column 34, :line 5504, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 5504, :column 38, :line 5504, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 5504, :column 8, :line 5504, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5504, :column 26, :line 5504, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 5504, :column 30, :line 5504, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 5504, :column 34, :line 5504, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 5504, :column 38, :line 5504, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 5504, :column 25, :line 5504, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5504, :column 26, :line 5504, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 5504, :column 30, :line 5504, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 5504, :column 34, :line 5504, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 5504, :column 38, :line 5504, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 5504, :column 8, :line 5504, :file "cljs/core.cljs"} balance-left-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7252, :column 4, :line 7252, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7252, :column 5, :line 7252, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7252, :column 7, :line 7252, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7256, :column 7, :line 7256, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7256, :column 9, :line 7256, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 7260, :column 4, :line 7260, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7260, :column 5, :line 7260, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7260, :column 7, :line 7260, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7260, :column 9, :line 7260, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7260, :column 11, :line 7260, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 7264, :column 4, :line 7264, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7264, :column 5, :line 7264, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7264, :column 7, :line 7264, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7264, :column 9, :line 7264, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7264, :column 11, :line 7264, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 7264, :column 13, :line 7264, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 7264, :column 15, :line 7264, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 7247, :column 7, :line 7247, :file "cljs/core.cljs"} swap! ^{:arglists (^{:end-column 9, :end-line 7252, :column 4, :line 7252, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7252, :column 5, :line 7252, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7252, :column 7, :line 7252, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7256, :column 7, :line 7256, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7256, :column 9, :line 7256, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 7260, :column 4, :line 7260, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7260, :column 5, :line 7260, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7260, :column 7, :line 7260, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7260, :column 9, :line 7260, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7260, :column 11, :line 7260, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 7264, :column 4, :line 7264, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7264, :column 5, :line 7264, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7264, :column 7, :line 7264, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7264, :column 9, :line 7264, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7264, :column 11, :line 7264, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 7264, :column 13, :line 7264, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 7264, :column 15, :line 7264, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 7247, :column 7, :line 7247, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7252, :column 5, :line 7252, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7252, :column 7, :line 7252, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7256, :column 7, :line 7256, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7256, :column 9, :line 7256, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7260, :column 5, :line 7260, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7260, :column 7, :line 7260, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7260, :column 9, :line 7260, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7260, :column 11, :line 7260, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7264, :column 5, :line 7264, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7264, :column 7, :line 7264, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7264, :column 9, :line 7264, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7264, :column 11, :line 7264, :file "cljs/core.cljs"} y & ^{:end-column 20, :end-line 7264, :column 15, :line 7264, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7252, :column 4, :line 7252, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7252, :column 5, :line 7252, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7252, :column 7, :line 7252, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7256, :column 7, :line 7256, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7256, :column 9, :line 7256, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 7260, :column 4, :line 7260, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7260, :column 5, :line 7260, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7260, :column 7, :line 7260, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7260, :column 9, :line 7260, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7260, :column 11, :line 7260, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 7264, :column 4, :line 7264, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7264, :column 5, :line 7264, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7264, :column 7, :line 7264, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7264, :column 9, :line 7264, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7264, :column 11, :line 7264, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 7264, :column 13, :line 7264, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 7264, :column 15, :line 7264, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 7247, :column 7, :line 7247, :file "cljs/core.cljs"} swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 6205, :column 3, :line 6205, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6205, :column 4, :line 6205, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6203, :column 7, :line 6203, :file "cljs/core.cljs"} vals ^{:arglists (^{:end-column 13, :end-line 6205, :column 3, :line 6205, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6205, :column 4, :line 6205, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6203, :column 7, :line 6203, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6205, :column 4, :line 6205, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6205, :column 3, :line 6205, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6205, :column 4, :line 6205, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6203, :column 7, :line 6203, :file "cljs/core.cljs"} vals, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 375, :column 18, :line 375, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} -chunked-next ^{:arglists (^{:end-column 24, :end-line 375, :column 18, :line 375, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 375, :column 18, :line 375, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} -chunked-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 4575, :column 25, :line 4575, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} remove-pair ^{:arglists (^{:end-column 27, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 4575, :column 25, :line 4575, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 25, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 4575, :column 25, :line 4575, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 4575, :column 25, :line 4575, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} remove-pair, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} IMap ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentTreeMap}, :protocol-symbol true, :end-column 19, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} IMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 6481, :column 4, :line 6481, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6481, :column 5, :line 6481, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6481, :column 16, :line 6481, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 6481, :column 18, :line 6481, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 6479, :column 7, :line 6479, :file "cljs/core.cljs"} sorted-set-by ^{:arglists (^{:end-column 23, :end-line 6481, :column 4, :line 6481, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6481, :column 5, :line 6481, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6481, :column 16, :line 6481, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 6481, :column 18, :line 6481, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 6479, :column 7, :line 6479, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 6481, :column 5, :line 6481, :file "cljs/core.cljs"} comparator & ^{:end-column 23, :end-line 6481, :column 18, :line 6481, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 6481, :column 4, :line 6481, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6481, :column 5, :line 6481, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6481, :column 16, :line 6481, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 6481, :column 18, :line 6481, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 6479, :column 7, :line 6479, :file "cljs/core.cljs"} sorted-set-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 3373, :column 10, :line 3373, :file "cljs/core.cljs"} PersistentVector {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 3373, :column 10, :line 3373, :file "cljs/core.cljs"} PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 70, :end-line 3373, :column 27, :line 3373, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 467, :column 18, :line 467, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 467, :column 19, :line 467, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 467, :column 7, :line 467, :file "cljs/core.cljs"} cloneable? ^{:arglists (^{:end-column 25, :end-line 467, :column 18, :line 467, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 467, :column 19, :line 467, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 467, :column 7, :line 467, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 467, :column 19, :line 467, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 467, :column 18, :line 467, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 467, :column 19, :line 467, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 467, :column 7, :line 467, :file "cljs/core.cljs"} cloneable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4557, :column 25, :line 4557, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4557, :column 26, :line 4557, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 4557, :column 30, :line 4557, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 4557, :column 8, :line 4557, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 4557, :column 16, :line 4557, :file "cljs/core.cljs"} key-test ^{:arglists (^{:end-column 36, :end-line 4557, :column 25, :line 4557, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4557, :column 26, :line 4557, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 4557, :column 30, :line 4557, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 4557, :column 8, :line 4557, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 4557, :column 16, :line 4557, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 4557, :column 26, :line 4557, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 4557, :column 30, :line 4557, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4557, :column 25, :line 4557, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4557, :column 26, :line 4557, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 4557, :column 30, :line 4557, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 4557, :column 8, :line 4557, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 4557, :column 16, :line 4557, :file "cljs/core.cljs"} key-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7686, :column 11, :line 7686, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7686, :column 12, :line 7686, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 7686, :column 4, :line 7686, :file "cljs/core.cljs"} -reset ^{:arglists (^{:end-column 15, :end-line 7686, :column 11, :line 7686, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7686, :column 12, :line 7686, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 7686, :column 4, :line 7686, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 7686, :column 12, :line 7686, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7686, :column 11, :line 7686, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7686, :column 12, :line 7686, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 7686, :column 4, :line 7686, :file "cljs/core.cljs"} -reset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1269, :column 3, :line 1269, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1269, :column 4, :line 1269, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1267, :column 8, :line 1267, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1267, :column 16, :line 1267, :file "cljs/core.cljs"} true? ^{:arglists (^{:end-column 6, :end-line 1269, :column 3, :line 1269, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1269, :column 4, :line 1269, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1267, :column 8, :line 1267, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1267, :column 16, :line 1267, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1269, :column 4, :line 1269, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1269, :column 3, :line 1269, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1269, :column 4, :line 1269, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1267, :column 8, :line 1267, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1267, :column 16, :line 1267, :file "cljs/core.cljs"} true?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 165, :column 3, :line 165, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 165, :column 4, :line 165, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 162, :column 8, :line 162, :file "cljs/core.cljs"} array, :end-column 20, :end-line 162, :column 14, :line 162, :file "cljs/core.cljs"} array ^{:arglists (^{:end-column 13, :end-line 165, :column 3, :line 165, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 165, :column 4, :line 165, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 162, :column 8, :line 162, :file "cljs/core.cljs"} array, :end-column 20, :end-line 162, :column 14, :line 162, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 165, :column 4, :line 165, :file "cljs/core.cljs"} var-args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 165, :column 3, :line 165, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 165, :column 4, :line 165, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 162, :column 8, :line 162, :file "cljs/core.cljs"} array, :end-column 20, :end-line 162, :column 14, :line 162, :file "cljs/core.cljs"} array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7030, :column 1, :line 7025, :file "cljs/core.cljs"} print ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7030, :column 1, :line 7025, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 31, :end-line 7029, :column 26, :line 7029, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7030, :column 1, :line 7025, :file "cljs/core.cljs"} print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 273, :column 10, :line 273, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 273, :column 11, :line 273, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 273, :column 4, :line 273, :file "cljs/core.cljs"} -peek ^{:arglists (^{:end-column 16, :end-line 273, :column 10, :line 273, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 273, :column 11, :line 273, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 273, :column 4, :line 273, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 273, :column 11, :line 273, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 273, :column 10, :line 273, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 273, :column 11, :line 273, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 273, :column 4, :line 273, :file "cljs/core.cljs"} -peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} ISeq ^{:impls #{cljs.core/Cons cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq}, :protocol-symbol true, :end-column 19, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} ISeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 850, :column 7, :line 850, :file "cljs/core.cljs"} empty ^{:arglists (^{:end-column 9, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 850, :column 7, :line 850, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 850, :column 7, :line 850, :file "cljs/core.cljs"} empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 7879, :column 2, :line 7879, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 7879, :column 11, :line 7879, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 7877, :column 7, :line 7877, :file "cljs/core.cljs"} remove-method ^{:arglists (^{:end-column 24, :end-line 7879, :column 2, :line 7879, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 7879, :column 11, :line 7879, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 7877, :column 7, :line 7877, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 7879, :column 11, :line 7879, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 7879, :column 2, :line 7879, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 7879, :column 11, :line 7879, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 7877, :column 7, :line 7877, :file "cljs/core.cljs"} remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 3936, :column 10, :line 3936, :file "cljs/core.cljs"} PersistentQueueSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 3936, :column 10, :line 3936, :file "cljs/core.cljs"} PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 63, :end-line 3936, :column 29, :line 3936, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 44, :end-line 5523, :column 26, :line 5523, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5523, :column 27, :line 5523, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5523, :column 31, :line 5523, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 5523, :column 35, :line 5523, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 5523, :column 40, :line 5523, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 5523, :column 8, :line 5523, :file "cljs/core.cljs"} balance-right-del ^{:arglists (^{:end-column 44, :end-line 5523, :column 26, :line 5523, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5523, :column 27, :line 5523, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5523, :column 31, :line 5523, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 5523, :column 35, :line 5523, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 5523, :column 40, :line 5523, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 5523, :column 8, :line 5523, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 5523, :column 27, :line 5523, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5523, :column 31, :line 5523, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 5523, :column 35, :line 5523, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 5523, :column 40, :line 5523, :file "cljs/core.cljs"} del]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 5523, :column 26, :line 5523, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5523, :column 27, :line 5523, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5523, :column 31, :line 5523, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 5523, :column 35, :line 5523, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 5523, :column 40, :line 5523, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 5523, :column 8, :line 5523, :file "cljs/core.cljs"} balance-right-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1530, :column 4, :line 1530, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1530, :column 5, :line 1530, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1531, :column 4, :line 1531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1531, :column 5, :line 1531, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1531, :column 7, :line 1531, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1532, :column 7, :line 1532, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1532, :column 9, :line 1532, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1527, :column 8, :line 1527, :file "cljs/core.cljs"} number} / ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1530, :column 4, :line 1530, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1530, :column 5, :line 1530, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1531, :column 4, :line 1531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1531, :column 5, :line 1531, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1531, :column 7, :line 1531, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1532, :column 7, :line 1532, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1532, :column 9, :line 1532, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1527, :column 8, :line 1527, :file "cljs/core.cljs"} number} {:arglists (^number [^{:end-column 7, :end-line 1530, :column 5, :line 1530, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1531, :column 5, :line 1531, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1531, :column 7, :line 1531, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1532, :column 7, :line 1532, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1530, :column 4, :line 1530, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1530, :column 5, :line 1530, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1531, :column 4, :line 1531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1531, :column 5, :line 1531, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1531, :column 7, :line 1531, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1532, :column 7, :line 1532, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1532, :column 9, :line 1532, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1527, :column 8, :line 1527, :file "cljs/core.cljs"} number} /, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 4584, :column 15, :line 4584, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4584, :column 16, :line 4584, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 4584, :column 21, :line 4584, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 4584, :column 8, :line 4584, :file "cljs/core.cljs"} bitpos ^{:arglists (^{:end-column 27, :end-line 4584, :column 15, :line 4584, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4584, :column 16, :line 4584, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 4584, :column 21, :line 4584, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 4584, :column 8, :line 4584, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 4584, :column 16, :line 4584, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 4584, :column 21, :line 4584, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 4584, :column 15, :line 4584, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4584, :column 16, :line 4584, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 4584, :column 21, :line 4584, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 4584, :column 8, :line 4584, :file "cljs/core.cljs"} bitpos, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1767, :column 3, :line 1767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1767, :column 6, :line 1767, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} bit-or ^{:arglists (^{:end-column 8, :end-line 1767, :column 3, :line 1767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1767, :column 6, :line 1767, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1767, :column 6, :line 1767, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1767, :column 3, :line 1767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1767, :column 6, :line 1767, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} bit-or, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 3548, :column 14, :line 3548, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3548, :column 15, :line 3548, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 3548, :column 17, :line 3548, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} vector ^{:arglists (^{:end-column 22, :end-line 3548, :column 14, :line 3548, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3548, :column 15, :line 3548, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 3548, :column 17, :line 3548, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 22, :end-line 3548, :column 17, :line 3548, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 3548, :column 14, :line 3548, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3548, :column 15, :line 3548, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 3548, :column 17, :line 3548, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} vector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 662, :column 10, :line 662, :file "cljs/core.cljs"} hash-coll ^{:arglists (^{:end-column 24, :end-line 1896, :column 18, :line 1896, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1896, :column 19, :line 1896, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1896, :column 19, :line 1896, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1896, :column 18, :line 1896, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1896, :column 19, :line 1896, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} hash-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 4567, :column 4, :line 4567, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4567, :column 5, :line 4567, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4567, :column 9, :line 4567, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4567, :column 11, :line 4567, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 4570, :column 4, :line 4570, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4570, :column 5, :line 4570, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4570, :column 9, :line 4570, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4570, :column 11, :line 4570, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 4570, :column 13, :line 4570, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 4570, :column 15, :line 4570, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 4566, :column 8, :line 4566, :file "cljs/core.cljs"} clone-and-set ^{:arglists (^{:end-column 13, :end-line 4567, :column 4, :line 4567, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4567, :column 5, :line 4567, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4567, :column 9, :line 4567, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4567, :column 11, :line 4567, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 4570, :column 4, :line 4570, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4570, :column 5, :line 4570, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4570, :column 9, :line 4570, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4570, :column 11, :line 4570, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 4570, :column 13, :line 4570, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 4570, :column 15, :line 4570, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 4566, :column 8, :line 4566, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 9, :end-line 4567, :column 5, :line 4567, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4567, :column 9, :line 4567, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4567, :column 11, :line 4567, :file "cljs/core.cljs"} a] ^cljs.core/array [^{:end-column 9, :end-line 4570, :column 5, :line 4570, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4570, :column 9, :line 4570, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4570, :column 11, :line 4570, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 4570, :column 13, :line 4570, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 4570, :column 15, :line 4570, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 4567, :column 4, :line 4567, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4567, :column 5, :line 4567, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4567, :column 9, :line 4567, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4567, :column 11, :line 4567, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 4570, :column 4, :line 4570, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4570, :column 5, :line 4570, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4570, :column 9, :line 4570, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4570, :column 11, :line 4570, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 4570, :column 13, :line 4570, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 4570, :column 15, :line 4570, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 4566, :column 8, :line 4566, :file "cljs/core.cljs"} clone-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 36, :end-line 4472, :column 10, :line 4472, :file "cljs/core.cljs"} array->transient-hash-map ^{:arglists (^{:end-column 43, :end-line 4544, :column 34, :line 4544, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4544, :column 35, :line 4544, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 4544, :column 39, :line 4544, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 4544, :column 8, :line 4544, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj [^{:end-column 39, :end-line 4544, :column 35, :line 4544, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 4544, :column 39, :line 4544, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4544, :column 34, :line 4544, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4544, :column 35, :line 4544, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 4544, :column 39, :line 4544, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 4544, :column 8, :line 4544, :file "cljs/core.cljs"} array->transient-hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1574, :column 4, :line 1574, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1574, :column 5, :line 1574, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1575, :column 7, :line 1575, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1575, :column 9, :line 1575, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1570, :column 8, :line 1570, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1570, :column 16, :line 1570, :file "cljs/core.cljs"} >= ^{:arglists (^{:end-column 7, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1574, :column 4, :line 1574, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1574, :column 5, :line 1574, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1575, :column 7, :line 1575, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1575, :column 9, :line 1575, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1570, :column 8, :line 1570, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1570, :column 16, :line 1570, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1574, :column 5, :line 1574, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1575, :column 7, :line 1575, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1574, :column 4, :line 1574, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1574, :column 5, :line 1574, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1575, :column 7, :line 1575, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1575, :column 9, :line 1575, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1570, :column 8, :line 1570, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1570, :column 16, :line 1570, :file "cljs/core.cljs"} >=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map])} ->TransientHashSet ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map])} {:arglists (^cljs.core/TransientHashSet [^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map])} ->TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3014, :column 4, :line 3014, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3014, :column 5, :line 3014, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3015, :column 4, :line 3015, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3015, :column 5, :line 3015, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3015, :column 7, :line 3015, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3012, :column 7, :line 3012, :file "cljs/core.cljs"} drop-last ^{:arglists (^{:end-column 7, :end-line 3014, :column 4, :line 3014, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3014, :column 5, :line 3014, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3015, :column 4, :line 3015, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3015, :column 5, :line 3015, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3015, :column 7, :line 3015, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3012, :column 7, :line 3012, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3014, :column 5, :line 3014, :file "cljs/core.cljs"} s] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3015, :column 5, :line 3015, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3015, :column 7, :line 3015, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3014, :column 4, :line 3014, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3014, :column 5, :line 3014, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3015, :column 4, :line 3015, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3015, :column 5, :line 3015, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3015, :column 7, :line 3015, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3012, :column 7, :line 3012, :file "cljs/core.cljs"} drop-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 98, :column 24, :line 98, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 98, :column 25, :line 98, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} object? ^{:arglists (^{:end-column 27, :end-line 98, :column 24, :line 98, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 98, :column 25, :line 98, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 98, :column 25, :line 98, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 98, :column 24, :line 98, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 98, :column 25, :line 98, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} object?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash])} ->ArrayNodeSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ArrayNodeSeq [^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash])} ->ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1682, :column 5, :line 1682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1683, :column 7, :line 1683, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1683, :column 9, :line 1683, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1683, :column 11, :line 1683, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1678, :column 8, :line 1678, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1678, :column 15, :line 1678, :file "cljs/core.cljs"} unchecked-substract ^{:arglists (^{:end-column 7, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1682, :column 5, :line 1682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1683, :column 7, :line 1683, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1683, :column 9, :line 1683, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1683, :column 11, :line 1683, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1678, :column 8, :line 1678, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1678, :column 15, :line 1678, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1682, :column 5, :line 1682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1683, :column 7, :line 1683, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1683, :column 11, :line 1683, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1682, :column 5, :line 1682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1683, :column 7, :line 1683, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1683, :column 9, :line 1683, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1683, :column 11, :line 1683, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1678, :column 8, :line 1678, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1678, :column 15, :line 1678, :file "cljs/core.cljs"} unchecked-substract, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5820, :column 24, :line 5820, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5820, :column 25, :line 5820, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 5820, :column 30, :line 5820, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 5820, :column 8, :line 5820, :file "cljs/core.cljs"} tree-map-append ^{:arglists (^{:end-column 36, :end-line 5820, :column 24, :line 5820, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5820, :column 25, :line 5820, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 5820, :column 30, :line 5820, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 5820, :column 8, :line 5820, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5820, :column 25, :line 5820, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 5820, :column 30, :line 5820, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5820, :column 24, :line 5820, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5820, :column 25, :line 5820, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 5820, :column 30, :line 5820, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 5820, :column 8, :line 5820, :file "cljs/core.cljs"} tree-map-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2693, :column 3, :line 2693, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} not-empty ^{:arglists (^{:end-column 9, :end-line 2693, :column 3, :line 2693, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2693, :column 3, :line 2693, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} not-empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6502, :column 3, :line 6502, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6502, :column 4, :line 6502, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 6500, :column 7, :line 6500, :file "cljs/core.cljs"} distinct ^{:arglists (^{:end-column 9, :end-line 6502, :column 3, :line 6502, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6502, :column 4, :line 6502, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 6500, :column 7, :line 6500, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 6502, :column 4, :line 6502, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6502, :column 3, :line 6502, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6502, :column 4, :line 6502, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 6500, :column 7, :line 6500, :file "cljs/core.cljs"} distinct, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3198, :column 4, :line 3198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3198, :column 5, :line 3198, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3198, :column 7, :line 3198, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3200, :column 4, :line 3200, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3200, :column 5, :line 3200, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3200, :column 7, :line 3200, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3200, :column 12, :line 3200, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3206, :column 4, :line 3206, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3206, :column 5, :line 3206, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3206, :column 7, :line 3206, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3206, :column 12, :line 3206, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3206, :column 16, :line 3206, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3192, :column 7, :line 3192, :file "cljs/core.cljs"} partition ^{:arglists (^{:end-column 12, :end-line 3198, :column 4, :line 3198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3198, :column 5, :line 3198, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3198, :column 7, :line 3198, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3200, :column 4, :line 3200, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3200, :column 5, :line 3200, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3200, :column 7, :line 3200, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3200, :column 12, :line 3200, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3206, :column 4, :line 3206, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3206, :column 5, :line 3206, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3206, :column 7, :line 3206, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3206, :column 12, :line 3206, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3206, :column 16, :line 3206, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3192, :column 7, :line 3192, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3198, :column 5, :line 3198, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3198, :column 7, :line 3198, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3200, :column 5, :line 3200, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3200, :column 7, :line 3200, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3200, :column 12, :line 3200, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3206, :column 5, :line 3206, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3206, :column 7, :line 3206, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3206, :column 12, :line 3206, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3206, :column 16, :line 3206, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3198, :column 4, :line 3198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3198, :column 5, :line 3198, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3198, :column 7, :line 3198, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3200, :column 4, :line 3200, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3200, :column 5, :line 3200, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3200, :column 7, :line 3200, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3200, :column 12, :line 3200, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3206, :column 4, :line 3206, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3206, :column 5, :line 3206, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3206, :column 7, :line 3206, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3206, :column 12, :line 3206, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3206, :column 16, :line 3206, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3192, :column 7, :line 3192, :file "cljs/core.cljs"} partition, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 7685, :column 14, :line 7685, :file "cljs/core.cljs"} IMultiFn ^{:impls #{cljs.core/MultiFn}, :protocol-symbol true, :end-column 23, :end-line 7685, :column 14, :line 7685, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 7685, :column 14, :line 7685, :file "cljs/core.cljs"} IMultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1692, :column 20, :line 1692, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1692, :column 21, :line 1692, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1692, :column 16, :line 1692, :file "cljs/core.cljs"} fix ^{:arglists (^{:end-column 23, :end-line 1692, :column 20, :line 1692, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1692, :column 21, :line 1692, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1692, :column 16, :line 1692, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1692, :column 21, :line 1692, :file "cljs/core.cljs"} q]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1692, :column 20, :line 1692, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1692, :column 21, :line 1692, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1692, :column 16, :line 1692, :file "cljs/core.cljs"} fix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 1996, :column 10, :line 1996, :file "cljs/core.cljs"} EmptyList {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 1996, :column 10, :line 1996, :file "cljs/core.cljs"} EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 1996, :column 20, :line 1996, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 256, :column 14, :line 256, :file "cljs/core.cljs"} IAssociative ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/RedNode}, :protocol-symbol true, :end-column 27, :end-line 256, :column 14, :line 256, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 256, :column 14, :line 256, :file "cljs/core.cljs"} IAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1780, :column 3, :line 1780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1780, :column 4, :line 1780, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1780, :column 6, :line 1780, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1778, :column 7, :line 1778, :file "cljs/core.cljs"} bit-flip ^{:arglists (^{:end-column 8, :end-line 1780, :column 3, :line 1780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1780, :column 4, :line 1780, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1780, :column 6, :line 1780, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1778, :column 7, :line 1778, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1780, :column 4, :line 1780, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1780, :column 6, :line 1780, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1780, :column 3, :line 1780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1780, :column 4, :line 1780, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1780, :column 6, :line 1780, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1778, :column 7, :line 1778, :file "cljs/core.cljs"} bit-flip, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2437, :column 4, :line 2437, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2437, :column 5, :line 2437, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2441, :column 4, :line 2441, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2441, :column 5, :line 2441, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2441, :column 10, :line 2441, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2436, :column 7, :line 2436, :file "cljs/core.cljs"} long-array ^{:arglists (^{:end-column 17, :end-line 2437, :column 4, :line 2437, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2437, :column 5, :line 2437, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2441, :column 4, :line 2441, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2441, :column 5, :line 2441, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2441, :column 10, :line 2441, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2436, :column 7, :line 2436, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2437, :column 5, :line 2437, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2441, :column 5, :line 2441, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2441, :column 10, :line 2441, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2437, :column 4, :line 2437, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2437, :column 5, :line 2437, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2441, :column 4, :line 2441, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2441, :column 5, :line 2441, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2441, :column 10, :line 2441, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2436, :column 7, :line 2436, :file "cljs/core.cljs"} long-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7575, :column 4, :line 7575, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7575, :column 5, :line 7575, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7576, :column 4, :line 7576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7576, :column 5, :line 7576, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7576, :column 7, :line 7576, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} descendants ^{:arglists (^{:end-column 9, :end-line 7575, :column 4, :line 7575, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7575, :column 5, :line 7575, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7576, :column 4, :line 7576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7576, :column 5, :line 7576, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7576, :column 7, :line 7576, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7575, :column 5, :line 7575, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 7576, :column 5, :line 7576, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7576, :column 7, :line 7576, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7575, :column 4, :line 7575, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7575, :column 5, :line 7575, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7576, :column 4, :line 7576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7576, :column 5, :line 7576, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7576, :column 7, :line 7576, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} descendants, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f])} ->Delay ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f])} {:arglists (^cljs.core/Delay [^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f])} ->Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 3341, :column 18, :line 3341, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3341, :column 19, :line 3341, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3341, :column 22, :line 3341, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3341, :column 8, :line 3341, :file "cljs/core.cljs"} array-for ^{:arglists (^{:end-column 24, :end-line 3341, :column 18, :line 3341, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3341, :column 19, :line 3341, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3341, :column 22, :line 3341, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3341, :column 8, :line 3341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3341, :column 19, :line 3341, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3341, :column 22, :line 3341, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 3341, :column 18, :line 3341, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3341, :column 19, :line 3341, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3341, :column 22, :line 3341, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3341, :column 8, :line 3341, :file "cljs/core.cljs"} array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 6218, :column 3, :line 6218, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6218, :column 4, :line 6218, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6218, :column 6, :line 6218, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6214, :column 7, :line 6214, :file "cljs/core.cljs"} merge ^{:arglists (^{:end-column 11, :end-line 6218, :column 3, :line 6218, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6218, :column 4, :line 6218, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6218, :column 6, :line 6218, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6214, :column 7, :line 6214, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 6218, :column 6, :line 6218, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6218, :column 3, :line 6218, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6218, :column 4, :line 6218, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6218, :column 6, :line 6218, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6214, :column 7, :line 6214, :file "cljs/core.cljs"} merge, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 303, :column 14, :line 303, :file "cljs/core.cljs"} ISeqable ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 303, :column 14, :line 303, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 303, :column 14, :line 303, :file "cljs/core.cljs"} ISeqable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1728, :column 3, :line 1728, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1728, :column 6, :line 1728, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1726, :column 7, :line 1726, :file "cljs/core.cljs"} js-mod ^{:arglists (^{:end-column 8, :end-line 1728, :column 3, :line 1728, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1728, :column 6, :line 1728, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1726, :column 7, :line 1726, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1728, :column 6, :line 1728, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1728, :column 3, :line 1728, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1728, :column 6, :line 1728, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1726, :column 7, :line 1726, :file "cljs/core.cljs"} js-mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1294, :column 3, :line 1294, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1294, :column 4, :line 1294, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1292, :column 8, :line 1292, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1292, :column 16, :line 1292, :file "cljs/core.cljs"} integer? ^{:arglists (^{:end-column 6, :end-line 1294, :column 3, :line 1294, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1294, :column 4, :line 1294, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1292, :column 8, :line 1292, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1292, :column 16, :line 1292, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1294, :column 4, :line 1294, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1294, :column 3, :line 1294, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1294, :column 4, :line 1294, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1292, :column 8, :line 1292, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1292, :column 16, :line 1292, :file "cljs/core.cljs"} integer?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1041, :column 10, :line 1041, :file "cljs/core.cljs"} MetaFn {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1041, :column 10, :line 1041, :file "cljs/core.cljs"} MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 27, :end-line 1041, :column 17, :line 1041, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 12, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3176, :column 5, :line 3176, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3176, :column 7, :line 3176, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3176, :column 10, :line 3176, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3178, :column 4, :line 3178, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3178, :column 5, :line 3178, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3178, :column 7, :line 3178, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3178, :column 10, :line 3178, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3178, :column 13, :line 3178, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3180, :column 7, :line 3180, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3180, :column 10, :line 3180, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3180, :column 13, :line 3180, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3180, :column 18, :line 3180, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3167, :column 7, :line 3167, :file "cljs/core.cljs"} mapv ^{:arglists (^{:end-column 12, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3176, :column 5, :line 3176, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3176, :column 7, :line 3176, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3176, :column 10, :line 3176, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3178, :column 4, :line 3178, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3178, :column 5, :line 3178, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3178, :column 7, :line 3178, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3178, :column 10, :line 3178, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3178, :column 13, :line 3178, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3180, :column 7, :line 3180, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3180, :column 10, :line 3180, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3180, :column 13, :line 3180, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3180, :column 18, :line 3180, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3167, :column 7, :line 3167, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 3176, :column 5, :line 3176, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3176, :column 7, :line 3176, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3176, :column 10, :line 3176, :file "cljs/core.cljs"} c2] [^{:end-column 7, :end-line 3178, :column 5, :line 3178, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3178, :column 7, :line 3178, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3178, :column 10, :line 3178, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3178, :column 13, :line 3178, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3180, :column 7, :line 3180, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3180, :column 10, :line 3180, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3180, :column 13, :line 3180, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3180, :column 18, :line 3180, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3176, :column 5, :line 3176, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3176, :column 7, :line 3176, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3176, :column 10, :line 3176, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3178, :column 4, :line 3178, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3178, :column 5, :line 3178, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3178, :column 7, :line 3178, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3178, :column 10, :line 3178, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3178, :column 13, :line 3178, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3180, :column 7, :line 3180, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3180, :column 10, :line 3180, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3180, :column 13, :line 3180, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3180, :column 18, :line 3180, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3167, :column 7, :line 3167, :file "cljs/core.cljs"} mapv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 6558, :column 4, :line 6558, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6558, :column 5, :line 6558, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6558, :column 7, :line 6558, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6560, :column 4, :line 6560, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6560, :column 5, :line 6560, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6560, :column 7, :line 6560, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 6560, :column 12, :line 6560, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.", :end-column 21, :end-line 6555, :column 7, :line 6555, :file "cljs/core.cljs"} partition-all ^{:arglists (^{:end-column 12, :end-line 6558, :column 4, :line 6558, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6558, :column 5, :line 6558, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6558, :column 7, :line 6558, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6560, :column 4, :line 6560, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6560, :column 5, :line 6560, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6560, :column 7, :line 6560, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 6560, :column 12, :line 6560, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.", :end-column 21, :end-line 6555, :column 7, :line 6555, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6558, :column 5, :line 6558, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6558, :column 7, :line 6558, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 6560, :column 5, :line 6560, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6560, :column 7, :line 6560, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 6560, :column 12, :line 6560, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 6558, :column 4, :line 6558, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6558, :column 5, :line 6558, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6558, :column 7, :line 6558, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6560, :column 4, :line 6560, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6560, :column 5, :line 6560, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6560, :column 7, :line 6560, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 6560, :column 12, :line 6560, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.", :end-column 21, :end-line 6555, :column 7, :line 6555, :file "cljs/core.cljs"} partition-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 6709, :column 3, :line 6709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6709, :column 4, :line 6709, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 6709, :column 6, :line 6709, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of partitions.", :end-column 20, :end-line 6706, :column 7, :line 6706, :file "cljs/core.cljs"} partition-by ^{:arglists (^{:end-column 11, :end-line 6709, :column 3, :line 6709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6709, :column 4, :line 6709, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 6709, :column 6, :line 6709, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of partitions.", :end-column 20, :end-line 6706, :column 7, :line 6706, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 6709, :column 4, :line 6709, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 6709, :column 6, :line 6709, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6709, :column 3, :line 6709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6709, :column 4, :line 6709, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 6709, :column 6, :line 6709, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of partitions.", :end-column 20, :end-line 6706, :column 7, :line 6706, :file "cljs/core.cljs"} partition-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 47, :end-line 4232, :column 38, :line 4232, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4232, :column 39, :line 4232, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4232, :column 43, :line 4232, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4232, :column 45, :line 4232, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4232, :column 8, :line 4232, :file "cljs/core.cljs"} array-map-index-of-identical? ^{:arglists (^{:end-column 47, :end-line 4232, :column 38, :line 4232, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4232, :column 39, :line 4232, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4232, :column 43, :line 4232, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4232, :column 45, :line 4232, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4232, :column 8, :line 4232, :file "cljs/core.cljs"} {:arglists ([^{:end-column 43, :end-line 4232, :column 39, :line 4232, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4232, :column 43, :line 4232, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4232, :column 45, :line 4232, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 47, :end-line 4232, :column 38, :line 4232, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4232, :column 39, :line 4232, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4232, :column 43, :line 4232, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4232, :column 45, :line 4232, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4232, :column 8, :line 4232, :file "cljs/core.cljs"} array-map-index-of-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 306, :column 14, :line 306, :file "cljs/core.cljs"} ISequential ^{:impls #{cljs.core/Cons cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 26, :end-line 306, :column 14, :line 306, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 306, :column 14, :line 306, :file "cljs/core.cljs"} ISequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash])} ->LazySeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/LazySeq [^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash])} ->LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 4035, :column 3, :line 4035, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4035, :column 4, :line 4035, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4035, :column 6, :line 4035, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4032, :column 8, :line 4032, :file "cljs/core.cljs"} equiv-map ^{:arglists (^{:end-column 8, :end-line 4035, :column 3, :line 4035, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4035, :column 4, :line 4035, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4035, :column 6, :line 4035, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4032, :column 8, :line 4032, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 4035, :column 4, :line 4035, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4035, :column 6, :line 4035, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 4035, :column 3, :line 4035, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4035, :column 4, :line 4035, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4035, :column 6, :line 4035, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4032, :column 8, :line 4032, :file "cljs/core.cljs"} equiv-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2477, :column 4, :line 2477, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2477, :column 5, :line 2477, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2481, :column 10, :line 2481, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2476, :column 7, :line 2476, :file "cljs/core.cljs"} object-array ^{:arglists (^{:end-column 17, :end-line 2477, :column 4, :line 2477, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2477, :column 5, :line 2477, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2481, :column 10, :line 2481, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2476, :column 7, :line 2476, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2477, :column 5, :line 2477, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2481, :column 10, :line 2481, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2477, :column 4, :line 2477, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2477, :column 5, :line 2477, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2481, :column 10, :line 2481, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2476, :column 7, :line 2476, :file "cljs/core.cljs"} object-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 76, :column 20, :line 76, :file "cljs/core.cljs"} Keyword {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2132, :column 10, :line 2132, :file "cljs/core.cljs"} Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 47, :end-line 2132, :column 18, :line 2132, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 16, :end-line 7584, :column 4, :line 7584, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7584, :column 5, :line 7584, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7584, :column 9, :line 7584, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7588, :column 4, :line 7588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7588, :column 5, :line 7588, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7588, :column 7, :line 7588, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7588, :column 11, :line 7588, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} derive ^{:arglists (^{:end-column 16, :end-line 7584, :column 4, :line 7584, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7584, :column 5, :line 7584, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7584, :column 9, :line 7584, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7588, :column 4, :line 7588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7588, :column 5, :line 7588, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7588, :column 7, :line 7588, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7588, :column 11, :line 7588, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7584, :column 5, :line 7584, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7584, :column 9, :line 7584, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 7588, :column 5, :line 7588, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7588, :column 7, :line 7588, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7588, :column 11, :line 7588, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7584, :column 4, :line 7584, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7584, :column 5, :line 7584, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7584, :column 9, :line 7584, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7588, :column 4, :line 7588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7588, :column 5, :line 7588, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7588, :column 7, :line 7588, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7588, :column 11, :line 7588, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} derive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} IChunkedSeq ^{:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 26, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} IChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 7967, :column 32, :line 7967, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7967, :column 33, :line 7967, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 7967, :column 8, :line 7967, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 7967, :column 16, :line 7967, :file "cljs/core.cljs"} special-symbol? ^{:arglists (^{:end-column 35, :end-line 7967, :column 32, :line 7967, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7967, :column 33, :line 7967, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 7967, :column 8, :line 7967, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 7967, :column 16, :line 7967, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 35, :end-line 7967, :column 33, :line 7967, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 7967, :column 32, :line 7967, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7967, :column 33, :line 7967, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 7967, :column 8, :line 7967, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 7967, :column 16, :line 7967, :file "cljs/core.cljs"} special-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7566, :column 4, :line 7566, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7566, :column 5, :line 7566, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7567, :column 4, :line 7567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7567, :column 5, :line 7567, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7567, :column 7, :line 7567, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} ancestors ^{:arglists (^{:end-column 9, :end-line 7566, :column 4, :line 7566, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7566, :column 5, :line 7566, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7567, :column 4, :line 7567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7567, :column 5, :line 7567, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7567, :column 7, :line 7567, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7566, :column 5, :line 7566, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 7567, :column 5, :line 7567, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7567, :column 7, :line 7567, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7566, :column 4, :line 7566, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7566, :column 5, :line 7566, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7567, :column 4, :line 7567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7567, :column 5, :line 7567, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7567, :column 7, :line 7567, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} ancestors, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 6584, :column 4, :line 6584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6584, :column 5, :line 6584, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6584, :column 8, :line 6584, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6584, :column 13, :line 6584, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6590, :column 4, :line 6590, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6590, :column 5, :line 6590, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6590, :column 8, :line 6590, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6590, :column 19, :line 6590, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6590, :column 29, :line 6590, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6590, :column 38, :line 6590, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 6580, :column 7, :line 6580, :file "cljs/core.cljs"} subseq ^{:arglists (^{:end-column 17, :end-line 6584, :column 4, :line 6584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6584, :column 5, :line 6584, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6584, :column 8, :line 6584, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6584, :column 13, :line 6584, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6590, :column 4, :line 6590, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6590, :column 5, :line 6590, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6590, :column 8, :line 6590, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6590, :column 19, :line 6590, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6590, :column 29, :line 6590, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6590, :column 38, :line 6590, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 6580, :column 7, :line 6580, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 6584, :column 5, :line 6584, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6584, :column 8, :line 6584, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6584, :column 13, :line 6584, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 6590, :column 5, :line 6590, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6590, :column 8, :line 6590, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6590, :column 19, :line 6590, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6590, :column 29, :line 6590, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6590, :column 38, :line 6590, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 6584, :column 4, :line 6584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6584, :column 5, :line 6584, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6584, :column 8, :line 6584, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6584, :column 13, :line 6584, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6590, :column 4, :line 6590, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6590, :column 5, :line 6590, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6590, :column 8, :line 6590, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6590, :column 19, :line 6590, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6590, :column 29, :line 6590, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6590, :column 38, :line 6590, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 6580, :column 7, :line 6580, :file "cljs/core.cljs"} subseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7346, :column 4, :line 7346, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 7347, :column 4, :line 7347, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 7347, :column 5, :line 7347, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 7342, :column 7, :line 7342, :file "cljs/core.cljs"} gensym ^{:arglists (^{:end-column 6, :end-line 7346, :column 4, :line 7346, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 7347, :column 4, :line 7347, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 7347, :column 5, :line 7347, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 7342, :column 7, :line 7342, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 19, :end-line 7347, :column 5, :line 7347, :file "cljs/core.cljs"} prefix-string]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7346, :column 4, :line 7346, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 7347, :column 4, :line 7347, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 7347, :column 5, :line 7347, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 7342, :column 7, :line 7342, :file "cljs/core.cljs"} gensym, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 251, :column 22, :line 251, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 251, :column 23, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 251, :column 5, :line 251, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 251, :column 16, :line 251, :file "cljs/core.cljs"} -next ^{:arglists (^{:end-column 28, :end-line 251, :column 22, :line 251, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 251, :column 23, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 251, :column 5, :line 251, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 251, :column 16, :line 251, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 251, :column 23, :line 251, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 251, :column 22, :line 251, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 251, :column 23, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 251, :column 5, :line 251, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 251, :column 16, :line 251, :file "cljs/core.cljs"} -next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr])} ->HashCollisionNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/HashCollisionNode [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr])} ->HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7373, :column 3, :line 7373, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7373, :column 4, :line 7373, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 7371, :column 8, :line 7371, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 7371, :column 16, :line 7371, :file "cljs/core.cljs"} delay? ^{:arglists (^{:end-column 6, :end-line 7373, :column 3, :line 7373, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7373, :column 4, :line 7373, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 7371, :column 8, :line 7371, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 7371, :column 16, :line 7371, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 7373, :column 4, :line 7373, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7373, :column 3, :line 7373, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7373, :column 4, :line 7373, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 7371, :column 8, :line 7371, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 7371, :column 16, :line 7371, :file "cljs/core.cljs"} delay?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 4555, :column 10, :line 4555, :file "cljs/core.cljs"} create-inode-seq ^{:arglists (^{:end-column 11, :end-line 5098, :column 4, :line 5098, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5098, :column 5, :line 5098, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5100, :column 4, :line 5100, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5100, :column 5, :line 5100, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5100, :column 11, :line 5100, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5100, :column 13, :line 5100, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5097, :column 8, :line 5097, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5098, :column 5, :line 5098, :file "cljs/core.cljs"} nodes] [^{:end-column 11, :end-line 5100, :column 5, :line 5100, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5100, :column 11, :line 5100, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5100, :column 13, :line 5100, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5098, :column 4, :line 5098, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5098, :column 5, :line 5098, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5100, :column 4, :line 5100, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5100, :column 5, :line 5100, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5100, :column 11, :line 5100, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5100, :column 13, :line 5100, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5097, :column 8, :line 5097, :file "cljs/core.cljs"} create-inode-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3153, :column 3, :line 3153, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3153, :column 4, :line 3153, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} flatten ^{:arglists (^{:end-column 6, :end-line 3153, :column 3, :line 3153, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3153, :column 4, :line 3153, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3153, :column 4, :line 3153, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3153, :column 3, :line 3153, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3153, :column 4, :line 3153, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} flatten, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 263, :column 18, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 263, :column 23, :line 263, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} -dissoc ^{:arglists (^{:end-column 25, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 263, :column 18, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 263, :column 23, :line 263, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 263, :column 18, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 263, :column 23, :line 263, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 263, :column 18, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 263, :column 23, :line 263, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} -dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1723, :column 15, :line 1723, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1723, :column 7, :line 1723, :file "cljs/core.cljs"} doubles ^{:arglists (^{:end-column 18, :end-line 1723, :column 15, :line 1723, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1723, :column 7, :line 1723, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1723, :column 15, :line 1723, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1723, :column 7, :line 1723, :file "cljs/core.cljs"} doubles, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 257, :column 28, :line 257, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 257, :column 29, :line 257, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 257, :column 34, :line 257, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 257, :column 5, :line 257, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 257, :column 13, :line 257, :file "cljs/core.cljs"} -contains-key? ^{:arglists (^{:end-column 36, :end-line 257, :column 28, :line 257, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 257, :column 29, :line 257, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 257, :column 34, :line 257, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 257, :column 5, :line 257, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 257, :column 13, :line 257, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 257, :column 29, :line 257, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 257, :column 34, :line 257, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 257, :column 28, :line 257, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 257, :column 29, :line 257, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 257, :column 34, :line 257, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 257, :column 5, :line 257, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 257, :column 13, :line 257, :file "cljs/core.cljs"} -contains-key?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7335, :column 3, :line 7335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7335, :column 4, :line 7335, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7335, :column 9, :line 7335, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 7331, :column 7, :line 7331, :file "cljs/core.cljs"} remove-watch ^{:arglists (^{:end-column 13, :end-line 7335, :column 3, :line 7335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7335, :column 4, :line 7335, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7335, :column 9, :line 7335, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 7331, :column 7, :line 7331, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7335, :column 4, :line 7335, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7335, :column 9, :line 7335, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7335, :column 3, :line 7335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7335, :column 4, :line 7335, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7335, :column 9, :line 7335, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 7331, :column 7, :line 7331, :file "cljs/core.cljs"} remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7931, :column 4, :line 7931, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7931, :column 5, :line 7931, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7931, :column 9, :line 7931, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 7933, :column 4, :line 7933, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7933, :column 5, :line 7933, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7933, :column 9, :line 7933, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 7933, :column 13, :line 7933, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} ex-info ^{:arglists (^{:end-column 13, :end-line 7931, :column 4, :line 7931, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7931, :column 5, :line 7931, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7931, :column 9, :line 7931, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 7933, :column 4, :line 7933, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7933, :column 5, :line 7933, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7933, :column 9, :line 7933, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 7933, :column 13, :line 7933, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 7931, :column 5, :line 7931, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7931, :column 9, :line 7931, :file "cljs/core.cljs"} map] ^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 7933, :column 5, :line 7933, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7933, :column 9, :line 7933, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 7933, :column 13, :line 7933, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7931, :column 4, :line 7931, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7931, :column 5, :line 7931, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7931, :column 9, :line 7931, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 7933, :column 4, :line 7933, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7933, :column 5, :line 7933, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7933, :column 9, :line 7933, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 7933, :column 13, :line 7933, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} ex-info, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1289, :column 21, :line 1289, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1289, :column 22, :line 1289, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1289, :column 8, :line 1289, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1289, :column 16, :line 1289, :file "cljs/core.cljs"} ifn? ^{:arglists (^{:end-column 24, :end-line 1289, :column 21, :line 1289, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1289, :column 22, :line 1289, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1289, :column 8, :line 1289, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1289, :column 16, :line 1289, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 24, :end-line 1289, :column 22, :line 1289, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1289, :column 21, :line 1289, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1289, :column 22, :line 1289, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1289, :column 8, :line 1289, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1289, :column 16, :line 1289, :file "cljs/core.cljs"} ifn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7170, :column 14, :line 7170, :file "cljs/core.cljs"} IAtom ^{:impls #{cljs.core/Atom}, :protocol-symbol true, :end-column 20, :end-line 7170, :column 14, :line 7170, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7170, :column 14, :line 7170, :file "cljs/core.cljs"} IAtom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash])} ->PersistentQueue ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentQueue [^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash])} ->PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 339, :column 14, :line 339, :file "cljs/core.cljs"} IWatchable ^{:impls #{cljs.core/Atom}, :protocol-symbol true, :end-column 25, :end-line 339, :column 14, :line 339, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 339, :column 14, :line 339, :file "cljs/core.cljs"} IWatchable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3275, :column 22, :line 3275, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3275, :column 23, :line 3275, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3275, :column 8, :line 3275, :file "cljs/core.cljs"} pv-fresh-node ^{:arglists (^{:end-column 28, :end-line 3275, :column 22, :line 3275, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3275, :column 23, :line 3275, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3275, :column 8, :line 3275, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3275, :column 23, :line 3275, :file "cljs/core.cljs"} edit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3275, :column 22, :line 3275, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3275, :column 23, :line 3275, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3275, :column 8, :line 3275, :file "cljs/core.cljs"} pv-fresh-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 3553, :column 10, :line 3553, :file "cljs/core.cljs"} subvec ^{:arglists (^{:end-column 13, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3743, :column 7, :line 3743, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 3745, :column 4, :line 3745, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3745, :column 5, :line 3745, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3745, :column 7, :line 3745, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 3745, :column 13, :line 3745, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 3737, :column 7, :line 3737, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3743, :column 7, :line 3743, :file "cljs/core.cljs"} start] ^cljs.core/Subvec [^{:end-column 7, :end-line 3745, :column 5, :line 3745, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3745, :column 7, :line 3745, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 3745, :column 13, :line 3745, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3743, :column 7, :line 3743, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 3745, :column 4, :line 3745, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3745, :column 5, :line 3745, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3745, :column 7, :line 3745, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 3745, :column 13, :line 3745, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 3737, :column 7, :line 3737, :file "cljs/core.cljs"} subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 359, :column 15, :line 359, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 359, :column 16, :line 359, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} -pop! ^{:arglists (^{:end-column 22, :end-line 359, :column 15, :line 359, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 359, :column 16, :line 359, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 359, :column 16, :line 359, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 359, :column 15, :line 359, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 359, :column 16, :line 359, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} -pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2782, :column 4, :line 2782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2782, :column 5, :line 2782, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 2783, :column 4, :line 2783, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2783, :column 5, :line 2783, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2783, :column 7, :line 2783, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2785, :column 7, :line 2785, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2785, :column 12, :line 2785, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2787, :column 7, :line 2787, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2787, :column 12, :line 2787, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2789, :column 5, :line 2789, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2789, :column 7, :line 2789, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2789, :column 12, :line 2789, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2789, :column 17, :line 2789, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 2789, :column 22, :line 2789, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 2789, :column 24, :line 2789, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 2778, :column 7, :line 2778, :file "cljs/core.cljs"} partial ^{:arglists (^{:end-column 7, :end-line 2782, :column 4, :line 2782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2782, :column 5, :line 2782, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 2783, :column 4, :line 2783, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2783, :column 5, :line 2783, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2783, :column 7, :line 2783, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2785, :column 7, :line 2785, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2785, :column 12, :line 2785, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2787, :column 7, :line 2787, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2787, :column 12, :line 2787, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2789, :column 5, :line 2789, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2789, :column 7, :line 2789, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2789, :column 12, :line 2789, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2789, :column 17, :line 2789, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 2789, :column 22, :line 2789, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 2789, :column 24, :line 2789, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 2778, :column 7, :line 2778, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2782, :column 5, :line 2782, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 2783, :column 5, :line 2783, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2783, :column 7, :line 2783, :file "cljs/core.cljs"} arg1] ^function [^{:end-column 7, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2785, :column 7, :line 2785, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2785, :column 12, :line 2785, :file "cljs/core.cljs"} arg2] ^function [^{:end-column 7, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2787, :column 7, :line 2787, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2787, :column 12, :line 2787, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} arg3] ^function [^{:end-column 7, :end-line 2789, :column 5, :line 2789, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2789, :column 7, :line 2789, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2789, :column 12, :line 2789, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2789, :column 17, :line 2789, :file "cljs/core.cljs"} arg3 & ^{:end-column 29, :end-line 2789, :column 24, :line 2789, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2782, :column 4, :line 2782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2782, :column 5, :line 2782, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 2783, :column 4, :line 2783, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2783, :column 5, :line 2783, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2783, :column 7, :line 2783, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2785, :column 7, :line 2785, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2785, :column 12, :line 2785, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2787, :column 7, :line 2787, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2787, :column 12, :line 2787, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2789, :column 5, :line 2789, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2789, :column 7, :line 2789, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2789, :column 12, :line 2789, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2789, :column 17, :line 2789, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 2789, :column 22, :line 2789, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 2789, :column 24, :line 2789, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 2778, :column 7, :line 2778, :file "cljs/core.cljs"} partial, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1226, :column 3, :line 1226, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1226, :column 4, :line 1226, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1225, :column 8, :line 1225, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1225, :column 16, :line 1225, :file "cljs/core.cljs"} chunked-seq? ^{:arglists (^{:end-column 6, :end-line 1226, :column 3, :line 1226, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1226, :column 4, :line 1226, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1225, :column 8, :line 1225, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1225, :column 16, :line 1225, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1226, :column 4, :line 1226, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1226, :column 3, :line 1226, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1226, :column 4, :line 1226, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1225, :column 8, :line 1225, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1225, :column 16, :line 1225, :file "cljs/core.cljs"} chunked-seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3055, :column 3, :line 3055, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3055, :column 4, :line 3055, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3055, :column 6, :line 3055, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3053, :column 7, :line 3053, :file "cljs/core.cljs"} replicate ^{:arglists (^{:end-column 8, :end-line 3055, :column 3, :line 3055, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3055, :column 4, :line 3055, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3055, :column 6, :line 3055, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3053, :column 7, :line 3053, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3055, :column 4, :line 3055, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3055, :column 6, :line 3055, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3055, :column 3, :line 3055, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3055, :column 4, :line 3055, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3055, :column 6, :line 3055, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3053, :column 7, :line 3053, :file "cljs/core.cljs"} replicate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3972, :column 10, :line 3972, :file "cljs/core.cljs"} PersistentQueue {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3972, :column 10, :line 3972, :file "cljs/core.cljs"} PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 3972, :column 26, :line 3972, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 9, :end-line 6550, :column 4, :line 6550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6550, :column 5, :line 6550, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6550, :column 7, :line 6550, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6551, :column 4, :line 6551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6551, :column 5, :line 6551, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6551, :column 7, :line 6551, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6551, :column 9, :line 6551, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6552, :column 4, :line 6552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6552, :column 5, :line 6552, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6552, :column 7, :line 6552, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6552, :column 9, :line 6552, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6552, :column 11, :line 6552, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6552, :column 13, :line 6552, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 6548, :column 7, :line 6548, :file "cljs/core.cljs"} min-key ^{:arglists (^{:end-column 9, :end-line 6550, :column 4, :line 6550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6550, :column 5, :line 6550, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6550, :column 7, :line 6550, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6551, :column 4, :line 6551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6551, :column 5, :line 6551, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6551, :column 7, :line 6551, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6551, :column 9, :line 6551, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6552, :column 4, :line 6552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6552, :column 5, :line 6552, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6552, :column 7, :line 6552, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6552, :column 9, :line 6552, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6552, :column 11, :line 6552, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6552, :column 13, :line 6552, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 6548, :column 7, :line 6548, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6550, :column 5, :line 6550, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6550, :column 7, :line 6550, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 6551, :column 5, :line 6551, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6551, :column 7, :line 6551, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6551, :column 9, :line 6551, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 6552, :column 5, :line 6552, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6552, :column 7, :line 6552, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6552, :column 9, :line 6552, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 6552, :column 13, :line 6552, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6550, :column 4, :line 6550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6550, :column 5, :line 6550, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6550, :column 7, :line 6550, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6551, :column 4, :line 6551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6551, :column 5, :line 6551, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6551, :column 7, :line 6551, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6551, :column 9, :line 6551, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6552, :column 4, :line 6552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6552, :column 5, :line 6552, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6552, :column 7, :line 6552, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6552, :column 9, :line 6552, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6552, :column 11, :line 6552, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6552, :column 13, :line 6552, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 6548, :column 7, :line 6548, :file "cljs/core.cljs"} min-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1916, :column 18, :line 1916, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1916, :column 19, :line 1916, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 1916, :column 8, :line 1916, :file "cljs/core.cljs"} hash-iset ^{:arglists (^{:end-column 21, :end-line 1916, :column 18, :line 1916, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1916, :column 19, :line 1916, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 1916, :column 8, :line 1916, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 1916, :column 19, :line 1916, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1916, :column 18, :line 1916, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1916, :column 19, :line 1916, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 1916, :column 8, :line 1916, :file "cljs/core.cljs"} hash-iset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 590, :column 3, :line 590, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 590, :column 4, :line 590, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 588, :column 7, :line 588, :file "cljs/core.cljs"} reduced ^{:arglists (^{:end-column 6, :end-line 590, :column 3, :line 590, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 590, :column 4, :line 590, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 588, :column 7, :line 588, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 6, :end-line 590, :column 4, :line 590, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 590, :column 3, :line 590, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 590, :column 4, :line 590, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 588, :column 7, :line 588, :file "cljs/core.cljs"} reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6810, :column 3, :line 6810, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6810, :column 4, :line 6810, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6810, :column 7, :line 6810, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 6808, :column 7, :line 6808, :file "cljs/core.cljs"} re-matches ^{:arglists (^{:end-column 9, :end-line 6810, :column 3, :line 6810, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6810, :column 4, :line 6810, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6810, :column 7, :line 6810, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 6808, :column 7, :line 6808, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6810, :column 4, :line 6810, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6810, :column 7, :line 6810, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6810, :column 3, :line 6810, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6810, :column 4, :line 6810, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6810, :column 7, :line 6810, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 6808, :column 7, :line 6808, :file "cljs/core.cljs"} re-matches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6051, :column 3, :line 6051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6051, :column 4, :line 6051, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6051, :column 6, :line 6051, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6048, :column 7, :line 6048, :file "cljs/core.cljs"} array-map ^{:arglists (^{:end-column 14, :end-line 6051, :column 3, :line 6051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6051, :column 4, :line 6051, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6051, :column 6, :line 6051, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6048, :column 7, :line 6048, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [& ^{:end-column 14, :end-line 6051, :column 6, :line 6051, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6051, :column 3, :line 6051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6051, :column 4, :line 6051, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6051, :column 6, :line 6051, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6048, :column 7, :line 6048, :file "cljs/core.cljs"} array-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} ITransientSet ^{:impls #{cljs.core/TransientHashSet}, :protocol-symbol true, :end-column 28, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} ITransientSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1614, :column 30, :line 1614, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1614, :column 31, :line 1614, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1614, :column 8, :line 1614, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1614, :column 15, :line 1614, :file "cljs/core.cljs"} unchecked-byte ^{:arglists (^{:end-column 33, :end-line 1614, :column 30, :line 1614, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1614, :column 31, :line 1614, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1614, :column 8, :line 1614, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1614, :column 15, :line 1614, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1614, :column 31, :line 1614, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1614, :column 30, :line 1614, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1614, :column 31, :line 1614, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1614, :column 8, :line 1614, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1614, :column 15, :line 1614, :file "cljs/core.cljs"} unchecked-byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 4614, :column 10, :line 4614, :file "cljs/core.cljs"} ArrayNode {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 4827, :column 10, :line 4827, :file "cljs/core.cljs"} ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 4827, :column 20, :line 4827, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash])} ->ChunkedSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash])} ->ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2883, :column 4, :line 2883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2883, :column 5, :line 2883, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2891, :column 4, :line 2891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2891, :column 5, :line 2891, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2891, :column 8, :line 2891, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2899, :column 4, :line 2899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2899, :column 5, :line 2899, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2899, :column 8, :line 2899, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2899, :column 11, :line 2899, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2907, :column 4, :line 2907, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2907, :column 5, :line 2907, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2907, :column 8, :line 2907, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2907, :column 11, :line 2907, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2907, :column 14, :line 2907, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2907, :column 16, :line 2907, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 2878, :column 7, :line 2878, :file "cljs/core.cljs"} every-pred ^{:arglists (^{:end-column 7, :end-line 2883, :column 4, :line 2883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2883, :column 5, :line 2883, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2891, :column 4, :line 2891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2891, :column 5, :line 2891, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2891, :column 8, :line 2891, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2899, :column 4, :line 2899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2899, :column 5, :line 2899, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2899, :column 8, :line 2899, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2899, :column 11, :line 2899, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2907, :column 4, :line 2907, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2907, :column 5, :line 2907, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2907, :column 8, :line 2907, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2907, :column 11, :line 2907, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2907, :column 14, :line 2907, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2907, :column 16, :line 2907, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 2878, :column 7, :line 2878, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 2883, :column 5, :line 2883, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 2891, :column 5, :line 2891, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2891, :column 8, :line 2891, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 2899, :column 5, :line 2899, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2899, :column 8, :line 2899, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2899, :column 11, :line 2899, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 2907, :column 5, :line 2907, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2907, :column 8, :line 2907, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2907, :column 11, :line 2907, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 2907, :column 16, :line 2907, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2883, :column 4, :line 2883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2883, :column 5, :line 2883, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2891, :column 4, :line 2891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2891, :column 5, :line 2891, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2891, :column 8, :line 2891, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2899, :column 4, :line 2899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2899, :column 5, :line 2899, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2899, :column 8, :line 2899, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2899, :column 11, :line 2899, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2907, :column 4, :line 2907, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2907, :column 5, :line 2907, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2907, :column 8, :line 2907, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2907, :column 11, :line 2907, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2907, :column 14, :line 2907, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2907, :column 16, :line 2907, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 2878, :column 7, :line 2878, :file "cljs/core.cljs"} every-pred, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 6141, :column 3, :line 6141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6141, :column 4, :line 6141, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6139, :column 7, :line 6139, :file "cljs/core.cljs"} keys ^{:arglists (^{:end-column 13, :end-line 6141, :column 3, :line 6141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6141, :column 4, :line 6141, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6139, :column 7, :line 6139, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6141, :column 4, :line 6141, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6141, :column 3, :line 6141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6141, :column 4, :line 6141, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6139, :column 7, :line 6139, :file "cljs/core.cljs"} keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 131, :column 24, :line 131, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 131, :column 25, :line 131, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 131, :column 31, :line 131, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} missing-protocol ^{:arglists (^{:end-column 35, :end-line 131, :column 24, :line 131, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 131, :column 25, :line 131, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 131, :column 31, :line 131, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} {:arglists (^js/Error [^{:end-column 31, :end-line 131, :column 25, :line 131, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 131, :column 31, :line 131, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 131, :column 24, :line 131, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 131, :column 25, :line 131, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 131, :column 31, :line 131, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} missing-protocol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 4332, :column 10, :line 4332, :file "cljs/core.cljs"} PersistentArrayMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 4332, :column 10, :line 4332, :file "cljs/core.cljs"} PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 4332, :column 29, :line 4332, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 1321, :column 4, :line 1321, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1321, :column 5, :line 1321, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1322, :column 7, :line 1322, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1323, :column 7, :line 1323, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1323, :column 9, :line 1323, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1323, :column 11, :line 1323, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} distinct? ^{:arglists (^{:end-column 7, :end-line 1321, :column 4, :line 1321, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1321, :column 5, :line 1321, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1322, :column 7, :line 1322, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1323, :column 7, :line 1323, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1323, :column 9, :line 1323, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1323, :column 11, :line 1323, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1321, :column 5, :line 1321, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1322, :column 7, :line 1322, :file "cljs/core.cljs"} y] ^cljs.core/boolean [^{:end-column 7, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1323, :column 7, :line 1323, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1323, :column 11, :line 1323, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1321, :column 4, :line 1321, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1321, :column 5, :line 1321, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1322, :column 7, :line 1322, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1323, :column 7, :line 1323, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1323, :column 9, :line 1323, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1323, :column 11, :line 1323, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} distinct?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 42, :end-line 4030, :column 1, :line 4030, :file "cljs/core.cljs"} never-equiv ^{:private true, :end-column 42, :end-line 4030, :column 1, :line 4030, :file "cljs/core.cljs"} {:tag cljs.core/NeverEquiv, :op :var, :name ^{:private true, :end-column 42, :end-line 4030, :column 1, :line 4030, :file "cljs/core.cljs"} never-equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1616, :column 31, :line 1616, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1616, :column 32, :line 1616, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1616, :column 8, :line 1616, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1616, :column 15, :line 1616, :file "cljs/core.cljs"} unchecked-short ^{:arglists (^{:end-column 34, :end-line 1616, :column 31, :line 1616, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1616, :column 32, :line 1616, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1616, :column 8, :line 1616, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1616, :column 15, :line 1616, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1616, :column 32, :line 1616, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1616, :column 31, :line 1616, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1616, :column 32, :line 1616, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1616, :column 8, :line 1616, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1616, :column 15, :line 1616, :file "cljs/core.cljs"} unchecked-short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash])} ->Range ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Range [^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash])} ->Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7890, :column 3, :line 7890, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 7888, :column 7, :line 7888, :file "cljs/core.cljs"} methods ^{:arglists (^{:end-column 12, :end-line 7890, :column 3, :line 7890, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 7888, :column 7, :line 7888, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7890, :column 3, :line 7890, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 7888, :column 7, :line 7888, :file "cljs/core.cljs"} methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2729, :column 8, :line 2729, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2729, :column 16, :line 2729, :file "cljs/core.cljs"} odd? ^{:arglists (^{:end-column 6, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2729, :column 8, :line 2729, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2729, :column 16, :line 2729, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2729, :column 8, :line 2729, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2729, :column 16, :line 2729, :file "cljs/core.cljs"} odd?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end])} ->ArrayChunk ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end])} {:arglists (^cljs.core/ArrayChunk [^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end])} ->ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 601, :column 12, :line 601, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 612, :column 4, :line 612, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 612, :column 5, :line 612, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 612, :column 12, :line 612, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 612, :column 14, :line 612, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 621, :column 4, :line 621, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 621, :column 5, :line 621, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 621, :column 12, :line 621, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 621, :column 14, :line 621, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 621, :column 18, :line 621, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 598, :column 8, :line 598, :file "cljs/core.cljs"} ci-reduce ^{:arglists (^{:end-column 14, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 601, :column 12, :line 601, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 612, :column 4, :line 612, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 612, :column 5, :line 612, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 612, :column 12, :line 612, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 612, :column 14, :line 612, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 621, :column 4, :line 621, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 621, :column 5, :line 621, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 621, :column 12, :line 621, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 621, :column 14, :line 621, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 621, :column 18, :line 621, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 598, :column 8, :line 598, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 601, :column 12, :line 601, :file "cljs/core.cljs"} f] [^{:end-column 12, :end-line 612, :column 5, :line 612, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 612, :column 12, :line 612, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 612, :column 14, :line 612, :file "cljs/core.cljs"} val] [^{:end-column 12, :end-line 621, :column 5, :line 621, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 621, :column 12, :line 621, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 621, :column 14, :line 621, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 621, :column 18, :line 621, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 601, :column 12, :line 601, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 612, :column 4, :line 612, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 612, :column 5, :line 612, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 612, :column 12, :line 612, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 612, :column 14, :line 612, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 621, :column 4, :line 621, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 621, :column 5, :line 621, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 621, :column 12, :line 621, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 621, :column 14, :line 621, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 621, :column 18, :line 621, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 598, :column 8, :line 598, :file "cljs/core.cljs"} ci-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3 ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 7690, :column 16, :line 7690, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7690, :column 17, :line 7690, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7690, :column 20, :line 7690, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7690, :column 4, :line 7690, :file "cljs/core.cljs"} -get-method ^{:arglists (^{:end-column 33, :end-line 7690, :column 16, :line 7690, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7690, :column 17, :line 7690, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7690, :column 20, :line 7690, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7690, :column 4, :line 7690, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 7690, :column 17, :line 7690, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7690, :column 20, :line 7690, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 7690, :column 16, :line 7690, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7690, :column 17, :line 7690, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7690, :column 20, :line 7690, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7690, :column 4, :line 7690, :file "cljs/core.cljs"} -get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6720, :column 3, :line 6720, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6720, :column 4, :line 6720, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 6717, :column 7, :line 6717, :file "cljs/core.cljs"} frequencies ^{:arglists (^{:end-column 9, :end-line 6720, :column 3, :line 6720, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6720, :column 4, :line 6720, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 6717, :column 7, :line 6717, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 6720, :column 4, :line 6720, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6720, :column 3, :line 6720, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6720, :column 4, :line 6720, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 6717, :column 7, :line 6717, :file "cljs/core.cljs"} frequencies, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1210, :column 3, :line 1210, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1210, :column 4, :line 1210, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1208, :column 8, :line 1208, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1208, :column 16, :line 1208, :file "cljs/core.cljs"} reduceable? ^{:arglists (^{:end-column 6, :end-line 1210, :column 3, :line 1210, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1210, :column 4, :line 1210, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1208, :column 8, :line 1208, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1208, :column 16, :line 1208, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1210, :column 4, :line 1210, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1210, :column 3, :line 1210, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1210, :column 4, :line 1210, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1208, :column 8, :line 1208, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1208, :column 16, :line 1208, :file "cljs/core.cljs"} reduceable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 33, :end-line 1138, :column 1, :line 1138, :file "cljs/core.cljs"} string-hash-cache ^{:end-column 33, :end-line 1138, :column 1, :line 1138, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 33, :end-line 1138, :column 1, :line 1138, :file "cljs/core.cljs"} string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 6599, :column 4, :line 6599, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6599, :column 5, :line 6599, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6599, :column 8, :line 6599, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6599, :column 13, :line 6599, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6605, :column 4, :line 6605, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6605, :column 5, :line 6605, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6605, :column 8, :line 6605, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6605, :column 19, :line 6605, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6605, :column 29, :line 6605, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6605, :column 38, :line 6605, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 6595, :column 7, :line 6595, :file "cljs/core.cljs"} rsubseq ^{:arglists (^{:end-column 17, :end-line 6599, :column 4, :line 6599, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6599, :column 5, :line 6599, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6599, :column 8, :line 6599, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6599, :column 13, :line 6599, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6605, :column 4, :line 6605, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6605, :column 5, :line 6605, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6605, :column 8, :line 6605, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6605, :column 19, :line 6605, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6605, :column 29, :line 6605, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6605, :column 38, :line 6605, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 6595, :column 7, :line 6595, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 6599, :column 5, :line 6599, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6599, :column 8, :line 6599, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6599, :column 13, :line 6599, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 6605, :column 5, :line 6605, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6605, :column 8, :line 6605, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6605, :column 19, :line 6605, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6605, :column 29, :line 6605, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6605, :column 38, :line 6605, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 6599, :column 4, :line 6599, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6599, :column 5, :line 6599, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6599, :column 8, :line 6599, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6599, :column 13, :line 6599, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6605, :column 4, :line 6605, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6605, :column 5, :line 6605, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6605, :column 8, :line 6605, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6605, :column 19, :line 6605, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6605, :column 29, :line 6605, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6605, :column 38, :line 6605, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 6595, :column 7, :line 6595, :file "cljs/core.cljs"} rsubseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 580, :column 3, :line 580, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 580, :column 4, :line 580, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 578, :column 7, :line 578, :file "cljs/core.cljs"} inc ^{:arglists (^{:end-column 6, :end-line 580, :column 3, :line 580, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 580, :column 4, :line 580, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 578, :column 7, :line 578, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 580, :column 4, :line 580, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 580, :column 3, :line 580, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 580, :column 4, :line 580, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 578, :column 7, :line 578, :file "cljs/core.cljs"} inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 140, :column 17, :line 140, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 140, :column 18, :line 140, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 140, :column 7, :line 140, :file "cljs/core.cljs"} type->str ^{:arglists (^{:end-column 21, :end-line 140, :column 17, :line 140, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 140, :column 18, :line 140, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 140, :column 7, :line 140, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 140, :column 18, :line 140, :file "cljs/core.cljs"} ty]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 140, :column 17, :line 140, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 140, :column 18, :line 140, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 140, :column 7, :line 140, :file "cljs/core.cljs"} type->str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4082, :column 23, :line 4082, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} obj-clone ^{:arglists (^{:end-column 26, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4082, :column 23, :line 4082, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} {:arglists (^object [^{:end-column 23, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4082, :column 23, :line 4082, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4082, :column 23, :line 4082, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} obj-clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 7895, :column 3, :line 7895, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7895, :column 4, :line 7895, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 7895, :column 12, :line 7895, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 7892, :column 7, :line 7892, :file "cljs/core.cljs"} get-method ^{:arglists (^{:end-column 25, :end-line 7895, :column 3, :line 7895, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7895, :column 4, :line 7895, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 7895, :column 12, :line 7895, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 7892, :column 7, :line 7892, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7895, :column 4, :line 7895, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 7895, :column 12, :line 7895, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 7895, :column 3, :line 7895, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7895, :column 4, :line 7895, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 7895, :column 12, :line 7895, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 7892, :column 7, :line 7892, :file "cljs/core.cljs"} get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 3319, :column 35, :line 3319, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3319, :column 36, :line 3319, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3319, :column 38, :line 3319, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3319, :column 8, :line 3319, :file "cljs/core.cljs"} vector-index-out-of-bounds ^{:arglists (^{:end-column 42, :end-line 3319, :column 35, :line 3319, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3319, :column 36, :line 3319, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3319, :column 38, :line 3319, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3319, :column 8, :line 3319, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 38, :end-line 3319, :column 36, :line 3319, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3319, :column 38, :line 3319, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 3319, :column 35, :line 3319, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3319, :column 36, :line 3319, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3319, :column 38, :line 3319, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3319, :column 8, :line 3319, :file "cljs/core.cljs"} vector-index-out-of-bounds, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1775, :column 3, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1775, :column 6, :line 1775, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} bit-clear ^{:arglists (^{:end-column 8, :end-line 1775, :column 3, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1775, :column 6, :line 1775, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1775, :column 6, :line 1775, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1775, :column 3, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1775, :column 6, :line 1775, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} bit-clear, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 6610, :column 10, :line 6610, :file "cljs/core.cljs"} Range {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 6610, :column 10, :line 6610, :file "cljs/core.cljs"} Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 6610, :column 16, :line 6610, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 3112, :column 4, :line 3112, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3112, :column 5, :line 3112, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3112, :column 10, :line 3112, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3109, :column 7, :line 3109, :file "cljs/core.cljs"} filter ^{:arglists (^{:end-column 15, :end-line 3112, :column 4, :line 3112, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3112, :column 5, :line 3112, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3112, :column 10, :line 3112, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3109, :column 7, :line 3109, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 10, :end-line 3112, :column 5, :line 3112, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3112, :column 10, :line 3112, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 3112, :column 4, :line 3112, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3112, :column 5, :line 3112, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3112, :column 10, :line 3112, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3109, :column 7, :line 3109, :file "cljs/core.cljs"} filter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMapSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 49, :end-line 4555, :column 27, :line 4555, :file "cljs/core.cljs"} create-array-node-seq ^{:arglists (^{:end-column 11, :end-line 5156, :column 4, :line 5156, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5156, :column 5, :line 5156, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5157, :column 4, :line 5157, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5157, :column 5, :line 5157, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5157, :column 10, :line 5157, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5157, :column 16, :line 5157, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5157, :column 18, :line 5157, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5155, :column 8, :line 5155, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5156, :column 5, :line 5156, :file "cljs/core.cljs"} nodes] [^{:end-column 10, :end-line 5157, :column 5, :line 5157, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5157, :column 10, :line 5157, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5157, :column 16, :line 5157, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5157, :column 18, :line 5157, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5156, :column 4, :line 5156, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5156, :column 5, :line 5156, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5157, :column 4, :line 5157, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5157, :column 5, :line 5157, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5157, :column 10, :line 5157, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5157, :column 16, :line 5157, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5157, :column 18, :line 5157, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5155, :column 8, :line 5155, :file "cljs/core.cljs"} create-array-node-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 358, :column 20, :line 358, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 358, :column 26, :line 358, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 358, :column 28, :line 358, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 358, :column 5, :line 358, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 358, :column 9, :line 358, :file "cljs/core.cljs"} -assoc-n! ^{:arglists (^{:end-column 32, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 358, :column 20, :line 358, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 358, :column 26, :line 358, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 358, :column 28, :line 358, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 358, :column 5, :line 358, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 358, :column 9, :line 358, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 358, :column 20, :line 358, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 358, :column 26, :line 358, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 358, :column 28, :line 358, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 358, :column 20, :line 358, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 358, :column 26, :line 358, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 358, :column 28, :line 358, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 358, :column 5, :line 358, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 358, :column 9, :line 358, :file "cljs/core.cljs"} -assoc-n!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} IWithMeta ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 24, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} IWithMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 400, :column 10, :line 400, :file "cljs/core.cljs"} list ^{:arglists (^{:end-column 18, :end-line 2061, :column 12, :line 2061, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2061, :column 13, :line 2061, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2061, :column 15, :line 2061, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} {:arglists (^cljs.core/not-native [& ^{:end-column 18, :end-line 2061, :column 15, :line 2061, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2061, :column 12, :line 2061, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2061, :column 13, :line 2061, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2061, :column 15, :line 2061, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1505, :column 4, :line 1505, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1506, :column 4, :line 1506, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1506, :column 5, :line 1506, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1507, :column 5, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1507, :column 7, :line 1507, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1508, :column 4, :line 1508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1508, :column 5, :line 1508, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1508, :column 7, :line 1508, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1508, :column 9, :line 1508, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1508, :column 11, :line 1508, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1503, :column 8, :line 1503, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1503, :column 15, :line 1503, :file "cljs/core.cljs"} + ^{:arglists (^{:end-column 6, :end-line 1505, :column 4, :line 1505, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1506, :column 4, :line 1506, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1506, :column 5, :line 1506, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1507, :column 5, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1507, :column 7, :line 1507, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1508, :column 4, :line 1508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1508, :column 5, :line 1508, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1508, :column 7, :line 1508, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1508, :column 9, :line 1508, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1508, :column 11, :line 1508, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1503, :column 8, :line 1503, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1503, :column 15, :line 1503, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1506, :column 5, :line 1506, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1507, :column 5, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1507, :column 7, :line 1507, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1508, :column 5, :line 1508, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1508, :column 7, :line 1508, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1508, :column 11, :line 1508, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1505, :column 4, :line 1505, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1506, :column 4, :line 1506, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1506, :column 5, :line 1506, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1507, :column 5, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1507, :column 7, :line 1507, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1508, :column 4, :line 1508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1508, :column 5, :line 1508, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1508, :column 7, :line 1508, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1508, :column 9, :line 1508, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1508, :column 11, :line 1508, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1503, :column 8, :line 1503, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1503, :column 15, :line 1503, :file "cljs/core.cljs"} +, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6703, :column 3, :line 6703, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6703, :column 4, :line 6703, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6703, :column 9, :line 6703, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 6701, :column 7, :line 6701, :file "cljs/core.cljs"} split-with ^{:arglists (^{:end-column 14, :end-line 6703, :column 3, :line 6703, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6703, :column 4, :line 6703, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6703, :column 9, :line 6703, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 6701, :column 7, :line 6701, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 9, :end-line 6703, :column 4, :line 6703, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6703, :column 9, :line 6703, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6703, :column 3, :line 6703, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6703, :column 4, :line 6703, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6703, :column 9, :line 6703, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 6701, :column 7, :line 6701, :file "cljs/core.cljs"} split-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr])} ->VectorNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr])} ->VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 179, :column 4, :line 179, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 179, :column 5, :line 179, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 179, :column 11, :line 179, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 179, :column 13, :line 179, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 181, :column 15, :line 181, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 181, :column 20, :line 181, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 181, :column 22, :line 181, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 177, :column 7, :line 177, :file "cljs/core.cljs"} aset ^{:arglists (^{:end-column 17, :end-line 179, :column 4, :line 179, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 179, :column 5, :line 179, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 179, :column 11, :line 179, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 179, :column 13, :line 179, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 181, :column 15, :line 181, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 181, :column 20, :line 181, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 181, :column 22, :line 181, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 177, :column 7, :line 177, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 179, :column 5, :line 179, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 179, :column 11, :line 179, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 179, :column 13, :line 179, :file "cljs/core.cljs"} val] [^{:end-column 11, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 181, :column 15, :line 181, :file "cljs/core.cljs"} idx2 & ^{:end-column 27, :end-line 181, :column 22, :line 181, :file "cljs/core.cljs"} idxv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 179, :column 4, :line 179, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 179, :column 5, :line 179, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 179, :column 11, :line 179, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 179, :column 13, :line 179, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 181, :column 15, :line 181, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 181, :column 20, :line 181, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 181, :column 22, :line 181, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 177, :column 7, :line 177, :file "cljs/core.cljs"} aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2185, :column 4, :line 2185, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2185, :column 5, :line 2185, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2194, :column 4, :line 2194, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2194, :column 5, :line 2194, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2194, :column 8, :line 2194, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2182, :column 7, :line 2182, :file "cljs/core.cljs"} keyword ^{:arglists (^{:end-column 10, :end-line 2185, :column 4, :line 2185, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2185, :column 5, :line 2185, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2194, :column 4, :line 2194, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2194, :column 5, :line 2194, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2194, :column 8, :line 2194, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2182, :column 7, :line 2182, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 2185, :column 5, :line 2185, :file "cljs/core.cljs"} name] ^cljs.core/Keyword [^{:end-column 8, :end-line 2194, :column 5, :line 2194, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2194, :column 8, :line 2194, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2185, :column 4, :line 2185, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2185, :column 5, :line 2185, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2194, :column 4, :line 2194, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2194, :column 5, :line 2194, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2194, :column 8, :line 2194, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2182, :column 7, :line 2182, :file "cljs/core.cljs"} keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash])} ->Cons ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Cons [^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash])} ->Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 5452, :column 28, :line 5452, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5452, :column 29, :line 5452, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 5452, :column 34, :line 5452, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 5452, :column 45, :line 5452, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 5452, :column 8, :line 5452, :file "cljs/core.cljs"} create-tree-map-seq ^{:arglists (^{:end-column 49, :end-line 5452, :column 28, :line 5452, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5452, :column 29, :line 5452, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 5452, :column 34, :line 5452, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 5452, :column 45, :line 5452, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 5452, :column 8, :line 5452, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 34, :end-line 5452, :column 29, :line 5452, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 5452, :column 34, :line 5452, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 5452, :column 45, :line 5452, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 5452, :column 28, :line 5452, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5452, :column 29, :line 5452, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 5452, :column 34, :line 5452, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 5452, :column 45, :line 5452, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 5452, :column 8, :line 5452, :file "cljs/core.cljs"} create-tree-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 235, :column 14, :line 235, :file "cljs/core.cljs"} ICollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 26, :end-line 235, :column 14, :line 235, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 235, :column 14, :line 235, :file "cljs/core.cljs"} ICollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1719, :column 13, :line 1719, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1719, :column 14, :line 1719, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1719, :column 7, :line 1719, :file "cljs/core.cljs"} chars ^{:arglists (^{:end-column 16, :end-line 1719, :column 13, :line 1719, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1719, :column 14, :line 1719, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1719, :column 7, :line 1719, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1719, :column 14, :line 1719, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1719, :column 13, :line 1719, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1719, :column 14, :line 1719, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1719, :column 7, :line 1719, :file "cljs/core.cljs"} chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1861, :column 4, :line 1861, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1861, :column 5, :line 1861, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1864, :column 7, :line 1864, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 1864, :column 9, :line 1864, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 1856, :column 7, :line 1856, :file "cljs/core.cljs"} str ^{:arglists (^{:end-column 6, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1861, :column 4, :line 1861, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1861, :column 5, :line 1861, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1864, :column 7, :line 1864, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 1864, :column 9, :line 1864, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 1856, :column 7, :line 1856, :file "cljs/core.cljs"} {:arglists (^string [] [^{:end-column 7, :end-line 1861, :column 5, :line 1861, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x & ^{:end-column 12, :end-line 1864, :column 9, :line 1864, :file "cljs/core.cljs"} ys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1861, :column 4, :line 1861, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1861, :column 5, :line 1861, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1864, :column 7, :line 1864, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 1864, :column 9, :line 1864, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 1856, :column 7, :line 1856, :file "cljs/core.cljs"} str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 520, :column 3, :line 520, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 520, :column 4, :line 520, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 517, :column 8, :line 517, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 517, :column 12, :line 517, :file "cljs/core.cljs"} next ^{:arglists (^{:end-column 9, :end-line 520, :column 3, :line 520, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 520, :column 4, :line 520, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 517, :column 8, :line 517, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 517, :column 12, :line 517, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 520, :column 4, :line 520, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 520, :column 3, :line 520, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 520, :column 4, :line 520, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 517, :column 8, :line 517, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 517, :column 12, :line 517, :file "cljs/core.cljs"} next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 244, :column 14, :line 244, :file "cljs/core.cljs"} ASeq ^{:impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/List cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 19, :end-line 244, :column 14, :line 244, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 244, :column 14, :line 244, :file "cljs/core.cljs"} ASeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 39, :end-line 6966, :column 21, :line 6966, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6966, :column 22, :line 6966, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 6966, :column 27, :line 6966, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 6966, :column 34, :line 6966, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 6966, :column 7, :line 6966, :file "cljs/core.cljs"} pr-seq-writer ^{:arglists (^{:end-column 39, :end-line 6966, :column 21, :line 6966, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6966, :column 22, :line 6966, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 6966, :column 27, :line 6966, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 6966, :column 34, :line 6966, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 6966, :column 7, :line 6966, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6966, :column 22, :line 6966, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 6966, :column 27, :line 6966, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 6966, :column 34, :line 6966, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 39, :end-line 6966, :column 21, :line 6966, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6966, :column 22, :line 6966, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 6966, :column 27, :line 6966, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 6966, :column 34, :line 6966, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 6966, :column 7, :line 6966, :file "cljs/core.cljs"} pr-seq-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 18, :end-line 202, :column 14, :line 202, :file "cljs/core.cljs"} IFn ^{:impls #{cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/Keyword cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Symbol cljs.core/MetaFn cljs.core/RedNode}, :protocol-symbol true, :end-column 18, :end-line 202, :column 14, :line 202, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 18, :end-line 202, :column 14, :line 202, :file "cljs/core.cljs"} IFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 6805, :column 15, :line 6805, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6805, :column 16, :line 6805, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} regexp? ^{:arglists (^{:end-column 18, :end-line 6805, :column 15, :line 6805, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6805, :column 16, :line 6805, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 18, :end-line 6805, :column 16, :line 6805, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 6805, :column 15, :line 6805, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6805, :column 16, :line 6805, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} regexp?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 545, :column 10, :line 545, :file "cljs/core.cljs"} hash-map ^{:arglists (^{:end-column 14, :end-line 6042, :column 3, :line 6042, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6042, :column 4, :line 6042, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6042, :column 6, :line 6042, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6039, :column 7, :line 6039, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [& ^{:end-column 14, :end-line 6042, :column 6, :line 6042, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6042, :column 3, :line 6042, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6042, :column 4, :line 6042, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6042, :column 6, :line 6042, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6039, :column 7, :line 6039, :file "cljs/core.cljs"} hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7616, :column 4, :line 7616, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7616, :column 5, :line 7616, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7616, :column 9, :line 7616, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} underive ^{:arglists (^{:end-column 16, :end-line 7616, :column 4, :line 7616, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7616, :column 5, :line 7616, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7616, :column 9, :line 7616, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7616, :column 5, :line 7616, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7616, :column 9, :line 7616, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7616, :column 4, :line 7616, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7616, :column 5, :line 7616, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7616, :column 9, :line 7616, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} underive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1244, :column 4, :line 1244, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1244, :column 5, :line 1244, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1244, :column 10, :line 1244, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1244, :column 12, :line 1244, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1244, :column 15, :line 1244, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1244, :column 17, :line 1244, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1243, :column 8, :line 1243, :file "cljs/core.cljs"} array-copy ^{:arglists (^{:end-column 21, :end-line 1244, :column 4, :line 1244, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1244, :column 5, :line 1244, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1244, :column 10, :line 1244, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1244, :column 12, :line 1244, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1244, :column 15, :line 1244, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1244, :column 17, :line 1244, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1243, :column 8, :line 1243, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1244, :column 5, :line 1244, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1244, :column 10, :line 1244, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1244, :column 12, :line 1244, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1244, :column 15, :line 1244, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1244, :column 17, :line 1244, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1244, :column 4, :line 1244, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1244, :column 5, :line 1244, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1244, :column 10, :line 1244, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1244, :column 12, :line 1244, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1244, :column 15, :line 1244, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1244, :column 17, :line 1244, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1243, :column 8, :line 1243, :file "cljs/core.cljs"} array-copy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4060, :column 29, :line 4060, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4060, :column 30, :line 4060, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4060, :column 32, :line 4060, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} obj-map-compare-keys ^{:arglists (^{:end-column 34, :end-line 4060, :column 29, :line 4060, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4060, :column 30, :line 4060, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4060, :column 32, :line 4060, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 4060, :column 30, :line 4060, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4060, :column 32, :line 4060, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4060, :column 29, :line 4060, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4060, :column 30, :line 4060, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4060, :column 32, :line 4060, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} obj-map-compare-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 7173, :column 12, :line 7173, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7173, :column 13, :line 7173, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 7173, :column 15, :line 7173, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 7173, :column 4, :line 7173, :file "cljs/core.cljs"} -reset! ^{:arglists (^{:end-column 25, :end-line 7173, :column 12, :line 7173, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7173, :column 13, :line 7173, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 7173, :column 15, :line 7173, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 7173, :column 4, :line 7173, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 7173, :column 13, :line 7173, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 7173, :column 15, :line 7173, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 7173, :column 12, :line 7173, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7173, :column 13, :line 7173, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 7173, :column 15, :line 7173, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 7173, :column 4, :line 7173, :file "cljs/core.cljs"} -reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 248, :column 15, :line 248, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 248, :column 16, :line 248, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 248, :column 5, :line 248, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 248, :column 9, :line 248, :file "cljs/core.cljs"} -rest ^{:arglists (^{:end-column 21, :end-line 248, :column 15, :line 248, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 248, :column 16, :line 248, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 248, :column 5, :line 248, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 248, :column 9, :line 248, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 248, :column 16, :line 248, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 248, :column 15, :line 248, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 248, :column 16, :line 248, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 248, :column 5, :line 248, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 248, :column 9, :line 248, :file "cljs/core.cljs"} -rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 3371, :column 31, :line 3371, :file "cljs/core.cljs"} pr-writer ^{:arglists (^{:end-column 20, :end-line 6899, :column 3, :line 6899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6899, :column 4, :line 6899, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 6899, :column 8, :line 6899, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 6899, :column 15, :line 6899, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 6895, :column 8, :line 6895, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 6899, :column 4, :line 6899, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 6899, :column 8, :line 6899, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 6899, :column 15, :line 6899, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 6899, :column 3, :line 6899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6899, :column 4, :line 6899, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 6899, :column 8, :line 6899, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 6899, :column 15, :line 6899, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 6895, :column 8, :line 6895, :file "cljs/core.cljs"} pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1265, :column 3, :line 1265, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1265, :column 4, :line 1265, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1263, :column 8, :line 1263, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1263, :column 16, :line 1263, :file "cljs/core.cljs"} false? ^{:arglists (^{:end-column 6, :end-line 1265, :column 3, :line 1265, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1265, :column 4, :line 1265, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1263, :column 8, :line 1263, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1263, :column 16, :line 1263, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1265, :column 4, :line 1265, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1265, :column 3, :line 1265, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1265, :column 4, :line 1265, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1263, :column 8, :line 1263, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1263, :column 16, :line 1263, :file "cljs/core.cljs"} false?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably* ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1721, :column 12, :line 1721, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1721, :column 13, :line 1721, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1721, :column 7, :line 1721, :file "cljs/core.cljs"} ints ^{:arglists (^{:end-column 15, :end-line 1721, :column 12, :line 1721, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1721, :column 13, :line 1721, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1721, :column 7, :line 1721, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1721, :column 13, :line 1721, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1721, :column 12, :line 1721, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1721, :column 13, :line 1721, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1721, :column 7, :line 1721, :file "cljs/core.cljs"} ints, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2922, :column 4, :line 2922, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2922, :column 5, :line 2922, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2930, :column 4, :line 2930, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2930, :column 5, :line 2930, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2930, :column 8, :line 2930, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2938, :column 4, :line 2938, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2938, :column 5, :line 2938, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2938, :column 8, :line 2938, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2938, :column 11, :line 2938, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2946, :column 4, :line 2946, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2946, :column 5, :line 2946, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2946, :column 8, :line 2946, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2946, :column 11, :line 2946, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2946, :column 14, :line 2946, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2946, :column 16, :line 2946, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 2917, :column 7, :line 2917, :file "cljs/core.cljs"} some-fn ^{:arglists (^{:end-column 7, :end-line 2922, :column 4, :line 2922, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2922, :column 5, :line 2922, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2930, :column 4, :line 2930, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2930, :column 5, :line 2930, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2930, :column 8, :line 2930, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2938, :column 4, :line 2938, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2938, :column 5, :line 2938, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2938, :column 8, :line 2938, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2938, :column 11, :line 2938, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2946, :column 4, :line 2946, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2946, :column 5, :line 2946, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2946, :column 8, :line 2946, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2946, :column 11, :line 2946, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2946, :column 14, :line 2946, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2946, :column 16, :line 2946, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 2917, :column 7, :line 2917, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 2922, :column 5, :line 2922, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 2930, :column 5, :line 2930, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2930, :column 8, :line 2930, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 2938, :column 5, :line 2938, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2938, :column 8, :line 2938, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2938, :column 11, :line 2938, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 2946, :column 5, :line 2946, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2946, :column 8, :line 2946, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2946, :column 11, :line 2946, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 2946, :column 16, :line 2946, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2922, :column 4, :line 2922, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2922, :column 5, :line 2922, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2930, :column 4, :line 2930, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2930, :column 5, :line 2930, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2930, :column 8, :line 2930, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2938, :column 4, :line 2938, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2938, :column 5, :line 2938, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2938, :column 8, :line 2938, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2938, :column 11, :line 2938, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2946, :column 4, :line 2946, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2946, :column 5, :line 2946, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2946, :column 8, :line 2946, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2946, :column 11, :line 2946, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2946, :column 14, :line 2946, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2946, :column 16, :line 2946, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 2917, :column 7, :line 2917, :file "cljs/core.cljs"} some-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline* ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 1395, :column 10, :line 1395, :file "cljs/core.cljs"} to-array ^{:arglists (^{:end-column 6, :end-line 2397, :column 3, :line 2397, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2397, :column 4, :line 2397, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2395, :column 7, :line 2395, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 6, :end-line 2397, :column 4, :line 2397, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2397, :column 3, :line 2397, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2397, :column 4, :line 2397, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2395, :column 7, :line 2395, :file "cljs/core.cljs"} to-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 23, :end-line 3632, :column 10, :line 3632, :file "cljs/core.cljs"} build-subvec ^{:arglists (^{:end-column 46, :end-line 3726, :column 21, :line 3726, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3726, :column 22, :line 3726, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 3726, :column 27, :line 3726, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 3726, :column 29, :line 3726, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 3726, :column 35, :line 3726, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 3726, :column 39, :line 3726, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 3726, :column 8, :line 3726, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 27, :end-line 3726, :column 22, :line 3726, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 3726, :column 27, :line 3726, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 3726, :column 29, :line 3726, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 3726, :column 35, :line 3726, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 3726, :column 39, :line 3726, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 3726, :column 21, :line 3726, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3726, :column 22, :line 3726, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 3726, :column 27, :line 3726, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 3726, :column 29, :line 3726, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 3726, :column 35, :line 3726, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 3726, :column 39, :line 3726, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 3726, :column 8, :line 3726, :file "cljs/core.cljs"} build-subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2129, :column 22, :line 2129, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2129, :column 23, :line 2129, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2129, :column 8, :line 2129, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2129, :column 16, :line 2129, :file "cljs/core.cljs"} list? ^{:arglists (^{:end-column 25, :end-line 2129, :column 22, :line 2129, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2129, :column 23, :line 2129, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2129, :column 8, :line 2129, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2129, :column 16, :line 2129, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 25, :end-line 2129, :column 23, :line 2129, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2129, :column 22, :line 2129, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2129, :column 23, :line 2129, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2129, :column 8, :line 2129, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2129, :column 16, :line 2129, :file "cljs/core.cljs"} list?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 5877, :column 24, :line 5877, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5877, :column 25, :line 5877, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 5877, :column 30, :line 5877, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 5877, :column 35, :line 5877, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 5877, :column 37, :line 5877, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 5877, :column 8, :line 5877, :file "cljs/core.cljs"} tree-map-remove ^{:arglists (^{:end-column 43, :end-line 5877, :column 24, :line 5877, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5877, :column 25, :line 5877, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 5877, :column 30, :line 5877, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 5877, :column 35, :line 5877, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 5877, :column 37, :line 5877, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 5877, :column 8, :line 5877, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5877, :column 25, :line 5877, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 5877, :column 30, :line 5877, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 5877, :column 35, :line 5877, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 5877, :column 37, :line 5877, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5877, :column 24, :line 5877, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5877, :column 25, :line 5877, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 5877, :column 30, :line 5877, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 5877, :column 35, :line 5877, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 5877, :column 37, :line 5877, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 5877, :column 8, :line 5877, :file "cljs/core.cljs"} tree-map-remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 4933, :column 10, :line 4933, :file "cljs/core.cljs"} HashCollisionNode {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 4933, :column 10, :line 4933, :file "cljs/core.cljs"} HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 43, :end-line 4936, :column 28, :line 4933, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array? ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7639, :column 3, :line 7639, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7639, :column 4, :line 7639, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7639, :column 6, :line 7639, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7639, :column 8, :line 7639, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 7638, :column 8, :line 7638, :file "cljs/core.cljs"} prefers* ^{:arglists (^{:end-column 21, :end-line 7639, :column 3, :line 7639, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7639, :column 4, :line 7639, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7639, :column 6, :line 7639, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7639, :column 8, :line 7639, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 7638, :column 8, :line 7638, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7639, :column 4, :line 7639, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7639, :column 6, :line 7639, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7639, :column 8, :line 7639, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7639, :column 3, :line 7639, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7639, :column 4, :line 7639, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7639, :column 6, :line 7639, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7639, :column 8, :line 7639, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 7638, :column 8, :line 7638, :file "cljs/core.cljs"} prefers*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 464, :column 13, :line 464, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 464, :column 14, :line 464, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 464, :column 7, :line 464, :file "cljs/core.cljs"} clone ^{:arglists (^{:end-column 20, :end-line 464, :column 13, :line 464, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 464, :column 14, :line 464, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 464, :column 7, :line 464, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} clj [^{:end-column 20, :end-line 464, :column 14, :line 464, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 464, :column 13, :line 464, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 464, :column 14, :line 464, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 464, :column 7, :line 464, :file "cljs/core.cljs"} clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4046, :column 19, :line 4046, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4046, :column 20, :line 4046, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4046, :column 25, :line 4046, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4046, :column 27, :line 4046, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4046, :column 8, :line 4046, :file "cljs/core.cljs"} scan-array ^{:arglists (^{:end-column 33, :end-line 4046, :column 19, :line 4046, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4046, :column 20, :line 4046, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4046, :column 25, :line 4046, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4046, :column 27, :line 4046, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4046, :column 8, :line 4046, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4046, :column 20, :line 4046, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4046, :column 25, :line 4046, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4046, :column 27, :line 4046, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4046, :column 19, :line 4046, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4046, :column 20, :line 4046, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4046, :column 25, :line 4046, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4046, :column 27, :line 4046, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4046, :column 8, :line 4046, :file "cljs/core.cljs"} scan-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1785, :column 3, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1783, :column 7, :line 1783, :file "cljs/core.cljs"} bit-not ^{:arglists (^{:end-column 6, :end-line 1785, :column 3, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1783, :column 7, :line 1783, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1785, :column 3, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1783, :column 7, :line 1783, :file "cljs/core.cljs"} bit-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 6887, :column 3, :line 6887, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6887, :column 4, :line 6887, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 6886, :column 17, :line 6886, :file "cljs/core.cljs"} quote-string ^{:arglists (^{:end-column 6, :end-line 6887, :column 3, :line 6887, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6887, :column 4, :line 6887, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 6886, :column 17, :line 6886, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 6887, :column 4, :line 6887, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6887, :column 3, :line 6887, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6887, :column 4, :line 6887, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 6886, :column 17, :line 6886, :file "cljs/core.cljs"} quote-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1600, :column 20, :line 1600, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1600, :column 21, :line 1600, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1600, :column 8, :line 1600, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1600, :column 15, :line 1600, :file "cljs/core.cljs"} byte ^{:arglists (^{:end-column 23, :end-line 1600, :column 20, :line 1600, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1600, :column 21, :line 1600, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1600, :column 8, :line 1600, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1600, :column 15, :line 1600, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1600, :column 21, :line 1600, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1600, :column 20, :line 1600, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1600, :column 21, :line 1600, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1600, :column 8, :line 1600, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1600, :column 15, :line 1600, :file "cljs/core.cljs"} byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1588, :column 4, :line 1588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1588, :column 5, :line 1588, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1589, :column 4, :line 1589, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1589, :column 5, :line 1589, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1589, :column 7, :line 1589, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1590, :column 4, :line 1590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1590, :column 5, :line 1590, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1590, :column 7, :line 1590, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1590, :column 9, :line 1590, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1590, :column 11, :line 1590, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1586, :column 8, :line 1586, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1586, :column 15, :line 1586, :file "cljs/core.cljs"} max ^{:arglists (^{:end-column 7, :end-line 1588, :column 4, :line 1588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1588, :column 5, :line 1588, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1589, :column 4, :line 1589, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1589, :column 5, :line 1589, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1589, :column 7, :line 1589, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1590, :column 4, :line 1590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1590, :column 5, :line 1590, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1590, :column 7, :line 1590, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1590, :column 9, :line 1590, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1590, :column 11, :line 1590, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1586, :column 8, :line 1586, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1586, :column 15, :line 1586, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1588, :column 5, :line 1588, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1589, :column 5, :line 1589, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1589, :column 7, :line 1589, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1590, :column 5, :line 1590, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1590, :column 7, :line 1590, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1590, :column 11, :line 1590, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1588, :column 4, :line 1588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1588, :column 5, :line 1588, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1589, :column 4, :line 1589, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1589, :column 5, :line 1589, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1589, :column 7, :line 1589, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1590, :column 4, :line 1590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1590, :column 5, :line 1590, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1590, :column 7, :line 1590, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1590, :column 9, :line 1590, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1590, :column 11, :line 1590, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1586, :column 8, :line 1586, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1586, :column 15, :line 1586, :file "cljs/core.cljs"} max, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 364, :column 14, :line 364, :file "cljs/core.cljs"} IComparable ^{:impls #{cljs.core/Keyword cljs.core/Subvec cljs.core/PersistentVector cljs.core/Symbol}, :protocol-symbol true, :end-column 26, :end-line 364, :column 14, :line 364, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 364, :column 14, :line 364, :file "cljs/core.cljs"} IComparable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1824, :column 5, :line 1824, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1825, :column 7, :line 1825, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1826, :column 9, :line 1826, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1826, :column 11, :line 1826, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1820, :column 16, :line 1820, :file "cljs/core.cljs"} == ^{:arglists (^{:end-column 7, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1824, :column 5, :line 1824, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1825, :column 7, :line 1825, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1826, :column 9, :line 1826, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1826, :column 11, :line 1826, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1820, :column 16, :line 1820, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1824, :column 5, :line 1824, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1825, :column 7, :line 1825, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1826, :column 11, :line 1826, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1824, :column 5, :line 1824, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1825, :column 7, :line 1825, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1826, :column 9, :line 1826, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1826, :column 11, :line 1826, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1820, :column 16, :line 1820, :file "cljs/core.cljs"} ==, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7558, :column 4, :line 7558, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7558, :column 5, :line 7558, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7559, :column 4, :line 7559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7559, :column 5, :line 7559, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7559, :column 7, :line 7559, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 7553, :column 7, :line 7553, :file "cljs/core.cljs"} parents ^{:arglists (^{:end-column 9, :end-line 7558, :column 4, :line 7558, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7558, :column 5, :line 7558, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7559, :column 4, :line 7559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7559, :column 5, :line 7559, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7559, :column 7, :line 7559, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 7553, :column 7, :line 7553, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7558, :column 5, :line 7558, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 7559, :column 5, :line 7559, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7559, :column 7, :line 7559, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7558, :column 4, :line 7558, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7558, :column 5, :line 7558, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7559, :column 4, :line 7559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7559, :column 5, :line 7559, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7559, :column 7, :line 7559, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 7553, :column 7, :line 7553, :file "cljs/core.cljs"} parents, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 865, :column 3, :line 865, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 865, :column 4, :line 865, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 862, :column 7, :line 862, :file "cljs/core.cljs"} count ^{:arglists (^{:end-column 9, :end-line 865, :column 3, :line 865, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 865, :column 4, :line 865, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 862, :column 7, :line 862, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 865, :column 4, :line 865, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 865, :column 3, :line 865, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 865, :column 4, :line 865, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 862, :column 7, :line 862, :file "cljs/core.cljs"} count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} -disjoin! ^{:arglists (^{:end-column 28, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} -disjoin!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1688, :column 4, :line 1688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1688, :column 5, :line 1688, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1689, :column 4, :line 1689, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1689, :column 5, :line 1689, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1690, :column 4, :line 1690, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1690, :column 5, :line 1690, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1690, :column 7, :line 1690, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1690, :column 9, :line 1690, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1690, :column 11, :line 1690, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1685, :column 8, :line 1685, :file "cljs/core.cljs"} number, :end-column 39, :end-line 1685, :column 15, :line 1685, :file "cljs/core.cljs"} unchecked-substract-int ^{:arglists (^{:end-column 7, :end-line 1688, :column 4, :line 1688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1688, :column 5, :line 1688, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1689, :column 4, :line 1689, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1689, :column 5, :line 1689, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1690, :column 4, :line 1690, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1690, :column 5, :line 1690, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1690, :column 7, :line 1690, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1690, :column 9, :line 1690, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1690, :column 11, :line 1690, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1685, :column 8, :line 1685, :file "cljs/core.cljs"} number, :end-column 39, :end-line 1685, :column 15, :line 1685, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1688, :column 5, :line 1688, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1689, :column 5, :line 1689, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1690, :column 5, :line 1690, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1690, :column 7, :line 1690, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1690, :column 11, :line 1690, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1688, :column 4, :line 1688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1688, :column 5, :line 1688, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1689, :column 4, :line 1689, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1689, :column 5, :line 1689, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1690, :column 4, :line 1690, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1690, :column 5, :line 1690, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1690, :column 7, :line 1690, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1690, :column 9, :line 1690, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1690, :column 11, :line 1690, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1685, :column 8, :line 1685, :file "cljs/core.cljs"} number, :end-column 39, :end-line 1685, :column 15, :line 1685, :file "cljs/core.cljs"} unchecked-substract-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val])} ->TransientHashMap ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val])} {:arglists (^cljs.core/TransientHashMap [^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val])} ->TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 2260, :column 10, :line 2260, :file "cljs/core.cljs"} ArrayChunk {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 34, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end], :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}}, ^{:arglists (^{:end-column 26, :end-line 6079, :column 4, :line 6079, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6079, :column 5, :line 6079, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6079, :column 16, :line 6079, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6079, :column 18, :line 6079, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6076, :column 7, :line 6076, :file "cljs/core.cljs"} sorted-map-by ^{:arglists (^{:end-column 26, :end-line 6079, :column 4, :line 6079, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6079, :column 5, :line 6079, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6079, :column 16, :line 6079, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6079, :column 18, :line 6079, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6076, :column 7, :line 6076, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 16, :end-line 6079, :column 5, :line 6079, :file "cljs/core.cljs"} comparator & ^{:end-column 26, :end-line 6079, :column 18, :line 6079, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 6079, :column 4, :line 6079, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6079, :column 5, :line 6079, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6079, :column 16, :line 6079, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6079, :column 18, :line 6079, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6076, :column 7, :line 6076, :file "cljs/core.cljs"} sorted-map-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 168, :column 10, :line 168, :file "cljs/core.cljs"} apply ^{:arglists (^{:end-column 12, :end-line 2622, :column 4, :line 2622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2622, :column 5, :line 2622, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2622, :column 7, :line 2622, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2630, :column 4, :line 2630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2630, :column 5, :line 2630, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2630, :column 7, :line 2630, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2630, :column 9, :line 2630, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2639, :column 4, :line 2639, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2639, :column 5, :line 2639, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2639, :column 7, :line 2639, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2639, :column 9, :line 2639, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2639, :column 11, :line 2639, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2648, :column 7, :line 2648, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2648, :column 9, :line 2648, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2648, :column 11, :line 2648, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2648, :column 13, :line 2648, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2657, :column 4, :line 2657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2657, :column 5, :line 2657, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2657, :column 7, :line 2657, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2657, :column 9, :line 2657, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2657, :column 11, :line 2657, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2657, :column 13, :line 2657, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2657, :column 15, :line 2657, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2657, :column 17, :line 2657, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2619, :column 7, :line 2619, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2622, :column 5, :line 2622, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2622, :column 7, :line 2622, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2630, :column 5, :line 2630, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2630, :column 7, :line 2630, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2630, :column 9, :line 2630, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2639, :column 5, :line 2639, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2639, :column 7, :line 2639, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2639, :column 9, :line 2639, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2639, :column 11, :line 2639, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2648, :column 7, :line 2648, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2648, :column 9, :line 2648, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2648, :column 11, :line 2648, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2648, :column 13, :line 2648, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2657, :column 5, :line 2657, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2657, :column 7, :line 2657, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2657, :column 9, :line 2657, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2657, :column 11, :line 2657, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2657, :column 13, :line 2657, :file "cljs/core.cljs"} d & ^{:end-column 22, :end-line 2657, :column 17, :line 2657, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2622, :column 4, :line 2622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2622, :column 5, :line 2622, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2622, :column 7, :line 2622, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2630, :column 4, :line 2630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2630, :column 5, :line 2630, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2630, :column 7, :line 2630, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2630, :column 9, :line 2630, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2639, :column 4, :line 2639, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2639, :column 5, :line 2639, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2639, :column 7, :line 2639, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2639, :column 9, :line 2639, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2639, :column 11, :line 2639, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2648, :column 7, :line 2648, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2648, :column 9, :line 2648, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2648, :column 11, :line 2648, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2648, :column 13, :line 2648, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2657, :column 4, :line 2657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2657, :column 5, :line 2657, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2657, :column 7, :line 2657, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2657, :column 9, :line 2657, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2657, :column 11, :line 2657, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2657, :column 13, :line 2657, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2657, :column 15, :line 2657, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2657, :column 17, :line 2657, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2619, :column 7, :line 2619, :file "cljs/core.cljs"} apply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 7525, :column 29, :line 7525, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 7525, :column 8, :line 7525, :file "cljs/core.cljs"} get-global-hierarchy ^{:arglists (^{:end-column 31, :end-line 7525, :column 29, :line 7525, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 7525, :column 8, :line 7525, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 7525, :column 29, :line 7525, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 7525, :column 8, :line 7525, :file "cljs/core.cljs"} get-global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1141, :column 32, :line 1141, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1141, :column 33, :line 1141, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 1141, :column 7, :line 1141, :file "cljs/core.cljs"} add-to-string-hash-cache ^{:arglists (^{:end-column 35, :end-line 1141, :column 32, :line 1141, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1141, :column 33, :line 1141, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 1141, :column 7, :line 1141, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 1141, :column 33, :line 1141, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1141, :column 32, :line 1141, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1141, :column 33, :line 1141, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 1141, :column 7, :line 1141, :file "cljs/core.cljs"} add-to-string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 7392, :column 10, :line 7392, :file "cljs/core.cljs"} clj->js ^{:arglists (^{:end-column 7, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 4275, :column 10, :line 4275, :file "cljs/core.cljs"} TransientArrayMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 4474, :column 10, :line 4474, :file "cljs/core.cljs"} TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 4476, :column 28, :line 4474, :file "cljs/core.cljs"} [^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr], :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail])} ->TransientVector ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail])} {:arglists (^cljs.core/TransientVector [^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail])} ->TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} IChunkedNext ^{:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 27, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} IChunkedNext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3085, :column 3, :line 3085, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3085, :column 4, :line 3085, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3085, :column 8, :line 3085, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3083, :column 7, :line 3083, :file "cljs/core.cljs"} interpose ^{:arglists (^{:end-column 13, :end-line 3085, :column 3, :line 3085, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3085, :column 4, :line 3085, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3085, :column 8, :line 3085, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3083, :column 7, :line 3083, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3085, :column 4, :line 3085, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3085, :column 8, :line 3085, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3085, :column 3, :line 3085, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3085, :column 4, :line 3085, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3085, :column 8, :line 3085, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3083, :column 7, :line 3083, :file "cljs/core.cljs"} interpose, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash])} ->BlackNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/BlackNode [^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash])} ->BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 582, :column 10, :line 582, :file "cljs/core.cljs"} deref ^{:arglists (^{:end-column 6, :end-line 7244, :column 3, :line 7244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} o]), :end-column 13, :end-line 7243, :column 7, :line 7243, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7244, :column 3, :line 7244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} o]), :end-column 13, :end-line 7243, :column 7, :line 7243, :file "cljs/core.cljs"} deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3278, :column 17, :line 3278, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3278, :column 8, :line 3278, :file "cljs/core.cljs"} pv-aget ^{:arglists (^{:end-column 26, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3278, :column 17, :line 3278, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3278, :column 8, :line 3278, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3278, :column 17, :line 3278, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3278, :column 17, :line 3278, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3278, :column 8, :line 3278, :file "cljs/core.cljs"} pv-aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 1014, :column 4, :line 1014, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1014, :column 5, :line 1014, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1014, :column 12, :line 1014, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1018, :column 4, :line 1018, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1018, :column 5, :line 1018, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1018, :column 10, :line 1018, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1018, :column 12, :line 1018, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1018, :column 14, :line 1018, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1018, :column 16, :line 1018, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1009, :column 7, :line 1009, :file "cljs/core.cljs"} assoc ^{:arglists (^{:end-column 14, :end-line 1014, :column 4, :line 1014, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1014, :column 5, :line 1014, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1014, :column 12, :line 1014, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1018, :column 4, :line 1018, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1018, :column 5, :line 1018, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1018, :column 10, :line 1018, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1018, :column 12, :line 1018, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1018, :column 14, :line 1018, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1018, :column 16, :line 1018, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1009, :column 7, :line 1009, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1014, :column 5, :line 1014, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1014, :column 12, :line 1014, :file "cljs/core.cljs"} v] [^{:end-column 10, :end-line 1018, :column 5, :line 1018, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1018, :column 10, :line 1018, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1018, :column 12, :line 1018, :file "cljs/core.cljs"} v & ^{:end-column 20, :end-line 1018, :column 16, :line 1018, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 1014, :column 4, :line 1014, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1014, :column 5, :line 1014, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1014, :column 12, :line 1014, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1018, :column 4, :line 1018, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1018, :column 5, :line 1018, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1018, :column 10, :line 1018, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1018, :column 12, :line 1018, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1018, :column 14, :line 1018, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1018, :column 16, :line 1018, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1009, :column 7, :line 1009, :file "cljs/core.cljs"} assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2552, :column 3, :line 2552, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2552, :column 4, :line 2552, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} transient ^{:arglists (^{:end-column 9, :end-line 2552, :column 3, :line 2552, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2552, :column 4, :line 2552, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2552, :column 4, :line 2552, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2552, :column 3, :line 2552, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2552, :column 4, :line 2552, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 270, :column 24, :line 270, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 270, :column 5, :line 270, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} -disjoin ^{:arglists (^{:end-column 26, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 270, :column 24, :line 270, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 270, :column 5, :line 270, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 270, :column 24, :line 270, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 270, :column 24, :line 270, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 270, :column 5, :line 270, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} -disjoin, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2371, :column 18, :line 2371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2371, :column 19, :line 2371, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2371, :column 25, :line 2371, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2371, :column 7, :line 2371, :file "cljs/core.cljs"} chunk-cons ^{:arglists (^{:end-column 30, :end-line 2371, :column 18, :line 2371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2371, :column 19, :line 2371, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2371, :column 25, :line 2371, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2371, :column 7, :line 2371, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2371, :column 19, :line 2371, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2371, :column 25, :line 2371, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2371, :column 18, :line 2371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2371, :column 19, :line 2371, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2371, :column 25, :line 2371, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2371, :column 7, :line 2371, :file "cljs/core.cljs"} chunk-cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7963, :column 3, :line 7963, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7963, :column 4, :line 7963, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 7961, :column 7, :line 7961, :file "cljs/core.cljs"} comparator ^{:arglists (^{:end-column 9, :end-line 7963, :column 3, :line 7963, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7963, :column 4, :line 7963, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 7961, :column 7, :line 7961, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 7963, :column 4, :line 7963, :file "cljs/core.cljs"} pred]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7963, :column 3, :line 7963, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7963, :column 4, :line 7963, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 7961, :column 7, :line 7961, :file "cljs/core.cljs"} comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6070, :column 4, :line 6070, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6070, :column 5, :line 6070, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6070, :column 7, :line 6070, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6067, :column 7, :line 6067, :file "cljs/core.cljs"} sorted-map ^{:arglists (^{:end-column 15, :end-line 6070, :column 4, :line 6070, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6070, :column 5, :line 6070, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6070, :column 7, :line 6070, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6067, :column 7, :line 6067, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 15, :end-line 6070, :column 7, :line 6070, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6070, :column 4, :line 6070, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6070, :column 5, :line 6070, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6070, :column 7, :line 6070, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6067, :column 7, :line 6067, :file "cljs/core.cljs"} sorted-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3029, :column 3, :line 3029, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3029, :column 4, :line 3029, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3029, :column 9, :line 3029, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the first\n  item for which (pred item) returns nil.", :end-column 18, :end-line 3026, :column 7, :line 3026, :file "cljs/core.cljs"} drop-while ^{:arglists (^{:end-column 14, :end-line 3029, :column 3, :line 3029, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3029, :column 4, :line 3029, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3029, :column 9, :line 3029, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the first\n  item for which (pred item) returns nil.", :end-column 18, :end-line 3026, :column 7, :line 3026, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3029, :column 4, :line 3029, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3029, :column 9, :line 3029, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3029, :column 3, :line 3029, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3029, :column 4, :line 3029, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3029, :column 9, :line 3029, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the first\n  item for which (pred item) returns nil.", :end-column 18, :end-line 3026, :column 7, :line 3026, :file "cljs/core.cljs"} drop-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 324, :column 14, :line 324, :file "cljs/core.cljs"} IWriter ^{:impls #{cljs.core/StringBufferWriter}, :protocol-symbol true, :end-column 22, :end-line 324, :column 14, :line 324, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 324, :column 14, :line 324, :file "cljs/core.cljs"} IWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6086, :column 10, :line 6086, :file "cljs/core.cljs"} KeySeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6086, :column 10, :line 6086, :file "cljs/core.cljs"} KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6086, :column 17, :line 6086, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 7382, :column 8, :line 7382, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 7382, :column 16, :line 7382, :file "cljs/core.cljs"} realized? ^{:arglists (^{:end-column 6, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 7382, :column 8, :line 7382, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 7382, :column 16, :line 7382, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 7382, :column 8, :line 7382, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 7382, :column 16, :line 7382, :file "cljs/core.cljs"} realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4210, :column 36, :line 4210, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4210, :column 37, :line 4210, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4210, :column 41, :line 4210, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4210, :column 43, :line 4210, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4210, :column 8, :line 4210, :file "cljs/core.cljs"} array-map-index-of-keyword? ^{:arglists (^{:end-column 45, :end-line 4210, :column 36, :line 4210, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4210, :column 37, :line 4210, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4210, :column 41, :line 4210, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4210, :column 43, :line 4210, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4210, :column 8, :line 4210, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4210, :column 37, :line 4210, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4210, :column 41, :line 4210, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4210, :column 43, :line 4210, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4210, :column 36, :line 4210, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4210, :column 37, :line 4210, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4210, :column 41, :line 4210, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4210, :column 43, :line 4210, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4210, :column 8, :line 4210, :file "cljs/core.cljs"} array-map-index-of-keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn* ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 10, :end-line 25, :column 8, :line 25, :file "cljs/core.cljs"} _]), :tag function, :op :var, :name ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 50, :end-line 400, :column 42, :line 400, :file "cljs/core.cljs"} compare ^{:arglists (^{:end-column 8, :end-line 1350, :column 3, :line 1350, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1350, :column 4, :line 1350, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1350, :column 6, :line 1350, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1345, :column 8, :line 1345, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1345, :column 15, :line 1345, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1350, :column 4, :line 1350, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1350, :column 6, :line 1350, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1350, :column 3, :line 1350, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1350, :column 4, :line 1350, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1350, :column 6, :line 1350, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1345, :column 8, :line 1345, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1345, :column 15, :line 1345, :file "cljs/core.cljs"} compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 2735, :column 8, :line 2735, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2735, :column 16, :line 2735, :file "cljs/core.cljs"} complement ^{:arglists (^{:end-column 6, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 2735, :column 8, :line 2735, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2735, :column 16, :line 2735, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 2735, :column 8, :line 2735, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2735, :column 16, :line 2735, :file "cljs/core.cljs"} complement, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 41, :end-line 1261, :column 1, :line 1261, :file "cljs/core.cljs"} lookup-sentinel ^{:private true, :end-column 41, :end-line 1261, :column 1, :line 1261, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 41, :end-line 1261, :column 1, :line 1261, :file "cljs/core.cljs"} lookup-sentinel, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 352, :column 18, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 352, :column 24, :line 352, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 352, :column 28, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} -assoc! ^{:arglists (^{:end-column 32, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 352, :column 18, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 352, :column 24, :line 352, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 352, :column 28, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 352, :column 18, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 352, :column 24, :line 352, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 352, :column 28, :line 352, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 352, :column 18, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 352, :column 24, :line 352, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 352, :column 28, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} -assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup* ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7389, :column 13, :line 7389, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7389, :column 14, :line 7389, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7389, :column 4, :line 7389, :file "cljs/core.cljs"} -key->js ^{:arglists (^{:end-column 16, :end-line 7389, :column 13, :line 7389, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7389, :column 14, :line 7389, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7389, :column 4, :line 7389, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7389, :column 14, :line 7389, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7389, :column 13, :line 7389, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7389, :column 14, :line 7389, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7389, :column 4, :line 7389, :file "cljs/core.cljs"} -key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} IDeref ^{:impls #{cljs.core/Reduced cljs.core/Delay cljs.core/Atom}, :protocol-symbol true, :end-column 21, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} IDeref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1340, :column 3, :line 1340, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1340, :column 4, :line 1340, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1337, :column 8, :line 1337, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1337, :column 12, :line 1337, :file "cljs/core.cljs"} sequence ^{:arglists (^{:end-column 9, :end-line 1340, :column 3, :line 1340, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1340, :column 4, :line 1340, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1337, :column 8, :line 1337, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1337, :column 12, :line 1337, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1340, :column 4, :line 1340, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1340, :column 3, :line 1340, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1340, :column 4, :line 1340, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1337, :column 8, :line 1337, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1337, :column 12, :line 1337, :file "cljs/core.cljs"} sequence, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2747, :column 3, :line 2747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 2745, :column 7, :line 2745, :file "cljs/core.cljs"} constantly ^{:arglists (^{:end-column 6, :end-line 2747, :column 3, :line 2747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 2745, :column 7, :line 2745, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2747, :column 3, :line 2747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 2745, :column 7, :line 2745, :file "cljs/core.cljs"} constantly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 53, :end-line 3371, :column 41, :line 3371, :file "cljs/core.cljs"} chunked-seq ^{:arglists (^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 3627, :column 9, :line 3627, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 3627, :column 11, :line 3627, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 3628, :column 4, :line 3628, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3628, :column 5, :line 3628, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3628, :column 9, :line 3628, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3628, :column 14, :line 3628, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3628, :column 16, :line 3628, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 3629, :column 4, :line 3629, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3629, :column 5, :line 3629, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3629, :column 9, :line 3629, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3629, :column 14, :line 3629, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3629, :column 16, :line 3629, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 3629, :column 20, :line 3629, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 3626, :column 7, :line 3626, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 3627, :column 9, :line 3627, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 3627, :column 11, :line 3627, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 3628, :column 5, :line 3628, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3628, :column 9, :line 3628, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3628, :column 14, :line 3628, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3628, :column 16, :line 3628, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 3629, :column 5, :line 3629, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3629, :column 9, :line 3629, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3629, :column 14, :line 3629, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3629, :column 16, :line 3629, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 3629, :column 20, :line 3629, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 3627, :column 9, :line 3627, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 3627, :column 11, :line 3627, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 3628, :column 4, :line 3628, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3628, :column 5, :line 3628, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3628, :column 9, :line 3628, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3628, :column 14, :line 3628, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3628, :column 16, :line 3628, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 3629, :column 4, :line 3629, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3629, :column 5, :line 3629, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3629, :column 9, :line 3629, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3629, :column 14, :line 3629, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3629, :column 16, :line 3629, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 3629, :column 20, :line 3629, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 3626, :column 7, :line 3626, :file "cljs/core.cljs"} chunked-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 318, :column 14, :line 318, :file "cljs/core.cljs"} ISorted ^{:impls #{cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 22, :end-line 318, :column 14, :line 318, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 318, :column 14, :line 318, :file "cljs/core.cljs"} ISorted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 148, :column 4, :line 148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 148, :column 5, :line 148, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 150, :column 4, :line 150, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 150, :column 5, :line 150, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 150, :column 10, :line 150, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 147, :column 8, :line 147, :file "cljs/core.cljs"} array, :end-column 25, :end-line 147, :column 14, :line 147, :file "cljs/core.cljs"} make-array ^{:arglists (^{:end-column 10, :end-line 148, :column 4, :line 148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 148, :column 5, :line 148, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 150, :column 4, :line 150, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 150, :column 5, :line 150, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 150, :column 10, :line 150, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 147, :column 8, :line 147, :file "cljs/core.cljs"} array, :end-column 25, :end-line 147, :column 14, :line 147, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 10, :end-line 148, :column 5, :line 148, :file "cljs/core.cljs"} size] ^array [^{:end-column 10, :end-line 150, :column 5, :line 150, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 150, :column 10, :line 150, :file "cljs/core.cljs"} size]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 148, :column 4, :line 148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 148, :column 5, :line 148, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 150, :column 4, :line 150, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 150, :column 5, :line 150, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 150, :column 10, :line 150, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 147, :column 8, :line 147, :file "cljs/core.cljs"} array, :end-column 25, :end-line 147, :column 14, :line 147, :file "cljs/core.cljs"} make-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1147, :column 31, :line 1147, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1147, :column 32, :line 1147, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 1147, :column 7, :line 1147, :file "cljs/core.cljs"} check-string-hash-cache ^{:arglists (^{:end-column 34, :end-line 1147, :column 31, :line 1147, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1147, :column 32, :line 1147, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 1147, :column 7, :line 1147, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1147, :column 32, :line 1147, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1147, :column 31, :line 1147, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1147, :column 32, :line 1147, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 1147, :column 7, :line 1147, :file "cljs/core.cljs"} check-string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1720, :column 14, :line 1720, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1720, :column 7, :line 1720, :file "cljs/core.cljs"} shorts ^{:arglists (^{:end-column 17, :end-line 1720, :column 14, :line 1720, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1720, :column 7, :line 1720, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1720, :column 14, :line 1720, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1720, :column 7, :line 1720, :file "cljs/core.cljs"} shorts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if* ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta])} ->RSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/RSeq [^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta])} ->RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print! ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} {:arglists (^function []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 326, :column 11, :line 326, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 326, :column 12, :line 326, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -flush ^{:arglists (^{:end-column 19, :end-line 326, :column 11, :line 326, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 326, :column 12, :line 326, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 326, :column 12, :line 326, :file "cljs/core.cljs"} writer]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 326, :column 11, :line 326, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 326, :column 12, :line 326, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 1670, :column 28, :line 1670, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1670, :column 29, :line 1670, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1670, :column 7, :line 1670, :file "cljs/core.cljs"} unchecked-negate-int ^{:arglists (^{:end-column 31, :end-line 1670, :column 28, :line 1670, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1670, :column 29, :line 1670, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1670, :column 7, :line 1670, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 31, :end-line 1670, :column 29, :line 1670, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1670, :column 28, :line 1670, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1670, :column 29, :line 1670, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1670, :column 7, :line 1670, :file "cljs/core.cljs"} unchecked-negate-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash])} ->PersistentVector ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentVector [^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash])} ->PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 545, :column 24, :line 545, :file "cljs/core.cljs"} equiv-sequential ^{:arglists (^{:end-column 8, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1881, :column 6, :line 1881, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 1878, :column 8, :line 1878, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1881, :column 6, :line 1881, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1881, :column 6, :line 1881, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 1878, :column 8, :line 1878, :file "cljs/core.cljs"} equiv-sequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3050, :column 4, :line 3050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3050, :column 5, :line 3050, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3051, :column 4, :line 3051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3051, :column 5, :line 3051, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3051, :column 7, :line 3051, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3048, :column 7, :line 3048, :file "cljs/core.cljs"} repeat ^{:arglists (^{:end-column 7, :end-line 3050, :column 4, :line 3050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3050, :column 5, :line 3050, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3051, :column 4, :line 3051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3051, :column 5, :line 3051, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3051, :column 7, :line 3051, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3048, :column 7, :line 3048, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3050, :column 5, :line 3050, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3051, :column 5, :line 3051, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3051, :column 7, :line 3051, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3050, :column 4, :line 3050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3050, :column 5, :line 3050, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3051, :column 4, :line 3051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3051, :column 5, :line 3051, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3051, :column 7, :line 3051, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3048, :column 7, :line 3048, :file "cljs/core.cljs"} repeat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1647, :column 21, :line 1647, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1647, :column 22, :line 1647, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1647, :column 7, :line 1647, :file "cljs/core.cljs"} unchecked-inc ^{:arglists (^{:end-column 24, :end-line 1647, :column 21, :line 1647, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1647, :column 22, :line 1647, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1647, :column 7, :line 1647, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1647, :column 22, :line 1647, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1647, :column 21, :line 1647, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1647, :column 22, :line 1647, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1647, :column 7, :line 1647, :file "cljs/core.cljs"} unchecked-inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1848, :column 3, :line 1848, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1848, :column 4, :line 1848, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1848, :column 9, :line 1848, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} nthnext ^{:arglists (^{:end-column 11, :end-line 1848, :column 3, :line 1848, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1848, :column 4, :line 1848, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1848, :column 9, :line 1848, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 1848, :column 4, :line 1848, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1848, :column 9, :line 1848, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1848, :column 3, :line 1848, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1848, :column 4, :line 1848, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1848, :column 9, :line 1848, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} nthnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7290, :column 3, :line 7290, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7290, :column 4, :line 7290, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 7288, :column 7, :line 7288, :file "cljs/core.cljs"} get-validator ^{:arglists (^{:end-column 9, :end-line 7290, :column 3, :line 7290, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7290, :column 4, :line 7290, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 7288, :column 7, :line 7288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7290, :column 4, :line 7290, :file "cljs/core.cljs"} iref]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7290, :column 3, :line 7290, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7290, :column 4, :line 7290, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 7288, :column 7, :line 7288, :file "cljs/core.cljs"} get-validator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number? ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 348, :column 16, :line 348, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 348, :column 17, :line 348, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 348, :column 23, :line 348, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 348, :column 9, :line 348, :file "cljs/core.cljs"} -conj! ^{:arglists (^{:end-column 27, :end-line 348, :column 16, :line 348, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 348, :column 17, :line 348, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 348, :column 23, :line 348, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 348, :column 9, :line 348, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 348, :column 17, :line 348, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 348, :column 23, :line 348, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 348, :column 16, :line 348, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 348, :column 17, :line 348, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 348, :column 23, :line 348, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 348, :column 9, :line 348, :file "cljs/core.cljs"} -conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta])} ->PersistentArrayMapSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/PersistentArrayMapSeq [^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta])} ->PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2388, :column 18, :line 2388, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2388, :column 19, :line 2388, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2388, :column 7, :line 2388, :file "cljs/core.cljs"} chunk-next ^{:arglists (^{:end-column 21, :end-line 2388, :column 18, :line 2388, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2388, :column 19, :line 2388, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2388, :column 7, :line 2388, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2388, :column 19, :line 2388, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2388, :column 18, :line 2388, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2388, :column 19, :line 2388, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2388, :column 7, :line 2388, :file "cljs/core.cljs"} chunk-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7034, :column 3, :line 7034, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7034, :column 4, :line 7034, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7034, :column 6, :line 7034, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7032, :column 7, :line 7032, :file "cljs/core.cljs"} print-str ^{:arglists (^{:end-column 11, :end-line 7034, :column 3, :line 7034, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7034, :column 4, :line 7034, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7034, :column 6, :line 7034, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7032, :column 7, :line 7032, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7034, :column 6, :line 7034, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7034, :column 3, :line 7034, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7034, :column 4, :line 7034, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7034, :column 6, :line 7034, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7032, :column 7, :line 7032, :file "cljs/core.cljs"} print-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 2721, :column 3, :line 2721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 2718, :column 8, :line 2718, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2718, :column 16, :line 2718, :file "cljs/core.cljs"} not-any? ^{:arglists (^{:end-column 14, :end-line 2721, :column 3, :line 2721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 2718, :column 8, :line 2718, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2718, :column 16, :line 2718, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 2721, :column 3, :line 2721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 2718, :column 8, :line 2718, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2718, :column 16, :line 2718, :file "cljs/core.cljs"} not-any?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 47, :column 10, :line 47, :file "cljs/core.cljs"} into-array ^{:arglists (^{:end-column 10, :end-line 192, :column 4, :line 192, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 192, :column 5, :line 192, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 194, :column 4, :line 194, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 194, :column 5, :line 194, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 194, :column 10, :line 194, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 191, :column 8, :line 191, :file "cljs/core.cljs"} array, :end-column 25, :end-line 191, :column 14, :line 191, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 192, :column 5, :line 192, :file "cljs/core.cljs"} aseq] [^{:end-column 10, :end-line 194, :column 5, :line 194, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 194, :column 10, :line 194, :file "cljs/core.cljs"} aseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 192, :column 4, :line 192, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 192, :column 5, :line 192, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 194, :column 4, :line 194, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 194, :column 5, :line 194, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 194, :column 10, :line 194, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 191, :column 8, :line 191, :file "cljs/core.cljs"} array, :end-column 25, :end-line 191, :column 14, :line 191, :file "cljs/core.cljs"} into-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 301, :column 10, :line 301, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 301, :column 11, :line 301, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 301, :column 4, :line 301, :file "cljs/core.cljs"} -hash ^{:arglists (^{:end-column 13, :end-line 301, :column 10, :line 301, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 301, :column 11, :line 301, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 301, :column 4, :line 301, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 301, :column 11, :line 301, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 301, :column 10, :line 301, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 301, :column 11, :line 301, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 301, :column 4, :line 301, :file "cljs/core.cljs"} -hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 355, :column 18, :line 355, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 355, :column 19, :line 355, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 355, :column 25, :line 355, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 355, :column 9, :line 355, :file "cljs/core.cljs"} -dissoc! ^{:arglists (^{:end-column 29, :end-line 355, :column 18, :line 355, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 355, :column 19, :line 355, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 355, :column 25, :line 355, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 355, :column 9, :line 355, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 355, :column 19, :line 355, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 355, :column 25, :line 355, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 355, :column 18, :line 355, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 355, :column 19, :line 355, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 355, :column 25, :line 355, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 355, :column 9, :line 355, :file "cljs/core.cljs"} -dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val])} ->Reduced ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val])} {:arglists (^cljs.core/Reduced [^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val])} ->Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2276, :column 20, :line 2276, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2276, :column 21, :line 2276, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2276, :column 7, :line 2276, :file "cljs/core.cljs"} chunk-buffer ^{:arglists (^{:end-column 30, :end-line 2276, :column 20, :line 2276, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2276, :column 21, :line 2276, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2276, :column 7, :line 2276, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:end-column 30, :end-line 2276, :column 21, :line 2276, :file "cljs/core.cljs"} capacity]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2276, :column 20, :line 2276, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2276, :column 21, :line 2276, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2276, :column 7, :line 2276, :file "cljs/core.cljs"} chunk-buffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1283, :column 3, :line 1283, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1283, :column 4, :line 1283, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1281, :column 8, :line 1281, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1281, :column 16, :line 1281, :file "cljs/core.cljs"} seqable? ^{:arglists (^{:end-column 6, :end-line 1283, :column 3, :line 1283, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1283, :column 4, :line 1283, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1281, :column 8, :line 1281, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1281, :column 16, :line 1281, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1283, :column 4, :line 1283, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1283, :column 3, :line 1283, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1283, :column 4, :line 1283, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1281, :column 8, :line 1281, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1281, :column 16, :line 1281, :file "cljs/core.cljs"} seqable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 405, :column 24, :line 405, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 405, :column 25, :line 405, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 405, :column 8, :line 405, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 405, :column 16, :line 405, :file "cljs/core.cljs"} symbol? ^{:arglists (^{:end-column 27, :end-line 405, :column 24, :line 405, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 405, :column 25, :line 405, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 405, :column 8, :line 405, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 405, :column 16, :line 405, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 405, :column 25, :line 405, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 405, :column 24, :line 405, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 405, :column 25, :line 405, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 405, :column 8, :line 405, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 405, :column 16, :line 405, :file "cljs/core.cljs"} symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1615, :column 30, :line 1615, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1615, :column 31, :line 1615, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1615, :column 8, :line 1615, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1615, :column 15, :line 1615, :file "cljs/core.cljs"} unchecked-char ^{:arglists (^{:end-column 33, :end-line 1615, :column 30, :line 1615, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1615, :column 31, :line 1615, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1615, :column 8, :line 1615, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1615, :column 15, :line 1615, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1615, :column 31, :line 1615, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1615, :column 30, :line 1615, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1615, :column 31, :line 1615, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1615, :column 8, :line 1615, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1615, :column 15, :line 1615, :file "cljs/core.cljs"} unchecked-char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{cljs.core/IEquiv}, :end-column 21, :end-line 4026, :column 10, :line 4026, :file "cljs/core.cljs"} NeverEquiv {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{cljs.core/IEquiv}, :end-column 21, :end-line 4026, :column 10, :line 4026, :file "cljs/core.cljs"} NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 4026, :column 21, :line 4026, :file "cljs/core.cljs"} [], :protocols #{cljs.core/IEquiv}}, ^{:arglists (^{:end-column 11, :end-line 204, :column 5, :line 204, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 204, :column 6, :line 204, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 205, :column 5, :line 205, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 205, :column 6, :line 205, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 205, :column 11, :line 205, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 206, :column 5, :line 206, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 206, :column 6, :line 206, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 206, :column 11, :line 206, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 206, :column 13, :line 206, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 207, :column 5, :line 207, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 207, :column 6, :line 207, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 207, :column 11, :line 207, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 207, :column 13, :line 207, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 207, :column 15, :line 207, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 208, :column 11, :line 208, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 208, :column 13, :line 208, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 208, :column 15, :line 208, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 208, :column 17, :line 208, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 209, :column 13, :line 209, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 209, :column 15, :line 209, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 209, :column 17, :line 209, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 209, :column 19, :line 209, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 210, :column 15, :line 210, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 210, :column 17, :line 210, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 210, :column 19, :line 210, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 210, :column 21, :line 210, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 211, :column 17, :line 211, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 211, :column 19, :line 211, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 211, :column 21, :line 211, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 211, :column 23, :line 211, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 212, :column 19, :line 212, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 212, :column 21, :line 212, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 212, :column 23, :line 212, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 212, :column 25, :line 212, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 213, :column 21, :line 213, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 213, :column 23, :line 213, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 213, :column 25, :line 213, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 213, :column 27, :line 213, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 214, :column 23, :line 214, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 214, :column 25, :line 214, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 214, :column 27, :line 214, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 214, :column 29, :line 214, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 215, :column 25, :line 215, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 215, :column 27, :line 215, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 215, :column 29, :line 215, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 215, :column 31, :line 215, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 216, :column 27, :line 216, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 216, :column 29, :line 216, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 216, :column 31, :line 216, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 216, :column 33, :line 216, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 217, :column 29, :line 217, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 217, :column 31, :line 217, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 217, :column 33, :line 217, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 217, :column 35, :line 217, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 218, :column 31, :line 218, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 218, :column 33, :line 218, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 218, :column 35, :line 218, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 218, :column 37, :line 218, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 219, :column 33, :line 219, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 219, :column 35, :line 219, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 219, :column 37, :line 219, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 219, :column 39, :line 219, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 220, :column 35, :line 220, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 220, :column 37, :line 220, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 220, :column 39, :line 220, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 220, :column 41, :line 220, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 221, :column 37, :line 221, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 221, :column 39, :line 221, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 221, :column 41, :line 221, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 221, :column 43, :line 221, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 222, :column 39, :line 222, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 222, :column 41, :line 222, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 222, :column 43, :line 222, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 222, :column 45, :line 222, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 223, :column 41, :line 223, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 223, :column 43, :line 223, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 223, :column 45, :line 223, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 223, :column 47, :line 223, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 224, :column 43, :line 224, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 224, :column 45, :line 224, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 224, :column 47, :line 224, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 224, :column 49, :line 224, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} -invoke ^{:arglists (^{:end-column 11, :end-line 204, :column 5, :line 204, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 204, :column 6, :line 204, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 205, :column 5, :line 205, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 205, :column 6, :line 205, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 205, :column 11, :line 205, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 206, :column 5, :line 206, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 206, :column 6, :line 206, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 206, :column 11, :line 206, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 206, :column 13, :line 206, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 207, :column 5, :line 207, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 207, :column 6, :line 207, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 207, :column 11, :line 207, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 207, :column 13, :line 207, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 207, :column 15, :line 207, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 208, :column 11, :line 208, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 208, :column 13, :line 208, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 208, :column 15, :line 208, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 208, :column 17, :line 208, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 209, :column 13, :line 209, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 209, :column 15, :line 209, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 209, :column 17, :line 209, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 209, :column 19, :line 209, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 210, :column 15, :line 210, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 210, :column 17, :line 210, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 210, :column 19, :line 210, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 210, :column 21, :line 210, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 211, :column 17, :line 211, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 211, :column 19, :line 211, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 211, :column 21, :line 211, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 211, :column 23, :line 211, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 212, :column 19, :line 212, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 212, :column 21, :line 212, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 212, :column 23, :line 212, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 212, :column 25, :line 212, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 213, :column 21, :line 213, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 213, :column 23, :line 213, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 213, :column 25, :line 213, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 213, :column 27, :line 213, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 214, :column 23, :line 214, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 214, :column 25, :line 214, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 214, :column 27, :line 214, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 214, :column 29, :line 214, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 215, :column 25, :line 215, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 215, :column 27, :line 215, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 215, :column 29, :line 215, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 215, :column 31, :line 215, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 216, :column 27, :line 216, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 216, :column 29, :line 216, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 216, :column 31, :line 216, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 216, :column 33, :line 216, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 217, :column 29, :line 217, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 217, :column 31, :line 217, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 217, :column 33, :line 217, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 217, :column 35, :line 217, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 218, :column 31, :line 218, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 218, :column 33, :line 218, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 218, :column 35, :line 218, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 218, :column 37, :line 218, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 219, :column 33, :line 219, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 219, :column 35, :line 219, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 219, :column 37, :line 219, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 219, :column 39, :line 219, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 220, :column 35, :line 220, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 220, :column 37, :line 220, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 220, :column 39, :line 220, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 220, :column 41, :line 220, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 221, :column 37, :line 221, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 221, :column 39, :line 221, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 221, :column 41, :line 221, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 221, :column 43, :line 221, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 222, :column 39, :line 222, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 222, :column 41, :line 222, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 222, :column 43, :line 222, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 222, :column 45, :line 222, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 223, :column 41, :line 223, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 223, :column 43, :line 223, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 223, :column 45, :line 223, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 223, :column 47, :line 223, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 224, :column 43, :line 224, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 224, :column 45, :line 224, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 224, :column 47, :line 224, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 224, :column 49, :line 224, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 204, :column 6, :line 204, :file "cljs/core.cljs"} this] [^{:end-column 11, :end-line 205, :column 6, :line 205, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 205, :column 11, :line 205, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 206, :column 6, :line 206, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 206, :column 11, :line 206, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 206, :column 13, :line 206, :file "cljs/core.cljs"} b] [^{:end-column 11, :end-line 207, :column 6, :line 207, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 207, :column 11, :line 207, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 207, :column 13, :line 207, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 207, :column 15, :line 207, :file "cljs/core.cljs"} c] [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 208, :column 11, :line 208, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 208, :column 13, :line 208, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 208, :column 15, :line 208, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 208, :column 17, :line 208, :file "cljs/core.cljs"} d] [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 209, :column 13, :line 209, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 209, :column 15, :line 209, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 209, :column 17, :line 209, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 209, :column 19, :line 209, :file "cljs/core.cljs"} e] [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 210, :column 15, :line 210, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 210, :column 17, :line 210, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 210, :column 19, :line 210, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 210, :column 21, :line 210, :file "cljs/core.cljs"} f] [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 211, :column 17, :line 211, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 211, :column 19, :line 211, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 211, :column 21, :line 211, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 211, :column 23, :line 211, :file "cljs/core.cljs"} g] [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 212, :column 19, :line 212, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 212, :column 21, :line 212, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 212, :column 23, :line 212, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 212, :column 25, :line 212, :file "cljs/core.cljs"} h] [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 213, :column 21, :line 213, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 213, :column 23, :line 213, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 213, :column 25, :line 213, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 213, :column 27, :line 213, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 214, :column 23, :line 214, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 214, :column 25, :line 214, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 214, :column 27, :line 214, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 214, :column 29, :line 214, :file "cljs/core.cljs"} j] [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 215, :column 25, :line 215, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 215, :column 27, :line 215, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 215, :column 29, :line 215, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 215, :column 31, :line 215, :file "cljs/core.cljs"} k] [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 216, :column 27, :line 216, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 216, :column 29, :line 216, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 216, :column 31, :line 216, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 216, :column 33, :line 216, :file "cljs/core.cljs"} l] [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 217, :column 29, :line 217, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 217, :column 31, :line 217, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 217, :column 33, :line 217, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 217, :column 35, :line 217, :file "cljs/core.cljs"} m] [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 218, :column 31, :line 218, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 218, :column 33, :line 218, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 218, :column 35, :line 218, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 218, :column 37, :line 218, :file "cljs/core.cljs"} n] [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 219, :column 33, :line 219, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 219, :column 35, :line 219, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 219, :column 37, :line 219, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 219, :column 39, :line 219, :file "cljs/core.cljs"} o] [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 220, :column 35, :line 220, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 220, :column 37, :line 220, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 220, :column 39, :line 220, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 220, :column 41, :line 220, :file "cljs/core.cljs"} p] [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 221, :column 37, :line 221, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 221, :column 39, :line 221, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 221, :column 41, :line 221, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 221, :column 43, :line 221, :file "cljs/core.cljs"} q] [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 222, :column 39, :line 222, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 222, :column 41, :line 222, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 222, :column 43, :line 222, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 222, :column 45, :line 222, :file "cljs/core.cljs"} s] [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 223, :column 41, :line 223, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 223, :column 43, :line 223, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 223, :column 45, :line 223, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 223, :column 47, :line 223, :file "cljs/core.cljs"} t] [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 224, :column 43, :line 224, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 224, :column 45, :line 224, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 224, :column 47, :line 224, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 224, :column 49, :line 224, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 204, :column 5, :line 204, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 204, :column 6, :line 204, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 205, :column 5, :line 205, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 205, :column 6, :line 205, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 205, :column 11, :line 205, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 206, :column 5, :line 206, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 206, :column 6, :line 206, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 206, :column 11, :line 206, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 206, :column 13, :line 206, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 207, :column 5, :line 207, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 207, :column 6, :line 207, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 207, :column 11, :line 207, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 207, :column 13, :line 207, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 207, :column 15, :line 207, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 208, :column 11, :line 208, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 208, :column 13, :line 208, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 208, :column 15, :line 208, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 208, :column 17, :line 208, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 209, :column 13, :line 209, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 209, :column 15, :line 209, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 209, :column 17, :line 209, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 209, :column 19, :line 209, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 210, :column 15, :line 210, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 210, :column 17, :line 210, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 210, :column 19, :line 210, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 210, :column 21, :line 210, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 211, :column 17, :line 211, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 211, :column 19, :line 211, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 211, :column 21, :line 211, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 211, :column 23, :line 211, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 212, :column 19, :line 212, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 212, :column 21, :line 212, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 212, :column 23, :line 212, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 212, :column 25, :line 212, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 213, :column 21, :line 213, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 213, :column 23, :line 213, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 213, :column 25, :line 213, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 213, :column 27, :line 213, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 214, :column 23, :line 214, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 214, :column 25, :line 214, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 214, :column 27, :line 214, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 214, :column 29, :line 214, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 215, :column 25, :line 215, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 215, :column 27, :line 215, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 215, :column 29, :line 215, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 215, :column 31, :line 215, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 216, :column 27, :line 216, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 216, :column 29, :line 216, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 216, :column 31, :line 216, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 216, :column 33, :line 216, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 217, :column 29, :line 217, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 217, :column 31, :line 217, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 217, :column 33, :line 217, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 217, :column 35, :line 217, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 218, :column 31, :line 218, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 218, :column 33, :line 218, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 218, :column 35, :line 218, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 218, :column 37, :line 218, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 219, :column 33, :line 219, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 219, :column 35, :line 219, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 219, :column 37, :line 219, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 219, :column 39, :line 219, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 220, :column 35, :line 220, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 220, :column 37, :line 220, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 220, :column 39, :line 220, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 220, :column 41, :line 220, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 221, :column 37, :line 221, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 221, :column 39, :line 221, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 221, :column 41, :line 221, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 221, :column 43, :line 221, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 222, :column 39, :line 222, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 222, :column 41, :line 222, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 222, :column 43, :line 222, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 222, :column 45, :line 222, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 223, :column 41, :line 223, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 223, :column 43, :line 223, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 223, :column 45, :line 223, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 223, :column 47, :line 223, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 224, :column 43, :line 224, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 224, :column 45, :line 224, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 224, :column 47, :line 224, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 224, :column 49, :line 224, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} -invoke, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1184, :column 3, :line 1184, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1184, :column 4, :line 1184, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1182, :column 8, :line 1182, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1182, :column 16, :line 1182, :file "cljs/core.cljs"} coll? ^{:arglists (^{:end-column 6, :end-line 1184, :column 3, :line 1184, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1184, :column 4, :line 1184, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1182, :column 8, :line 1182, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1182, :column 16, :line 1182, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1184, :column 4, :line 1184, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1184, :column 3, :line 1184, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1184, :column 4, :line 1184, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1182, :column 8, :line 1182, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1182, :column 16, :line 1182, :file "cljs/core.cljs"} coll?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3220, :column 7, :line 3220, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3222, :column 4, :line 3222, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3222, :column 5, :line 3222, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3222, :column 7, :line 3222, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3222, :column 10, :line 3222, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} get-in ^{:arglists (^{:end-column 10, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3220, :column 7, :line 3220, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3222, :column 4, :line 3222, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3222, :column 5, :line 3222, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3222, :column 7, :line 3222, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3222, :column 10, :line 3222, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3220, :column 7, :line 3220, :file "cljs/core.cljs"} ks] [^{:end-column 7, :end-line 3222, :column 5, :line 3222, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3222, :column 7, :line 3222, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3222, :column 10, :line 3222, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3220, :column 7, :line 3220, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3222, :column 4, :line 3222, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3222, :column 5, :line 3222, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3222, :column 7, :line 3222, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3222, :column 10, :line 3222, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} get-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 817, :column 3, :line 817, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 817, :column 4, :line 817, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 815, :column 7, :line 815, :file "cljs/core.cljs"} fnext ^{:arglists (^{:end-column 9, :end-line 817, :column 3, :line 817, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 817, :column 4, :line 817, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 815, :column 7, :line 815, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 817, :column 4, :line 817, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 817, :column 3, :line 817, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 817, :column 4, :line 817, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 815, :column 7, :line 815, :file "cljs/core.cljs"} fnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 309, :column 14, :line 309, :file "cljs/core.cljs"} IList ^{:impls #{cljs.core/Cons cljs.core/EmptyList cljs.core/List}, :protocol-symbol true, :end-column 20, :end-line 309, :column 14, :line 309, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 309, :column 14, :line 309, :file "cljs/core.cljs"} IList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 1939, :column 10, :line 1939, :file "cljs/core.cljs"} List {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 1939, :column 10, :line 1939, :file "cljs/core.cljs"} List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 1939, :column 15, :line 1939, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 267, :column 10, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 267, :column 4, :line 267, :file "cljs/core.cljs"} -val ^{:arglists (^{:end-column 15, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 267, :column 10, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 267, :column 4, :line 267, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 267, :column 10, :line 267, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 267, :column 10, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 267, :column 4, :line 267, :file "cljs/core.cljs"} -val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1718, :column 13, :line 1718, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1718, :column 14, :line 1718, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} bytes ^{:arglists (^{:end-column 16, :end-line 1718, :column 13, :line 1718, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1718, :column 14, :line 1718, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1718, :column 14, :line 1718, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1718, :column 13, :line 1718, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1718, :column 14, :line 1718, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} bytes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash])} ->ObjMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ObjMap [^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash])} ->ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 411, :column 24, :line 411, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 411, :column 25, :line 411, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 411, :column 27, :line 411, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 411, :column 8, :line 411, :file "cljs/core.cljs"} compare-symbols ^{:arglists (^{:end-column 29, :end-line 411, :column 24, :line 411, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 411, :column 25, :line 411, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 411, :column 27, :line 411, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 411, :column 8, :line 411, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 411, :column 25, :line 411, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 411, :column 27, :line 411, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 411, :column 24, :line 411, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 411, :column 25, :line 411, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 411, :column 27, :line 411, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 411, :column 8, :line 411, :file "cljs/core.cljs"} compare-symbols, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 304, :column 21, :line 304, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 304, :column 22, :line 304, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 304, :column 5, :line 304, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 304, :column 16, :line 304, :file "cljs/core.cljs"} -seq ^{:arglists (^{:end-column 24, :end-line 304, :column 21, :line 304, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 304, :column 22, :line 304, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 304, :column 5, :line 304, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 304, :column 16, :line 304, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 304, :column 22, :line 304, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 304, :column 21, :line 304, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 304, :column 22, :line 304, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 304, :column 5, :line 304, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 304, :column 16, :line 304, :file "cljs/core.cljs"} -seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}}, :aliases {^{:end-column 38, :end-line 10, :column 30, :line 10, :file "cljs/core.cljs"} gstring ^{:end-column 26, :end-line 10, :column 14, :line 10, :file "cljs/core.cljs"} goog.string, ^{:end-column 38, :end-line 11, :column 30, :line 11, :file "cljs/core.cljs"} gobject ^{:end-column 26, :end-line 11, :column 14, :line 11, :file "cljs/core.cljs"} goog.object, ^{:end-column 36, :end-line 12, :column 29, :line 12, :file "cljs/core.cljs"} garray ^{:end-column 25, :end-line 12, :column 14, :line 12, :file "cljs/core.cljs"} goog.array}, :macro-mappings {unsafe-bit-and #=(var cljs.core/unsafe-bit-and), unchecked-remainder-int #=(var cljs.core/unchecked-remainder-int), when-first #=(var cljs.core/when-first), cond->> #=(var cljs.core/cond->>), bit-set #=(var cljs.core/bit-set), import-macros #=(var cljs.core/import-macros), while #=(var cljs.core/while), satisfies? #=(var cljs.core/satisfies?), unchecked-subtract-int #=(var cljs.core/unchecked-subtract-int), bit-shift-right #=(var cljs.core/bit-shift-right), aget #=(var cljs.core/aget), specify #=(var cljs.core/specify), caching-hash #=(var cljs.core/caching-hash), bit-shift-left #=(var cljs.core/bit-shift-left), coercive-not #=(var cljs.core/coercive-not), dec #=(var cljs.core/dec), < #=(var cljs.core/<), this-as #=(var cljs.core/this-as), .. #=(var cljs.core/..), delay #=(var cljs.core/delay), unchecked-negate #=(var cljs.core/unchecked-negate), simple-benchmark #=(var cljs.core/simple-benchmark), unchecked-inc-int #=(var cljs.core/unchecked-inc-int), bit-shift-right-zero-fill #=(var cljs.core/bit-shift-right-zero-fill), implements? #=(var cljs.core/implements?), pos? #=(var cljs.core/pos?), specify! #=(var cljs.core/specify!), if-not #=(var cljs.core/if-not), alength #=(var cljs.core/alength), bit-xor #=(var cljs.core/bit-xor), doseq #=(var cljs.core/doseq), unsigned-bit-shift-right #=(var cljs.core/unsigned-bit-shift-right), neg? #=(var cljs.core/neg?), unchecked-float #=(var cljs.core/unchecked-float), undefined? #=(var cljs.core/undefined?), deftype #=(var cljs.core/deftype), mask #=(var cljs.core/mask), when-let #=(var cljs.core/when-let), divide #=(var cljs.core/divide), coercive-boolean #=(var cljs.core/coercive-boolean), <= #=(var cljs.core/<=), * #=(var cljs.core/*), min #=(var cljs.core/min), lazy-seq #=(var cljs.core/lazy-seq), js-delete #=(var cljs.core/js-delete), truth_ #=(var cljs.core/truth_), defcurried #=(var cljs.core/defcurried), let #=(var cljs.core/let), -> #=(var cljs.core/->), coercive-not= #=(var cljs.core/coercive-not=), doto #=(var cljs.core/doto), areduce #=(var cljs.core/areduce), double #=(var cljs.core/double), bit-and-not #=(var cljs.core/bit-and-not), unchecked-add-int #=(var cljs.core/unchecked-add-int), fn #=(var cljs.core/fn), short #=(var cljs.core/short), js-this #=(var cljs.core/js-this), unchecked-double #=(var cljs.core/unchecked-double), string? #=(var cljs.core/string?), js-arguments #=(var cljs.core/js-arguments), unchecked-multiply-int #=(var cljs.core/unchecked-multiply-int), as-> #=(var cljs.core/as->), when-not #=(var cljs.core/when-not), when #=(var cljs.core/when), int #=(var cljs.core/int), > #=(var cljs.core/>), keyword? #=(var cljs.core/keyword?), unchecked-multiply #=(var cljs.core/unchecked-multiply), gen-apply-to #=(var cljs.core/gen-apply-to), some->> #=(var cljs.core/some->>), unchecked-dec #=(var cljs.core/unchecked-dec), defn #=(var cljs.core/defn), float #=(var cljs.core/float), amap #=(var cljs.core/amap), declare #=(var cljs.core/declare), - #=(var cljs.core/-), hash-set #=(var cljs.core/hash-set), or #=(var cljs.core/or), assert-args #=(var cljs.core/assert-args), extend-type #=(var cljs.core/extend-type), bit-test #=(var cljs.core/bit-test), defmethod #=(var cljs.core/defmethod), time #=(var cljs.core/time), zero? #=(var cljs.core/zero?), unchecked-dec-int #=(var cljs.core/unchecked-dec-int), memfn #=(var cljs.core/memfn), js-obj #=(var cljs.core/js-obj), nil? #=(var cljs.core/nil?), extend-protocol #=(var cljs.core/extend-protocol), cond-> #=(var cljs.core/cond->), dotimes #=(var cljs.core/dotimes), bit-and #=(var cljs.core/bit-and), reify #=(var cljs.core/reify), instance? #=(var cljs.core/instance?), defonce #=(var cljs.core/defonce), unchecked-add #=(var cljs.core/unchecked-add), rfn #=(var cljs.core/rfn), identical? #=(var cljs.core/identical?), unchecked-divide-int #=(var cljs.core/unchecked-divide-int), defn- #=(var cljs.core/defn-), defprotocol #=(var cljs.core/defprotocol), unchecked-subtract #=(var cljs.core/unchecked-subtract), assert #=(var cljs.core/assert), true? #=(var cljs.core/true?), array #=(var cljs.core/array), letfn #=(var cljs.core/letfn), / #=(var cljs.core//), bitpos #=(var cljs.core/bitpos), bit-or #=(var cljs.core/bit-or), vector #=(var cljs.core/vector), >= #=(var cljs.core/>=), loop #=(var cljs.core/loop), bit-flip #=(var cljs.core/bit-flip), js-mod #=(var cljs.core/js-mod), with-out-str #=(var cljs.core/with-out-str), condp #=(var cljs.core/condp), cond #=(var cljs.core/cond), some-> #=(var cljs.core/some->), for #=(var cljs.core/for), binding #=(var cljs.core/binding), array-map #=(var cljs.core/array-map), unchecked-byte #=(var cljs.core/unchecked-byte), unchecked-short #=(var cljs.core/unchecked-short), inc #=(var cljs.core/inc), with-redefs #=(var cljs.core/with-redefs), bit-clear #=(var cljs.core/bit-clear), list #=(var cljs.core/list), + #=(var cljs.core/+), aset #=(var cljs.core/aset), defmulti #=(var cljs.core/defmulti), str #=(var cljs.core/str), coercive-= #=(var cljs.core/coercive-=), hash-map #=(var cljs.core/hash-map), if-let #=(var cljs.core/if-let), false? #=(var cljs.core/false?), case #=(var cljs.core/case), array? #=(var cljs.core/array?), exists? #=(var cljs.core/exists?), bit-not #=(var cljs.core/bit-not), byte #=(var cljs.core/byte), max #=(var cljs.core/max), == #=(var cljs.core/==), lazy-cat #=(var cljs.core/lazy-cat), comment #=(var cljs.core/comment), defrecord #=(var cljs.core/defrecord), make-array #=(var cljs.core/make-array), unchecked-negate-int #=(var cljs.core/unchecked-negate-int), unchecked-inc #=(var cljs.core/unchecked-inc), and #=(var cljs.core/and), number? #=(var cljs.core/number?), symbol? #=(var cljs.core/symbol?), unchecked-char #=(var cljs.core/unchecked-char), ->> #=(var cljs.core/->>)}, :macro-aliases {}}, cljs.user {:ns cljs.user, :mappings {^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash])} ->PersistentHashSet ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentHashSet [^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash])} ->PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause])} ->ExceptionInfo ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause])} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause])} ->ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 7434, :column 4, :line 7434, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7434, :column 5, :line 7434, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7434, :column 7, :line 7434, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7434, :column 9, :line 7434, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 7428, :column 7, :line 7428, :file "cljs/core.cljs"} js->clj ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 7434, :column 4, :line 7434, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7434, :column 5, :line 7434, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7434, :column 7, :line 7434, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7434, :column 9, :line 7434, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 7428, :column 7, :line 7428, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7434, :column 5, :line 7434, :file "cljs/core.cljs"} x & ^{:end-column 14, :end-line 7434, :column 9, :line 7434, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 7434, :column 4, :line 7434, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7434, :column 5, :line 7434, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7434, :column 7, :line 7434, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7434, :column 9, :line 7434, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 7428, :column 7, :line 7428, :file "cljs/core.cljs"} js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1416, :column 4, :line 1416, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1416, :column 5, :line 1416, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1416, :column 11, :line 1416, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1418, :column 4, :line 1418, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1418, :column 5, :line 1418, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1418, :column 11, :line 1418, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1418, :column 16, :line 1418, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1411, :column 7, :line 1411, :file "cljs/core.cljs"} sort-by ^{:arglists (^{:end-column 16, :end-line 1416, :column 4, :line 1416, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1416, :column 5, :line 1416, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1416, :column 11, :line 1416, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1418, :column 4, :line 1418, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1418, :column 5, :line 1418, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1418, :column 11, :line 1418, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1418, :column 16, :line 1418, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1411, :column 7, :line 1411, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1416, :column 5, :line 1416, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1416, :column 11, :line 1416, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1418, :column 5, :line 1418, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1418, :column 11, :line 1418, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1418, :column 16, :line 1418, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1416, :column 4, :line 1416, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1416, :column 5, :line 1416, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1416, :column 11, :line 1416, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1418, :column 4, :line 1418, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1418, :column 5, :line 1418, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1418, :column 11, :line 1418, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1418, :column 16, :line 1418, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1411, :column 7, :line 1411, :file "cljs/core.cljs"} sort-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 36, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} ITransientAssociative ^{:impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :protocol-symbol true, :end-column 36, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 36, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} ITransientAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} chunk-first ^{:arglists (^{:end-column 22, :end-line 2382, :column 19, :line 2382, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2382, :column 20, :line 2382, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2382, :column 7, :line 2382, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 2382, :column 20, :line 2382, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2382, :column 19, :line 2382, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2382, :column 20, :line 2382, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2382, :column 7, :line 2382, :file "cljs/core.cljs"} chunk-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 391, :column 3, :line 391, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 391, :column 5, :line 391, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 391, :column 16, :line 391, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 388, :column 7, :line 388, :file "cljs/core.cljs"} pr-str* ^{:arglists (^{:end-column 20, :end-line 391, :column 3, :line 391, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 391, :column 5, :line 391, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 391, :column 16, :line 391, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 388, :column 7, :line 388, :file "cljs/core.cljs"} {:arglists ([^{:tag ^{:end-column 16, :end-line 391, :column 5, :line 391, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 391, :column 16, :line 391, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 391, :column 3, :line 391, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 391, :column 5, :line 391, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 391, :column 16, :line 391, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 388, :column 7, :line 388, :file "cljs/core.cljs"} pr-str*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3141, :column 5, :line 3141, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3141, :column 13, :line 3141, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3141, :column 22, :line 3141, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3134, :column 7, :line 3134, :file "cljs/core.cljs"} tree-seq ^{:arglists (^{:end-column 27, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3141, :column 5, :line 3141, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3141, :column 13, :line 3141, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3141, :column 22, :line 3141, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3134, :column 7, :line 3134, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 13, :end-line 3141, :column 5, :line 3141, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3141, :column 13, :line 3141, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3141, :column 22, :line 3141, :file "cljs/core.cljs"} root]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3141, :column 5, :line 3141, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3141, :column 13, :line 3141, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3141, :column 22, :line 3141, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3134, :column 7, :line 3134, :file "cljs/core.cljs"} tree-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 1675, :column 31, :line 1675, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1675, :column 32, :line 1675, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1675, :column 34, :line 1675, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1675, :column 7, :line 1675, :file "cljs/core.cljs"} unchecked-remainder-int ^{:arglists (^{:end-column 36, :end-line 1675, :column 31, :line 1675, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1675, :column 32, :line 1675, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1675, :column 34, :line 1675, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1675, :column 7, :line 1675, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1675, :column 32, :line 1675, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1675, :column 34, :line 1675, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 1675, :column 31, :line 1675, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1675, :column 32, :line 1675, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1675, :column 34, :line 1675, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1675, :column 7, :line 1675, :file "cljs/core.cljs"} unchecked-remainder-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 474, :column 3, :line 474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 474, :column 4, :line 474, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 470, :column 8, :line 470, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 470, :column 12, :line 470, :file "cljs/core.cljs"} seq ^{:arglists (^{:end-column 9, :end-line 474, :column 3, :line 474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 474, :column 4, :line 474, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 470, :column 8, :line 470, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 470, :column 12, :line 470, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 474, :column 4, :line 474, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 474, :column 3, :line 474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 474, :column 4, :line 474, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 470, :column 8, :line 470, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 470, :column 12, :line 470, :file "cljs/core.cljs"} seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 189, :column 10, :line 189, :file "cljs/core.cljs"} reduce ^{:arglists (^{:end-column 12, :end-line 1455, :column 4, :line 1455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1455, :column 5, :line 1455, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1455, :column 7, :line 1455, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1471, :column 5, :line 1471, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1471, :column 7, :line 1471, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1471, :column 11, :line 1471, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1445, :column 7, :line 1445, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1455, :column 5, :line 1455, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1455, :column 7, :line 1455, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1471, :column 5, :line 1471, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1471, :column 7, :line 1471, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1471, :column 11, :line 1471, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1455, :column 4, :line 1455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1455, :column 5, :line 1455, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1455, :column 7, :line 1455, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1471, :column 5, :line 1471, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1471, :column 7, :line 1471, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1471, :column 11, :line 1471, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1445, :column 7, :line 1445, :file "cljs/core.cljs"} reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1306, :column 3, :line 1306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1306, :column 4, :line 1306, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1306, :column 9, :line 1306, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1300, :column 8, :line 1300, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1300, :column 16, :line 1300, :file "cljs/core.cljs"} contains? ^{:arglists (^{:end-column 11, :end-line 1306, :column 3, :line 1306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1306, :column 4, :line 1306, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1306, :column 9, :line 1306, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1300, :column 8, :line 1300, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1300, :column 16, :line 1300, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 1306, :column 4, :line 1306, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1306, :column 9, :line 1306, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1306, :column 3, :line 1306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1306, :column 4, :line 1306, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1306, :column 9, :line 1306, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1300, :column 8, :line 1300, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1300, :column 16, :line 1300, :file "cljs/core.cljs"} contains?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 2698, :column 3, :line 2698, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2698, :column 4, :line 2698, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2698, :column 9, :line 2698, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 2695, :column 8, :line 2695, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 2695, :column 16, :line 2695, :file "cljs/core.cljs"} every? ^{:arglists (^{:end-column 14, :end-line 2698, :column 3, :line 2698, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2698, :column 4, :line 2698, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2698, :column 9, :line 2698, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 2695, :column 8, :line 2695, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 2695, :column 16, :line 2695, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2698, :column 4, :line 2698, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2698, :column 9, :line 2698, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 2698, :column 3, :line 2698, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2698, :column 4, :line 2698, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2698, :column 9, :line 2698, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 2695, :column 8, :line 2695, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 2695, :column 16, :line 2695, :file "cljs/core.cljs"} every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2859, :column 4, :line 2859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2859, :column 5, :line 2859, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 20, :end-line 2855, :column 7, :line 2855, :file "cljs/core.cljs"} keep-indexed ^{:arglists (^{:end-column 12, :end-line 2859, :column 4, :line 2859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2859, :column 5, :line 2859, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 20, :end-line 2855, :column 7, :line 2855, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 2859, :column 5, :line 2859, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2859, :column 4, :line 2859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2859, :column 5, :line 2859, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 20, :end-line 2855, :column 7, :line 2855, :file "cljs/core.cljs"} keep-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash])} ->PersistentQueueSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentQueueSeq [^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash])} ->PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1873, :column 5, :line 1873, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1873, :column 7, :line 1873, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 1874, :column 4, :line 1874, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1874, :column 5, :line 1874, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 1874, :column 13, :line 1874, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 1870, :column 7, :line 1870, :file "cljs/core.cljs"} subs ^{:arglists (^{:end-column 13, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1873, :column 5, :line 1873, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1873, :column 7, :line 1873, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 1874, :column 4, :line 1874, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1874, :column 5, :line 1874, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 1874, :column 13, :line 1874, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 1870, :column 7, :line 1870, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1873, :column 5, :line 1873, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1873, :column 7, :line 1873, :file "cljs/core.cljs"} start] [^{:end-column 7, :end-line 1874, :column 5, :line 1874, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 1874, :column 13, :line 1874, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1873, :column 5, :line 1873, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1873, :column 7, :line 1873, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 1874, :column 4, :line 1874, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1874, :column 5, :line 1874, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 1874, :column 13, :line 1874, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 1870, :column 7, :line 1870, :file "cljs/core.cljs"} subs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6455, :column 3, :line 6455, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6455, :column 4, :line 6455, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 6453, :column 7, :line 6453, :file "cljs/core.cljs"} set ^{:arglists (^{:end-column 9, :end-line 6455, :column 3, :line 6455, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6455, :column 4, :line 6455, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 6453, :column 7, :line 6453, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 6455, :column 4, :line 6455, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6455, :column 3, :line 6455, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6455, :column 4, :line 6455, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 6453, :column 7, :line 6453, :file "cljs/core.cljs"} set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1368, :column 5, :line 1368, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1368, :column 8, :line 1368, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1375, :column 5, :line 1375, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1375, :column 8, :line 1375, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1375, :column 11, :line 1375, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1375, :column 15, :line 1375, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1366, :column 17, :line 1366, :file "cljs/core.cljs"} compare-indexed ^{:arglists (^{:end-column 11, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1368, :column 5, :line 1368, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1368, :column 8, :line 1368, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1375, :column 5, :line 1375, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1375, :column 8, :line 1375, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1375, :column 11, :line 1375, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1375, :column 15, :line 1375, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1366, :column 17, :line 1366, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1368, :column 5, :line 1368, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1368, :column 8, :line 1368, :file "cljs/core.cljs"} ys] ^^{:end-column 15, :end-line 1345, :column 8, :line 1345, :file "cljs/core.cljs"} number [^{:end-column 8, :end-line 1375, :column 5, :line 1375, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1375, :column 8, :line 1375, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1375, :column 11, :line 1375, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1375, :column 15, :line 1375, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1368, :column 5, :line 1368, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1368, :column 8, :line 1368, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1375, :column 5, :line 1375, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1375, :column 8, :line 1375, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1375, :column 11, :line 1375, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1375, :column 15, :line 1375, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1366, :column 17, :line 1366, :file "cljs/core.cljs"} compare-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3020, :column 3, :line 3020, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3020, :column 4, :line 3020, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3020, :column 6, :line 3020, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3017, :column 7, :line 3017, :file "cljs/core.cljs"} take-last ^{:arglists (^{:end-column 11, :end-line 3020, :column 3, :line 3020, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3020, :column 4, :line 3020, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3020, :column 6, :line 3020, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3017, :column 7, :line 3017, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 6, :end-line 3020, :column 4, :line 3020, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3020, :column 6, :line 3020, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3020, :column 3, :line 3020, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3020, :column 4, :line 3020, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3020, :column 6, :line 3020, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3017, :column 7, :line 3017, :file "cljs/core.cljs"} take-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 462, :column 29, :line 462, :file "cljs/core.cljs"} IndexedSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 672, :column 10, :line 672, :file "cljs/core.cljs"} IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 28, :end-line 672, :column 21, :line 672, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i], :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 8, :end-line 1789, :column 3, :line 1789, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1789, :column 6, :line 1789, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1787, :column 7, :line 1787, :file "cljs/core.cljs"} bit-set ^{:arglists (^{:end-column 8, :end-line 1789, :column 3, :line 1789, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1789, :column 6, :line 1789, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1787, :column 7, :line 1787, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1789, :column 6, :line 1789, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1789, :column 3, :line 1789, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1789, :column 6, :line 1789, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1787, :column 7, :line 1787, :file "cljs/core.cljs"} bit-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 32, :end-line 1139, :column 1, :line 1139, :file "cljs/core.cljs"} string-hash-cache-count ^{:end-column 32, :end-line 1139, :column 1, :line 1139, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 32, :end-line 1139, :column 1, :line 1139, :file "cljs/core.cljs"} string-hash-cache-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 5801, :column 21, :line 5801, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5801, :column 22, :line 5801, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 5801, :column 27, :line 5801, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 5801, :column 32, :line 5801, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 5801, :column 34, :line 5801, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 5801, :column 36, :line 5801, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 5801, :column 8, :line 5801, :file "cljs/core.cljs"} tree-map-add ^{:arglists (^{:end-column 42, :end-line 5801, :column 21, :line 5801, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5801, :column 22, :line 5801, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 5801, :column 27, :line 5801, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 5801, :column 32, :line 5801, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 5801, :column 34, :line 5801, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 5801, :column 36, :line 5801, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 5801, :column 8, :line 5801, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 5801, :column 22, :line 5801, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 5801, :column 27, :line 5801, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 5801, :column 32, :line 5801, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 5801, :column 34, :line 5801, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 5801, :column 36, :line 5801, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 5801, :column 21, :line 5801, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5801, :column 22, :line 5801, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 5801, :column 27, :line 5801, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 5801, :column 32, :line 5801, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 5801, :column 34, :line 5801, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 5801, :column 36, :line 5801, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 5801, :column 8, :line 5801, :file "cljs/core.cljs"} tree-map-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 289, :column 20, :line 289, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 289, :column 21, :line 289, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 289, :column 23, :line 289, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 289, :column 5, :line 289, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 289, :column 9, :line 289, :file "cljs/core.cljs"} -with-meta ^{:arglists (^{:end-column 28, :end-line 289, :column 20, :line 289, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 289, :column 21, :line 289, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 289, :column 23, :line 289, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 289, :column 5, :line 289, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 289, :column 9, :line 289, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 289, :column 21, :line 289, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 289, :column 23, :line 289, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 289, :column 20, :line 289, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 289, :column 21, :line 289, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 289, :column 23, :line 289, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 289, :column 5, :line 289, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 289, :column 9, :line 289, :file "cljs/core.cljs"} -with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 57, :end-line 7634, :column 3, :line 7634, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 7634, :column 17, :line 7634, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 7634, :column 30, :line 7634, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 7634, :column 47, :line 7634, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 7633, :column 8, :line 7633, :file "cljs/core.cljs"} reset-cache ^{:arglists (^{:end-column 57, :end-line 7634, :column 3, :line 7634, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 7634, :column 17, :line 7634, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 7634, :column 30, :line 7634, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 7634, :column 47, :line 7634, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 7633, :column 8, :line 7633, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 7634, :column 17, :line 7634, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 7634, :column 30, :line 7634, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 7634, :column 47, :line 7634, :file "cljs/core.cljs"} hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 57, :end-line 7634, :column 3, :line 7634, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 7634, :column 17, :line 7634, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 7634, :column 30, :line 7634, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 7634, :column 47, :line 7634, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 7633, :column 8, :line 7633, :file "cljs/core.cljs"} reset-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 6514, :column 15, :line 6514, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6514, :column 16, :line 6514, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 6514, :column 7, :line 6514, :file "cljs/core.cljs"} butlast ^{:arglists (^{:end-column 18, :end-line 6514, :column 15, :line 6514, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6514, :column 16, :line 6514, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 6514, :column 7, :line 6514, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 18, :end-line 6514, :column 16, :line 6514, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 6514, :column 15, :line 6514, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6514, :column 16, :line 6514, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 6514, :column 7, :line 6514, :file "cljs/core.cljs"} butlast, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 3287, :column 17, :line 3287, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3287, :column 18, :line 3287, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} tail-off ^{:arglists (^{:end-column 21, :end-line 3287, :column 17, :line 3287, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3287, :column 18, :line 3287, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 3287, :column 18, :line 3287, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 3287, :column 17, :line 3287, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3287, :column 18, :line 3287, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} tail-off, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 6696, :column 3, :line 6696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6696, :column 4, :line 6696, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 6696, :column 6, :line 6696, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.", :end-column 16, :end-line 6694, :column 7, :line 6694, :file "cljs/core.cljs"} take-nth ^{:arglists (^{:end-column 11, :end-line 6696, :column 3, :line 6696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6696, :column 4, :line 6696, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 6696, :column 6, :line 6696, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.", :end-column 16, :end-line 6694, :column 7, :line 6694, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 6696, :column 4, :line 6696, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 6696, :column 6, :line 6696, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6696, :column 3, :line 6696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6696, :column 4, :line 6696, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 6696, :column 6, :line 6696, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.", :end-column 16, :end-line 6694, :column 7, :line 6694, :file "cljs/core.cljs"} take-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 496, :column 3, :line 496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 496, :column 4, :line 496, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} first ^{:arglists (^{:end-column 9, :end-line 496, :column 3, :line 496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 496, :column 4, :line 496, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 496, :column 4, :line 496, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 496, :column 3, :line 496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 496, :column 4, :line 496, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 109, :column 3, :line 109, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 109, :column 4, :line 109, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 109, :column 6, :line 109, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} native-satisfies? ^{:arglists (^{:end-column 8, :end-line 109, :column 3, :line 109, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 109, :column 4, :line 109, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 109, :column 6, :line 109, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 109, :column 4, :line 109, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 109, :column 6, :line 109, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 109, :column 3, :line 109, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 109, :column 4, :line 109, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 109, :column 6, :line 109, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} native-satisfies?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1276, :column 3, :line 1276, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1276, :column 4, :line 1276, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1274, :column 8, :line 1274, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1274, :column 16, :line 1274, :file "cljs/core.cljs"} seq? ^{:arglists (^{:end-column 6, :end-line 1276, :column 3, :line 1276, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1276, :column 4, :line 1276, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1274, :column 8, :line 1274, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1274, :column 16, :line 1274, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1276, :column 4, :line 1276, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1276, :column 3, :line 1276, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1276, :column 4, :line 1276, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1274, :column 8, :line 1274, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1274, :column 16, :line 1274, :file "cljs/core.cljs"} seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 38, :end-line 7523, :column 1, :line 7523, :file "cljs/core.cljs"} -global-hierarchy ^{:private true, :end-column 38, :end-line 7523, :column 1, :line 7523, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:private true, :end-column 38, :end-line 7523, :column 1, :line 7523, :file "cljs/core.cljs"} -global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 7903, :column 10, :line 7903, :file "cljs/core.cljs"} UUID {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 7903, :column 10, :line 7903, :file "cljs/core.cljs"} UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 21, :end-line 7903, :column 15, :line 7903, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 45, :end-line 320, :column 26, :line 320, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 320, :column 27, :line 320, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 320, :column 32, :line 320, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 320, :column 34, :line 320, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} -sorted-seq-from ^{:arglists (^{:end-column 45, :end-line 320, :column 26, :line 320, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 320, :column 27, :line 320, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 320, :column 32, :line 320, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 320, :column 34, :line 320, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 320, :column 27, :line 320, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 320, :column 32, :line 320, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 320, :column 34, :line 320, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 320, :column 26, :line 320, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 320, :column 27, :line 320, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 320, :column 32, :line 320, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 320, :column 34, :line 320, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} -sorted-seq-from, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7046, :column 3, :line 7046, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7046, :column 4, :line 7046, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7046, :column 6, :line 7046, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} println-str ^{:arglists (^{:end-column 11, :end-line 7046, :column 3, :line 7046, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7046, :column 4, :line 7046, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7046, :column 6, :line 7046, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7046, :column 6, :line 7046, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7046, :column 3, :line 7046, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7046, :column 4, :line 7046, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7046, :column 6, :line 7046, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} println-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 884, :column 4, :line 884, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 884, :column 5, :line 884, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 884, :column 10, :line 884, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 893, :column 4, :line 893, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 893, :column 5, :line 893, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 893, :column 10, :line 893, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 893, :column 12, :line 893, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 883, :column 8, :line 883, :file "cljs/core.cljs"} linear-traversal-nth ^{:arglists (^{:end-column 12, :end-line 884, :column 4, :line 884, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 884, :column 5, :line 884, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 884, :column 10, :line 884, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 893, :column 4, :line 893, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 893, :column 5, :line 893, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 893, :column 10, :line 893, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 893, :column 12, :line 893, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 883, :column 8, :line 883, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 884, :column 5, :line 884, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 884, :column 10, :line 884, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 893, :column 5, :line 893, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 893, :column 10, :line 893, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 893, :column 12, :line 893, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 884, :column 4, :line 884, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 884, :column 5, :line 884, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 884, :column 10, :line 884, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 893, :column 4, :line 893, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 893, :column 5, :line 893, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 893, :column 10, :line 893, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 893, :column 12, :line 893, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 883, :column 8, :line 883, :file "cljs/core.cljs"} linear-traversal-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3067, :column 3, :line 3067, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3067, :column 4, :line 3067, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3067, :column 6, :line 3067, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3064, :column 7, :line 3064, :file "cljs/core.cljs"} iterate ^{:arglists (^{:end-column 8, :end-line 3067, :column 3, :line 3067, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3067, :column 4, :line 3067, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3067, :column 6, :line 3067, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3064, :column 7, :line 3064, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 3067, :column 4, :line 3067, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3067, :column 6, :line 3067, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3067, :column 3, :line 3067, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3067, :column 4, :line 3067, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3067, :column 6, :line 3067, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3064, :column 7, :line 3064, :file "cljs/core.cljs"} iterate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 233, :column 12, :line 233, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 233, :column 4, :line 233, :file "cljs/core.cljs"} -empty ^{:arglists (^{:end-column 17, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 233, :column 12, :line 233, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 233, :column 4, :line 233, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 233, :column 12, :line 233, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 233, :column 12, :line 233, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 233, :column 4, :line 233, :file "cljs/core.cljs"} -empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7002, :column 15, :line 7002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7002, :column 16, :line 7002, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7002, :column 7, :line 7002, :file "cljs/core.cljs"} newline ^{:arglists (^{:end-column 21, :end-line 7002, :column 15, :line 7002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7002, :column 16, :line 7002, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7002, :column 7, :line 7002, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 21, :end-line 7002, :column 16, :line 7002, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7002, :column 15, :line 7002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7002, :column 16, :line 7002, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7002, :column 7, :line 7002, :file "cljs/core.cljs"} newline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 253, :column 14, :line 253, :file "cljs/core.cljs"} ILookup ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/TransientHashMap cljs.core/PersistentVector cljs.core/TransientArrayMap cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 253, :column 14, :line 253, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 253, :column 14, :line 253, :file "cljs/core.cljs"} ILookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 372, :column 18, :line 372, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 372, :column 19, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} -chunked-rest ^{:arglists (^{:end-column 24, :end-line 372, :column 18, :line 372, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 372, :column 19, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 372, :column 19, :line 372, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 372, :column 18, :line 372, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 372, :column 19, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} -chunked-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 6865, :column 17, :line 6865, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6865, :column 18, :line 6865, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 6865, :column 25, :line 6865, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 6865, :column 27, :line 6865, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} write-all ^{:arglists (^{:end-column 30, :end-line 6865, :column 17, :line 6865, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6865, :column 18, :line 6865, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 6865, :column 25, :line 6865, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 6865, :column 27, :line 6865, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 6865, :column 18, :line 6865, :file "cljs/core.cljs"} writer & ^{:end-column 30, :end-line 6865, :column 27, :line 6865, :file "cljs/core.cljs"} ss]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 6865, :column 17, :line 6865, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6865, :column 18, :line 6865, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 6865, :column 25, :line 6865, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 6865, :column 27, :line 6865, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} write-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1038, :column 20, :line 1038, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1038, :column 21, :line 1038, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1038, :column 8, :line 1038, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1038, :column 16, :line 1038, :file "cljs/core.cljs"} fn? ^{:arglists (^{:end-column 23, :end-line 1038, :column 20, :line 1038, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1038, :column 21, :line 1038, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1038, :column 8, :line 1038, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1038, :column 16, :line 1038, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1039, :column 8, :line 1039, :file "cljs/core.cljs"} boolean [^{:end-column 23, :end-line 1038, :column 21, :line 1038, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1038, :column 20, :line 1038, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1038, :column 21, :line 1038, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1038, :column 8, :line 1038, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1038, :column 16, :line 1038, :file "cljs/core.cljs"} fn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 51, :end-line 7689, :column 19, :line 7689, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7689, :column 20, :line 7689, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7689, :column 23, :line 7689, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 7689, :column 36, :line 7689, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7689, :column 4, :line 7689, :file "cljs/core.cljs"} -prefer-method ^{:arglists (^{:end-column 51, :end-line 7689, :column 19, :line 7689, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7689, :column 20, :line 7689, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7689, :column 23, :line 7689, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 7689, :column 36, :line 7689, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7689, :column 4, :line 7689, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 7689, :column 20, :line 7689, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7689, :column 23, :line 7689, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 7689, :column 36, :line 7689, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 51, :end-line 7689, :column 19, :line 7689, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7689, :column 20, :line 7689, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7689, :column 23, :line 7689, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 7689, :column 36, :line 7689, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7689, :column 4, :line 7689, :file "cljs/core.cljs"} -prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 259, :column 16, :line 259, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 259, :column 17, :line 259, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 259, :column 22, :line 259, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 259, :column 24, :line 259, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 259, :column 5, :line 259, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 259, :column 9, :line 259, :file "cljs/core.cljs"} -assoc ^{:arglists (^{:end-column 26, :end-line 259, :column 16, :line 259, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 259, :column 17, :line 259, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 259, :column 22, :line 259, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 259, :column 24, :line 259, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 259, :column 5, :line 259, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 259, :column 9, :line 259, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 259, :column 17, :line 259, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 259, :column 22, :line 259, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 259, :column 24, :line 259, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 259, :column 16, :line 259, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 259, :column 17, :line 259, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 259, :column 22, :line 259, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 259, :column 24, :line 259, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 259, :column 5, :line 259, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 259, :column 9, :line 259, :file "cljs/core.cljs"} -assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 6796, :column 4, :line 6796, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6796, :column 5, :line 6796, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 6789, :column 7, :line 6789, :file "cljs/core.cljs"} doall ^{:arglists (^{:end-column 10, :end-line 6796, :column 4, :line 6796, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6796, :column 5, :line 6796, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 6789, :column 7, :line 6789, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 6796, :column 5, :line 6796, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 6796, :column 4, :line 6796, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6796, :column 5, :line 6796, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 6789, :column 7, :line 6789, :file "cljs/core.cljs"} doall, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 2167, :column 35, :line 2167, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2167, :column 36, :line 2167, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2167, :column 38, :line 2167, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2167, :column 8, :line 2167, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2167, :column 16, :line 2167, :file "cljs/core.cljs"} keyword-identical? ^{:arglists (^{:end-column 40, :end-line 2167, :column 35, :line 2167, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2167, :column 36, :line 2167, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2167, :column 38, :line 2167, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2167, :column 8, :line 2167, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2167, :column 16, :line 2167, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 38, :end-line 2167, :column 36, :line 2167, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2167, :column 38, :line 2167, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 2167, :column 35, :line 2167, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2167, :column 36, :line 2167, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2167, :column 38, :line 2167, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2167, :column 8, :line 2167, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2167, :column 16, :line 2167, :file "cljs/core.cljs"} keyword-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 3281, :column 16, :line 3281, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3281, :column 17, :line 3281, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3281, :column 22, :line 3281, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3281, :column 26, :line 3281, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3281, :column 8, :line 3281, :file "cljs/core.cljs"} pv-aset ^{:arglists (^{:end-column 30, :end-line 3281, :column 16, :line 3281, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3281, :column 17, :line 3281, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3281, :column 22, :line 3281, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3281, :column 26, :line 3281, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3281, :column 8, :line 3281, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3281, :column 17, :line 3281, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3281, :column 22, :line 3281, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3281, :column 26, :line 3281, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 3281, :column 16, :line 3281, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3281, :column 17, :line 3281, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3281, :column 22, :line 3281, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3281, :column 26, :line 3281, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3281, :column 8, :line 3281, :file "cljs/core.cljs"} pv-aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7899, :column 3, :line 7899, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7899, :column 4, :line 7899, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 7897, :column 7, :line 7897, :file "cljs/core.cljs"} prefers ^{:arglists (^{:end-column 12, :end-line 7899, :column 3, :line 7899, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7899, :column 4, :line 7899, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 7897, :column 7, :line 7897, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7899, :column 4, :line 7899, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7899, :column 3, :line 7899, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7899, :column 4, :line 7899, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 7897, :column 7, :line 7897, :file "cljs/core.cljs"} prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 7426, :column 13, :line 7426, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7426, :column 14, :line 7426, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 7426, :column 16, :line 7426, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 7426, :column 4, :line 7426, :file "cljs/core.cljs"} -js->clj ^{:arglists (^{:end-column 24, :end-line 7426, :column 13, :line 7426, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7426, :column 14, :line 7426, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 7426, :column 16, :line 7426, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 7426, :column 4, :line 7426, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7426, :column 14, :line 7426, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 7426, :column 16, :line 7426, :file "cljs/core.cljs"} options]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 7426, :column 13, :line 7426, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7426, :column 14, :line 7426, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 7426, :column 16, :line 7426, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 7426, :column 4, :line 7426, :file "cljs/core.cljs"} -js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} LazySeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 2197, :column 18, :line 2197, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 43, :end-line 3787, :column 37, :line 3787, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 3787, :column 38, :line 3787, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 3787, :column 41, :line 3787, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 3787, :column 8, :line 3787, :file "cljs/core.cljs"} unchecked-editable-array-for ^{:arglists (^{:end-column 43, :end-line 3787, :column 37, :line 3787, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 3787, :column 38, :line 3787, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 3787, :column 41, :line 3787, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 3787, :column 8, :line 3787, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 3787, :column 38, :line 3787, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 3787, :column 41, :line 3787, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 3787, :column 37, :line 3787, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 3787, :column 38, :line 3787, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 3787, :column 41, :line 3787, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 3787, :column 8, :line 3787, :file "cljs/core.cljs"} unchecked-editable-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3273, :column 10, :line 3273, :file "cljs/core.cljs"} VectorNode {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3273, :column 10, :line 3273, :file "cljs/core.cljs"} VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 3273, :column 21, :line 3273, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr], :protocols #{}}, ^{:arglists (^{:end-column 10, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1027, :column 5, :line 1027, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1028, :column 4, :line 1028, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1028, :column 5, :line 1028, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1028, :column 10, :line 1028, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1031, :column 5, :line 1031, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1031, :column 10, :line 1031, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1031, :column 12, :line 1031, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1031, :column 14, :line 1031, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1024, :column 7, :line 1024, :file "cljs/core.cljs"} dissoc ^{:arglists (^{:end-column 10, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1027, :column 5, :line 1027, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1028, :column 4, :line 1028, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1028, :column 5, :line 1028, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1028, :column 10, :line 1028, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1031, :column 5, :line 1031, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1031, :column 10, :line 1031, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1031, :column 12, :line 1031, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1031, :column 14, :line 1031, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1024, :column 7, :line 1024, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1027, :column 5, :line 1027, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1028, :column 5, :line 1028, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1028, :column 10, :line 1028, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1031, :column 5, :line 1031, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1031, :column 10, :line 1031, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1031, :column 14, :line 1031, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1027, :column 5, :line 1027, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1028, :column 4, :line 1028, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1028, :column 5, :line 1028, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1028, :column 10, :line 1028, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1031, :column 5, :line 1031, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1031, :column 10, :line 1031, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1031, :column 12, :line 1031, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1031, :column 14, :line 1031, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1024, :column 7, :line 1024, :file "cljs/core.cljs"} dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 73, :end-line 4555, :column 68, :line 4555, :file "cljs/core.cljs"} atom ^{:arglists (^{:end-column 7, :end-line 7223, :column 4, :line 7223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7223, :column 5, :line 7223, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 7224, :column 4, :line 7224, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7224, :column 5, :line 7224, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7224, :column 7, :line 7224, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 7224, :column 9, :line 7224, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 7224, :column 16, :line 7224, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7224, :column 17, :line 7224, :file "cljs/core.cljs"} meta ^{:end-column 32, :end-line 7224, :column 22, :line 7224, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 12, :end-line 7209, :column 7, :line 7209, :file "cljs/core.cljs"} {:arglists (^cljs.core/Atom [^{:end-column 7, :end-line 7223, :column 5, :line 7223, :file "cljs/core.cljs"} x] ^cljs.core/Atom [^{:end-column 7, :end-line 7224, :column 5, :line 7224, :file "cljs/core.cljs"} x & p__9341]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7223, :column 4, :line 7223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7223, :column 5, :line 7223, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 7224, :column 4, :line 7224, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7224, :column 5, :line 7224, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 7224, :column 7, :line 7224, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 7224, :column 9, :line 7224, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 7224, :column 16, :line 7224, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7224, :column 17, :line 7224, :file "cljs/core.cljs"} meta ^{:end-column 32, :end-line 7224, :column 22, :line 7224, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 12, :end-line 7209, :column 7, :line 7209, :file "cljs/core.cljs"} atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1803, :column 3, :line 1803, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1803, :column 4, :line 1803, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1803, :column 6, :line 1803, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} bit-shift-right ^{:arglists (^{:end-column 8, :end-line 1803, :column 3, :line 1803, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1803, :column 4, :line 1803, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1803, :column 6, :line 1803, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1803, :column 4, :line 1803, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1803, :column 6, :line 1803, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1803, :column 3, :line 1803, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1803, :column 4, :line 1803, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1803, :column 6, :line 1803, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version* ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 247, :column 11, :line 247, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 247, :column 12, :line 247, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -first ^{:arglists (^{:end-column 17, :end-line 247, :column 11, :line 247, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 247, :column 12, :line 247, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 247, :column 12, :line 247, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 247, :column 11, :line 247, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 247, :column 12, :line 247, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1111, :column 3, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1108, :column 7, :line 1108, :file "cljs/core.cljs"} peek ^{:arglists (^{:end-column 9, :end-line 1111, :column 3, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1108, :column 7, :line 1108, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1111, :column 3, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1108, :column 7, :line 1108, :file "cljs/core.cljs"} peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 294, :column 14, :line 294, :file "cljs/core.cljs"} IKVReduce ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/PersistentTreeMap}, :protocol-symbol true, :end-column 24, :end-line 294, :column 14, :line 294, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 294, :column 14, :line 294, :file "cljs/core.cljs"} IKVReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 172, :column 4, :line 172, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 172, :column 5, :line 172, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 172, :column 11, :line 172, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 174, :column 5, :line 174, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 174, :column 11, :line 174, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 174, :column 13, :line 174, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 174, :column 15, :line 174, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 170, :column 7, :line 170, :file "cljs/core.cljs"} aget ^{:arglists (^{:end-column 13, :end-line 172, :column 4, :line 172, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 172, :column 5, :line 172, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 172, :column 11, :line 172, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 174, :column 5, :line 174, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 174, :column 11, :line 174, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 174, :column 13, :line 174, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 174, :column 15, :line 174, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 170, :column 7, :line 170, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 172, :column 5, :line 172, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 172, :column 11, :line 172, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 174, :column 5, :line 174, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 174, :column 11, :line 174, :file "cljs/core.cljs"} i & ^{:end-column 20, :end-line 174, :column 15, :line 174, :file "cljs/core.cljs"} idxs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 172, :column 4, :line 172, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 172, :column 5, :line 172, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 172, :column 11, :line 172, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 174, :column 5, :line 174, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 174, :column 11, :line 174, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 174, :column 13, :line 174, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 174, :column 15, :line 174, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 170, :column 7, :line 170, :file "cljs/core.cljs"} aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5403, :column 10, :line 5403, :file "cljs/core.cljs"} PersistentTreeMapSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5403, :column 10, :line 5403, :file "cljs/core.cljs"} PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 84, :end-line 5403, :column 31, :line 5403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 21, :end-line 325, :column 11, :line 325, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 325, :column 12, :line 325, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 325, :column 19, :line 325, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} -write ^{:arglists (^{:end-column 21, :end-line 325, :column 11, :line 325, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 325, :column 12, :line 325, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 325, :column 19, :line 325, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 325, :column 12, :line 325, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 325, :column 19, :line 325, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 325, :column 11, :line 325, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 325, :column 12, :line 325, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 325, :column 19, :line 325, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} -write, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 6575, :column 3, :line 6575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6575, :column 4, :line 6575, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 6575, :column 7, :line 6575, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 6575, :column 12, :line 6575, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 6574, :column 7, :line 6574, :file "cljs/core.cljs"} mk-bound-fn ^{:arglists (^{:end-column 16, :end-line 6575, :column 3, :line 6575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6575, :column 4, :line 6575, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 6575, :column 7, :line 6575, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 6575, :column 12, :line 6575, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 6574, :column 7, :line 6574, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 6575, :column 4, :line 6575, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 6575, :column 7, :line 6575, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 6575, :column 12, :line 6575, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 6575, :column 3, :line 6575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6575, :column 4, :line 6575, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 6575, :column 7, :line 6575, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 6575, :column 12, :line 6575, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 6574, :column 7, :line 6574, :file "cljs/core.cljs"} mk-bound-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 825, :column 7, :line 825, :file "cljs/core.cljs"} last ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 825, :column 7, :line 825, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 825, :column 7, :line 825, :file "cljs/core.cljs"} last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7022, :column 3, :line 7022, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7022, :column 4, :line 7022, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7022, :column 6, :line 7022, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7017, :column 7, :line 7017, :file "cljs/core.cljs"} pr ^{:arglists (^{:end-column 11, :end-line 7022, :column 3, :line 7022, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7022, :column 4, :line 7022, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7022, :column 6, :line 7022, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7017, :column 7, :line 7017, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7022, :column 6, :line 7022, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7022, :column 3, :line 7022, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7022, :column 4, :line 7022, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7022, :column 6, :line 7022, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7017, :column 7, :line 7017, :file "cljs/core.cljs"} pr, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 58, :end-line 5396, :column 26, :line 5396, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 5396, :column 27, :line 5396, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 5396, :column 32, :line 5396, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 5396, :column 39, :line 5396, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 5396, :column 47, :line 5396, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} tree-map-seq-push ^{:arglists (^{:end-column 58, :end-line 5396, :column 26, :line 5396, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 5396, :column 27, :line 5396, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 5396, :column 32, :line 5396, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 5396, :column 39, :line 5396, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 5396, :column 47, :line 5396, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 5396, :column 27, :line 5396, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 5396, :column 32, :line 5396, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 5396, :column 39, :line 5396, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 5396, :column 47, :line 5396, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 58, :end-line 5396, :column 26, :line 5396, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 5396, :column 27, :line 5396, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 5396, :column 32, :line 5396, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 5396, :column 39, :line 5396, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 5396, :column 47, :line 5396, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} tree-map-seq-push, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2177, :column 3, :line 2177, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2177, :column 4, :line 2177, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2175, :column 7, :line 2175, :file "cljs/core.cljs"} namespace ^{:arglists (^{:end-column 6, :end-line 2177, :column 3, :line 2177, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2177, :column 4, :line 2177, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2175, :column 7, :line 2175, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 379, :column 5, :line 379, :file "cljs/core.cljs"} string [^{:end-column 6, :end-line 2177, :column 4, :line 2177, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2177, :column 3, :line 2177, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2177, :column 4, :line 2177, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2175, :column 7, :line 2175, :file "cljs/core.cljs"} namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6057, :column 3, :line 6057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6057, :column 4, :line 6057, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6057, :column 6, :line 6057, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6054, :column 7, :line 6054, :file "cljs/core.cljs"} obj-map ^{:arglists (^{:end-column 14, :end-line 6057, :column 3, :line 6057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6057, :column 4, :line 6057, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6057, :column 6, :line 6057, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6054, :column 7, :line 6054, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 14, :end-line 6057, :column 6, :line 6057, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6057, :column 3, :line 6057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6057, :column 4, :line 6057, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6057, :column 6, :line 6057, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6054, :column 7, :line 6054, :file "cljs/core.cljs"} obj-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 584, :column 10, :line 584, :file "cljs/core.cljs"} Reduced {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 584, :column 10, :line 584, :file "cljs/core.cljs"} Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 584, :column 18, :line 584, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val], :protocols #{cljs.core/IDeref}}, ^{:arglists (^{:end-column 23, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 236, :column 16, :line 236, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 236, :column 9, :line 236, :file "cljs/core.cljs"} -conj ^{:arglists (^{:end-column 23, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 236, :column 16, :line 236, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 236, :column 9, :line 236, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 236, :column 16, :line 236, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 236, :column 16, :line 236, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 236, :column 9, :line 236, :file "cljs/core.cljs"} -conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5049, :column 10, :line 5049, :file "cljs/core.cljs"} NodeSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5049, :column 10, :line 5049, :file "cljs/core.cljs"} NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 5049, :column 18, :line 5049, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:declared true, :end-column 42, :end-line 400, :column 40, :line 400, :file "cljs/core.cljs"} = ^{:arglists (^{:end-column 7, :end-line 531, :column 4, :line 531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 531, :column 5, :line 531, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 532, :column 4, :line 532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 532, :column 5, :line 532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 537, :column 4, :line 537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 537, :column 5, :line 537, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 537, :column 7, :line 537, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 537, :column 9, :line 537, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 537, :column 11, :line 537, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 526, :column 8, :line 526, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 526, :column 16, :line 526, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 531, :column 5, :line 531, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 532, :column 5, :line 532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 537, :column 5, :line 537, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 537, :column 7, :line 537, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 537, :column 11, :line 537, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 531, :column 4, :line 531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 531, :column 5, :line 531, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 532, :column 4, :line 532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 532, :column 5, :line 532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 537, :column 4, :line 537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 537, :column 5, :line 537, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 537, :column 7, :line 537, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 537, :column 9, :line 537, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 537, :column 11, :line 537, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 526, :column 8, :line 526, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 526, :column 16, :line 526, :file "cljs/core.cljs"} =, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 354, :column 14, :line 354, :file "cljs/core.cljs"} ITransientMap ^{:impls #{cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :protocol-symbol true, :end-column 28, :end-line 354, :column 14, :line 354, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 354, :column 14, :line 354, :file "cljs/core.cljs"} ITransientMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 3303, :column 18, :line 3303, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3303, :column 19, :line 3303, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3303, :column 22, :line 3303, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3303, :column 28, :line 3303, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3303, :column 35, :line 3303, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3303, :column 8, :line 3303, :file "cljs/core.cljs"} push-tail ^{:arglists (^{:end-column 44, :end-line 3303, :column 18, :line 3303, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3303, :column 19, :line 3303, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3303, :column 22, :line 3303, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3303, :column 28, :line 3303, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3303, :column 35, :line 3303, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3303, :column 8, :line 3303, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 22, :end-line 3303, :column 19, :line 3303, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3303, :column 22, :line 3303, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3303, :column 28, :line 3303, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3303, :column 35, :line 3303, :file "cljs/core.cljs"} tailnode]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 3303, :column 18, :line 3303, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3303, :column 19, :line 3303, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3303, :column 22, :line 3303, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3303, :column 28, :line 3303, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3303, :column 35, :line 3303, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3303, :column 8, :line 3303, :file "cljs/core.cljs"} push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2996, :column 3, :line 2996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2996, :column 4, :line 2996, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 2996, :column 6, :line 2996, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.", :end-column 12, :end-line 2993, :column 7, :line 2993, :file "cljs/core.cljs"} take ^{:arglists (^{:end-column 11, :end-line 2996, :column 3, :line 2996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2996, :column 4, :line 2996, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 2996, :column 6, :line 2996, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.", :end-column 12, :end-line 2993, :column 7, :line 2993, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 2996, :column 4, :line 2996, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 2996, :column 6, :line 2996, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2996, :column 3, :line 2996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2996, :column 4, :line 2996, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 2996, :column 6, :line 2996, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.", :end-column 12, :end-line 2993, :column 7, :line 2993, :file "cljs/core.cljs"} take, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1221, :column 3, :line 1221, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1219, :column 8, :line 1219, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1219, :column 16, :line 1219, :file "cljs/core.cljs"} vector? ^{:arglists (^{:end-column 6, :end-line 1221, :column 3, :line 1221, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1219, :column 8, :line 1219, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1219, :column 16, :line 1219, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1221, :column 3, :line 1221, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1219, :column 8, :line 1219, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1219, :column 16, :line 1219, :file "cljs/core.cljs"} vector?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 46, :end-line 4581, :column 34, :line 4581, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 4581, :column 35, :line 4581, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 4581, :column 42, :line 4581, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 4581, :column 8, :line 4581, :file "cljs/core.cljs"} bitmap-indexed-node-index ^{:arglists (^{:end-column 46, :end-line 4581, :column 34, :line 4581, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 4581, :column 35, :line 4581, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 4581, :column 42, :line 4581, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 4581, :column 8, :line 4581, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 42, :end-line 4581, :column 35, :line 4581, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 4581, :column 42, :line 4581, :file "cljs/core.cljs"} bit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 4581, :column 34, :line 4581, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 4581, :column 35, :line 4581, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 4581, :column 42, :line 4581, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 4581, :column 8, :line 4581, :file "cljs/core.cljs"} bitmap-indexed-node-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1286, :column 24, :line 1286, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1286, :column 25, :line 1286, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1286, :column 8, :line 1286, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1286, :column 16, :line 1286, :file "cljs/core.cljs"} boolean ^{:arglists (^{:end-column 27, :end-line 1286, :column 24, :line 1286, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1286, :column 25, :line 1286, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1286, :column 8, :line 1286, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1286, :column 16, :line 1286, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 27, :end-line 1286, :column 25, :line 1286, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1286, :column 24, :line 1286, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1286, :column 25, :line 1286, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1286, :column 8, :line 1286, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1286, :column 16, :line 1286, :file "cljs/core.cljs"} boolean, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} IChunk ^{:impls #{cljs.core/ArrayChunk}, :protocol-symbol true, :end-column 21, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} IChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1799, :column 3, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1799, :column 6, :line 1799, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1797, :column 7, :line 1797, :file "cljs/core.cljs"} bit-shift-left ^{:arglists (^{:end-column 8, :end-line 1799, :column 3, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1799, :column 6, :line 1799, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1797, :column 7, :line 1797, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1799, :column 6, :line 1799, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1799, :column 3, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1799, :column 6, :line 1799, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1797, :column 7, :line 1797, :file "cljs/core.cljs"} bit-shift-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1755, :column 3, :line 1755, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1755, :column 4, :line 1755, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} rand-int ^{:arglists (^{:end-column 6, :end-line 7499, :column 3, :line 7499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7499, :column 4, :line 7499, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 7497, :column 7, :line 7497, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7499, :column 4, :line 7499, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7499, :column 3, :line 7499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7499, :column 4, :line 7499, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 7497, :column 7, :line 7497, :file "cljs/core.cljs"} rand-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 155, :column 3, :line 155, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 155, :column 4, :line 155, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 153, :column 7, :line 153, :file "cljs/core.cljs"} aclone ^{:arglists (^{:end-column 8, :end-line 155, :column 3, :line 155, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 155, :column 4, :line 155, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 153, :column 7, :line 153, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 155, :column 4, :line 155, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 155, :column 3, :line 155, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 155, :column 4, :line 155, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 153, :column 7, :line 153, :file "cljs/core.cljs"} aclone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 5455, :column 18, :line 5455, :file "cljs/core.cljs"} BlackNode {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 5558, :column 10, :line 5558, :file "cljs/core.cljs"} BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 57, :end-line 5558, :column 20, :line 5558, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 16, :end-line 2379, :column 13, :line 2379, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2379, :column 14, :line 2379, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} chunk ^{:arglists (^{:end-column 16, :end-line 2379, :column 13, :line 2379, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2379, :column 14, :line 2379, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2379, :column 14, :line 2379, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 2379, :column 13, :line 2379, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2379, :column 14, :line 2379, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1584, :column 3, :line 1584, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1582, :column 7, :line 1582, :file "cljs/core.cljs"} dec ^{:arglists (^{:end-column 6, :end-line 1584, :column 3, :line 1584, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1582, :column 7, :line 1582, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1584, :column 3, :line 1584, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1582, :column 7, :line 1582, :file "cljs/core.cljs"} dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1876, :column 10, :line 1876, :file "cljs/core.cljs"} map ^{:arglists (^{:end-column 12, :end-line 2962, :column 4, :line 2962, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2962, :column 5, :line 2962, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2962, :column 7, :line 2962, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2979, :column 5, :line 2979, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2979, :column 7, :line 2979, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2979, :column 10, :line 2979, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2979, :column 13, :line 2979, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 2985, :column 4, :line 2985, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2985, :column 5, :line 2985, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2985, :column 7, :line 2985, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2985, :column 10, :line 2985, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2985, :column 13, :line 2985, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 2985, :column 16, :line 2985, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2985, :column 18, :line 2985, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 2962, :column 5, :line 2962, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2962, :column 7, :line 2962, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2979, :column 5, :line 2979, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2979, :column 7, :line 2979, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2979, :column 10, :line 2979, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2979, :column 13, :line 2979, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 2985, :column 5, :line 2985, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2985, :column 7, :line 2985, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2985, :column 10, :line 2985, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2985, :column 13, :line 2985, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 2985, :column 18, :line 2985, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2962, :column 4, :line 2962, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2962, :column 5, :line 2962, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2962, :column 7, :line 2962, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2979, :column 5, :line 2979, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2979, :column 7, :line 2979, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2979, :column 10, :line 2979, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2979, :column 13, :line 2979, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 2985, :column 4, :line 2985, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2985, :column 5, :line 2985, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 2985, :column 7, :line 2985, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 2985, :column 10, :line 2985, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 2985, :column 13, :line 2985, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 2985, :column 16, :line 2985, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2985, :column 18, :line 2985, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 6746, :column 4, :line 6746, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6746, :column 5, :line 6746, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 6753, :column 4, :line 6753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6753, :column 5, :line 6753, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6753, :column 7, :line 6753, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 6760, :column 4, :line 6760, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6760, :column 5, :line 6760, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6760, :column 7, :line 6760, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6760, :column 9, :line 6760, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 6767, :column 4, :line 6767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6767, :column 5, :line 6767, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6767, :column 7, :line 6767, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6767, :column 9, :line 6767, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 6767, :column 11, :line 6767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 6767, :column 13, :line 6767, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 6740, :column 7, :line 6740, :file "cljs/core.cljs"} juxt ^{:arglists (^{:end-column 7, :end-line 6746, :column 4, :line 6746, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6746, :column 5, :line 6746, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 6753, :column 4, :line 6753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6753, :column 5, :line 6753, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6753, :column 7, :line 6753, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 6760, :column 4, :line 6760, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6760, :column 5, :line 6760, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6760, :column 7, :line 6760, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6760, :column 9, :line 6760, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 6767, :column 4, :line 6767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6767, :column 5, :line 6767, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6767, :column 7, :line 6767, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6767, :column 9, :line 6767, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 6767, :column 11, :line 6767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 6767, :column 13, :line 6767, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 6740, :column 7, :line 6740, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 6746, :column 5, :line 6746, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 6753, :column 5, :line 6753, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6753, :column 7, :line 6753, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 6760, :column 5, :line 6760, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6760, :column 7, :line 6760, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6760, :column 9, :line 6760, :file "cljs/core.cljs"} h] ^function [^{:end-column 7, :end-line 6767, :column 5, :line 6767, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6767, :column 7, :line 6767, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6767, :column 9, :line 6767, :file "cljs/core.cljs"} h & ^{:end-column 16, :end-line 6767, :column 13, :line 6767, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 6746, :column 4, :line 6746, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6746, :column 5, :line 6746, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 6753, :column 4, :line 6753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6753, :column 5, :line 6753, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6753, :column 7, :line 6753, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 6760, :column 4, :line 6760, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6760, :column 5, :line 6760, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6760, :column 7, :line 6760, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6760, :column 9, :line 6760, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 6767, :column 4, :line 6767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6767, :column 5, :line 6767, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 6767, :column 7, :line 6767, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 6767, :column 9, :line 6767, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 6767, :column 11, :line 6767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 6767, :column 13, :line 6767, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 6740, :column 7, :line 6740, :file "cljs/core.cljs"} juxt, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1537, :column 4, :line 1537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1537, :column 5, :line 1537, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1538, :column 5, :line 1538, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1538, :column 7, :line 1538, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1539, :column 4, :line 1539, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1539, :column 5, :line 1539, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1539, :column 7, :line 1539, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1539, :column 9, :line 1539, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1539, :column 11, :line 1539, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1534, :column 8, :line 1534, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1534, :column 16, :line 1534, :file "cljs/core.cljs"} < ^{:arglists (^{:end-column 7, :end-line 1537, :column 4, :line 1537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1537, :column 5, :line 1537, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1538, :column 5, :line 1538, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1538, :column 7, :line 1538, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1539, :column 4, :line 1539, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1539, :column 5, :line 1539, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1539, :column 7, :line 1539, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1539, :column 9, :line 1539, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1539, :column 11, :line 1539, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1534, :column 8, :line 1534, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1534, :column 16, :line 1534, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1537, :column 5, :line 1537, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1538, :column 5, :line 1538, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1538, :column 7, :line 1538, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1539, :column 5, :line 1539, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1539, :column 7, :line 1539, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1539, :column 11, :line 1539, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1537, :column 4, :line 1537, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1537, :column 5, :line 1537, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1538, :column 5, :line 1538, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1538, :column 7, :line 1538, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1539, :column 4, :line 1539, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1539, :column 5, :line 1539, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1539, :column 7, :line 1539, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1539, :column 9, :line 1539, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1539, :column 11, :line 1539, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1534, :column 8, :line 1534, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1534, :column 16, :line 1534, :file "cljs/core.cljs"} <, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4598, :column 24, :line 4598, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4598, :column 25, :line 4598, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 4598, :column 29, :line 4598, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 4598, :column 31, :line 4598, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 4598, :column 8, :line 4598, :file "cljs/core.cljs"} inode-kv-reduce ^{:arglists (^{:end-column 36, :end-line 4598, :column 24, :line 4598, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4598, :column 25, :line 4598, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 4598, :column 29, :line 4598, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 4598, :column 31, :line 4598, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 4598, :column 8, :line 4598, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 4598, :column 25, :line 4598, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 4598, :column 29, :line 4598, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 4598, :column 31, :line 4598, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4598, :column 24, :line 4598, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4598, :column 25, :line 4598, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 4598, :column 29, :line 4598, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 4598, :column 31, :line 4598, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 4598, :column 8, :line 4598, :file "cljs/core.cljs"} inode-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4068, :column 26, :line 4068, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4068, :column 27, :line 4068, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4068, :column 29, :line 4068, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4068, :column 31, :line 4068, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4068, :column 8, :line 4068, :file "cljs/core.cljs"} obj-map->hash-map ^{:arglists (^{:end-column 33, :end-line 4068, :column 26, :line 4068, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4068, :column 27, :line 4068, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4068, :column 29, :line 4068, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4068, :column 31, :line 4068, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4068, :column 8, :line 4068, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 4068, :column 27, :line 4068, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4068, :column 29, :line 4068, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4068, :column 31, :line 4068, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4068, :column 26, :line 4068, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4068, :column 27, :line 4068, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4068, :column 29, :line 4068, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4068, :column 31, :line 4068, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4068, :column 8, :line 4068, :file "cljs/core.cljs"} obj-map->hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 507, :column 3, :line 507, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 507, :column 4, :line 507, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 504, :column 8, :line 504, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 504, :column 12, :line 504, :file "cljs/core.cljs"} rest ^{:arglists (^{:end-column 9, :end-line 507, :column 3, :line 507, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 507, :column 4, :line 507, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 504, :column 8, :line 504, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 504, :column 12, :line 504, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 507, :column 4, :line 507, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 507, :column 3, :line 507, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 507, :column 4, :line 507, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 504, :column 8, :line 504, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 504, :column 12, :line 504, :file "cljs/core.cljs"} rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7940, :column 3, :line 7940, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7940, :column 4, :line 7940, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 7936, :column 7, :line 7936, :file "cljs/core.cljs"} ex-data ^{:arglists (^{:end-column 7, :end-line 7940, :column 3, :line 7940, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7940, :column 4, :line 7940, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 7936, :column 7, :line 7936, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7940, :column 4, :line 7940, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7940, :column 3, :line 7940, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7940, :column 4, :line 7940, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 7936, :column 7, :line 7936, :file "cljs/core.cljs"} ex-data, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 4277, :column 10, :line 4277, :file "cljs/core.cljs"} PersistentArrayMapSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 4277, :column 10, :line 4277, :file "cljs/core.cljs"} PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 4277, :column 32, :line 4277, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 22, :end-line 368, :column 16, :line 368, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 368, :column 4, :line 368, :file "cljs/core.cljs"} -drop-first ^{:arglists (^{:end-column 22, :end-line 368, :column 16, :line 368, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 368, :column 4, :line 368, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 368, :column 16, :line 368, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 368, :column 4, :line 368, :file "cljs/core.cljs"} -drop-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7539, :column 4, :line 7539, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7539, :column 5, :line 7539, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 7539, :column 11, :line 7539, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 7540, :column 4, :line 7540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7540, :column 5, :line 7540, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7540, :column 7, :line 7540, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 7540, :column 13, :line 7540, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 7533, :column 8, :line 7533, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 7533, :column 16, :line 7533, :file "cljs/core.cljs"} isa? ^{:arglists (^{:end-column 18, :end-line 7539, :column 4, :line 7539, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7539, :column 5, :line 7539, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 7539, :column 11, :line 7539, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 7540, :column 4, :line 7540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7540, :column 5, :line 7540, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7540, :column 7, :line 7540, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 7540, :column 13, :line 7540, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 7533, :column 8, :line 7533, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 7533, :column 16, :line 7533, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 7539, :column 5, :line 7539, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 7539, :column 11, :line 7539, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 7540, :column 5, :line 7540, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7540, :column 7, :line 7540, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 7540, :column 13, :line 7540, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7539, :column 4, :line 7539, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7539, :column 5, :line 7539, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 7539, :column 11, :line 7539, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 7540, :column 4, :line 7540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7540, :column 5, :line 7540, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7540, :column 7, :line 7540, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 7540, :column 13, :line 7540, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 7533, :column 8, :line 7533, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 7533, :column 16, :line 7533, :file "cljs/core.cljs"} isa?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 227, :column 16, :line 227, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 227, :column 9, :line 227, :file "cljs/core.cljs"} -clone ^{:arglists (^{:end-column 23, :end-line 227, :column 16, :line 227, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 227, :column 9, :line 227, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 227, :column 16, :line 227, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 227, :column 9, :line 227, :file "cljs/core.cljs"} -clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([])} ->NeverEquiv ^{:file "cljs/core.cljs", :arglists ([])} {:arglists (^cljs.core/NeverEquiv []), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([])} ->NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6831, :column 3, :line 6831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6831, :column 4, :line 6831, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6831, :column 7, :line 6831, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 6829, :column 7, :line 6829, :file "cljs/core.cljs"} re-seq ^{:arglists (^{:end-column 9, :end-line 6831, :column 3, :line 6831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6831, :column 4, :line 6831, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6831, :column 7, :line 6831, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 6829, :column 7, :line 6829, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6831, :column 4, :line 6831, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6831, :column 7, :line 6831, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6831, :column 3, :line 6831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6831, :column 4, :line 6831, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6831, :column 7, :line 6831, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 6829, :column 7, :line 6829, :file "cljs/core.cljs"} re-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 7521, :column 3, :line 7521, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} make-hierarchy ^{:arglists (^{:end-column 5, :end-line 7521, :column 3, :line 7521, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 7521, :column 3, :line 7521, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} make-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 400, :column 33, :line 400, :file "cljs/core.cljs"} Symbol {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 423, :column 10, :line 423, :file "cljs/core.cljs"} Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 423, :column 17, :line 423, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 48, :end-line 3761, :column 21, :line 3761, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 3761, :column 22, :line 3761, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 3761, :column 25, :line 3761, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 3761, :column 31, :line 3761, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 3761, :column 38, :line 3761, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 3761, :column 8, :line 3761, :file "cljs/core.cljs"} tv-push-tail ^{:arglists (^{:end-column 48, :end-line 3761, :column 21, :line 3761, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 3761, :column 22, :line 3761, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 3761, :column 25, :line 3761, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 3761, :column 31, :line 3761, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 3761, :column 38, :line 3761, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 3761, :column 8, :line 3761, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 3761, :column 22, :line 3761, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 3761, :column 25, :line 3761, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 3761, :column 31, :line 3761, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 3761, :column 38, :line 3761, :file "cljs/core.cljs"} tail-node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 48, :end-line 3761, :column 21, :line 3761, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 3761, :column 22, :line 3761, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 3761, :column 25, :line 3761, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 3761, :column 31, :line 3761, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 3761, :column 38, :line 3761, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 3761, :column 8, :line 3761, :file "cljs/core.cljs"} tv-push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 292, :column 12, :line 292, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 292, :column 13, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 292, :column 18, :line 292, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 292, :column 21, :line 292, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 292, :column 22, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 292, :column 27, :line 292, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 292, :column 29, :line 292, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 292, :column 4, :line 292, :file "cljs/core.cljs"} -reduce ^{:arglists (^{:end-column 20, :end-line 292, :column 12, :line 292, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 292, :column 13, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 292, :column 18, :line 292, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 292, :column 21, :line 292, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 292, :column 22, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 292, :column 27, :line 292, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 292, :column 29, :line 292, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 292, :column 4, :line 292, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 292, :column 13, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 292, :column 18, :line 292, :file "cljs/core.cljs"} f] [^{:end-column 27, :end-line 292, :column 22, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 292, :column 27, :line 292, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 292, :column 29, :line 292, :file "cljs/core.cljs"} start]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 292, :column 12, :line 292, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 292, :column 13, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 292, :column 18, :line 292, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 292, :column 21, :line 292, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 292, :column 22, :line 292, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 292, :column 27, :line 292, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 292, :column 29, :line 292, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 292, :column 4, :line 292, :file "cljs/core.cljs"} -reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 230, :column 20, :line 230, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} number, :end-column 19, :end-line 230, :column 12, :line 230, :file "cljs/core.cljs"} -count ^{:arglists (^{:end-column 25, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 230, :column 20, :line 230, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} number, :end-column 19, :end-line 230, :column 12, :line 230, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 230, :column 20, :line 230, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 230, :column 20, :line 230, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} number, :end-column 19, :end-line 230, :column 12, :line 230, :file "cljs/core.cljs"} -count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 12, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} keep ^{:arglists (^{:end-column 12, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 12, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.", :end-column 12, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} keep, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1604, :column 3, :line 1604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} char ^{:arglists (^{:end-column 6, :end-line 1604, :column 3, :line 1604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1604, :column 3, :line 1604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3104, :column 4, :line 3104, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3104, :column 5, :line 3104, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3106, :column 4, :line 3106, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3106, :column 5, :line 3106, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3106, :column 7, :line 3106, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3106, :column 12, :line 3106, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3106, :column 14, :line 3106, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3101, :column 7, :line 3101, :file "cljs/core.cljs"} mapcat ^{:arglists (^{:end-column 12, :end-line 3104, :column 4, :line 3104, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3104, :column 5, :line 3104, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3106, :column 4, :line 3106, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3106, :column 5, :line 3106, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3106, :column 7, :line 3106, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3106, :column 12, :line 3106, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3106, :column 14, :line 3106, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3101, :column 7, :line 3101, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3104, :column 5, :line 3104, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3106, :column 5, :line 3106, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3106, :column 7, :line 3106, :file "cljs/core.cljs"} coll & ^{:end-column 20, :end-line 3106, :column 14, :line 3106, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3104, :column 4, :line 3104, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3104, :column 5, :line 3104, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3106, :column 4, :line 3106, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3106, :column 5, :line 3106, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3106, :column 7, :line 3106, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3106, :column 12, :line 3106, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3106, :column 14, :line 3106, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3101, :column 7, :line 3101, :file "cljs/core.cljs"} mapcat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1714, :column 3, :line 1714, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1712, :column 7, :line 1712, :file "cljs/core.cljs"} unchecked-long ^{:arglists (^{:end-column 6, :end-line 1714, :column 3, :line 1714, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1712, :column 7, :line 1712, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1714, :column 3, :line 1714, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1712, :column 7, :line 1712, :file "cljs/core.cljs"} unchecked-long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1667, :column 24, :line 1667, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1667, :column 25, :line 1667, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} unchecked-negate ^{:arglists (^{:end-column 27, :end-line 1667, :column 24, :line 1667, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1667, :column 25, :line 1667, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1667, :column 25, :line 1667, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1667, :column 24, :line 1667, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1667, :column 25, :line 1667, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} unchecked-negate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2056, :column 3, :line 2056, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2056, :column 4, :line 2056, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2054, :column 7, :line 2054, :file "cljs/core.cljs"} reverse ^{:arglists (^{:end-column 9, :end-line 2056, :column 3, :line 2056, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2056, :column 4, :line 2056, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2054, :column 7, :line 2054, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2056, :column 4, :line 2056, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2056, :column 3, :line 2056, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2056, :column 4, :line 2056, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2054, :column 7, :line 2054, :file "cljs/core.cljs"} reverse, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 6689, :column 4, :line 6689, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 6690, :column 4, :line 6690, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6690, :column 5, :line 6690, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 6691, :column 4, :line 6691, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6691, :column 5, :line 6691, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6691, :column 11, :line 6691, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 6692, :column 4, :line 6692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6692, :column 5, :line 6692, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6692, :column 11, :line 6692, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 6692, :column 15, :line 6692, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 6685, :column 7, :line 6685, :file "cljs/core.cljs"} range ^{:arglists (^{:end-column 6, :end-line 6689, :column 4, :line 6689, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 6690, :column 4, :line 6690, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6690, :column 5, :line 6690, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 6691, :column 4, :line 6691, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6691, :column 5, :line 6691, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6691, :column 11, :line 6691, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 6692, :column 4, :line 6692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6692, :column 5, :line 6692, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6692, :column 11, :line 6692, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 6692, :column 15, :line 6692, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 6685, :column 7, :line 6685, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 9, :end-line 6690, :column 5, :line 6690, :file "cljs/core.cljs"} end] [^{:end-column 11, :end-line 6691, :column 5, :line 6691, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6691, :column 11, :line 6691, :file "cljs/core.cljs"} end] ^cljs.core/Range [^{:end-column 11, :end-line 6692, :column 5, :line 6692, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6692, :column 11, :line 6692, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 6692, :column 15, :line 6692, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6689, :column 4, :line 6689, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 6690, :column 4, :line 6690, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6690, :column 5, :line 6690, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 6691, :column 4, :line 6691, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6691, :column 5, :line 6691, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6691, :column 11, :line 6691, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 6692, :column 4, :line 6692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 6692, :column 5, :line 6692, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 6692, :column 11, :line 6692, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 6692, :column 15, :line 6692, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 6685, :column 7, :line 6685, :file "cljs/core.cljs"} range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1815, :column 3, :line 1815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1815, :column 4, :line 1815, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1813, :column 7, :line 1813, :file "cljs/core.cljs"} bit-count ^{:arglists (^{:end-column 6, :end-line 1815, :column 3, :line 1815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1815, :column 4, :line 1815, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1813, :column 7, :line 1813, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1815, :column 4, :line 1815, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1815, :column 3, :line 1815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1815, :column 4, :line 1815, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1813, :column 7, :line 1813, :file "cljs/core.cljs"} bit-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 68, :end-line 4555, :column 56, :line 4555, :file "cljs/core.cljs"} create-node ^{:arglists (^{:end-column 40, :end-line 5032, :column 4, :line 5032, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5032, :column 5, :line 5032, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5032, :column 11, :line 5032, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5032, :column 16, :line 5032, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5032, :column 21, :line 5032, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5032, :column 30, :line 5032, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5032, :column 35, :line 5032, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5040, :column 4, :line 5040, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5040, :column 5, :line 5040, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5040, :column 10, :line 5040, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5040, :column 16, :line 5040, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5040, :column 21, :line 5040, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5040, :column 26, :line 5040, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5040, :column 35, :line 5040, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5040, :column 40, :line 5040, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5031, :column 8, :line 5031, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5032, :column 5, :line 5032, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5032, :column 11, :line 5032, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5032, :column 16, :line 5032, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5032, :column 21, :line 5032, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5032, :column 30, :line 5032, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5032, :column 35, :line 5032, :file "cljs/core.cljs"} val2] [^{:end-column 10, :end-line 5040, :column 5, :line 5040, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5040, :column 10, :line 5040, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5040, :column 16, :line 5040, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5040, :column 21, :line 5040, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5040, :column 26, :line 5040, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5040, :column 35, :line 5040, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5040, :column 40, :line 5040, :file "cljs/core.cljs"} val2]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5032, :column 4, :line 5032, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5032, :column 5, :line 5032, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5032, :column 11, :line 5032, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5032, :column 16, :line 5032, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5032, :column 21, :line 5032, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5032, :column 30, :line 5032, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5032, :column 35, :line 5032, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5040, :column 4, :line 5040, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5040, :column 5, :line 5040, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5040, :column 10, :line 5040, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5040, :column 16, :line 5040, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5040, :column 21, :line 5040, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5040, :column 26, :line 5040, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5040, :column 35, :line 5040, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5040, :column 40, :line 5040, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5031, :column 8, :line 5031, :file "cljs/core.cljs"} create-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1403, :column 5, :line 1403, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1403, :column 10, :line 1403, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} sort ^{:arglists (^{:end-column 10, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1403, :column 5, :line 1403, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1403, :column 10, :line 1403, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1403, :column 5, :line 1403, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1403, :column 10, :line 1403, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1403, :column 5, :line 1403, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1403, :column 10, :line 1403, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} sort, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta])} ->MetaFn ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/MetaFn [^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta])} ->MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1650, :column 25, :line 1650, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1650, :column 26, :line 1650, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1650, :column 7, :line 1650, :file "cljs/core.cljs"} unchecked-inc-int ^{:arglists (^{:end-column 28, :end-line 1650, :column 25, :line 1650, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1650, :column 26, :line 1650, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1650, :column 7, :line 1650, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1650, :column 26, :line 1650, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1650, :column 25, :line 1650, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1650, :column 26, :line 1650, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1650, :column 7, :line 1650, :file "cljs/core.cljs"} unchecked-inc-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 365, :column 21, :line 365, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 365, :column 24, :line 365, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} number, :end-column 21, :end-line 365, :column 12, :line 365, :file "cljs/core.cljs"} -compare ^{:arglists (^{:end-column 26, :end-line 365, :column 21, :line 365, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 365, :column 24, :line 365, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} number, :end-column 21, :end-line 365, :column 12, :line 365, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 365, :column 24, :line 365, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 365, :column 21, :line 365, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 365, :column 24, :line 365, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} number, :end-column 21, :end-line 365, :column 12, :line 365, :file "cljs/core.cljs"} -compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2820, :column 3, :line 2820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2820, :column 6, :line 2820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 2815, :column 7, :line 2815, :file "cljs/core.cljs"} map-indexed ^{:arglists (^{:end-column 11, :end-line 2820, :column 3, :line 2820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2820, :column 6, :line 2820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 2815, :column 7, :line 2815, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2820, :column 6, :line 2820, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2820, :column 3, :line 2820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2820, :column 6, :line 2820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 2815, :column 7, :line 2815, :file "cljs/core.cljs"} map-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7505, :column 3, :line 7505, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7505, :column 4, :line 7505, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} rand-nth ^{:arglists (^{:end-column 9, :end-line 7505, :column 3, :line 7505, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7505, :column 4, :line 7505, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7505, :column 4, :line 7505, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7505, :column 3, :line 7505, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7505, :column 4, :line 7505, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} rand-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2754, :column 4, :line 2754, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2755, :column 4, :line 2755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2755, :column 5, :line 2755, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 2756, :column 4, :line 2756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2756, :column 5, :line 2756, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2756, :column 7, :line 2756, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 2763, :column 4, :line 2763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2763, :column 5, :line 2763, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2763, :column 7, :line 2763, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 2763, :column 9, :line 2763, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 2770, :column 8, :line 2770, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 2770, :column 14, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2770, :column 16, :line 2770, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} comp ^{:arglists (^{:end-column 6, :end-line 2754, :column 4, :line 2754, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2755, :column 4, :line 2755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2755, :column 5, :line 2755, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 2756, :column 4, :line 2756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2756, :column 5, :line 2756, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2756, :column 7, :line 2756, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 2763, :column 4, :line 2763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2763, :column 5, :line 2763, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2763, :column 7, :line 2763, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 2763, :column 9, :line 2763, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 2770, :column 8, :line 2770, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 2770, :column 14, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2770, :column 16, :line 2770, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 7, :end-line 2755, :column 5, :line 2755, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 2756, :column 5, :line 2756, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2756, :column 7, :line 2756, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 2763, :column 5, :line 2763, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2763, :column 7, :line 2763, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 2763, :column 9, :line 2763, :file "cljs/core.cljs"} h] ^function [^{:end-column 8, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 2770, :column 8, :line 2770, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} f3 & ^{:end-column 19, :end-line 2770, :column 16, :line 2770, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2754, :column 4, :line 2754, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2755, :column 4, :line 2755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2755, :column 5, :line 2755, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 2756, :column 4, :line 2756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2756, :column 5, :line 2756, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2756, :column 7, :line 2756, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 2763, :column 4, :line 2763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2763, :column 5, :line 2763, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2763, :column 7, :line 2763, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 2763, :column 9, :line 2763, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 2770, :column 8, :line 2770, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 2770, :column 14, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2770, :column 16, :line 2770, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} comp, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2304, :column 4, :line 2304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2304, :column 5, :line 2304, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2306, :column 4, :line 2306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2306, :column 5, :line 2306, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2306, :column 9, :line 2306, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2308, :column 4, :line 2308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2308, :column 5, :line 2308, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2308, :column 9, :line 2308, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2308, :column 13, :line 2308, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2303, :column 7, :line 2303, :file "cljs/core.cljs"} array-chunk ^{:arglists (^{:end-column 9, :end-line 2304, :column 4, :line 2304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2304, :column 5, :line 2304, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2306, :column 4, :line 2306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2306, :column 5, :line 2306, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2306, :column 9, :line 2306, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2308, :column 4, :line 2308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2308, :column 5, :line 2308, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2308, :column 9, :line 2308, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2308, :column 13, :line 2308, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2303, :column 7, :line 2303, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2304, :column 5, :line 2304, :file "cljs/core.cljs"} arr] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2306, :column 5, :line 2306, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2306, :column 9, :line 2306, :file "cljs/core.cljs"} off] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2308, :column 5, :line 2308, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2308, :column 9, :line 2308, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2308, :column 13, :line 2308, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2304, :column 4, :line 2304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2304, :column 5, :line 2304, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2306, :column 4, :line 2306, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2306, :column 5, :line 2306, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2306, :column 9, :line 2306, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2308, :column 4, :line 2308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2308, :column 5, :line 2308, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2308, :column 9, :line 2308, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2308, :column 13, :line 2308, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2303, :column 7, :line 2303, :file "cljs/core.cljs"} array-chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1807, :column 3, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 6, :line 1807, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1805, :column 7, :line 1805, :file "cljs/core.cljs"} bit-shift-right-zero-fill ^{:arglists (^{:end-column 8, :end-line 1807, :column 3, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 6, :line 1807, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1805, :column 7, :line 1805, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 6, :line 1807, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1807, :column 3, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 6, :line 1807, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1805, :column 7, :line 1805, :file "cljs/core.cljs"} bit-shift-right-zero-fill, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 345, :column 23, :line 345, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 345, :column 24, :line 345, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 345, :column 9, :line 345, :file "cljs/core.cljs"} -as-transient ^{:arglists (^{:end-column 29, :end-line 345, :column 23, :line 345, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 345, :column 24, :line 345, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 345, :column 9, :line 345, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 345, :column 24, :line 345, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 345, :column 23, :line 345, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 345, :column 24, :line 345, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 345, :column 9, :line 345, :file "cljs/core.cljs"} -as-transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 6782, :column 4, :line 6782, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6782, :column 5, :line 6782, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6785, :column 4, :line 6785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6785, :column 5, :line 6785, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6785, :column 7, :line 6785, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 6776, :column 7, :line 6776, :file "cljs/core.cljs"} dorun ^{:arglists (^{:end-column 10, :end-line 6782, :column 4, :line 6782, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6782, :column 5, :line 6782, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6785, :column 4, :line 6785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6785, :column 5, :line 6785, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6785, :column 7, :line 6785, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 6776, :column 7, :line 6776, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 10, :end-line 6782, :column 5, :line 6782, :file "cljs/core.cljs"} coll] ^clj-nil [^{:end-column 7, :end-line 6785, :column 5, :line 6785, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6785, :column 7, :line 6785, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 6782, :column 4, :line 6782, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6782, :column 5, :line 6782, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 6785, :column 4, :line 6785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6785, :column 5, :line 6785, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6785, :column 7, :line 6785, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 6776, :column 7, :line 6776, :file "cljs/core.cljs"} dorun, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 3371, :column 10, :line 3371, :file "cljs/core.cljs"} pr-sequential-writer ^{:arglists (^{:end-column 70, :end-line 6846, :column 28, :line 6846, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 6846, :column 29, :line 6846, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 6846, :column 36, :line 6846, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 6846, :column 46, :line 6846, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 6846, :column 52, :line 6846, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 6846, :column 56, :line 6846, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 6846, :column 60, :line 6846, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 6846, :column 65, :line 6846, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 6846, :column 7, :line 6846, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 6846, :column 29, :line 6846, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 6846, :column 36, :line 6846, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 6846, :column 46, :line 6846, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 6846, :column 52, :line 6846, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 6846, :column 56, :line 6846, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 6846, :column 60, :line 6846, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 6846, :column 65, :line 6846, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 70, :end-line 6846, :column 28, :line 6846, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 6846, :column 29, :line 6846, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 6846, :column 36, :line 6846, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 6846, :column 46, :line 6846, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 6846, :column 52, :line 6846, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 6846, :column 56, :line 6846, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 6846, :column 60, :line 6846, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 6846, :column 65, :line 6846, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 6846, :column 7, :line 6846, :file "cljs/core.cljs"} pr-sequential-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 37, :end-line 856, :column 31, :line 856, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 856, :column 32, :line 856, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 856, :column 8, :line 856, :file "cljs/core.cljs"} accumulating-seq-count ^{:arglists (^{:end-column 37, :end-line 856, :column 31, :line 856, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 856, :column 32, :line 856, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 856, :column 8, :line 856, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 37, :end-line 856, :column 32, :line 856, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 37, :end-line 856, :column 31, :line 856, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 856, :column 32, :line 856, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 856, :column 8, :line 856, :file "cljs/core.cljs"} accumulating-seq-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 241, :column 14, :line 241, :file "cljs/core.cljs"} IIndexed ^{:impls #{cljs.core/TransientVector cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/Range cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 241, :column 14, :line 241, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 241, :column 14, :line 241, :file "cljs/core.cljs"} IIndexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1126, :column 4, :line 1126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1126, :column 5, :line 1126, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1127, :column 4, :line 1127, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1127, :column 5, :line 1127, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1127, :column 10, :line 1127, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1130, :column 4, :line 1130, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1130, :column 5, :line 1130, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1130, :column 10, :line 1130, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1130, :column 12, :line 1130, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1130, :column 14, :line 1130, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1123, :column 7, :line 1123, :file "cljs/core.cljs"} disj ^{:arglists (^{:end-column 10, :end-line 1126, :column 4, :line 1126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1126, :column 5, :line 1126, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1127, :column 4, :line 1127, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1127, :column 5, :line 1127, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1127, :column 10, :line 1127, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1130, :column 4, :line 1130, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1130, :column 5, :line 1130, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1130, :column 10, :line 1130, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1130, :column 12, :line 1130, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1130, :column 14, :line 1130, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1123, :column 7, :line 1123, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1126, :column 5, :line 1126, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1127, :column 5, :line 1127, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1127, :column 10, :line 1127, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1130, :column 5, :line 1130, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1130, :column 10, :line 1130, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1130, :column 14, :line 1130, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1126, :column 4, :line 1126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1126, :column 5, :line 1126, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1127, :column 4, :line 1127, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1127, :column 5, :line 1127, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1127, :column 10, :line 1127, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1130, :column 4, :line 1130, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1130, :column 5, :line 1130, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1130, :column 10, :line 1130, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1130, :column 12, :line 1130, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1130, :column 14, :line 1130, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1123, :column 7, :line 1123, :file "cljs/core.cljs"} disj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IPrintWithWriter ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 31, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IPrintWithWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid])} ->UUID ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid])} {:arglists (^cljs.core/UUID [^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 7903, :column 16, :line 7903, :file "cljs/core.cljs"} uuid])} ->UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} IVector ^{:impls #{cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} IVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2 ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3284, :column 22, :line 3284, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3284, :column 23, :line 3284, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3284, :column 8, :line 3284, :file "cljs/core.cljs"} pv-clone-node ^{:arglists (^{:end-column 28, :end-line 3284, :column 22, :line 3284, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3284, :column 23, :line 3284, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3284, :column 8, :line 3284, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3284, :column 23, :line 3284, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3284, :column 22, :line 3284, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3284, :column 23, :line 3284, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3284, :column 8, :line 3284, :file "cljs/core.cljs"} pv-clone-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 25, :end-line 662, :column 20, :line 662, :file "cljs/core.cljs"} cons ^{:arglists (^{:end-column 11, :end-line 2123, :column 3, :line 2123, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2123, :column 4, :line 2123, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2123, :column 6, :line 2123, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2121, :column 7, :line 2121, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 2123, :column 4, :line 2123, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2123, :column 6, :line 2123, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2123, :column 3, :line 2123, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2123, :column 4, :line 2123, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2123, :column 6, :line 2123, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2121, :column 7, :line 2121, :file "cljs/core.cljs"} cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6371, :column 10, :line 6371, :file "cljs/core.cljs"} PersistentTreeSet {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6371, :column 10, :line 6371, :file "cljs/core.cljs"} PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 6371, :column 28, :line 6371, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 17, :end-line 1722, :column 14, :line 1722, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1722, :column 15, :line 1722, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1722, :column 7, :line 1722, :file "cljs/core.cljs"} floats ^{:arglists (^{:end-column 17, :end-line 1722, :column 14, :line 1722, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1722, :column 15, :line 1722, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1722, :column 7, :line 1722, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1722, :column 15, :line 1722, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1722, :column 14, :line 1722, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1722, :column 15, :line 1722, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1722, :column 7, :line 1722, :file "cljs/core.cljs"} floats, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 60, :end-line 3370, :column 44, :line 3370, :file "cljs/core.cljs"} TransientVector {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 3803, :column 10, :line 3803, :file "cljs/core.cljs"} TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 3806, :column 26, :line 3803, :file "cljs/core.cljs"} [^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail], :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1835, :column 3, :line 1835, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 1833, :column 8, :line 1833, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1833, :column 16, :line 1833, :file "cljs/core.cljs"} pos? ^{:arglists (^{:end-column 6, :end-line 1835, :column 3, :line 1835, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 1833, :column 8, :line 1833, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1833, :column 16, :line 1833, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1835, :column 3, :line 1835, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 1833, :column 8, :line 1833, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1833, :column 16, :line 1833, :file "cljs/core.cljs"} pos?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2798, :column 7, :line 2798, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 2804, :column 4, :line 2804, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2804, :column 5, :line 2804, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2804, :column 9, :line 2804, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 2809, :column 4, :line 2809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2809, :column 5, :line 2809, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2809, :column 7, :line 2809, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2809, :column 9, :line 2809, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2809, :column 11, :line 2809, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 2792, :column 7, :line 2792, :file "cljs/core.cljs"} fnil ^{:arglists (^{:end-column 9, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2798, :column 7, :line 2798, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 2804, :column 4, :line 2804, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2804, :column 5, :line 2804, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2804, :column 9, :line 2804, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 2809, :column 4, :line 2809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2809, :column 5, :line 2809, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2809, :column 7, :line 2809, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2809, :column 9, :line 2809, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2809, :column 11, :line 2809, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 2792, :column 7, :line 2792, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2798, :column 7, :line 2798, :file "cljs/core.cljs"} x] ^function [^{:end-column 7, :end-line 2804, :column 5, :line 2804, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2804, :column 9, :line 2804, :file "cljs/core.cljs"} y] ^function [^{:end-column 7, :end-line 2809, :column 5, :line 2809, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2809, :column 7, :line 2809, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2809, :column 9, :line 2809, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2809, :column 11, :line 2809, :file "cljs/core.cljs"} z]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2798, :column 7, :line 2798, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 2804, :column 4, :line 2804, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2804, :column 5, :line 2804, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2804, :column 9, :line 2804, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 2809, :column 4, :line 2809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2809, :column 5, :line 2809, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2809, :column 7, :line 2809, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2809, :column 9, :line 2809, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2809, :column 11, :line 2809, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 2792, :column 7, :line 2792, :file "cljs/core.cljs"} fnil, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 6227, :column 3, :line 6227, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6227, :column 4, :line 6227, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6227, :column 6, :line 6227, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6227, :column 8, :line 6227, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6222, :column 7, :line 6222, :file "cljs/core.cljs"} merge-with ^{:arglists (^{:end-column 13, :end-line 6227, :column 3, :line 6227, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6227, :column 4, :line 6227, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6227, :column 6, :line 6227, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6227, :column 8, :line 6227, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6222, :column 7, :line 6222, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 6227, :column 4, :line 6227, :file "cljs/core.cljs"} f & ^{:end-column 13, :end-line 6227, :column 8, :line 6227, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6227, :column 3, :line 6227, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6227, :column 4, :line 6227, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6227, :column 6, :line 6227, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6227, :column 8, :line 6227, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6222, :column 7, :line 6222, :file "cljs/core.cljs"} merge-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1202, :column 3, :line 1202, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1202, :column 4, :line 1202, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1200, :column 8, :line 1200, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1200, :column 16, :line 1200, :file "cljs/core.cljs"} sequential? ^{:arglists (^{:end-column 6, :end-line 1202, :column 3, :line 1202, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1202, :column 4, :line 1202, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1200, :column 8, :line 1200, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1200, :column 16, :line 1200, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1202, :column 4, :line 1202, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1202, :column 3, :line 1202, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1202, :column 4, :line 1202, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1200, :column 8, :line 1200, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1200, :column 16, :line 1200, :file "cljs/core.cljs"} sequential?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 5899, :column 25, :line 5899, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5899, :column 26, :line 5899, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 5899, :column 31, :line 5899, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 5899, :column 36, :line 5899, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 5899, :column 38, :line 5899, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 5899, :column 8, :line 5899, :file "cljs/core.cljs"} tree-map-replace ^{:arglists (^{:end-column 40, :end-line 5899, :column 25, :line 5899, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5899, :column 26, :line 5899, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 5899, :column 31, :line 5899, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 5899, :column 36, :line 5899, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 5899, :column 38, :line 5899, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 5899, :column 8, :line 5899, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 5899, :column 26, :line 5899, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 5899, :column 31, :line 5899, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 5899, :column 36, :line 5899, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 5899, :column 38, :line 5899, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5899, :column 25, :line 5899, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5899, :column 26, :line 5899, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 5899, :column 31, :line 5899, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 5899, :column 36, :line 5899, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 5899, :column 38, :line 5899, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 5899, :column 8, :line 5899, :file "cljs/core.cljs"} tree-map-replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr])} ->TransientArrayMap ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/TransientArrayMap [^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr])} ->TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 29, :end-line 462, :column 20, :line 462, :file "cljs/core.cljs"} prim-seq ^{:arglists (^{:end-column 10, :end-line 735, :column 4, :line 735, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 735, :column 5, :line 735, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 737, :column 4, :line 737, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 737, :column 5, :line 737, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 737, :column 10, :line 737, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 734, :column 7, :line 734, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 735, :column 5, :line 735, :file "cljs/core.cljs"} prim] [^{:end-column 10, :end-line 737, :column 5, :line 737, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 737, :column 10, :line 737, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 735, :column 4, :line 735, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 735, :column 5, :line 735, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 737, :column 4, :line 737, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 737, :column 5, :line 737, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 737, :column 10, :line 737, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 734, :column 7, :line 734, :file "cljs/core.cljs"} prim-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level* ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1438, :column 7, :line 1438, :file "cljs/core.cljs"} shuffle ^{:arglists (^{:end-column 9, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1438, :column 7, :line 1438, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1438, :column 7, :line 1438, :file "cljs/core.cljs"} shuffle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 33, :end-line 1223, :column 22, :line 1223, :file "cljs/core.cljs"} ChunkedSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 3555, :column 10, :line 3555, :file "cljs/core.cljs"} ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 59, :end-line 3555, :column 21, :line 3555, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 11, :end-line 1313, :column 3, :line 1313, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1313, :column 4, :line 1313, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1313, :column 9, :line 1313, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} find ^{:arglists (^{:end-column 11, :end-line 1313, :column 3, :line 1313, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1313, :column 4, :line 1313, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1313, :column 9, :line 1313, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1313, :column 4, :line 1313, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1313, :column 9, :line 1313, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1313, :column 3, :line 1313, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1313, :column 4, :line 1313, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1313, :column 9, :line 1313, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 186, :column 3, :line 186, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 186, :column 4, :line 186, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 184, :column 8, :line 184, :file "cljs/core.cljs"} number, :end-column 23, :end-line 184, :column 15, :line 184, :file "cljs/core.cljs"} alength ^{:arglists (^{:end-column 10, :end-line 186, :column 3, :line 186, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 186, :column 4, :line 186, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 184, :column 8, :line 184, :file "cljs/core.cljs"} number, :end-column 23, :end-line 184, :column 15, :line 184, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 10, :end-line 186, :column 4, :line 186, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 186, :column 3, :line 186, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 186, :column 4, :line 186, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 184, :column 8, :line 184, :file "cljs/core.cljs"} number, :end-column 23, :end-line 184, :column 15, :line 184, :file "cljs/core.cljs"} alength, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1759, :column 3, :line 1759, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1759, :column 4, :line 1759, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1759, :column 6, :line 1759, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1757, :column 7, :line 1757, :file "cljs/core.cljs"} bit-xor ^{:arglists (^{:end-column 8, :end-line 1759, :column 3, :line 1759, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1759, :column 4, :line 1759, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1759, :column 6, :line 1759, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1757, :column 7, :line 1757, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1759, :column 4, :line 1759, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1759, :column 6, :line 1759, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1759, :column 3, :line 1759, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1759, :column 4, :line 1759, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1759, :column 6, :line 1759, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1757, :column 7, :line 1757, :file "cljs/core.cljs"} bit-xor, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i])} ->IndexedSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i])} {:arglists (^cljs.core/IndexedSeq [^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 672, :column 22, :line 672, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 672, :column 26, :line 672, :file "cljs/core.cljs"} i])} ->IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4092, :column 10, :line 4092, :file "cljs/core.cljs"} ObjMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4092, :column 10, :line 4092, :file "cljs/core.cljs"} ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4092, :column 17, :line 4092, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1811, :column 3, :line 1811, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1811, :column 4, :line 1811, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1811, :column 6, :line 1811, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} unsigned-bit-shift-right ^{:arglists (^{:end-column 8, :end-line 1811, :column 3, :line 1811, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1811, :column 4, :line 1811, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1811, :column 6, :line 1811, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1811, :column 4, :line 1811, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1811, :column 6, :line 1811, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1811, :column 3, :line 1811, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1811, :column 4, :line 1811, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1811, :column 6, :line 1811, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} unsigned-bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1842, :column 3, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 1840, :column 8, :line 1840, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1840, :column 16, :line 1840, :file "cljs/core.cljs"} neg? ^{:arglists (^{:end-column 6, :end-line 1842, :column 3, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 1840, :column 8, :line 1840, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1840, :column 16, :line 1840, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1842, :column 3, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 1840, :column 8, :line 1840, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1840, :column 16, :line 1840, :file "cljs/core.cljs"} neg?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2076, :column 10, :line 2076, :file "cljs/core.cljs"} Cons {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2076, :column 10, :line 2076, :file "cljs/core.cljs"} Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 49, :end-line 2076, :column 15, :line 2076, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 36, :end-line 7688, :column 19, :line 7688, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7688, :column 20, :line 7688, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7688, :column 23, :line 7688, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} -remove-method ^{:arglists (^{:end-column 36, :end-line 7688, :column 19, :line 7688, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7688, :column 20, :line 7688, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7688, :column 23, :line 7688, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 7688, :column 20, :line 7688, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7688, :column 23, :line 7688, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 7688, :column 19, :line 7688, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7688, :column 20, :line 7688, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 7688, :column 23, :line 7688, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} -remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash])} ->List ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/List [^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash])} ->List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1617, :column 31, :line 1617, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1617, :column 32, :line 1617, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1617, :column 8, :line 1617, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1617, :column 15, :line 1617, :file "cljs/core.cljs"} unchecked-float ^{:arglists (^{:end-column 34, :end-line 1617, :column 31, :line 1617, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1617, :column 32, :line 1617, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1617, :column 8, :line 1617, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1617, :column 15, :line 1617, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1617, :column 32, :line 1617, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1617, :column 31, :line 1617, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1617, :column 32, :line 1617, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1617, :column 8, :line 1617, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1617, :column 15, :line 1617, :file "cljs/core.cljs"} unchecked-float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 1271, :column 27, :line 1271, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1271, :column 28, :line 1271, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1271, :column 8, :line 1271, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1271, :column 16, :line 1271, :file "cljs/core.cljs"} undefined? ^{:arglists (^{:end-column 30, :end-line 1271, :column 27, :line 1271, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1271, :column 28, :line 1271, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1271, :column 8, :line 1271, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1271, :column 16, :line 1271, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 30, :end-line 1271, :column 28, :line 1271, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 1271, :column 27, :line 1271, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1271, :column 28, :line 1271, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1271, :column 8, :line 1271, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1271, :column 16, :line 1271, :file "cljs/core.cljs"} undefined?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} IMeta ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet ^{:end-column 23, :end-line 567, :column 14, :line 567, :file "cljs/core.cljs"} function cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 20, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} IMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 595, :column 3, :line 595, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 595, :column 4, :line 595, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 593, :column 8, :line 593, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 593, :column 16, :line 593, :file "cljs/core.cljs"} reduced? ^{:arglists (^{:end-column 6, :end-line 595, :column 3, :line 595, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 595, :column 4, :line 595, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 593, :column 8, :line 593, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 593, :column 16, :line 593, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 595, :column 4, :line 595, :file "cljs/core.cljs"} r]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 595, :column 3, :line 595, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 595, :column 4, :line 595, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 593, :column 8, :line 593, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 593, :column 16, :line 593, :file "cljs/core.cljs"} reduced?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to ^{:file "cljs/core.cljs", :arglists ([f argc args])} {:arglists ([f argc args]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2604, :column 5, :line 2604, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2604, :column 11, :line 2604, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2606, :column 4, :line 2606, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2606, :column 5, :line 2606, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2606, :column 11, :line 2606, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2606, :column 15, :line 2606, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2606, :column 17, :line 2606, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2601, :column 7, :line 2601, :file "cljs/core.cljs"} disj! ^{:arglists (^{:end-column 15, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2604, :column 5, :line 2604, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2604, :column 11, :line 2604, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2606, :column 4, :line 2606, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2606, :column 5, :line 2606, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2606, :column 11, :line 2606, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2606, :column 15, :line 2606, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2606, :column 17, :line 2606, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2601, :column 7, :line 2601, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2604, :column 5, :line 2604, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2604, :column 11, :line 2604, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2606, :column 5, :line 2606, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2606, :column 11, :line 2606, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2606, :column 17, :line 2606, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2604, :column 5, :line 2604, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2604, :column 11, :line 2604, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2606, :column 4, :line 2606, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2606, :column 5, :line 2606, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2606, :column 11, :line 2606, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2606, :column 15, :line 2606, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2606, :column 17, :line 2606, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2601, :column 7, :line 2601, :file "cljs/core.cljs"} disj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 254, :column 12, :line 254, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 254, :column 13, :line 254, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 254, :column 15, :line 254, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 254, :column 18, :line 254, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 254, :column 19, :line 254, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 254, :column 21, :line 254, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 254, :column 23, :line 254, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 254, :column 4, :line 254, :file "cljs/core.cljs"} -lookup ^{:arglists (^{:end-column 17, :end-line 254, :column 12, :line 254, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 254, :column 13, :line 254, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 254, :column 15, :line 254, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 254, :column 18, :line 254, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 254, :column 19, :line 254, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 254, :column 21, :line 254, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 254, :column 23, :line 254, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 254, :column 4, :line 254, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 254, :column 13, :line 254, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 254, :column 15, :line 254, :file "cljs/core.cljs"} k] [^{:end-column 21, :end-line 254, :column 19, :line 254, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 254, :column 21, :line 254, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 254, :column 23, :line 254, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 254, :column 12, :line 254, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 254, :column 13, :line 254, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 254, :column 15, :line 254, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 254, :column 18, :line 254, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 254, :column 19, :line 254, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 254, :column 21, :line 254, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 254, :column 23, :line 254, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 254, :column 4, :line 254, :file "cljs/core.cljs"} -lookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 226, :column 14, :line 226, :file "cljs/core.cljs"} ICloneable ^{:impls #{cljs.core/PersistentHashMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Range}, :protocol-symbol true, :end-column 25, :end-line 226, :column 14, :line 226, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 226, :column 14, :line 226, :file "cljs/core.cljs"} ICloneable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 7425, :column 14, :line 7425, :file "cljs/core.cljs"} IEncodeClojure ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 7425, :column 14, :line 7425, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 7425, :column 14, :line 7425, :file "cljs/core.cljs"} IEncodeClojure, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1717, :column 16, :line 1717, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1717, :column 17, :line 1717, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} booleans ^{:arglists (^{:end-column 19, :end-line 1717, :column 16, :line 1717, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1717, :column 17, :line 1717, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 1717, :column 17, :line 1717, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1717, :column 16, :line 1717, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1717, :column 17, :line 1717, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} booleans, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 4221, :column 35, :line 4221, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4221, :column 36, :line 4221, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4221, :column 40, :line 4221, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4221, :column 42, :line 4221, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4221, :column 8, :line 4221, :file "cljs/core.cljs"} array-map-index-of-symbol? ^{:arglists (^{:end-column 44, :end-line 4221, :column 35, :line 4221, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4221, :column 36, :line 4221, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4221, :column 40, :line 4221, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4221, :column 42, :line 4221, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4221, :column 8, :line 4221, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 4221, :column 36, :line 4221, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4221, :column 40, :line 4221, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4221, :column 42, :line 4221, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 4221, :column 35, :line 4221, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4221, :column 36, :line 4221, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4221, :column 40, :line 4221, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4221, :column 42, :line 4221, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4221, :column 8, :line 4221, :file "cljs/core.cljs"} array-map-index-of-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 662, :column 25, :line 662, :file "cljs/core.cljs"} RSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 749, :column 10, :line 749, :file "cljs/core.cljs"} RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 749, :column 15, :line 749, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 4563, :column 13, :line 4563, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 4563, :column 14, :line 4563, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 4563, :column 19, :line 4563, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} mask ^{:arglists (^{:end-column 25, :end-line 4563, :column 13, :line 4563, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 4563, :column 14, :line 4563, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 4563, :column 19, :line 4563, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 19, :end-line 4563, :column 14, :line 4563, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 4563, :column 19, :line 4563, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 4563, :column 13, :line 4563, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 4563, :column 14, :line 4563, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 4563, :column 19, :line 4563, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} mask, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2417, :column 4, :line 2417, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2417, :column 5, :line 2417, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2421, :column 4, :line 2421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2421, :column 5, :line 2421, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2421, :column 10, :line 2421, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2416, :column 7, :line 2416, :file "cljs/core.cljs"} int-array ^{:arglists (^{:end-column 17, :end-line 2417, :column 4, :line 2417, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2417, :column 5, :line 2417, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2421, :column 4, :line 2421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2421, :column 5, :line 2421, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2421, :column 10, :line 2421, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2416, :column 7, :line 2416, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2417, :column 5, :line 2417, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2421, :column 5, :line 2421, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2421, :column 10, :line 2421, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2417, :column 4, :line 2417, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2417, :column 5, :line 2417, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2421, :column 4, :line 2421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2421, :column 5, :line 2421, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2421, :column 10, :line 2421, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2416, :column 7, :line 2416, :file "cljs/core.cljs"} int-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 88, :end-line 7661, :column 3, :line 7661, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7661, :column 4, :line 7661, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 7661, :column 9, :line 7661, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 7661, :column 22, :line 7661, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 7661, :column 32, :line 7661, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 7661, :column 45, :line 7661, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 7661, :column 58, :line 7661, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 7661, :column 71, :line 7661, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 7660, :column 8, :line 7660, :file "cljs/core.cljs"} find-and-cache-best-method ^{:arglists (^{:end-column 88, :end-line 7661, :column 3, :line 7661, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7661, :column 4, :line 7661, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 7661, :column 9, :line 7661, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 7661, :column 22, :line 7661, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 7661, :column 32, :line 7661, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 7661, :column 45, :line 7661, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 7661, :column 58, :line 7661, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 7661, :column 71, :line 7661, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 7660, :column 8, :line 7660, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7661, :column 4, :line 7661, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 7661, :column 9, :line 7661, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 7661, :column 22, :line 7661, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 7661, :column 32, :line 7661, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 7661, :column 45, :line 7661, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 7661, :column 58, :line 7661, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 7661, :column 71, :line 7661, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 88, :end-line 7661, :column 3, :line 7661, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7661, :column 4, :line 7661, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 7661, :column 9, :line 7661, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 7661, :column 22, :line 7661, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 7661, :column 32, :line 7661, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 7661, :column 45, :line 7661, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 7661, :column 58, :line 7661, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 7661, :column 71, :line 7661, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 7660, :column 8, :line 7660, :file "cljs/core.cljs"} find-and-cache-best-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1191, :column 3, :line 1191, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1191, :column 4, :line 1191, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1189, :column 8, :line 1189, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1189, :column 16, :line 1189, :file "cljs/core.cljs"} set? ^{:arglists (^{:end-column 6, :end-line 1191, :column 3, :line 1191, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1191, :column 4, :line 1191, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1189, :column 8, :line 1189, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1189, :column 16, :line 1189, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1191, :column 4, :line 1191, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1191, :column 3, :line 1191, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1191, :column 4, :line 1191, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1189, :column 8, :line 1189, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1189, :column 16, :line 1189, :file "cljs/core.cljs"} set?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 1525, :column 10, :line 1525, :file "cljs/core.cljs"} divide ^{:declared true, :end-column 17, :end-line 1525, :column 10, :line 1525, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 17, :end-line 1525, :column 10, :line 1525, :file "cljs/core.cljs"} divide, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 334, :column 15, :line 334, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 334, :column 16, :line 334, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 334, :column 18, :line 334, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 334, :column 25, :line 334, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 334, :column 4, :line 334, :file "cljs/core.cljs"} -pr-writer ^{:arglists (^{:end-column 30, :end-line 334, :column 15, :line 334, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 334, :column 16, :line 334, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 334, :column 18, :line 334, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 334, :column 25, :line 334, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 334, :column 4, :line 334, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 334, :column 16, :line 334, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 334, :column 18, :line 334, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 334, :column 25, :line 334, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 334, :column 15, :line 334, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 334, :column 16, :line 334, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 334, :column 18, :line 334, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 334, :column 25, :line 334, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 334, :column 4, :line 334, :file "cljs/core.cljs"} -pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6873, :column 13, :line 6873, :file "cljs/core.cljs"} []), :end-column 13, :end-line 6873, :column 7, :line 6873, :file "cljs/core.cljs"} flush ^{:arglists (^{:end-column 15, :end-line 6873, :column 13, :line 6873, :file "cljs/core.cljs"} []), :end-column 13, :end-line 6873, :column 7, :line 6873, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6873, :column 13, :line 6873, :file "cljs/core.cljs"} []), :end-column 13, :end-line 6873, :column 7, :line 6873, :file "cljs/core.cljs"} flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 6447, :column 28, :line 6447, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6447, :column 29, :line 6447, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 6447, :column 7, :line 6447, :file "cljs/core.cljs"} set-from-indexed-seq ^{:arglists (^{:end-column 34, :end-line 6447, :column 28, :line 6447, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6447, :column 29, :line 6447, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 6447, :column 7, :line 6447, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 34, :end-line 6447, :column 29, :line 6447, :file "cljs/core.cljs"} iseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 6447, :column 28, :line 6447, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6447, :column 29, :line 6447, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 6447, :column 7, :line 6447, :file "cljs/core.cljs"} set-from-indexed-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6568, :column 3, :line 6568, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6568, :column 4, :line 6568, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6568, :column 9, :line 6568, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.", :end-column 18, :end-line 6565, :column 7, :line 6565, :file "cljs/core.cljs"} take-while ^{:arglists (^{:end-column 14, :end-line 6568, :column 3, :line 6568, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6568, :column 4, :line 6568, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6568, :column 9, :line 6568, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.", :end-column 18, :end-line 6565, :column 7, :line 6565, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 6568, :column 4, :line 6568, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6568, :column 9, :line 6568, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6568, :column 3, :line 6568, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6568, :column 4, :line 6568, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6568, :column 9, :line 6568, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.", :end-column 18, :end-line 6565, :column 7, :line 6565, :file "cljs/core.cljs"} take-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2671, :column 4, :line 2671, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2671, :column 5, :line 2671, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2671, :column 9, :line 2671, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2673, :column 4, :line 2673, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2673, :column 5, :line 2673, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2673, :column 9, :line 2673, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2673, :column 11, :line 2673, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2675, :column 4, :line 2675, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2675, :column 5, :line 2675, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2675, :column 9, :line 2675, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2675, :column 11, :line 2675, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2675, :column 13, :line 2675, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2677, :column 4, :line 2677, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2677, :column 5, :line 2677, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2677, :column 9, :line 2677, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2677, :column 11, :line 2677, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2677, :column 13, :line 2677, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2677, :column 15, :line 2677, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2679, :column 4, :line 2679, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2679, :column 5, :line 2679, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2679, :column 9, :line 2679, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2679, :column 11, :line 2679, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2679, :column 13, :line 2679, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2679, :column 15, :line 2679, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2679, :column 17, :line 2679, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2681, :column 5, :line 2681, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2681, :column 9, :line 2681, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2681, :column 11, :line 2681, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2681, :column 13, :line 2681, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2681, :column 15, :line 2681, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2681, :column 17, :line 2681, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2681, :column 19, :line 2681, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2681, :column 21, :line 2681, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2668, :column 7, :line 2668, :file "cljs/core.cljs"} vary-meta ^{:arglists (^{:end-column 11, :end-line 2671, :column 4, :line 2671, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2671, :column 5, :line 2671, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2671, :column 9, :line 2671, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2673, :column 4, :line 2673, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2673, :column 5, :line 2673, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2673, :column 9, :line 2673, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2673, :column 11, :line 2673, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2675, :column 4, :line 2675, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2675, :column 5, :line 2675, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2675, :column 9, :line 2675, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2675, :column 11, :line 2675, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2675, :column 13, :line 2675, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2677, :column 4, :line 2677, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2677, :column 5, :line 2677, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2677, :column 9, :line 2677, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2677, :column 11, :line 2677, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2677, :column 13, :line 2677, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2677, :column 15, :line 2677, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2679, :column 4, :line 2679, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2679, :column 5, :line 2679, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2679, :column 9, :line 2679, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2679, :column 11, :line 2679, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2679, :column 13, :line 2679, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2679, :column 15, :line 2679, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2679, :column 17, :line 2679, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2681, :column 5, :line 2681, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2681, :column 9, :line 2681, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2681, :column 11, :line 2681, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2681, :column 13, :line 2681, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2681, :column 15, :line 2681, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2681, :column 17, :line 2681, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2681, :column 19, :line 2681, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2681, :column 21, :line 2681, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2668, :column 7, :line 2668, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2671, :column 5, :line 2671, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2671, :column 9, :line 2671, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 2673, :column 5, :line 2673, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2673, :column 9, :line 2673, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2673, :column 11, :line 2673, :file "cljs/core.cljs"} a] [^{:end-column 9, :end-line 2675, :column 5, :line 2675, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2675, :column 9, :line 2675, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2675, :column 11, :line 2675, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2675, :column 13, :line 2675, :file "cljs/core.cljs"} b] [^{:end-column 9, :end-line 2677, :column 5, :line 2677, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2677, :column 9, :line 2677, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2677, :column 11, :line 2677, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2677, :column 13, :line 2677, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2677, :column 15, :line 2677, :file "cljs/core.cljs"} c] [^{:end-column 9, :end-line 2679, :column 5, :line 2679, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2679, :column 9, :line 2679, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2679, :column 11, :line 2679, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2679, :column 13, :line 2679, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2679, :column 15, :line 2679, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2679, :column 17, :line 2679, :file "cljs/core.cljs"} d] [^{:end-column 9, :end-line 2681, :column 5, :line 2681, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2681, :column 9, :line 2681, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2681, :column 11, :line 2681, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2681, :column 13, :line 2681, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2681, :column 15, :line 2681, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2681, :column 17, :line 2681, :file "cljs/core.cljs"} d & ^{:end-column 26, :end-line 2681, :column 21, :line 2681, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2671, :column 4, :line 2671, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2671, :column 5, :line 2671, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2671, :column 9, :line 2671, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2673, :column 4, :line 2673, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2673, :column 5, :line 2673, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2673, :column 9, :line 2673, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2673, :column 11, :line 2673, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2675, :column 4, :line 2675, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2675, :column 5, :line 2675, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2675, :column 9, :line 2675, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2675, :column 11, :line 2675, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2675, :column 13, :line 2675, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2677, :column 4, :line 2677, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2677, :column 5, :line 2677, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2677, :column 9, :line 2677, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2677, :column 11, :line 2677, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2677, :column 13, :line 2677, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2677, :column 15, :line 2677, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2679, :column 4, :line 2679, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2679, :column 5, :line 2679, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2679, :column 9, :line 2679, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2679, :column 11, :line 2679, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2679, :column 13, :line 2679, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2679, :column 15, :line 2679, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2679, :column 17, :line 2679, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2681, :column 5, :line 2681, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2681, :column 9, :line 2681, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2681, :column 11, :line 2681, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2681, :column 13, :line 2681, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2681, :column 15, :line 2681, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2681, :column 17, :line 2681, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2681, :column 19, :line 2681, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2681, :column 21, :line 2681, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2668, :column 7, :line 2668, :file "cljs/core.cljs"} vary-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} INext ^{:impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Range}, :protocol-symbol true, :end-column 20, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} INext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 118, :column 3, :line 118, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 118, :column 4, :line 118, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 117, :column 7, :line 117, :file "cljs/core.cljs"} is_proto_ ^{:arglists (^{:end-column 6, :end-line 118, :column 3, :line 118, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 118, :column 4, :line 118, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 117, :column 7, :line 117, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 118, :column 4, :line 118, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 118, :column 3, :line 118, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 118, :column 4, :line 118, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 117, :column 7, :line 117, :file "cljs/core.cljs"} is_proto_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 229, :column 14, :line 229, :file "cljs/core.cljs"} ICounted ^{:impls #{nil cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/TransientHashMap cljs.core/ChunkBuffer cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/TransientArrayMap cljs.core/RSeq cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/ArrayChunk cljs.core/PersistentTreeSet cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 229, :column 14, :line 229, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 229, :column 14, :line 229, :file "cljs/core.cljs"} ICounted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} IMapEntry ^{:impls #{cljs.core/BlackNode cljs.core/PersistentVector cljs.core/RedNode}, :protocol-symbol true, :end-column 24, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} IMapEntry, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1549, :column 4, :line 1549, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1549, :column 5, :line 1549, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1550, :column 5, :line 1550, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1550, :column 7, :line 1550, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1551, :column 4, :line 1551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1551, :column 5, :line 1551, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1551, :column 7, :line 1551, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1551, :column 9, :line 1551, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1551, :column 11, :line 1551, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1546, :column 8, :line 1546, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1546, :column 16, :line 1546, :file "cljs/core.cljs"} <= ^{:arglists (^{:end-column 7, :end-line 1549, :column 4, :line 1549, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1549, :column 5, :line 1549, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1550, :column 5, :line 1550, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1550, :column 7, :line 1550, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1551, :column 4, :line 1551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1551, :column 5, :line 1551, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1551, :column 7, :line 1551, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1551, :column 9, :line 1551, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1551, :column 11, :line 1551, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1546, :column 8, :line 1546, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1546, :column 16, :line 1546, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1549, :column 5, :line 1549, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1550, :column 5, :line 1550, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1550, :column 7, :line 1550, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1551, :column 5, :line 1551, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1551, :column 7, :line 1551, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1551, :column 11, :line 1551, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1549, :column 4, :line 1549, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1549, :column 5, :line 1549, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1550, :column 5, :line 1550, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1550, :column 7, :line 1550, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1551, :column 4, :line 1551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1551, :column 5, :line 1551, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1551, :column 7, :line 1551, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1551, :column 9, :line 1551, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1551, :column 11, :line 1551, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1546, :column 8, :line 1546, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1546, :column 16, :line 1546, :file "cljs/core.cljs"} <=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2565, :column 4, :line 2565, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2565, :column 5, :line 2565, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2565, :column 11, :line 2565, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2567, :column 4, :line 2567, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2567, :column 5, :line 2567, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2567, :column 11, :line 2567, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2567, :column 15, :line 2567, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2567, :column 17, :line 2567, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2562, :column 7, :line 2562, :file "cljs/core.cljs"} conj! ^{:arglists (^{:end-column 15, :end-line 2565, :column 4, :line 2565, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2565, :column 5, :line 2565, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2565, :column 11, :line 2565, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2567, :column 4, :line 2567, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2567, :column 5, :line 2567, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2567, :column 11, :line 2567, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2567, :column 15, :line 2567, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2567, :column 17, :line 2567, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2562, :column 7, :line 2562, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2565, :column 5, :line 2565, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2565, :column 11, :line 2565, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2567, :column 5, :line 2567, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2567, :column 11, :line 2567, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2567, :column 17, :line 2567, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2565, :column 4, :line 2565, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2565, :column 5, :line 2565, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2565, :column 11, :line 2565, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2567, :column 4, :line 2567, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2567, :column 5, :line 2567, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2567, :column 11, :line 2567, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2567, :column 15, :line 2567, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2567, :column 17, :line 2567, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2562, :column 7, :line 2562, :file "cljs/core.cljs"} conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 274, :column 15, :line 274, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} -pop ^{:arglists (^{:end-column 20, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 274, :column 15, :line 274, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 274, :column 15, :line 274, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 274, :column 15, :line 274, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} -pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3061, :column 4, :line 3061, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3061, :column 5, :line 3061, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3062, :column 4, :line 3062, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3062, :column 5, :line 3062, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3062, :column 7, :line 3062, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3057, :column 7, :line 3057, :file "cljs/core.cljs"} repeatedly ^{:arglists (^{:end-column 7, :end-line 3061, :column 4, :line 3061, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3061, :column 5, :line 3061, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3062, :column 4, :line 3062, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3062, :column 5, :line 3062, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3062, :column 7, :line 3062, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3057, :column 7, :line 3057, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3061, :column 5, :line 3061, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3062, :column 5, :line 3062, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3062, :column 7, :line 3062, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3061, :column 4, :line 3061, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3061, :column 5, :line 3061, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3062, :column 4, :line 3062, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3062, :column 5, :line 3062, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3062, :column 7, :line 3062, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3057, :column 7, :line 3057, :file "cljs/core.cljs"} repeatedly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6531, :column 3, :line 6531, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6531, :column 4, :line 6531, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 6531, :column 9, :line 6531, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 6529, :column 7, :line 6529, :file "cljs/core.cljs"} zipmap ^{:arglists (^{:end-column 14, :end-line 6531, :column 3, :line 6531, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6531, :column 4, :line 6531, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 6531, :column 9, :line 6531, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 6529, :column 7, :line 6529, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 6531, :column 4, :line 6531, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 6531, :column 9, :line 6531, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6531, :column 3, :line 6531, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6531, :column 4, :line 6531, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 6531, :column 9, :line 6531, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 6529, :column 7, :line 6529, :file "cljs/core.cljs"} zipmap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} IStack ^{:impls #{cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RedNode}, :protocol-symbol true, :end-column 21, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} IStack, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 342, :column 18, :line 342, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 342, :column 19, :line 342, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -remove-watch ^{:arglists (^{:end-column 28, :end-line 342, :column 18, :line 342, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 342, :column 19, :line 342, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 342, :column 19, :line 342, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 342, :column 18, :line 342, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 342, :column 19, :line 342, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.", :end-column 14, :end-line 3128, :column 7, :line 3128, :file "cljs/core.cljs"} remove ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.", :end-column 14, :end-line 3128, :column 7, :line 3128, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.", :end-column 14, :end-line 3128, :column 7, :line 3128, :file "cljs/core.cljs"} remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr])} ->BitmapIndexedNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/BitmapIndexedNode [^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr])} ->BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1521, :column 4, :line 1521, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1521, :column 5, :line 1521, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1522, :column 4, :line 1522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1522, :column 5, :line 1522, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1522, :column 7, :line 1522, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1523, :column 4, :line 1523, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1523, :column 5, :line 1523, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1523, :column 7, :line 1523, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1523, :column 9, :line 1523, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1523, :column 11, :line 1523, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1518, :column 15, :line 1518, :file "cljs/core.cljs"} * ^{:arglists (^{:end-column 6, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1521, :column 4, :line 1521, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1521, :column 5, :line 1521, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1522, :column 4, :line 1522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1522, :column 5, :line 1522, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1522, :column 7, :line 1522, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1523, :column 4, :line 1523, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1523, :column 5, :line 1523, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1523, :column 7, :line 1523, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1523, :column 9, :line 1523, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1523, :column 11, :line 1523, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1518, :column 15, :line 1518, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1521, :column 5, :line 1521, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1522, :column 5, :line 1522, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1522, :column 7, :line 1522, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1523, :column 5, :line 1523, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1523, :column 7, :line 1523, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1523, :column 11, :line 1523, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1521, :column 4, :line 1521, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1521, :column 5, :line 1521, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1522, :column 4, :line 1522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1522, :column 5, :line 1522, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1522, :column 7, :line 1522, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1523, :column 4, :line 1523, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1523, :column 5, :line 1523, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1523, :column 7, :line 1523, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1523, :column 9, :line 1523, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1523, :column 11, :line 1523, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1518, :column 15, :line 1518, :file "cljs/core.cljs"} *, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 6840, :column 3, :line 6840, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6840, :column 4, :line 6840, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 6838, :column 7, :line 6838, :file "cljs/core.cljs"} re-pattern ^{:arglists (^{:end-column 6, :end-line 6840, :column 3, :line 6840, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6840, :column 4, :line 6840, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 6838, :column 7, :line 6838, :file "cljs/core.cljs"} {:arglists (^js/RegExp [^{:end-column 6, :end-line 6840, :column 4, :line 6840, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6840, :column 3, :line 6840, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6840, :column 4, :line 6840, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 6838, :column 7, :line 6838, :file "cljs/core.cljs"} re-pattern, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1596, :column 4, :line 1596, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1596, :column 5, :line 1596, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1596, :column 7, :line 1596, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1597, :column 5, :line 1597, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1597, :column 7, :line 1597, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1597, :column 9, :line 1597, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1597, :column 11, :line 1597, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1593, :column 8, :line 1593, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1593, :column 15, :line 1593, :file "cljs/core.cljs"} min ^{:arglists (^{:end-column 7, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1596, :column 4, :line 1596, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1596, :column 5, :line 1596, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1596, :column 7, :line 1596, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1597, :column 5, :line 1597, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1597, :column 7, :line 1597, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1597, :column 9, :line 1597, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1597, :column 11, :line 1597, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1593, :column 8, :line 1593, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1593, :column 15, :line 1593, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1596, :column 5, :line 1596, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1596, :column 7, :line 1596, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1597, :column 5, :line 1597, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1597, :column 7, :line 1597, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1597, :column 11, :line 1597, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1596, :column 4, :line 1596, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1596, :column 5, :line 1596, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1596, :column 7, :line 1596, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1597, :column 5, :line 1597, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1597, :column 7, :line 1597, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1597, :column 9, :line 1597, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1597, :column 11, :line 1597, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1593, :column 8, :line 1593, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1593, :column 15, :line 1593, :file "cljs/core.cljs"} min, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 4202, :column 32, :line 4202, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4202, :column 33, :line 4202, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4202, :column 37, :line 4202, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4202, :column 39, :line 4202, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4202, :column 8, :line 4202, :file "cljs/core.cljs"} array-map-index-of-nil? ^{:arglists (^{:end-column 41, :end-line 4202, :column 32, :line 4202, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4202, :column 33, :line 4202, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4202, :column 37, :line 4202, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4202, :column 39, :line 4202, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4202, :column 8, :line 4202, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4202, :column 33, :line 4202, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4202, :column 37, :line 4202, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4202, :column 39, :line 4202, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 4202, :column 32, :line 4202, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4202, :column 33, :line 4202, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4202, :column 37, :line 4202, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4202, :column 39, :line 4202, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4202, :column 8, :line 4202, :file "cljs/core.cljs"} array-map-index-of-nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 349, :column 22, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} -persistent! ^{:arglists (^{:end-column 29, :end-line 349, :column 22, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 349, :column 22, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} -persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 242, :column 9, :line 242, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 242, :column 10, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 242, :column 15, :line 242, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 242, :column 18, :line 242, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 242, :column 19, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 242, :column 24, :line 242, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 242, :column 26, :line 242, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 242, :column 4, :line 242, :file "cljs/core.cljs"} -nth ^{:arglists (^{:end-column 17, :end-line 242, :column 9, :line 242, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 242, :column 10, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 242, :column 15, :line 242, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 242, :column 18, :line 242, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 242, :column 19, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 242, :column 24, :line 242, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 242, :column 26, :line 242, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 242, :column 4, :line 242, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 242, :column 10, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 242, :column 15, :line 242, :file "cljs/core.cljs"} n] [^{:end-column 24, :end-line 242, :column 19, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 242, :column 24, :line 242, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 242, :column 26, :line 242, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 242, :column 9, :line 242, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 242, :column 10, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 242, :column 15, :line 242, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 242, :column 18, :line 242, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 242, :column 19, :line 242, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 242, :column 24, :line 242, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 242, :column 26, :line 242, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 242, :column 4, :line 242, :file "cljs/core.cljs"} -nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2598, :column 3, :line 2598, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2598, :column 4, :line 2598, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} pop! ^{:arglists (^{:end-column 10, :end-line 2598, :column 3, :line 2598, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2598, :column 4, :line 2598, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2598, :column 4, :line 2598, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2598, :column 3, :line 2598, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2598, :column 4, :line 2598, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2376, :column 20, :line 2376, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2376, :column 21, :line 2376, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2376, :column 23, :line 2376, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2376, :column 7, :line 2376, :file "cljs/core.cljs"} chunk-append ^{:arglists (^{:end-column 25, :end-line 2376, :column 20, :line 2376, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2376, :column 21, :line 2376, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2376, :column 23, :line 2376, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2376, :column 7, :line 2376, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 2376, :column 21, :line 2376, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2376, :column 23, :line 2376, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2376, :column 20, :line 2376, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2376, :column 21, :line 2376, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2376, :column 23, :line 2376, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2376, :column 7, :line 2376, :file "cljs/core.cljs"} chunk-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7014, :column 3, :line 7014, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7014, :column 4, :line 7014, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7014, :column 6, :line 7014, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} prn-str ^{:arglists (^{:end-column 11, :end-line 7014, :column 3, :line 7014, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7014, :column 4, :line 7014, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7014, :column 6, :line 7014, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7014, :column 6, :line 7014, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7014, :column 3, :line 7014, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7014, :column 4, :line 7014, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7014, :column 6, :line 7014, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} prn-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 315, :column 14, :line 315, :file "cljs/core.cljs"} IReversible ^{:impls #{cljs.core/IndexedSeq cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 26, :end-line 315, :column 14, :line 315, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 315, :column 14, :line 315, :file "cljs/core.cljs"} IReversible, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 2048, :column 28, :line 2048, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2048, :column 29, :line 2048, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2048, :column 8, :line 2048, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2048, :column 16, :line 2048, :file "cljs/core.cljs"} reversible? ^{:arglists (^{:end-column 34, :end-line 2048, :column 28, :line 2048, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2048, :column 29, :line 2048, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2048, :column 8, :line 2048, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2048, :column 16, :line 2048, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 34, :end-line 2048, :column 29, :line 2048, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 2048, :column 28, :line 2048, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2048, :column 29, :line 2048, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2048, :column 8, :line 2048, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2048, :column 16, :line 2048, :file "cljs/core.cljs"} reversible?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 337, :column 24, :line 337, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 337, :column 25, :line 337, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 337, :column 5, :line 337, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 337, :column 13, :line 337, :file "cljs/core.cljs"} -realized? ^{:arglists (^{:end-column 27, :end-line 337, :column 24, :line 337, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 337, :column 25, :line 337, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 337, :column 5, :line 337, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 337, :column 13, :line 337, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 337, :column 25, :line 337, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 337, :column 24, :line 337, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 337, :column 25, :line 337, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 337, :column 5, :line 337, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 337, :column 13, :line 337, :file "cljs/core.cljs"} -realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 341, :column 15, :line 341, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 341, :column 16, :line 341, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 341, :column 21, :line 341, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -add-watch ^{:arglists (^{:end-column 27, :end-line 341, :column 15, :line 341, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 341, :column 16, :line 341, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 341, :column 21, :line 341, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 341, :column 16, :line 341, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 341, :column 21, :line 341, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 341, :column 15, :line 341, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 341, :column 16, :line 341, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 341, :column 21, :line 341, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 283, :column 24, :line 283, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 283, :column 25, :line 283, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 283, :column 27, :line 283, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 283, :column 32, :line 283, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -deref-with-timeout ^{:arglists (^{:end-column 44, :end-line 283, :column 24, :line 283, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 283, :column 25, :line 283, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 283, :column 27, :line 283, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 283, :column 32, :line 283, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 283, :column 25, :line 283, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 283, :column 27, :line 283, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 283, :column 32, :line 283, :file "cljs/core.cljs"} timeout-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 283, :column 24, :line 283, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 283, :column 25, :line 283, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 283, :column 27, :line 283, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 283, :column 32, :line 283, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -deref-with-timeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 841, :column 4, :line 841, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 841, :column 5, :line 841, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 841, :column 10, :line 841, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 845, :column 10, :line 845, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 845, :column 12, :line 845, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 845, :column 14, :line 845, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 837, :column 7, :line 837, :file "cljs/core.cljs"} conj ^{:arglists (^{:end-column 12, :end-line 841, :column 4, :line 841, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 841, :column 5, :line 841, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 841, :column 10, :line 841, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 845, :column 10, :line 845, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 845, :column 12, :line 845, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 845, :column 14, :line 845, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 837, :column 7, :line 837, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 841, :column 5, :line 841, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 841, :column 10, :line 841, :file "cljs/core.cljs"} x] [^{:end-column 10, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 845, :column 10, :line 845, :file "cljs/core.cljs"} x & ^{:end-column 17, :end-line 845, :column 14, :line 845, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 841, :column 4, :line 841, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 841, :column 5, :line 841, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 841, :column 10, :line 841, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 845, :column 10, :line 845, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 845, :column 12, :line 845, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 845, :column 14, :line 845, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 837, :column 7, :line 837, :file "cljs/core.cljs"} conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 319, :column 21, :line 319, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 319, :column 22, :line 319, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 319, :column 27, :line 319, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 319, :column 5, :line 319, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 319, :column 9, :line 319, :file "cljs/core.cljs"} -sorted-seq ^{:arglists (^{:end-column 38, :end-line 319, :column 21, :line 319, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 319, :column 22, :line 319, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 319, :column 27, :line 319, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 319, :column 5, :line 319, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 319, :column 9, :line 319, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 319, :column 22, :line 319, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 319, :column 27, :line 319, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 319, :column 21, :line 319, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 319, :column 22, :line 319, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 319, :column 27, :line 319, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 319, :column 5, :line 319, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 319, :column 9, :line 319, :file "cljs/core.cljs"} -sorted-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3092, :column 3, :line 3092, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3092, :column 4, :line 3092, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3089, :column 8, :line 3089, :file "cljs/core.cljs"} flatten1 ^{:arglists (^{:end-column 10, :end-line 3092, :column 3, :line 3092, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3092, :column 4, :line 3092, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3089, :column 8, :line 3089, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 10, :end-line 3092, :column 4, :line 3092, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3092, :column 3, :line 3092, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3092, :column 4, :line 3092, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3089, :column 8, :line 3089, :file "cljs/core.cljs"} flatten1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 7354, :column 1, :line 7354, :file "cljs/core.cljs"} fixture1 ^{:end-column 17, :end-line 7354, :column 1, :line 7354, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 7354, :column 1, :line 7354, :file "cljs/core.cljs"} fixture1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7176, :column 11, :line 7176, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7176, :column 12, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 7176, :column 14, :line 7176, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 7176, :column 17, :line 7176, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7176, :column 18, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 7176, :column 20, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 7176, :column 22, :line 7176, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 7176, :column 25, :line 7176, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 7176, :column 26, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 7176, :column 28, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 7176, :column 30, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 7176, :column 32, :line 7176, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 7176, :column 35, :line 7176, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 7176, :column 36, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 7176, :column 38, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 7176, :column 40, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 7176, :column 42, :line 7176, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 7176, :column 44, :line 7176, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 7176, :column 4, :line 7176, :file "cljs/core.cljs"} -swap! ^{:arglists (^{:end-column 16, :end-line 7176, :column 11, :line 7176, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7176, :column 12, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 7176, :column 14, :line 7176, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 7176, :column 17, :line 7176, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7176, :column 18, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 7176, :column 20, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 7176, :column 22, :line 7176, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 7176, :column 25, :line 7176, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 7176, :column 26, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 7176, :column 28, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 7176, :column 30, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 7176, :column 32, :line 7176, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 7176, :column 35, :line 7176, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 7176, :column 36, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 7176, :column 38, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 7176, :column 40, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 7176, :column 42, :line 7176, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 7176, :column 44, :line 7176, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 7176, :column 4, :line 7176, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 7176, :column 12, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 7176, :column 14, :line 7176, :file "cljs/core.cljs"} f] [^{:end-column 20, :end-line 7176, :column 18, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 7176, :column 20, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 7176, :column 22, :line 7176, :file "cljs/core.cljs"} a] [^{:end-column 28, :end-line 7176, :column 26, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 7176, :column 28, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 7176, :column 30, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 7176, :column 32, :line 7176, :file "cljs/core.cljs"} b] [^{:end-column 38, :end-line 7176, :column 36, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 7176, :column 38, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 7176, :column 40, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 7176, :column 42, :line 7176, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 7176, :column 44, :line 7176, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7176, :column 11, :line 7176, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7176, :column 12, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 7176, :column 14, :line 7176, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 7176, :column 17, :line 7176, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7176, :column 18, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 7176, :column 20, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 7176, :column 22, :line 7176, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 7176, :column 25, :line 7176, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 7176, :column 26, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 7176, :column 28, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 7176, :column 30, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 7176, :column 32, :line 7176, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 7176, :column 35, :line 7176, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 7176, :column 36, :line 7176, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 7176, :column 38, :line 7176, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 7176, :column 40, :line 7176, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 7176, :column 42, :line 7176, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 7176, :column 44, :line 7176, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 7176, :column 4, :line 7176, :file "cljs/core.cljs"} -swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length* ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 1240, :column 17, :line 1240, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1240, :column 18, :line 1240, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1240, :column 22, :line 1240, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1240, :column 7, :line 1240, :file "cljs/core.cljs"} js-delete ^{:arglists (^{:end-column 26, :end-line 1240, :column 17, :line 1240, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1240, :column 18, :line 1240, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1240, :column 22, :line 1240, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1240, :column 7, :line 1240, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1240, :column 18, :line 1240, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1240, :column 22, :line 1240, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 1240, :column 17, :line 1240, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1240, :column 18, :line 1240, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1240, :column 22, :line 1240, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1240, :column 7, :line 1240, :file "cljs/core.cljs"} js-delete, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_ ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy])} ->MultiFn ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy])} {:arglists (^cljs.core/MultiFn [^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy])} ->MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7394, :column 15, :line 7394, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7394, :column 16, :line 7394, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 7394, :column 7, :line 7394, :file "cljs/core.cljs"} key->js ^{:arglists (^{:end-column 18, :end-line 7394, :column 15, :line 7394, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7394, :column 16, :line 7394, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 7394, :column 7, :line 7394, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 7394, :column 16, :line 7394, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7394, :column 15, :line 7394, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7394, :column 16, :line 7394, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 7394, :column 7, :line 7394, :file "cljs/core.cljs"} key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 7387, :column 14, :line 7387, :file "cljs/core.cljs"} IEncodeJS ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 7387, :column 14, :line 7387, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 7387, :column 14, :line 7387, :file "cljs/core.cljs"} IEncodeJS, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3293, :column 17, :line 3293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3293, :column 18, :line 3293, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3293, :column 23, :line 3293, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3293, :column 29, :line 3293, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3293, :column 8, :line 3293, :file "cljs/core.cljs"} new-path ^{:arglists (^{:end-column 34, :end-line 3293, :column 17, :line 3293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3293, :column 18, :line 3293, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3293, :column 23, :line 3293, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3293, :column 29, :line 3293, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3293, :column 8, :line 3293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 3293, :column 18, :line 3293, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3293, :column 23, :line 3293, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3293, :column 29, :line 3293, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3293, :column 17, :line 3293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3293, :column 18, :line 3293, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3293, :column 23, :line 3293, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3293, :column 29, :line 3293, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3293, :column 8, :line 3293, :file "cljs/core.cljs"} new-path, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 7273, :column 3, :line 7273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7273, :column 4, :line 7273, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 7273, :column 6, :line 7273, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 7273, :column 13, :line 7273, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 7269, :column 7, :line 7269, :file "cljs/core.cljs"} compare-and-set! ^{:arglists (^{:end-column 20, :end-line 7273, :column 3, :line 7273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7273, :column 4, :line 7273, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 7273, :column 6, :line 7273, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 7273, :column 13, :line 7273, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 7269, :column 7, :line 7269, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 7273, :column 4, :line 7273, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 7273, :column 6, :line 7273, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 7273, :column 13, :line 7273, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7273, :column 3, :line 7273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7273, :column 4, :line 7273, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 7273, :column 6, :line 7273, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 7273, :column 13, :line 7273, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 7269, :column 7, :line 7269, :file "cljs/core.cljs"} compare-and-set!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 462, :column 10, :line 462, :file "cljs/core.cljs"} array-seq ^{:arglists (^{:end-column 11, :end-line 742, :column 4, :line 742, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 742, :column 5, :line 742, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 744, :column 4, :line 744, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 744, :column 5, :line 744, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 744, :column 11, :line 744, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 741, :column 7, :line 741, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 742, :column 5, :line 742, :file "cljs/core.cljs"} array] [^{:end-column 11, :end-line 744, :column 5, :line 744, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 744, :column 11, :line 744, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 742, :column 4, :line 742, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 742, :column 5, :line 742, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 744, :column 4, :line 744, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 744, :column 5, :line 744, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 744, :column 11, :line 744, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 741, :column 7, :line 741, :file "cljs/core.cljs"} array-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1252, :column 4, :line 1252, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1252, :column 5, :line 1252, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1252, :column 10, :line 1252, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1252, :column 12, :line 1252, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1252, :column 15, :line 1252, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1252, :column 17, :line 1252, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1251, :column 8, :line 1251, :file "cljs/core.cljs"} array-copy-downward ^{:arglists (^{:end-column 21, :end-line 1252, :column 4, :line 1252, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1252, :column 5, :line 1252, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1252, :column 10, :line 1252, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1252, :column 12, :line 1252, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1252, :column 15, :line 1252, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1252, :column 17, :line 1252, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1251, :column 8, :line 1251, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1252, :column 5, :line 1252, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1252, :column 10, :line 1252, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1252, :column 12, :line 1252, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1252, :column 15, :line 1252, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1252, :column 17, :line 1252, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1252, :column 4, :line 1252, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1252, :column 5, :line 1252, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1252, :column 10, :line 1252, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1252, :column 12, :line 1252, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1252, :column 15, :line 1252, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1252, :column 17, :line 1252, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1251, :column 8, :line 1251, :file "cljs/core.cljs"} array-copy-downward, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4814, :column 24, :line 4814, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 4814, :column 25, :line 4814, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 4814, :column 36, :line 4814, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 4814, :column 41, :line 4814, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 4814, :column 8, :line 4814, :file "cljs/core.cljs"} pack-array-node ^{:arglists (^{:end-column 45, :end-line 4814, :column 24, :line 4814, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 4814, :column 25, :line 4814, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 4814, :column 36, :line 4814, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 4814, :column 41, :line 4814, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 4814, :column 8, :line 4814, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 4814, :column 25, :line 4814, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 4814, :column 36, :line 4814, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 4814, :column 41, :line 4814, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4814, :column 24, :line 4814, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 4814, :column 25, :line 4814, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 4814, :column 36, :line 4814, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 4814, :column 41, :line 4814, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 4814, :column 8, :line 4814, :file "cljs/core.cljs"} pack-array-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3071, :column 4, :line 3071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3071, :column 5, :line 3071, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3071, :column 8, :line 3071, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3077, :column 4, :line 3077, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3077, :column 5, :line 3077, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3077, :column 8, :line 3077, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3077, :column 11, :line 3077, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3077, :column 13, :line 3077, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3069, :column 7, :line 3069, :file "cljs/core.cljs"} interleave ^{:arglists (^{:end-column 11, :end-line 3071, :column 4, :line 3071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3071, :column 5, :line 3071, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3071, :column 8, :line 3071, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3077, :column 4, :line 3077, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3077, :column 5, :line 3077, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3077, :column 8, :line 3077, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3077, :column 11, :line 3077, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3077, :column 13, :line 3077, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3069, :column 7, :line 3069, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3071, :column 5, :line 3071, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3071, :column 8, :line 3071, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 8, :end-line 3077, :column 5, :line 3077, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3077, :column 8, :line 3077, :file "cljs/core.cljs"} c2 & ^{:end-column 19, :end-line 3077, :column 13, :line 3077, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3071, :column 4, :line 3071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3071, :column 5, :line 3071, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3071, :column 8, :line 3071, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3077, :column 4, :line 3077, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3077, :column 5, :line 3077, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3077, :column 8, :line 3077, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3077, :column 11, :line 3077, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3077, :column 13, :line 3077, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3069, :column 7, :line 3069, :file "cljs/core.cljs"} interleave, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 6893, :column 10, :line 6893, :file "cljs/core.cljs"} print-map ^{:arglists (^{:end-column 42, :end-line 7056, :column 17, :line 7056, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7056, :column 18, :line 7056, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7056, :column 20, :line 7056, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7056, :column 30, :line 7056, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7056, :column 37, :line 7056, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 7056, :column 7, :line 7056, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 7056, :column 18, :line 7056, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7056, :column 20, :line 7056, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7056, :column 30, :line 7056, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7056, :column 37, :line 7056, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 7056, :column 17, :line 7056, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7056, :column 18, :line 7056, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7056, :column 20, :line 7056, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7056, :column 30, :line 7056, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7056, :column 37, :line 7056, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 7056, :column 7, :line 7056, :file "cljs/core.cljs"} print-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1214, :column 3, :line 1214, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1214, :column 4, :line 1214, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1212, :column 8, :line 1212, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} map? ^{:arglists (^{:end-column 6, :end-line 1214, :column 3, :line 1214, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1214, :column 4, :line 1214, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1212, :column 8, :line 1212, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1214, :column 4, :line 1214, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1214, :column 3, :line 1214, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1214, :column 4, :line 1214, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1212, :column 8, :line 1212, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} map?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 969, :column 4, :line 969, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 969, :column 5, :line 969, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 969, :column 7, :line 969, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 987, :column 4, :line 987, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 987, :column 5, :line 987, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 987, :column 7, :line 987, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 987, :column 9, :line 987, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 967, :column 7, :line 967, :file "cljs/core.cljs"} get ^{:arglists (^{:end-column 9, :end-line 969, :column 4, :line 969, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 969, :column 5, :line 969, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 969, :column 7, :line 969, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 987, :column 4, :line 987, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 987, :column 5, :line 987, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 987, :column 7, :line 987, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 987, :column 9, :line 987, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 967, :column 7, :line 967, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 969, :column 5, :line 969, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 969, :column 7, :line 969, :file "cljs/core.cljs"} k] [^{:end-column 7, :end-line 987, :column 5, :line 987, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 987, :column 7, :line 987, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 987, :column 9, :line 987, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 969, :column 4, :line 969, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 969, :column 5, :line 969, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 969, :column 7, :line 969, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 987, :column 4, :line 987, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 987, :column 5, :line 987, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 987, :column 7, :line 987, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 987, :column 9, :line 987, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 967, :column 7, :line 967, :file "cljs/core.cljs"} get, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2733, :column 16, :line 2733, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 2733, :column 17, :line 2733, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 2733, :column 7, :line 2733, :file "cljs/core.cljs"} identity ^{:arglists (^{:end-column 19, :end-line 2733, :column 16, :line 2733, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 2733, :column 17, :line 2733, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 2733, :column 7, :line 2733, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 2733, :column 17, :line 2733, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2733, :column 16, :line 2733, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 2733, :column 17, :line 2733, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 2733, :column 7, :line 2733, :file "cljs/core.cljs"} identity, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3160, :column 3, :line 3160, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3160, :column 4, :line 3160, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3160, :column 7, :line 3160, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", :end-column 12, :end-line 3157, :column 7, :line 3157, :file "cljs/core.cljs"} into ^{:arglists (^{:end-column 12, :end-line 3160, :column 3, :line 3160, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3160, :column 4, :line 3160, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3160, :column 7, :line 3160, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", :end-column 12, :end-line 3157, :column 7, :line 3157, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3160, :column 4, :line 3160, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3160, :column 7, :line 3160, :file "cljs/core.cljs"} from]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3160, :column 3, :line 3160, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3160, :column 4, :line 3160, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3160, :column 7, :line 3160, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.", :end-column 12, :end-line 3157, :column 7, :line 3157, :file "cljs/core.cljs"} into, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1709, :column 3, :line 1709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1707, :column 7, :line 1707, :file "cljs/core.cljs"} long ^{:arglists (^{:end-column 6, :end-line 1709, :column 3, :line 1709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1707, :column 7, :line 1707, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1709, :column 3, :line 1709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1707, :column 7, :line 1707, :file "cljs/core.cljs"} long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1612, :column 22, :line 1612, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1612, :column 23, :line 1612, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1612, :column 15, :line 1612, :file "cljs/core.cljs"} double ^{:arglists (^{:end-column 25, :end-line 1612, :column 22, :line 1612, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1612, :column 23, :line 1612, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1612, :column 15, :line 1612, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 1612, :column 23, :line 1612, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1612, :column 22, :line 1612, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1612, :column 23, :line 1612, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1612, :column 15, :line 1612, :file "cljs/core.cljs"} double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2262, :column 10, :line 2262, :file "cljs/core.cljs"} ChunkBuffer {:op :type, :name ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2262, :column 10, :line 2262, :file "cljs/core.cljs"} ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 2262, :column 22, :line 2262, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end], :protocols #{Object cljs.core/ICounted}}, ^{:arglists (^{:end-column 15, :end-line 266, :column 9, :line 266, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 266, :column 10, :line 266, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 266, :column 4, :line 266, :file "cljs/core.cljs"} -key ^{:arglists (^{:end-column 15, :end-line 266, :column 9, :line 266, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 266, :column 10, :line 266, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 266, :column 4, :line 266, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 266, :column 10, :line 266, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 266, :column 9, :line 266, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 266, :column 10, :line 266, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 266, :column 4, :line 266, :file "cljs/core.cljs"} -key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} nfirst ^{:arglists (^{:end-column 9, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} nfirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 383, :column 10, :line 383, :file "cljs/core.cljs"} StringBufferWriter {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 383, :column 10, :line 383, :file "cljs/core.cljs"} StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 383, :column 29, :line 383, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb], :protocols #{cljs.core/IWriter}}, ^{:arglists (^{:end-column 6, :end-line 1103, :column 3, :line 1103, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1103, :column 4, :line 1103, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1101, :column 7, :line 1101, :file "cljs/core.cljs"} meta ^{:arglists (^{:end-column 6, :end-line 1103, :column 3, :line 1103, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1103, :column 4, :line 1103, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1101, :column 7, :line 1101, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1103, :column 4, :line 1103, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1103, :column 3, :line 1103, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1103, :column 4, :line 1103, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1101, :column 7, :line 1101, :file "cljs/core.cljs"} meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 44, :end-line 3370, :column 27, :line 3370, :file "cljs/core.cljs"} tv-editable-tail ^{:arglists (^{:end-column 29, :end-line 3756, :column 25, :line 3756, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 3756, :column 26, :line 3756, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 3756, :column 8, :line 3756, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 29, :end-line 3756, :column 26, :line 3756, :file "cljs/core.cljs"} tl]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 3756, :column 25, :line 3756, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 3756, :column 26, :line 3756, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 3756, :column 8, :line 3756, :file "cljs/core.cljs"} tv-editable-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 295, :column 15, :line 295, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 295, :column 16, :line 295, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 295, :column 21, :line 295, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 295, :column 23, :line 295, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 295, :column 4, :line 295, :file "cljs/core.cljs"} -kv-reduce ^{:arglists (^{:end-column 28, :end-line 295, :column 15, :line 295, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 295, :column 16, :line 295, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 295, :column 21, :line 295, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 295, :column 23, :line 295, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 295, :column 4, :line 295, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 295, :column 16, :line 295, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 295, :column 21, :line 295, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 295, :column 23, :line 295, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 295, :column 15, :line 295, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 295, :column 16, :line 295, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 295, :column 21, :line 295, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 295, :column 23, :line 295, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 295, :column 4, :line 295, :file "cljs/core.cljs"} -kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 300, :column 14, :line 300, :file "cljs/core.cljs"} IHash ^{:impls #{cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq ^{:end-column 22, :end-line 572, :column 14, :line 572, :file "cljs/core.cljs"} default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 20, :end-line 300, :column 14, :line 300, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 300, :column 14, :line 300, :file "cljs/core.cljs"} IHash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1771, :column 3, :line 1771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1771, :column 4, :line 1771, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1771, :column 6, :line 1771, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1769, :column 7, :line 1769, :file "cljs/core.cljs"} bit-and-not ^{:arglists (^{:end-column 8, :end-line 1771, :column 3, :line 1771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1771, :column 4, :line 1771, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1771, :column 6, :line 1771, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1769, :column 7, :line 1769, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1771, :column 4, :line 1771, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1771, :column 6, :line 1771, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1771, :column 3, :line 1771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1771, :column 4, :line 1771, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1771, :column 6, :line 1771, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1769, :column 7, :line 1769, :file "cljs/core.cljs"} bit-and-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 322, :column 16, :line 322, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 322, :column 17, :line 322, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 322, :column 4, :line 322, :file "cljs/core.cljs"} -comparator ^{:arglists (^{:end-column 22, :end-line 322, :column 16, :line 322, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 322, :column 17, :line 322, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 322, :column 4, :line 322, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 322, :column 17, :line 322, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 322, :column 16, :line 322, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 322, :column 17, :line 322, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 322, :column 4, :line 322, :file "cljs/core.cljs"} -comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1629, :column 4, :line 1629, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1630, :column 4, :line 1630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1630, :column 5, :line 1630, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1631, :column 4, :line 1631, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1631, :column 5, :line 1631, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1631, :column 7, :line 1631, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1632, :column 9, :line 1632, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1632, :column 11, :line 1632, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1627, :column 8, :line 1627, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1627, :column 15, :line 1627, :file "cljs/core.cljs"} unchecked-add-int ^{:arglists (^{:end-column 6, :end-line 1629, :column 4, :line 1629, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1630, :column 4, :line 1630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1630, :column 5, :line 1630, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1631, :column 4, :line 1631, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1631, :column 5, :line 1631, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1631, :column 7, :line 1631, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1632, :column 9, :line 1632, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1632, :column 11, :line 1632, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1627, :column 8, :line 1627, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1627, :column 15, :line 1627, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1630, :column 5, :line 1630, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1631, :column 5, :line 1631, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1631, :column 7, :line 1631, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1632, :column 11, :line 1632, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1629, :column 4, :line 1629, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1630, :column 4, :line 1630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1630, :column 5, :line 1630, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1631, :column 4, :line 1631, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1631, :column 5, :line 1631, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1631, :column 7, :line 1631, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1632, :column 9, :line 1632, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1632, :column 11, :line 1632, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1627, :column 8, :line 1627, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1627, :column 15, :line 1627, :file "cljs/core.cljs"} unchecked-add-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1932, :column 3, :line 1932, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 1932, :column 8, :line 1932, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 1927, :column 8, :line 1927, :file "cljs/core.cljs"} extend-object! ^{:arglists (^{:end-column 15, :end-line 1932, :column 3, :line 1932, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 1932, :column 8, :line 1932, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 1927, :column 8, :line 1927, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 1932, :column 8, :line 1932, :file "cljs/core.cljs"} fn-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1932, :column 3, :line 1932, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 1932, :column 8, :line 1932, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 1927, :column 8, :line 1927, :file "cljs/core.cljs"} extend-object!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 3346, :column 17, :line 3346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3346, :column 18, :line 3346, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3346, :column 21, :line 3346, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3346, :column 27, :line 3346, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3346, :column 32, :line 3346, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3346, :column 34, :line 3346, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3346, :column 8, :line 3346, :file "cljs/core.cljs"} do-assoc ^{:arglists (^{:end-column 38, :end-line 3346, :column 17, :line 3346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3346, :column 18, :line 3346, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3346, :column 21, :line 3346, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3346, :column 27, :line 3346, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3346, :column 32, :line 3346, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3346, :column 34, :line 3346, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3346, :column 8, :line 3346, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 21, :end-line 3346, :column 18, :line 3346, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3346, :column 21, :line 3346, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3346, :column 27, :line 3346, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3346, :column 32, :line 3346, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3346, :column 34, :line 3346, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 3346, :column 17, :line 3346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3346, :column 18, :line 3346, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3346, :column 21, :line 3346, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3346, :column 27, :line 3346, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3346, :column 32, :line 3346, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3346, :column 34, :line 3346, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3346, :column 8, :line 3346, :file "cljs/core.cljs"} do-assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7304, :column 3, :line 7304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7304, :column 4, :line 7304, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7304, :column 9, :line 7304, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 7302, :column 7, :line 7302, :file "cljs/core.cljs"} reset-meta! ^{:arglists (^{:end-column 11, :end-line 7304, :column 3, :line 7304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7304, :column 4, :line 7304, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7304, :column 9, :line 7304, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 7302, :column 7, :line 7302, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7304, :column 4, :line 7304, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7304, :column 9, :line 7304, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7304, :column 3, :line 7304, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7304, :column 4, :line 7304, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7304, :column 9, :line 7304, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 7302, :column 7, :line 7302, :file "cljs/core.cljs"} reset-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta])} ->KeySeq ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/KeySeq [^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta])} ->KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 297, :column 14, :line 297, :file "cljs/core.cljs"} IEquiv ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq ^{:end-column 21, :end-line 561, :column 14, :line 561, :file "cljs/core.cljs"} number ^{:end-column 22, :end-line 833, :column 14, :line 833, :file "cljs/core.cljs"} default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/NeverEquiv Date cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 21, :end-line 297, :column 14, :line 297, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 297, :column 14, :line 297, :file "cljs/core.cljs"} IEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 5542, :column 27, :line 5542, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5542, :column 28, :line 5542, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 5542, :column 33, :line 5542, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 5542, :column 35, :line 5542, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 5542, :column 8, :line 5542, :file "cljs/core.cljs"} tree-map-kv-reduce ^{:arglists (^{:end-column 40, :end-line 5542, :column 27, :line 5542, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5542, :column 28, :line 5542, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 5542, :column 33, :line 5542, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 5542, :column 35, :line 5542, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 5542, :column 8, :line 5542, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 5542, :column 28, :line 5542, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 5542, :column 33, :line 5542, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 5542, :column 35, :line 5542, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5542, :column 27, :line 5542, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5542, :column 28, :line 5542, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 5542, :column 33, :line 5542, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 5542, :column 35, :line 5542, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 5542, :column 8, :line 5542, :file "cljs/core.cljs"} tree-map-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3039, :column 3, :line 3039, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3039, :column 4, :line 3039, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3037, :column 7, :line 3037, :file "cljs/core.cljs"} cycle ^{:arglists (^{:end-column 9, :end-line 3039, :column 3, :line 3039, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3039, :column 4, :line 3039, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3037, :column 7, :line 3037, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3039, :column 4, :line 3039, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3039, :column 3, :line 3039, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3039, :column 4, :line 3039, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3037, :column 7, :line 3037, :file "cljs/core.cljs"} cycle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 280, :column 10, :line 280, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 280, :column 11, :line 280, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 280, :column 3, :line 280, :file "cljs/core.cljs"} -deref ^{:arglists (^{:end-column 13, :end-line 280, :column 10, :line 280, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 280, :column 11, :line 280, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 280, :column 3, :line 280, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 280, :column 11, :line 280, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 280, :column 10, :line 280, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 280, :column 11, :line 280, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 280, :column 3, :line 280, :file "cljs/core.cljs"} -deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1179, :column 3, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1176, :column 8, :line 1176, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1176, :column 16, :line 1176, :file "cljs/core.cljs"} empty? ^{:arglists (^{:end-column 9, :end-line 1179, :column 3, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1176, :column 8, :line 1176, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1176, :column 16, :line 1176, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1179, :column 3, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1176, :column 8, :line 1176, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1176, :column 16, :line 1176, :file "cljs/core.cljs"} empty?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1610, :column 21, :line 1610, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1610, :column 22, :line 1610, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1610, :column 8, :line 1610, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1610, :column 15, :line 1610, :file "cljs/core.cljs"} short ^{:arglists (^{:end-column 24, :end-line 1610, :column 21, :line 1610, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1610, :column 22, :line 1610, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1610, :column 8, :line 1610, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1610, :column 15, :line 1610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1610, :column 22, :line 1610, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1610, :column 21, :line 1610, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1610, :column 22, :line 1610, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1610, :column 8, :line 1610, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1610, :column 15, :line 1610, :file "cljs/core.cljs"} short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7388, :column 13, :line 7388, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7388, :column 14, :line 7388, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7388, :column 4, :line 7388, :file "cljs/core.cljs"} -clj->js ^{:arglists (^{:end-column 16, :end-line 7388, :column 13, :line 7388, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7388, :column 14, :line 7388, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7388, :column 4, :line 7388, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7388, :column 14, :line 7388, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7388, :column 13, :line 7388, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7388, :column 14, :line 7388, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7388, :column 4, :line 7388, :file "cljs/core.cljs"} -clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 371, :column 20, :line 371, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 371, :column 4, :line 371, :file "cljs/core.cljs"} -chunked-first ^{:arglists (^{:end-column 25, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 371, :column 20, :line 371, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 371, :column 4, :line 371, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 371, :column 20, :line 371, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 371, :column 20, :line 371, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 371, :column 4, :line 371, :file "cljs/core.cljs"} -chunked-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3186, :column 3, :line 3186, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3186, :column 4, :line 3186, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3186, :column 9, :line 3186, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} filterv ^{:arglists (^{:end-column 14, :end-line 3186, :column 3, :line 3186, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3186, :column 4, :line 3186, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3186, :column 9, :line 3186, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 3186, :column 4, :line 3186, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3186, :column 9, :line 3186, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3186, :column 3, :line 3186, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3186, :column 4, :line 3186, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3186, :column 9, :line 3186, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} filterv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 3370, :column 10, :line 3370, :file "cljs/core.cljs"} tv-editable-root ^{:arglists (^{:end-column 31, :end-line 3753, :column 25, :line 3753, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 3753, :column 26, :line 3753, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 3753, :column 8, :line 3753, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 31, :end-line 3753, :column 26, :line 3753, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 3753, :column 25, :line 3753, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 3753, :column 26, :line 3753, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 3753, :column 8, :line 3753, :file "cljs/core.cljs"} tv-editable-root, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 33, :end-line 400, :column 28, :line 400, :file "cljs/core.cljs"} hash ^{:arglists (^{:end-column 15, :end-line 1156, :column 12, :line 1156, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1156, :column 13, :line 1156, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 1156, :column 7, :line 1156, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1156, :column 13, :line 1156, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1156, :column 12, :line 1156, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1156, :column 13, :line 1156, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 1156, :column 7, :line 1156, :file "cljs/core.cljs"} hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1738, :column 3, :line 1738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1738, :column 6, :line 1738, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1736, :column 7, :line 1736, :file "cljs/core.cljs"} quot ^{:arglists (^{:end-column 8, :end-line 1738, :column 3, :line 1738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1738, :column 6, :line 1738, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1736, :column 7, :line 1736, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1738, :column 6, :line 1738, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1738, :column 3, :line 1738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1738, :column 6, :line 1738, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1736, :column 7, :line 1736, :file "cljs/core.cljs"} quot, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1618, :column 32, :line 1618, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1618, :column 33, :line 1618, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1618, :column 8, :line 1618, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1618, :column 15, :line 1618, :file "cljs/core.cljs"} unchecked-double ^{:arglists (^{:end-column 35, :end-line 1618, :column 32, :line 1618, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1618, :column 33, :line 1618, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1618, :column 8, :line 1618, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1618, :column 15, :line 1618, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 1618, :column 33, :line 1618, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1618, :column 32, :line 1618, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1618, :column 33, :line 1618, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1618, :column 8, :line 1618, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1618, :column 15, :line 1618, :file "cljs/core.cljs"} unchecked-double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash])} ->ChunkedCons ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ChunkedCons [^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash])} ->ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 357, :column 14, :line 357, :file "cljs/core.cljs"} ITransientVector ^{:impls #{cljs.core/TransientVector}, :protocol-symbol true, :end-column 31, :end-line 357, :column 14, :line 357, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 357, :column 14, :line 357, :file "cljs/core.cljs"} ITransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1904, :column 10, :line 1904, :file "cljs/core.cljs"} key ^{:arglists (^{:end-column 14, :end-line 6147, :column 3, :line 6147, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6147, :column 4, :line 6147, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6145, :column 7, :line 6145, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6147, :column 4, :line 6147, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6147, :column 3, :line 6147, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6147, :column 4, :line 6147, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6145, :column 7, :line 6145, :file "cljs/core.cljs"} key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1724, :column 13, :line 1724, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1724, :column 14, :line 1724, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} longs ^{:arglists (^{:end-column 16, :end-line 1724, :column 13, :line 1724, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1724, :column 14, :line 1724, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1724, :column 14, :line 1724, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1724, :column 13, :line 1724, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1724, :column 14, :line 1724, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} longs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2686, :column 4, :line 2686, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2686, :column 5, :line 2686, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2687, :column 4, :line 2687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2687, :column 5, :line 2687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2687, :column 7, :line 2687, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2688, :column 7, :line 2688, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2688, :column 9, :line 2688, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2688, :column 11, :line 2688, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2684, :column 8, :line 2684, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2684, :column 16, :line 2684, :file "cljs/core.cljs"} not= ^{:arglists (^{:end-column 7, :end-line 2686, :column 4, :line 2686, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2686, :column 5, :line 2686, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2687, :column 4, :line 2687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2687, :column 5, :line 2687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2687, :column 7, :line 2687, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2688, :column 7, :line 2688, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2688, :column 9, :line 2688, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2688, :column 11, :line 2688, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2684, :column 8, :line 2684, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2684, :column 16, :line 2684, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 2686, :column 5, :line 2686, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 2687, :column 5, :line 2687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2687, :column 7, :line 2687, :file "cljs/core.cljs"} y] ^cljs.core/boolean [^{:end-column 7, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2688, :column 7, :line 2688, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2688, :column 11, :line 2688, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2686, :column 4, :line 2686, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2686, :column 5, :line 2686, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2687, :column 4, :line 2687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2687, :column 5, :line 2687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2687, :column 7, :line 2687, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2688, :column 7, :line 2688, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2688, :column 9, :line 2688, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2688, :column 11, :line 2688, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2684, :column 8, :line 2684, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2684, :column 16, :line 2684, :file "cljs/core.cljs"} not=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 103, :column 24, :line 103, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 103, :column 25, :line 103, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 103, :column 8, :line 103, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 103, :column 16, :line 103, :file "cljs/core.cljs"} string? ^{:arglists (^{:end-column 27, :end-line 103, :column 24, :line 103, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 103, :column 25, :line 103, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 103, :column 8, :line 103, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 103, :column 16, :line 103, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 103, :column 25, :line 103, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 103, :column 24, :line 103, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 103, :column 25, :line 103, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 103, :column 8, :line 103, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 103, :column 16, :line 103, :file "cljs/core.cljs"} string?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 7359, :column 10, :line 7359, :file "cljs/core.cljs"} Delay {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 7359, :column 10, :line 7359, :file "cljs/core.cljs"} Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 25, :end-line 7359, :column 16, :line 7359, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f], :protocols #{cljs.core/IPending cljs.core/IDeref}}, ^{:arglists (^{:end-column 14, :end-line 6982, :column 3, :line 6982, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6982, :column 4, :line 6982, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6982, :column 9, :line 6982, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 6979, :column 7, :line 6979, :file "cljs/core.cljs"} pr-str-with-opts ^{:arglists (^{:end-column 14, :end-line 6982, :column 3, :line 6982, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6982, :column 4, :line 6982, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6982, :column 9, :line 6982, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 6979, :column 7, :line 6979, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 6982, :column 4, :line 6982, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6982, :column 9, :line 6982, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6982, :column 3, :line 6982, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6982, :column 4, :line 6982, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6982, :column 9, :line 6982, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 6979, :column 7, :line 6979, :file "cljs/core.cljs"} pr-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta])} ->Symbol ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/Symbol [^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 423, :column 18, :line 423, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 423, :column 21, :line 423, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 423, :column 26, :line 423, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 423, :column 40, :line 423, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 423, :column 46, :line 423, :file "cljs/core.cljs"} _meta])} ->Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline* ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1663, :column 4, :line 1663, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1663, :column 5, :line 1663, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1664, :column 4, :line 1664, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1664, :column 5, :line 1664, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1664, :column 7, :line 1664, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1665, :column 4, :line 1665, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1665, :column 5, :line 1665, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1665, :column 9, :line 1665, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1665, :column 11, :line 1665, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1660, :column 8, :line 1660, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1660, :column 15, :line 1660, :file "cljs/core.cljs"} unchecked-multiply-int ^{:arglists (^{:end-column 6, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1663, :column 4, :line 1663, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1663, :column 5, :line 1663, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1664, :column 4, :line 1664, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1664, :column 5, :line 1664, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1664, :column 7, :line 1664, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1665, :column 4, :line 1665, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1665, :column 5, :line 1665, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1665, :column 9, :line 1665, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1665, :column 11, :line 1665, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1660, :column 8, :line 1660, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1660, :column 15, :line 1660, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1663, :column 5, :line 1663, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1664, :column 5, :line 1664, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1664, :column 7, :line 1664, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1665, :column 5, :line 1665, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1665, :column 11, :line 1665, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1663, :column 4, :line 1663, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1663, :column 5, :line 1663, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1664, :column 4, :line 1664, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1664, :column 5, :line 1664, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1664, :column 7, :line 1664, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1665, :column 4, :line 1665, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1665, :column 5, :line 1665, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1665, :column 9, :line 1665, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1665, :column 11, :line 1665, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1660, :column 8, :line 1660, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1660, :column 15, :line 1660, :file "cljs/core.cljs"} unchecked-multiply-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 38, :end-line 1925, :column 27, :line 1925, :file "cljs/core.cljs"} chunk-rest ^{:arglists (^{:end-column 21, :end-line 2385, :column 18, :line 2385, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2385, :column 19, :line 2385, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2385, :column 7, :line 2385, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2385, :column 19, :line 2385, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2385, :column 18, :line 2385, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2385, :column 19, :line 2385, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2385, :column 7, :line 2385, :file "cljs/core.cljs"} chunk-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7874, :column 2, :line 7874, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7874, :column 3, :line 7874, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 7872, :column 7, :line 7872, :file "cljs/core.cljs"} remove-all-methods ^{:arglists (^{:end-column 11, :end-line 7874, :column 2, :line 7874, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7874, :column 3, :line 7874, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 7872, :column 7, :line 7872, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 7874, :column 3, :line 7874, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7874, :column 2, :line 7874, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7874, :column 3, :line 7874, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 7872, :column 7, :line 7872, :file "cljs/core.cljs"} remove-all-methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7483, :column 5, :line 7483, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 7488, :column 4, :line 7488, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7488, :column 5, :line 7488, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7488, :column 7, :line 7488, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7488, :column 9, :line 7488, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 7475, :column 7, :line 7475, :file "cljs/core.cljs"} trampoline ^{:arglists (^{:end-column 7, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7483, :column 5, :line 7483, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 7488, :column 4, :line 7488, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7488, :column 5, :line 7488, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7488, :column 7, :line 7488, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7488, :column 9, :line 7488, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 7475, :column 7, :line 7475, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7483, :column 5, :line 7483, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 7488, :column 5, :line 7488, :file "cljs/core.cljs"} f & ^{:end-column 14, :end-line 7488, :column 9, :line 7488, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7483, :column 5, :line 7483, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 7488, :column 4, :line 7488, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7488, :column 5, :line 7488, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7488, :column 7, :line 7488, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7488, :column 9, :line 7488, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 7475, :column 7, :line 7475, :file "cljs/core.cljs"} trampoline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1 ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1436, :column 10, :line 1436, :file "cljs/core.cljs"} vec ^{:arglists (^{:end-column 17, :end-line 3542, :column 11, :line 3542, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3542, :column 12, :line 3542, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3542, :column 7, :line 3542, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 17, :end-line 3542, :column 12, :line 3542, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3542, :column 11, :line 3542, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3542, :column 12, :line 3542, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3542, :column 7, :line 3542, :file "cljs/core.cljs"} vec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta* ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 340, :column 20, :line 340, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 340, :column 21, :line 340, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 340, :column 26, :line 340, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 340, :column 33, :line 340, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 340, :column 4, :line 340, :file "cljs/core.cljs"} -notify-watches ^{:arglists (^{:end-column 40, :end-line 340, :column 20, :line 340, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 340, :column 21, :line 340, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 340, :column 26, :line 340, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 340, :column 33, :line 340, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 340, :column 4, :line 340, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 340, :column 21, :line 340, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 340, :column 26, :line 340, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 340, :column 33, :line 340, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 340, :column 20, :line 340, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 340, :column 21, :line 340, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 340, :column 26, :line 340, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 340, :column 33, :line 340, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 340, :column 4, :line 340, :file "cljs/core.cljs"} -notify-watches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 7697, :column 10, :line 7697, :file "cljs/core.cljs"} MultiFn {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 7697, :column 10, :line 7697, :file "cljs/core.cljs"} MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 75, :end-line 7698, :column 18, :line 7697, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 7697, :column 19, :line 7697, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 7697, :column 24, :line 7697, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 7697, :column 36, :line 7697, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 7697, :column 57, :line 7697, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 7698, :column 19, :line 7698, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 7698, :column 32, :line 7698, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 7698, :column 45, :line 7698, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 7698, :column 58, :line 7698, :file "cljs/core.cljs"} cached-hierarchy], :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}}, ^{:arglists (^{:end-column 6, :end-line 1699, :column 3, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1697, :column 7, :line 1697, :file "cljs/core.cljs"} int ^{:arglists (^{:end-column 6, :end-line 1699, :column 3, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1697, :column 7, :line 1697, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1699, :column 3, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1697, :column 7, :line 1697, :file "cljs/core.cljs"} int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta])} ->ValSeq ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/ValSeq [^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta])} ->ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1750, :column 4, :line 1750, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).", :tag ^{:end-column 15, :end-line 1748, :column 8, :line 1748, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1748, :column 15, :line 1748, :file "cljs/core.cljs"} rand ^{:arglists (^{:end-column 6, :end-line 7494, :column 4, :line 7494, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 7491, :column 7, :line 7491, :file "cljs/core.cljs"} {:arglists ([] ^number [^{:end-column 7, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7494, :column 4, :line 7494, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 7491, :column 7, :line 7491, :file "cljs/core.cljs"} rand, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 802, :column 3, :line 802, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 802, :column 4, :line 802, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 800, :column 7, :line 800, :file "cljs/core.cljs"} second ^{:arglists (^{:end-column 9, :end-line 802, :column 3, :line 802, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 802, :column 4, :line 802, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 800, :column 7, :line 800, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 802, :column 4, :line 802, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 802, :column 3, :line 802, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 802, :column 4, :line 802, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 800, :column 7, :line 800, :file "cljs/core.cljs"} second, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 34, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IEditableCollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/PersistentHashSet}, :protocol-symbol true, :end-column 34, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 34, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IEditableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} hash-combine ^{:arglists (^{:end-column 31, :end-line 1890, :column 20, :line 1890, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1890, :column 21, :line 1890, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 1890, :column 26, :line 1890, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 1890, :column 7, :line 1890, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 1890, :column 21, :line 1890, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 1890, :column 26, :line 1890, :file "cljs/core.cljs"} hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1890, :column 20, :line 1890, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1890, :column 21, :line 1890, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 1890, :column 26, :line 1890, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 1890, :column 7, :line 1890, :file "cljs/core.cljs"} hash-combine, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1561, :column 5, :line 1561, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1562, :column 4, :line 1562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1562, :column 5, :line 1562, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1562, :column 7, :line 1562, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1563, :column 4, :line 1563, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1563, :column 5, :line 1563, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1563, :column 7, :line 1563, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1563, :column 9, :line 1563, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1563, :column 11, :line 1563, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1558, :column 8, :line 1558, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1558, :column 16, :line 1558, :file "cljs/core.cljs"} > ^{:arglists (^{:end-column 7, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1561, :column 5, :line 1561, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1562, :column 4, :line 1562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1562, :column 5, :line 1562, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1562, :column 7, :line 1562, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1563, :column 4, :line 1563, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1563, :column 5, :line 1563, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1563, :column 7, :line 1563, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1563, :column 9, :line 1563, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1563, :column 11, :line 1563, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1558, :column 8, :line 1558, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1558, :column 16, :line 1558, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1561, :column 5, :line 1561, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1562, :column 5, :line 1562, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1562, :column 7, :line 1562, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1563, :column 5, :line 1563, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1563, :column 7, :line 1563, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1563, :column 11, :line 1563, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1561, :column 5, :line 1561, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1562, :column 4, :line 1562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1562, :column 5, :line 1562, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1562, :column 7, :line 1562, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1563, :column 4, :line 1563, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1563, :column 5, :line 1563, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1563, :column 7, :line 1563, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1563, :column 9, :line 1563, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1563, :column 11, :line 1563, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1558, :column 8, :line 1558, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1558, :column 16, :line 1558, :file "cljs/core.cljs"} >, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 378, :column 18, :line 378, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} string, :end-column 18, :end-line 378, :column 12, :line 378, :file "cljs/core.cljs"} -name ^{:arglists (^{:end-column 21, :end-line 378, :column 18, :line 378, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} string, :end-column 18, :end-line 378, :column 12, :line 378, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 378, :column 18, :line 378, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} string, :end-column 18, :end-line 378, :column 12, :line 378, :file "cljs/core.cljs"} -name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6490, :column 3, :line 6490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6490, :column 4, :line 6490, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 6490, :column 9, :line 6490, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap", :end-column 15, :end-line 6486, :column 7, :line 6486, :file "cljs/core.cljs"} replace ^{:arglists (^{:end-column 14, :end-line 6490, :column 3, :line 6490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6490, :column 4, :line 6490, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 6490, :column 9, :line 6490, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap", :end-column 15, :end-line 6486, :column 7, :line 6486, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 6490, :column 4, :line 6490, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 6490, :column 9, :line 6490, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6490, :column 3, :line 6490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6490, :column 4, :line 6490, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 6490, :column 9, :line 6490, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap", :end-column 15, :end-line 6486, :column 7, :line 6486, :file "cljs/core.cljs"} replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash])} ->Subvec ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Subvec [^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash])} ->Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1198, :column 3, :line 1198, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1198, :column 4, :line 1198, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1196, :column 8, :line 1196, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1196, :column 16, :line 1196, :file "cljs/core.cljs"} associative? ^{:arglists (^{:end-column 6, :end-line 1198, :column 3, :line 1198, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1198, :column 4, :line 1198, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1196, :column 8, :line 1196, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1196, :column 16, :line 1196, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1198, :column 4, :line 1198, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1198, :column 3, :line 1198, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1198, :column 4, :line 1198, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1196, :column 8, :line 1196, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1196, :column 16, :line 1196, :file "cljs/core.cljs"} associative?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1704, :column 3, :line 1704, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1704, :column 4, :line 1704, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1702, :column 7, :line 1702, :file "cljs/core.cljs"} unchecked-int ^{:arglists (^{:end-column 6, :end-line 1704, :column 3, :line 1704, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1704, :column 4, :line 1704, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1702, :column 7, :line 1702, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1704, :column 4, :line 1704, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1704, :column 3, :line 1704, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1704, :column 4, :line 1704, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1702, :column 7, :line 1702, :file "cljs/core.cljs"} unchecked-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 1235, :column 15, :line 1235, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1235, :column 16, :line 1235, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1235, :column 7, :line 1235, :file "cljs/core.cljs"} js-keys ^{:arglists (^{:end-column 20, :end-line 1235, :column 15, :line 1235, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1235, :column 16, :line 1235, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1235, :column 7, :line 1235, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 20, :end-line 1235, :column 16, :line 1235, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 1235, :column 15, :line 1235, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1235, :column 16, :line 1235, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1235, :column 7, :line 1235, :file "cljs/core.cljs"} js-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 2164, :column 25, :line 2164, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2164, :column 26, :line 2164, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2164, :column 8, :line 2164, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2164, :column 16, :line 2164, :file "cljs/core.cljs"} keyword? ^{:arglists (^{:end-column 28, :end-line 2164, :column 25, :line 2164, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2164, :column 26, :line 2164, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2164, :column 8, :line 2164, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2164, :column 16, :line 2164, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 28, :end-line 2164, :column 26, :line 2164, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 2164, :column 25, :line 2164, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2164, :column 26, :line 2164, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2164, :column 8, :line 2164, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2164, :column 16, :line 2164, :file "cljs/core.cljs"} keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7377, :column 3, :line 7377, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 7375, :column 7, :line 7375, :file "cljs/core.cljs"} force ^{:arglists (^{:end-column 6, :end-line 7377, :column 3, :line 7377, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 7375, :column 7, :line 7375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7377, :column 3, :line 7377, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 7375, :column 7, :line 7375, :file "cljs/core.cljs"} force, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7512, :column 6, :line 7512, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 7508, :column 7, :line 7508, :file "cljs/core.cljs"} group-by ^{:arglists (^{:end-column 11, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7512, :column 6, :line 7512, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 7508, :column 7, :line 7508, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7512, :column 6, :line 7512, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7512, :column 6, :line 7512, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 7508, :column 7, :line 7508, :file "cljs/core.cljs"} group-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 316, :column 15, :line 316, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 316, :column 16, :line 316, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 316, :column 5, :line 316, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 316, :column 9, :line 316, :file "cljs/core.cljs"} -rseq ^{:arglists (^{:end-column 21, :end-line 316, :column 15, :line 316, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 316, :column 16, :line 316, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 316, :column 5, :line 316, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 316, :column 9, :line 316, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 316, :column 16, :line 316, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 316, :column 15, :line 316, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 316, :column 16, :line 316, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 316, :column 5, :line 316, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 316, :column 9, :line 316, :file "cljs/core.cljs"} -rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7051, :column 3, :line 7051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7051, :column 4, :line 7051, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7051, :column 6, :line 7051, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7049, :column 7, :line 7049, :file "cljs/core.cljs"} prn ^{:arglists (^{:end-column 11, :end-line 7051, :column 3, :line 7051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7051, :column 4, :line 7051, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7051, :column 6, :line 7051, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7049, :column 7, :line 7049, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7051, :column 6, :line 7051, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7051, :column 3, :line 7051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7051, :column 4, :line 7051, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7051, :column 6, :line 7051, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7049, :column 7, :line 7049, :file "cljs/core.cljs"} prn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 3773, :column 20, :line 3773, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3773, :column 21, :line 3773, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 3773, :column 24, :line 3773, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3773, :column 30, :line 3773, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 3773, :column 8, :line 3773, :file "cljs/core.cljs"} tv-pop-tail ^{:arglists (^{:end-column 35, :end-line 3773, :column 20, :line 3773, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3773, :column 21, :line 3773, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 3773, :column 24, :line 3773, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3773, :column 30, :line 3773, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 3773, :column 8, :line 3773, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 3773, :column 21, :line 3773, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 3773, :column 24, :line 3773, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3773, :column 30, :line 3773, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 3773, :column 20, :line 3773, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3773, :column 21, :line 3773, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 3773, :column 24, :line 3773, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3773, :column 30, :line 3773, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 3773, :column 8, :line 3773, :file "cljs/core.cljs"} tv-pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches])} ->Atom ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches])} {:arglists (^cljs.core/Atom [^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches])} ->Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 45, :end-line 4542, :column 27, :line 4542, :file "cljs/core.cljs"} PersistentHashMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5171, :column 10, :line 5171, :file "cljs/core.cljs"} PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 86, :end-line 5171, :column 28, :line 5171, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1655, :column 4, :line 1655, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1656, :column 4, :line 1656, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1656, :column 5, :line 1656, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1657, :column 4, :line 1657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1657, :column 5, :line 1657, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1657, :column 7, :line 1657, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1658, :column 4, :line 1658, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1658, :column 5, :line 1658, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1658, :column 7, :line 1658, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1658, :column 9, :line 1658, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1658, :column 11, :line 1658, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1653, :column 8, :line 1653, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1653, :column 15, :line 1653, :file "cljs/core.cljs"} unchecked-multiply ^{:arglists (^{:end-column 6, :end-line 1655, :column 4, :line 1655, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1656, :column 4, :line 1656, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1656, :column 5, :line 1656, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1657, :column 4, :line 1657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1657, :column 5, :line 1657, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1657, :column 7, :line 1657, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1658, :column 4, :line 1658, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1658, :column 5, :line 1658, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1658, :column 7, :line 1658, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1658, :column 9, :line 1658, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1658, :column 11, :line 1658, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1653, :column 8, :line 1653, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1653, :column 15, :line 1653, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1656, :column 5, :line 1656, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1657, :column 5, :line 1657, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1657, :column 7, :line 1657, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1658, :column 5, :line 1658, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1658, :column 7, :line 1658, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1658, :column 11, :line 1658, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1655, :column 4, :line 1655, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1656, :column 4, :line 1656, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1656, :column 5, :line 1656, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1657, :column 4, :line 1657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1657, :column 5, :line 1657, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1657, :column 7, :line 1657, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1658, :column 4, :line 1658, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1658, :column 5, :line 1658, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1658, :column 7, :line 1658, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1658, :column 9, :line 1658, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1658, :column 11, :line 1658, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1653, :column 8, :line 1653, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1653, :column 15, :line 1653, :file "cljs/core.cljs"} unchecked-multiply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5114, :column 10, :line 5114, :file "cljs/core.cljs"} ArrayNodeSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5114, :column 10, :line 5114, :file "cljs/core.cljs"} ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 5114, :column 23, :line 5114, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2723, :column 8, :line 2723, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2723, :column 16, :line 2723, :file "cljs/core.cljs"} even? ^{:arglists (^{:end-column 7, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2723, :column 8, :line 2723, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2723, :column 16, :line 2723, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2723, :column 8, :line 2723, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2723, :column 16, :line 2723, :file "cljs/core.cljs"} even?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1634, :column 21, :line 1634, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1634, :column 22, :line 1634, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1634, :column 7, :line 1634, :file "cljs/core.cljs"} unchecked-dec ^{:arglists (^{:end-column 24, :end-line 1634, :column 21, :line 1634, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1634, :column 22, :line 1634, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1634, :column 7, :line 1634, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1634, :column 22, :line 1634, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1634, :column 21, :line 1634, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1634, :column 22, :line 1634, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1634, :column 7, :line 1634, :file "cljs/core.cljs"} unchecked-dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 52, :end-line 4924, :column 39, :line 4924, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 4924, :column 44, :line 4924, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 4924, :column 48, :line 4924, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 4924, :column 8, :line 4924, :file "cljs/core.cljs"} hash-collision-node-find-index ^{:arglists (^{:end-column 52, :end-line 4924, :column 39, :line 4924, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 4924, :column 44, :line 4924, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 4924, :column 48, :line 4924, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 4924, :column 8, :line 4924, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 44, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 4924, :column 44, :line 4924, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 4924, :column 48, :line 4924, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 52, :end-line 4924, :column 39, :line 4924, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 4924, :column 44, :line 4924, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 4924, :column 48, :line 4924, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 4924, :column 8, :line 4924, :file "cljs/core.cljs"} hash-collision-node-find-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4328, :column 32, :line 4328, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4328, :column 33, :line 4328, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4328, :column 37, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4328, :column 39, :line 4328, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4328, :column 7, :line 4328, :file "cljs/core.cljs"} persistent-array-map-seq ^{:arglists (^{:end-column 45, :end-line 4328, :column 32, :line 4328, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4328, :column 33, :line 4328, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4328, :column 37, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4328, :column 39, :line 4328, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4328, :column 7, :line 4328, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4328, :column 33, :line 4328, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4328, :column 37, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4328, :column 39, :line 4328, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4328, :column 32, :line 4328, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4328, :column 33, :line 4328, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4328, :column 37, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4328, :column 39, :line 4328, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4328, :column 7, :line 4328, :file "cljs/core.cljs"} persistent-array-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2457, :column 4, :line 2457, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2457, :column 5, :line 2457, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2461, :column 4, :line 2461, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2461, :column 5, :line 2461, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2461, :column 10, :line 2461, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2456, :column 7, :line 2456, :file "cljs/core.cljs"} double-array ^{:arglists (^{:end-column 17, :end-line 2457, :column 4, :line 2457, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2457, :column 5, :line 2457, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2461, :column 4, :line 2461, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2461, :column 5, :line 2461, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2461, :column 10, :line 2461, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2456, :column 7, :line 2456, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2457, :column 5, :line 2457, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2461, :column 5, :line 2461, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2461, :column 10, :line 2461, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2457, :column 4, :line 2457, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2457, :column 5, :line 2457, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2461, :column 4, :line 2461, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2461, :column 5, :line 2461, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2461, :column 10, :line 2461, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2456, :column 7, :line 2456, :file "cljs/core.cljs"} double-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta])} ->EmptyList ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/EmptyList [^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta])} ->EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 747, :column 20, :line 747, :file "cljs/core.cljs"} seq-reduce ^{:arglists (^{:end-column 12, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1423, :column 5, :line 1423, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1423, :column 7, :line 1423, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1427, :column 4, :line 1427, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1427, :column 5, :line 1427, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1427, :column 7, :line 1427, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1427, :column 11, :line 1427, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1422, :column 8, :line 1422, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1423, :column 5, :line 1423, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1423, :column 7, :line 1423, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1427, :column 5, :line 1427, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1427, :column 7, :line 1427, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1427, :column 11, :line 1427, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1423, :column 5, :line 1423, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1423, :column 7, :line 1423, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1427, :column 4, :line 1427, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1427, :column 5, :line 1427, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1427, :column 7, :line 1427, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1427, :column 11, :line 1427, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1422, :column 8, :line 1422, :file "cljs/core.cljs"} seq-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2505, :column 3, :line 2505, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2505, :column 4, :line 2505, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2504, :column 7, :line 2504, :file "cljs/core.cljs"} spread ^{:arglists (^{:end-column 12, :end-line 2505, :column 3, :line 2505, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2505, :column 4, :line 2505, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2504, :column 7, :line 2504, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 2505, :column 4, :line 2505, :file "cljs/core.cljs"} arglist]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2505, :column 3, :line 2505, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2505, :column 4, :line 2505, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2504, :column 7, :line 2504, :file "cljs/core.cljs"} spread, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 5457, :column 21, :line 5457, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5457, :column 22, :line 5457, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 5457, :column 26, :line 5457, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5457, :column 30, :line 5457, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 5457, :column 34, :line 5457, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} balance-left ^{:arglists (^{:end-column 40, :end-line 5457, :column 21, :line 5457, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5457, :column 22, :line 5457, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 5457, :column 26, :line 5457, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5457, :column 30, :line 5457, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 5457, :column 34, :line 5457, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 5457, :column 22, :line 5457, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 5457, :column 26, :line 5457, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5457, :column 30, :line 5457, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 5457, :column 34, :line 5457, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5457, :column 21, :line 5457, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5457, :column 22, :line 5457, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 5457, :column 26, :line 5457, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5457, :column 30, :line 5457, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 5457, :column 34, :line 5457, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} balance-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 2051, :column 17, :line 2051, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2051, :column 18, :line 2051, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2051, :column 8, :line 2051, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2051, :column 12, :line 2051, :file "cljs/core.cljs"} rseq ^{:arglists (^{:end-column 23, :end-line 2051, :column 17, :line 2051, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2051, :column 18, :line 2051, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2051, :column 8, :line 2051, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2051, :column 12, :line 2051, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 316, :column 5, :line 316, :file "cljs/core.cljs"} clj [^{:end-column 23, :end-line 2051, :column 18, :line 2051, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2051, :column 17, :line 2051, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2051, :column 18, :line 2051, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2051, :column 8, :line 2051, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2051, :column 12, :line 2051, :file "cljs/core.cljs"} rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7957, :column 3, :line 7957, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7957, :column 4, :line 7957, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 7952, :column 7, :line 7952, :file "cljs/core.cljs"} ex-cause ^{:arglists (^{:end-column 7, :end-line 7957, :column 3, :line 7957, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7957, :column 4, :line 7957, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 7952, :column 7, :line 7952, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7957, :column 4, :line 7957, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7957, :column 3, :line 7957, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7957, :column 4, :line 7957, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 7952, :column 7, :line 7952, :file "cljs/core.cljs"} ex-cause, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 7172, :column 14, :line 7172, :file "cljs/core.cljs"} IReset ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 7172, :column 14, :line 7172, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 7172, :column 14, :line 7172, :file "cljs/core.cljs"} IReset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 232, :column 14, :line 232, :file "cljs/core.cljs"} IEmptyableCollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 35, :end-line 232, :column 14, :line 232, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 232, :column 14, :line 232, :file "cljs/core.cljs"} IEmptyableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4248, :column 27, :line 4248, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4248, :column 28, :line 4248, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4248, :column 30, :line 4248, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4248, :column 8, :line 4248, :file "cljs/core.cljs"} array-map-index-of ^{:arglists (^{:end-column 32, :end-line 4248, :column 27, :line 4248, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4248, :column 28, :line 4248, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4248, :column 30, :line 4248, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4248, :column 8, :line 4248, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 4248, :column 28, :line 4248, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4248, :column 30, :line 4248, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4248, :column 27, :line 4248, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4248, :column 28, :line 4248, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4248, :column 30, :line 4248, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4248, :column 8, :line 4248, :file "cljs/core.cljs"} array-map-index-of, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7948, :column 3, :line 7948, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7948, :column 4, :line 7948, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} ex-message ^{:arglists (^{:end-column 7, :end-line 7948, :column 3, :line 7948, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7948, :column 4, :line 7948, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7948, :column 4, :line 7948, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7948, :column 3, :line 7948, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7948, :column 4, :line 7948, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} ex-message, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 6869, :column 20, :line 6869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6869, :column 21, :line 6869, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 6869, :column 7, :line 6869, :file "cljs/core.cljs"} string-print ^{:arglists (^{:end-column 23, :end-line 6869, :column 20, :line 6869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6869, :column 21, :line 6869, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 6869, :column 7, :line 6869, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 23, :end-line 6869, :column 21, :line 6869, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 6869, :column 20, :line 6869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6869, :column 21, :line 6869, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 6869, :column 7, :line 6869, :file "cljs/core.cljs"} string-print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1611, :column 21, :line 1611, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1611, :column 22, :line 1611, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1611, :column 8, :line 1611, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1611, :column 15, :line 1611, :file "cljs/core.cljs"} float ^{:arglists (^{:end-column 24, :end-line 1611, :column 21, :line 1611, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1611, :column 22, :line 1611, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1611, :column 8, :line 1611, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1611, :column 15, :line 1611, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1611, :column 22, :line 1611, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1611, :column 21, :line 1611, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1611, :column 22, :line 1611, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1611, :column 8, :line 1611, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1611, :column 15, :line 1611, :file "cljs/core.cljs"} float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 7355, :column 1, :line 7355, :file "cljs/core.cljs"} fixture2 ^{:end-column 17, :end-line 7355, :column 1, :line 7355, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 7355, :column 1, :line 7355, :file "cljs/core.cljs"} fixture2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 312, :column 14, :line 312, :file "cljs/core.cljs"} IRecord ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 312, :column 14, :line 312, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 312, :column 14, :line 312, :file "cljs/core.cljs"} IRecord, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7009, :column 3, :line 7009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7009, :column 4, :line 7009, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7009, :column 6, :line 7009, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7007, :column 7, :line 7007, :file "cljs/core.cljs"} pr-str ^{:arglists (^{:end-column 11, :end-line 7009, :column 3, :line 7009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7009, :column 4, :line 7009, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7009, :column 6, :line 7009, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7007, :column 7, :line 7007, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7009, :column 6, :line 7009, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7009, :column 3, :line 7009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7009, :column 4, :line 7009, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7009, :column 6, :line 7009, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7007, :column 7, :line 7007, :file "cljs/core.cljs"} pr-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 3322, :column 32, :line 3322, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3322, :column 33, :line 3322, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3322, :column 8, :line 3322, :file "cljs/core.cljs"} first-array-for-longvec ^{:arglists (^{:end-column 36, :end-line 3322, :column 32, :line 3322, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3322, :column 33, :line 3322, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3322, :column 8, :line 3322, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 3322, :column 33, :line 3322, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 3322, :column 32, :line 3322, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3322, :column 33, :line 3322, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3322, :column 8, :line 3322, :file "cljs/core.cljs"} first-array-for-longvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2514, :column 4, :line 2514, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2515, :column 4, :line 2515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2515, :column 5, :line 2515, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2516, :column 4, :line 2516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2516, :column 5, :line 2516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2516, :column 7, :line 2516, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2524, :column 4, :line 2524, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2524, :column 5, :line 2524, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2524, :column 7, :line 2524, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2524, :column 9, :line 2524, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2524, :column 11, :line 2524, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2512, :column 7, :line 2512, :file "cljs/core.cljs"} concat ^{:arglists (^{:end-column 6, :end-line 2514, :column 4, :line 2514, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2515, :column 4, :line 2515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2515, :column 5, :line 2515, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2516, :column 4, :line 2516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2516, :column 5, :line 2516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2516, :column 7, :line 2516, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2524, :column 4, :line 2524, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2524, :column 5, :line 2524, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2524, :column 7, :line 2524, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2524, :column 9, :line 2524, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2524, :column 11, :line 2524, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2512, :column 7, :line 2512, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2515, :column 5, :line 2515, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2516, :column 5, :line 2516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2516, :column 7, :line 2516, :file "cljs/core.cljs"} y] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2524, :column 5, :line 2524, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2524, :column 7, :line 2524, :file "cljs/core.cljs"} y & ^{:end-column 14, :end-line 2524, :column 11, :line 2524, :file "cljs/core.cljs"} zs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2514, :column 4, :line 2514, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2515, :column 4, :line 2515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2515, :column 5, :line 2515, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2516, :column 4, :line 2516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2516, :column 5, :line 2516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2516, :column 7, :line 2516, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2524, :column 4, :line 2524, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2524, :column 5, :line 2524, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2524, :column 7, :line 2524, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2524, :column 9, :line 2524, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2524, :column 11, :line 2524, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2512, :column 7, :line 2512, :file "cljs/core.cljs"} concat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7691, :column 13, :line 7691, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7691, :column 14, :line 7691, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} -methods ^{:arglists (^{:end-column 17, :end-line 7691, :column 13, :line 7691, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7691, :column 14, :line 7691, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 7691, :column 14, :line 7691, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7691, :column 13, :line 7691, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7691, :column 14, :line 7691, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} -methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 282, :column 14, :line 282, :file "cljs/core.cljs"} IDerefWithTimeout ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 282, :column 14, :line 282, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 282, :column 14, :line 282, :file "cljs/core.cljs"} IDerefWithTimeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 450, :column 4, :line 450, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 450, :column 5, :line 450, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 454, :column 4, :line 454, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 454, :column 5, :line 454, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 454, :column 8, :line 454, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 449, :column 7, :line 449, :file "cljs/core.cljs"} symbol ^{:arglists (^{:end-column 10, :end-line 450, :column 4, :line 450, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 450, :column 5, :line 450, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 454, :column 4, :line 454, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 454, :column 5, :line 454, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 454, :column 8, :line 454, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 449, :column 7, :line 449, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 450, :column 5, :line 450, :file "cljs/core.cljs"} name] ^cljs.core/Symbol [^{:end-column 8, :end-line 454, :column 5, :line 454, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 454, :column 8, :line 454, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 450, :column 4, :line 450, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 450, :column 5, :line 450, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 454, :column 4, :line 454, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 454, :column 5, :line 454, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 454, :column 8, :line 454, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 449, :column 7, :line 449, :file "cljs/core.cljs"} symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2408, :column 3, :line 2408, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2408, :column 4, :line 2408, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2405, :column 7, :line 2405, :file "cljs/core.cljs"} to-array-2d ^{:arglists (^{:end-column 9, :end-line 2408, :column 3, :line 2408, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2408, :column 4, :line 2408, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2405, :column 7, :line 2405, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 9, :end-line 2408, :column 4, :line 2408, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2408, :column 3, :line 2408, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2408, :column 4, :line 2408, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2405, :column 7, :line 2405, :file "cljs/core.cljs"} to-array-2d, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 3634, :column 10, :line 3634, :file "cljs/core.cljs"} Subvec {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 3634, :column 10, :line 3634, :file "cljs/core.cljs"} Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 3634, :column 17, :line 3634, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3634, :column 18, :line 3634, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 3634, :column 23, :line 3634, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 3634, :column 25, :line 3634, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 3634, :column 31, :line 3634, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 3634, :column 45, :line 3634, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 7921, :column 10, :line 7921, :file "cljs/core.cljs"} ExceptionInfo {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 7921, :column 10, :line 7921, :file "cljs/core.cljs"} ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 44, :end-line 7921, :column 24, :line 7921, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7921, :column 25, :line 7921, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 7921, :column 33, :line 7921, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 7921, :column 38, :line 7921, :file "cljs/core.cljs"} cause], :protocols #{}}, ^{:declared true, :end-column 14, :end-line 1673, :column 10, :line 1673, :file "cljs/core.cljs"} mod ^{:arglists (^{:end-column 8, :end-line 1733, :column 3, :line 1733, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1733, :column 6, :line 1733, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1731, :column 7, :line 1731, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1733, :column 6, :line 1733, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1733, :column 3, :line 1733, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1733, :column 6, :line 1733, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1731, :column 7, :line 1731, :file "cljs/core.cljs"} mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} ISet ^{:impls #{cljs.core/PersistentHashSet cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 19, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} ISet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1119, :column 3, :line 1119, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1119, :column 4, :line 1119, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} pop ^{:arglists (^{:end-column 9, :end-line 1119, :column 3, :line 1119, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1119, :column 4, :line 1119, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1119, :column 4, :line 1119, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1119, :column 3, :line 1119, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1119, :column 4, :line 1119, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 336, :column 14, :line 336, :file "cljs/core.cljs"} IPending ^{:impls #{cljs.core/Delay}, :protocol-symbol true, :end-column 23, :end-line 336, :column 14, :line 336, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 336, :column 14, :line 336, :file "cljs/core.cljs"} IPending, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 321, :column 21, :line 321, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 321, :column 4, :line 321, :file "cljs/core.cljs"} -entry-key ^{:arglists (^{:end-column 27, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 321, :column 21, :line 321, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 321, :column 4, :line 321, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 321, :column 21, :line 321, :file "cljs/core.cljs"} entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 321, :column 21, :line 321, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 321, :column 4, :line 321, :file "cljs/core.cljs"} -entry-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 3356, :column 17, :line 3356, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3356, :column 18, :line 3356, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3356, :column 21, :line 3356, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3356, :column 27, :line 3356, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3356, :column 8, :line 3356, :file "cljs/core.cljs"} pop-tail ^{:arglists (^{:end-column 32, :end-line 3356, :column 17, :line 3356, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3356, :column 18, :line 3356, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3356, :column 21, :line 3356, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3356, :column 27, :line 3356, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3356, :column 8, :line 3356, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 3356, :column 18, :line 3356, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3356, :column 21, :line 3356, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3356, :column 27, :line 3356, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 3356, :column 17, :line 3356, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3356, :column 18, :line 3356, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3356, :column 21, :line 3356, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3356, :column 27, :line 3356, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3356, :column 8, :line 3356, :file "cljs/core.cljs"} pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2587, :column 5, :line 2587, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2587, :column 11, :line 2587, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2589, :column 4, :line 2589, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2589, :column 5, :line 2589, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2589, :column 11, :line 2589, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2589, :column 15, :line 2589, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2589, :column 17, :line 2589, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2585, :column 7, :line 2585, :file "cljs/core.cljs"} dissoc! ^{:arglists (^{:end-column 15, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2587, :column 5, :line 2587, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2587, :column 11, :line 2587, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2589, :column 4, :line 2589, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2589, :column 5, :line 2589, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2589, :column 11, :line 2589, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2589, :column 15, :line 2589, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2589, :column 17, :line 2589, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2585, :column 7, :line 2585, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2587, :column 5, :line 2587, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2587, :column 11, :line 2587, :file "cljs/core.cljs"} key] ^^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2589, :column 5, :line 2589, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2589, :column 11, :line 2589, :file "cljs/core.cljs"} key & ^{:end-column 20, :end-line 2589, :column 17, :line 2589, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2587, :column 5, :line 2587, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2587, :column 11, :line 2587, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2589, :column 4, :line 2589, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2589, :column 5, :line 2589, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2589, :column 11, :line 2589, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2589, :column 15, :line 2589, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2589, :column 17, :line 2589, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2585, :column 7, :line 2585, :file "cljs/core.cljs"} dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 6729, :column 4, :line 6729, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6729, :column 5, :line 6729, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6729, :column 7, :line 6729, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6734, :column 4, :line 6734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6734, :column 5, :line 6734, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6734, :column 7, :line 6734, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 6734, :column 12, :line 6734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 6726, :column 7, :line 6726, :file "cljs/core.cljs"} reductions ^{:arglists (^{:end-column 12, :end-line 6729, :column 4, :line 6729, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6729, :column 5, :line 6729, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6729, :column 7, :line 6729, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6734, :column 4, :line 6734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6734, :column 5, :line 6734, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6734, :column 7, :line 6734, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 6734, :column 12, :line 6734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 6726, :column 7, :line 6726, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 6729, :column 5, :line 6729, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6729, :column 7, :line 6729, :file "cljs/core.cljs"} coll] ^cljs.core/Cons [^{:end-column 7, :end-line 6734, :column 5, :line 6734, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6734, :column 7, :line 6734, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 6734, :column 12, :line 6734, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 6729, :column 4, :line 6729, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6729, :column 5, :line 6729, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6729, :column 7, :line 6729, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6734, :column 4, :line 6734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6734, :column 5, :line 6734, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 6734, :column 7, :line 6734, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 6734, :column 12, :line 6734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 6726, :column 7, :line 6726, :file "cljs/core.cljs"} reductions, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 668, :column 16, :line 668, :file "cljs/core.cljs"} indexed? ^{:arglists (^{:end-column 6, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 668, :column 16, :line 668, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 668, :column 16, :line 668, :file "cljs/core.cljs"} indexed?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1514, :column 4, :line 1514, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1514, :column 5, :line 1514, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1515, :column 4, :line 1515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1515, :column 5, :line 1515, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1515, :column 7, :line 1515, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1516, :column 4, :line 1516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1516, :column 5, :line 1516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1516, :column 7, :line 1516, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1516, :column 9, :line 1516, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1516, :column 11, :line 1516, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1511, :column 15, :line 1511, :file "cljs/core.cljs"} - ^{:arglists (^{:end-column 7, :end-line 1514, :column 4, :line 1514, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1514, :column 5, :line 1514, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1515, :column 4, :line 1515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1515, :column 5, :line 1515, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1515, :column 7, :line 1515, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1516, :column 4, :line 1516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1516, :column 5, :line 1516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1516, :column 7, :line 1516, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1516, :column 9, :line 1516, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1516, :column 11, :line 1516, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1511, :column 15, :line 1511, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1514, :column 5, :line 1514, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1515, :column 5, :line 1515, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1515, :column 7, :line 1515, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1516, :column 5, :line 1516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1516, :column 7, :line 1516, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1516, :column 11, :line 1516, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1514, :column 4, :line 1514, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1514, :column 5, :line 1514, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1515, :column 4, :line 1515, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1515, :column 5, :line 1515, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1515, :column 7, :line 1515, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1516, :column 4, :line 1516, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1516, :column 5, :line 1516, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1516, :column 7, :line 1516, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1516, :column 9, :line 1516, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1516, :column 11, :line 1516, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1511, :column 15, :line 1511, :file "cljs/core.cljs"} -, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 298, :column 20, :line 298, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 298, :column 21, :line 298, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 298, :column 23, :line 298, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 298, :column 5, :line 298, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 298, :column 13, :line 298, :file "cljs/core.cljs"} -equiv ^{:arglists (^{:end-column 29, :end-line 298, :column 20, :line 298, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 298, :column 21, :line 298, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 298, :column 23, :line 298, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 298, :column 5, :line 298, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 298, :column 13, :line 298, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 298, :column 21, :line 298, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 298, :column 23, :line 298, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 298, :column 20, :line 298, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 298, :column 21, :line 298, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 298, :column 23, :line 298, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 298, :column 5, :line 298, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 298, :column 13, :line 298, :file "cljs/core.cljs"} -equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr])} ->ArrayNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/ArrayNode [^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr])} ->ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2577, :column 4, :line 2577, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2577, :column 5, :line 2577, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2577, :column 11, :line 2577, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2577, :column 15, :line 2577, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2579, :column 4, :line 2579, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2579, :column 5, :line 2579, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2579, :column 11, :line 2579, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2579, :column 15, :line 2579, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2579, :column 19, :line 2579, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2579, :column 21, :line 2579, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2573, :column 7, :line 2573, :file "cljs/core.cljs"} assoc! ^{:arglists (^{:end-column 19, :end-line 2577, :column 4, :line 2577, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2577, :column 5, :line 2577, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2577, :column 11, :line 2577, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2577, :column 15, :line 2577, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2579, :column 4, :line 2579, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2579, :column 5, :line 2579, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2579, :column 11, :line 2579, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2579, :column 15, :line 2579, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2579, :column 19, :line 2579, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2579, :column 21, :line 2579, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2573, :column 7, :line 2573, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2577, :column 5, :line 2577, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2577, :column 11, :line 2577, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2577, :column 15, :line 2577, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2579, :column 5, :line 2579, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2579, :column 11, :line 2579, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2579, :column 15, :line 2579, :file "cljs/core.cljs"} val & ^{:end-column 25, :end-line 2579, :column 21, :line 2579, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2577, :column 4, :line 2577, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2577, :column 5, :line 2577, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2577, :column 11, :line 2577, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2577, :column 15, :line 2577, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2579, :column 4, :line 2579, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2579, :column 5, :line 2579, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2579, :column 11, :line 2579, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2579, :column 15, :line 2579, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2579, :column 19, :line 2579, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2579, :column 21, :line 2579, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2573, :column 7, :line 2573, :file "cljs/core.cljs"} assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 6471, :column 4, :line 6471, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 6472, :column 4, :line 6472, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6472, :column 5, :line 6472, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6472, :column 7, :line 6472, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 6470, :column 7, :line 6470, :file "cljs/core.cljs"} hash-set ^{:arglists (^{:end-column 6, :end-line 6471, :column 4, :line 6471, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 6472, :column 4, :line 6472, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6472, :column 5, :line 6472, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6472, :column 7, :line 6472, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 6470, :column 7, :line 6470, :file "cljs/core.cljs"} {:arglists (^cljs.core/ISet [] [& ^{:end-column 12, :end-line 6472, :column 7, :line 6472, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6471, :column 4, :line 6471, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 6472, :column 4, :line 6472, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6472, :column 5, :line 6472, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6472, :column 7, :line 6472, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 6470, :column 7, :line 6470, :file "cljs/core.cljs"} hash-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1495, :column 4, :line 1495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1495, :column 5, :line 1495, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1495, :column 7, :line 1495, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1495, :column 12, :line 1495, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} reduce-kv ^{:arglists (^{:end-column 17, :end-line 1495, :column 4, :line 1495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1495, :column 5, :line 1495, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1495, :column 7, :line 1495, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1495, :column 12, :line 1495, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1495, :column 5, :line 1495, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1495, :column 7, :line 1495, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1495, :column 12, :line 1495, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1495, :column 4, :line 1495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1495, :column 5, :line 1495, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1495, :column 7, :line 1495, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1495, :column 12, :line 1495, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} reduce-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 56, :end-line 4555, :column 49, :line 4555, :file "cljs/core.cljs"} reset! ^{:arglists (^{:end-column 16, :end-line 7229, :column 3, :line 7229, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7229, :column 4, :line 7229, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 7229, :column 6, :line 7229, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 14, :end-line 7226, :column 7, :line 7226, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7229, :column 4, :line 7229, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 7229, :column 6, :line 7229, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7229, :column 3, :line 7229, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7229, :column 4, :line 7229, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 7229, :column 6, :line 7229, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 14, :end-line 7226, :column 7, :line 7226, :file "cljs/core.cljs"} reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 1876, :column 14, :line 1876, :file "cljs/core.cljs"} name ^{:arglists (^{:end-column 6, :end-line 6522, :column 3, :line 6522, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6522, :column 4, :line 6522, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 6520, :column 7, :line 6520, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 6522, :column 4, :line 6522, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6522, :column 3, :line 6522, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6522, :column 4, :line 6522, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 6520, :column 7, :line 6520, :file "cljs/core.cljs"} name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash])} ->RedNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/RedNode [^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash])} ->RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3330, :column 28, :line 3330, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3330, :column 29, :line 3330, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3330, :column 32, :line 3330, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3330, :column 8, :line 3330, :file "cljs/core.cljs"} unchecked-array-for ^{:arglists (^{:end-column 34, :end-line 3330, :column 28, :line 3330, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3330, :column 29, :line 3330, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3330, :column 32, :line 3330, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3330, :column 8, :line 3330, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 3330, :column 29, :line 3330, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3330, :column 32, :line 3330, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3330, :column 28, :line 3330, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3330, :column 29, :line 3330, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3330, :column 32, :line 3330, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3330, :column 8, :line 3330, :file "cljs/core.cljs"} unchecked-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 17, :end-line 199, :column 14, :line 199, :file "cljs/core.cljs"} Fn ^{:impls #{^{:end-column 23, :end-line 567, :column 14, :line 567, :file "cljs/core.cljs"} function cljs.core/MetaFn}, :protocol-symbol true, :end-column 17, :end-line 199, :column 14, :line 199, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 17, :end-line 199, :column 14, :line 199, :file "cljs/core.cljs"} Fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 807, :column 3, :line 807, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 805, :column 7, :line 805, :file "cljs/core.cljs"} ffirst ^{:arglists (^{:end-column 9, :end-line 807, :column 3, :line 807, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 805, :column 7, :line 805, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 807, :column 3, :line 807, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 805, :column 7, :line 805, :file "cljs/core.cljs"} ffirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 6476, :column 4, :line 6476, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6476, :column 5, :line 6476, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6476, :column 7, :line 6476, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 6474, :column 7, :line 6474, :file "cljs/core.cljs"} sorted-set ^{:arglists (^{:end-column 12, :end-line 6476, :column 4, :line 6476, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6476, :column 5, :line 6476, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6476, :column 7, :line 6476, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 6474, :column 7, :line 6474, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 12, :end-line 6476, :column 7, :line 6476, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 6476, :column 4, :line 6476, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6476, :column 5, :line 6476, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 6476, :column 7, :line 6476, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 6474, :column 7, :line 6474, :file "cljs/core.cljs"} sorted-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6999, :column 3, :line 6999, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6999, :column 4, :line 6999, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6999, :column 9, :line 6999, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 6996, :column 8, :line 6996, :file "cljs/core.cljs"} pr-with-opts ^{:arglists (^{:end-column 14, :end-line 6999, :column 3, :line 6999, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6999, :column 4, :line 6999, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6999, :column 9, :line 6999, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 6996, :column 8, :line 6996, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 6999, :column 4, :line 6999, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6999, :column 9, :line 6999, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6999, :column 3, :line 6999, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6999, :column 4, :line 6999, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6999, :column 9, :line 6999, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 6996, :column 8, :line 6996, :file "cljs/core.cljs"} pr-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} PersistentTreeMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 5908, :column 28, :line 5908, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 5908, :column 34, :line 5908, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 5908, :column 39, :line 5908, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 5908, :column 43, :line 5908, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 5908, :column 58, :line 5908, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 632, :column 4, :line 632, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 632, :column 5, :line 632, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 632, :column 9, :line 632, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 643, :column 4, :line 643, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 643, :column 5, :line 643, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 643, :column 9, :line 643, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 643, :column 11, :line 643, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 652, :column 4, :line 652, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 652, :column 5, :line 652, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 652, :column 9, :line 652, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 652, :column 11, :line 652, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 652, :column 15, :line 652, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 631, :column 8, :line 631, :file "cljs/core.cljs"} array-reduce ^{:arglists (^{:end-column 11, :end-line 632, :column 4, :line 632, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 632, :column 5, :line 632, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 632, :column 9, :line 632, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 643, :column 4, :line 643, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 643, :column 5, :line 643, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 643, :column 9, :line 643, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 643, :column 11, :line 643, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 652, :column 4, :line 652, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 652, :column 5, :line 652, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 652, :column 9, :line 652, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 652, :column 11, :line 652, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 652, :column 15, :line 652, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 631, :column 8, :line 631, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 632, :column 5, :line 632, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 632, :column 9, :line 632, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 643, :column 5, :line 643, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 643, :column 9, :line 643, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 643, :column 11, :line 643, :file "cljs/core.cljs"} val] [^{:end-column 9, :end-line 652, :column 5, :line 652, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 652, :column 9, :line 652, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 652, :column 11, :line 652, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 652, :column 15, :line 652, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 632, :column 4, :line 632, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 632, :column 5, :line 632, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 632, :column 9, :line 632, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 643, :column 4, :line 643, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 643, :column 5, :line 643, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 643, :column 9, :line 643, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 643, :column 11, :line 643, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 652, :column 4, :line 652, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 652, :column 5, :line 652, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 652, :column 9, :line 652, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 652, :column 11, :line 652, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 652, :column 15, :line 652, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 631, :column 8, :line 631, :file "cljs/core.cljs"} array-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 666, :column 3, :line 666, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 666, :column 4, :line 666, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 664, :column 8, :line 664, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 664, :column 16, :line 664, :file "cljs/core.cljs"} counted? ^{:arglists (^{:end-column 6, :end-line 666, :column 3, :line 666, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 666, :column 4, :line 666, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 664, :column 8, :line 664, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 664, :column 16, :line 664, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 666, :column 4, :line 666, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 666, :column 3, :line 666, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 666, :column 4, :line 666, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 664, :column 8, :line 664, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 664, :column 16, :line 664, :file "cljs/core.cljs"} counted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7039, :column 3, :line 7039, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7039, :column 4, :line 7039, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7039, :column 6, :line 7039, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7037, :column 7, :line 7037, :file "cljs/core.cljs"} println ^{:arglists (^{:end-column 11, :end-line 7039, :column 3, :line 7039, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7039, :column 4, :line 7039, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7039, :column 6, :line 7039, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7037, :column 7, :line 7037, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7039, :column 6, :line 7039, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7039, :column 3, :line 7039, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7039, :column 4, :line 7039, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7039, :column 6, :line 7039, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7037, :column 7, :line 7037, :file "cljs/core.cljs"} println, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3239, :column 3, :line 3239, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3239, :column 4, :line 3239, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3239, :column 6, :line 3239, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3239, :column 7, :line 3239, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3239, :column 9, :line 3239, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3239, :column 11, :line 3239, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3239, :column 15, :line 3239, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3235, :column 7, :line 3235, :file "cljs/core.cljs"} assoc-in ^{:arglists (^{:end-column 17, :end-line 3239, :column 3, :line 3239, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3239, :column 4, :line 3239, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3239, :column 6, :line 3239, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3239, :column 7, :line 3239, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3239, :column 9, :line 3239, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3239, :column 11, :line 3239, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3239, :column 15, :line 3239, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3235, :column 7, :line 3235, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3239, :column 4, :line 3239, :file "cljs/core.cljs"} m p__8389 ^{:end-column 17, :end-line 3239, :column 15, :line 3239, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3239, :column 3, :line 3239, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3239, :column 4, :line 3239, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3239, :column 6, :line 3239, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3239, :column 7, :line 3239, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3239, :column 9, :line 3239, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3239, :column 11, :line 3239, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3239, :column 15, :line 3239, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3235, :column 7, :line 3235, :file "cljs/core.cljs"} assoc-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6256, :column 10, :line 6256, :file "cljs/core.cljs"} PersistentHashSet {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6256, :column 10, :line 6256, :file "cljs/core.cljs"} PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 6256, :column 28, :line 6256, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6256, :column 29, :line 6256, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6256, :column 34, :line 6256, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6256, :column 53, :line 6256, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1794, :column 3, :line 1794, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1794, :column 4, :line 1794, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1794, :column 6, :line 1794, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} bit-test ^{:arglists (^{:end-column 8, :end-line 1794, :column 3, :line 1794, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1794, :column 4, :line 1794, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1794, :column 6, :line 1794, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1794, :column 4, :line 1794, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1794, :column 6, :line 1794, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1794, :column 3, :line 1794, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1794, :column 4, :line 1794, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1794, :column 6, :line 1794, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} bit-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 4542, :column 10, :line 4542, :file "cljs/core.cljs"} TransientHashMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5291, :column 10, :line 5291, :file "cljs/core.cljs"} TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 5295, :column 27, :line 5291, :file "cljs/core.cljs"} [^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val], :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash])} ->PersistentHashMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentHashMap [^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5171, :column 29, :line 5171, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5171, :column 34, :line 5171, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5171, :column 38, :line 5171, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5171, :column 44, :line 5171, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5171, :column 52, :line 5171, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5171, :column 61, :line 5171, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5171, :column 79, :line 5171, :file "cljs/core.cljs"} __hash])} ->PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7175, :column 14, :line 7175, :file "cljs/core.cljs"} ISwap ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7175, :column 14, :line 7175, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7175, :column 14, :line 7175, :file "cljs/core.cljs"} ISwap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 1223, :column 10, :line 1223, :file "cljs/core.cljs"} ChunkedCons {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2311, :column 10, :line 2311, :file "cljs/core.cljs"} ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 2311, :column 22, :line 2311, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2311, :column 23, :line 2311, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2311, :column 29, :line 2311, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2311, :column 34, :line 2311, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2311, :column 49, :line 2311, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 7465, :column 3, :line 7465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7465, :column 4, :line 7465, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} memoize ^{:arglists (^{:end-column 6, :end-line 7465, :column 3, :line 7465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7465, :column 4, :line 7465, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7465, :column 4, :line 7465, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7465, :column 3, :line 7465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7465, :column 4, :line 7465, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} memoize, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7299, :column 3, :line 7299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7299, :column 4, :line 7299, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7299, :column 9, :line 7299, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 7299, :column 11, :line 7299, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7299, :column 13, :line 7299, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 7293, :column 7, :line 7293, :file "cljs/core.cljs"} alter-meta! ^{:arglists (^{:end-column 18, :end-line 7299, :column 3, :line 7299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7299, :column 4, :line 7299, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7299, :column 9, :line 7299, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 7299, :column 11, :line 7299, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7299, :column 13, :line 7299, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 7293, :column 7, :line 7293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7299, :column 4, :line 7299, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7299, :column 9, :line 7299, :file "cljs/core.cljs"} f & ^{:end-column 18, :end-line 7299, :column 13, :line 7299, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7299, :column 3, :line 7299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7299, :column 4, :line 7299, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 7299, :column 9, :line 7299, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 7299, :column 11, :line 7299, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7299, :column 13, :line 7299, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 7293, :column 7, :line 7293, :file "cljs/core.cljs"} alter-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb])} ->StringBufferWriter ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb])} {:arglists (^cljs.core/StringBufferWriter [^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 383, :column 30, :line 383, :file "cljs/core.cljs"} sb])} ->StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1837, :column 22, :line 1837, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1837, :column 23, :line 1837, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1837, :column 16, :line 1837, :file "cljs/core.cljs"} zero? ^{:arglists (^{:end-column 25, :end-line 1837, :column 22, :line 1837, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1837, :column 23, :line 1837, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1837, :column 16, :line 1837, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 1837, :column 23, :line 1837, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1837, :column 22, :line 1837, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1837, :column 23, :line 1837, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1837, :column 16, :line 1837, :file "cljs/core.cljs"} zero?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 3748, :column 27, :line 3748, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3748, :column 28, :line 3748, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 3748, :column 33, :line 3748, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 3748, :column 8, :line 3748, :file "cljs/core.cljs"} tv-ensure-editable ^{:arglists (^{:end-column 38, :end-line 3748, :column 27, :line 3748, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3748, :column 28, :line 3748, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 3748, :column 33, :line 3748, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 3748, :column 8, :line 3748, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 3748, :column 28, :line 3748, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 3748, :column 33, :line 3748, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 3748, :column 27, :line 3748, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3748, :column 28, :line 3748, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 3748, :column 33, :line 3748, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 3748, :column 8, :line 3748, :file "cljs/core.cljs"} tv-ensure-editable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 125, :column 1, :line 121, :file "cljs/core.cljs"} *main-cli-fn* ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 125, :column 1, :line 121, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 125, :column 1, :line 121, :file "cljs/core.cljs"} *main-cli-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 277, :column 18, :line 277, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 277, :column 19, :line 277, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 277, :column 24, :line 277, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 277, :column 26, :line 277, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 277, :column 5, :line 277, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 277, :column 9, :line 277, :file "cljs/core.cljs"} -assoc-n ^{:arglists (^{:end-column 30, :end-line 277, :column 18, :line 277, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 277, :column 19, :line 277, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 277, :column 24, :line 277, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 277, :column 26, :line 277, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 277, :column 5, :line 277, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 277, :column 9, :line 277, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 277, :column 19, :line 277, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 277, :column 24, :line 277, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 277, :column 26, :line 277, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 277, :column 18, :line 277, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 277, :column 19, :line 277, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 277, :column 24, :line 277, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 277, :column 26, :line 277, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 277, :column 5, :line 277, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 277, :column 9, :line 277, :file "cljs/core.cljs"} -assoc-n, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1637, :column 25, :line 1637, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1637, :column 26, :line 1637, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1637, :column 7, :line 1637, :file "cljs/core.cljs"} unchecked-dec-int ^{:arglists (^{:end-column 28, :end-line 1637, :column 25, :line 1637, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1637, :column 26, :line 1637, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1637, :column 7, :line 1637, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1637, :column 26, :line 1637, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1637, :column 25, :line 1637, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1637, :column 26, :line 1637, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1637, :column 7, :line 1637, :file "cljs/core.cljs"} unchecked-dec-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1906, :column 18, :line 1906, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1906, :column 19, :line 1906, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 1906, :column 8, :line 1906, :file "cljs/core.cljs"} hash-imap ^{:arglists (^{:end-column 21, :end-line 1906, :column 18, :line 1906, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1906, :column 19, :line 1906, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 1906, :column 8, :line 1906, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 1906, :column 19, :line 1906, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1906, :column 18, :line 1906, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1906, :column 19, :line 1906, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 1906, :column 8, :line 1906, :file "cljs/core.cljs"} hash-imap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7657, :column 3, :line 7657, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7657, :column 4, :line 7657, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7657, :column 6, :line 7657, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7657, :column 8, :line 7657, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 7656, :column 8, :line 7656, :file "cljs/core.cljs"} dominates ^{:arglists (^{:end-column 21, :end-line 7657, :column 3, :line 7657, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7657, :column 4, :line 7657, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7657, :column 6, :line 7657, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7657, :column 8, :line 7657, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 7656, :column 8, :line 7656, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7657, :column 4, :line 7657, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7657, :column 6, :line 7657, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7657, :column 8, :line 7657, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7657, :column 3, :line 7657, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7657, :column 4, :line 7657, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7657, :column 6, :line 7657, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7657, :column 8, :line 7657, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 7656, :column 8, :line 7656, :file "cljs/core.cljs"} dominates, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2559, :column 3, :line 2559, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2559, :column 4, :line 2559, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} persistent! ^{:arglists (^{:end-column 10, :end-line 2559, :column 3, :line 2559, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2559, :column 4, :line 2559, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2559, :column 4, :line 2559, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2559, :column 3, :line 2559, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2559, :column 4, :line 2559, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn! ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} nnext ^{:arglists (^{:end-column 9, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} nnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 4553, :column 10, :line 4553, :file "cljs/core.cljs"} Box {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 4553, :column 10, :line 4553, :file "cljs/core.cljs"} Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 29, :end-line 4553, :column 14, :line 4553, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val], :protocols #{}}, StringBuffer goog.string.StringBuffer, ^{:arglists (^{:end-column 40, :end-line 5482, :column 22, :line 5482, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5482, :column 23, :line 5482, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 5482, :column 27, :line 5482, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 5482, :column 31, :line 5482, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5482, :column 36, :line 5482, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 5482, :column 8, :line 5482, :file "cljs/core.cljs"} balance-right ^{:arglists (^{:end-column 40, :end-line 5482, :column 22, :line 5482, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5482, :column 23, :line 5482, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 5482, :column 27, :line 5482, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 5482, :column 31, :line 5482, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5482, :column 36, :line 5482, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 5482, :column 8, :line 5482, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 5482, :column 23, :line 5482, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 5482, :column 27, :line 5482, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 5482, :column 31, :line 5482, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5482, :column 36, :line 5482, :file "cljs/core.cljs"} ins]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5482, :column 22, :line 5482, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 5482, :column 23, :line 5482, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 5482, :column 27, :line 5482, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 5482, :column 31, :line 5482, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5482, :column 36, :line 5482, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 5482, :column 8, :line 5482, :file "cljs/core.cljs"} balance-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 7694, :column 30, :line 7694, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7694, :column 31, :line 7694, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 7694, :column 36, :line 7694, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 7694, :column 8, :line 7694, :file "cljs/core.cljs"} throw-no-method-error ^{:arglists (^{:end-column 49, :end-line 7694, :column 30, :line 7694, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7694, :column 31, :line 7694, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 7694, :column 36, :line 7694, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 7694, :column 8, :line 7694, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 36, :end-line 7694, :column 31, :line 7694, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 7694, :column 36, :line 7694, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 7694, :column 30, :line 7694, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7694, :column 31, :line 7694, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 7694, :column 36, :line 7694, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 7694, :column 8, :line 7694, :file "cljs/core.cljs"} throw-no-method-error, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7328, :column 3, :line 7328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7328, :column 4, :line 7328, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7328, :column 9, :line 7328, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 7328, :column 13, :line 7328, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} add-watch ^{:arglists (^{:end-column 15, :end-line 7328, :column 3, :line 7328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7328, :column 4, :line 7328, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7328, :column 9, :line 7328, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 7328, :column 13, :line 7328, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7328, :column 4, :line 7328, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7328, :column 9, :line 7328, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 7328, :column 13, :line 7328, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7328, :column 3, :line 7328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7328, :column 4, :line 7328, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7328, :column 9, :line 7328, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 7328, :column 13, :line 7328, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 2707, :column 3, :line 2707, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2707, :column 4, :line 2707, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2707, :column 9, :line 2707, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 2704, :column 8, :line 2704, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2704, :column 16, :line 2704, :file "cljs/core.cljs"} not-every? ^{:arglists (^{:end-column 14, :end-line 2707, :column 3, :line 2707, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2707, :column 4, :line 2707, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2707, :column 9, :line 2707, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 2704, :column 8, :line 2704, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2704, :column 16, :line 2704, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 2707, :column 4, :line 2707, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2707, :column 9, :line 2707, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 2707, :column 3, :line 2707, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2707, :column 4, :line 2707, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2707, :column 9, :line 2707, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 2704, :column 8, :line 2704, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2704, :column 16, :line 2704, :file "cljs/core.cljs"} not-every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1744, :column 3, :line 1744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1744, :column 4, :line 1744, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1744, :column 6, :line 1744, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1742, :column 7, :line 1742, :file "cljs/core.cljs"} rem ^{:arglists (^{:end-column 8, :end-line 1744, :column 3, :line 1744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1744, :column 4, :line 1744, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1744, :column 6, :line 1744, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1742, :column 7, :line 1742, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1744, :column 4, :line 1744, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1744, :column 6, :line 1744, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1744, :column 3, :line 1744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1744, :column 4, :line 1744, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1744, :column 6, :line 1744, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1742, :column 7, :line 1742, :file "cljs/core.cljs"} rem, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 6972, :column 24, :line 6972, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6972, :column 25, :line 6972, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 6972, :column 30, :line 6972, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 6972, :column 8, :line 6972, :file "cljs/core.cljs"} pr-sb-with-opts ^{:arglists (^{:end-column 35, :end-line 6972, :column 24, :line 6972, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6972, :column 25, :line 6972, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 6972, :column 30, :line 6972, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 6972, :column 8, :line 6972, :file "cljs/core.cljs"} {:arglists (^/ [^{:end-column 30, :end-line 6972, :column 25, :line 6972, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 6972, :column 30, :line 6972, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 6972, :column 24, :line 6972, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6972, :column 25, :line 6972, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 6972, :column 30, :line 6972, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 6972, :column 8, :line 6972, :file "cljs/core.cljs"} pr-sb-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 4616, :column 10, :line 4616, :file "cljs/core.cljs"} BitmapIndexedNode {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 4616, :column 10, :line 4616, :file "cljs/core.cljs"} BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4616, :column 28, :line 4616, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4616, :column 29, :line 4616, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 4616, :column 44, :line 4616, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 4616, :column 61, :line 4616, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash])} ->NodeSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/NodeSeq [^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5049, :column 19, :line 5049, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5049, :column 24, :line 5049, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5049, :column 30, :line 5049, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5049, :column 32, :line 5049, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5049, :column 44, :line 5049, :file "cljs/core.cljs"} __hash])} ->NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 2714, :column 3, :line 2714, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2714, :column 4, :line 2714, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2714, :column 9, :line 2714, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 2709, :column 7, :line 2709, :file "cljs/core.cljs"} some ^{:arglists (^{:end-column 14, :end-line 2714, :column 3, :line 2714, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2714, :column 4, :line 2714, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2714, :column 9, :line 2714, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 2709, :column 7, :line 2709, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2714, :column 4, :line 2714, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2714, :column 9, :line 2714, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 2714, :column 3, :line 2714, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2714, :column 4, :line 2714, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2714, :column 9, :line 2714, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 2709, :column 7, :line 2709, :file "cljs/core.cljs"} some, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} INamed ^{:impls #{cljs.core/Keyword cljs.core/Symbol}, :protocol-symbol true, :end-column 21, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} INamed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val])} ->Box ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val])} {:arglists (^cljs.core/Box [^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 4553, :column 25, :line 4553, :file "cljs/core.cljs"} val])} ->Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 291, :column 14, :line 291, :file "cljs/core.cljs"} IReduce ^{:impls #{cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ArrayChunk cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 291, :column 14, :line 291, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 291, :column 14, :line 291, :file "cljs/core.cljs"} IReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3004, :column 3, :line 3004, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3004, :column 4, :line 3004, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3004, :column 6, :line 3004, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.", :end-column 12, :end-line 3002, :column 7, :line 3002, :file "cljs/core.cljs"} drop ^{:arglists (^{:end-column 11, :end-line 3004, :column 3, :line 3004, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3004, :column 4, :line 3004, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3004, :column 6, :line 3004, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.", :end-column 12, :end-line 3002, :column 7, :line 3002, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3004, :column 4, :line 3004, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3004, :column 6, :line 3004, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3004, :column 3, :line 3004, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3004, :column 4, :line 3004, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3004, :column 6, :line 3004, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.", :end-column 12, :end-line 3002, :column 7, :line 3002, :file "cljs/core.cljs"} drop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1230, :column 4, :line 1230, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1232, :column 7, :line 1232, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1229, :column 7, :line 1229, :file "cljs/core.cljs"} js-obj ^{:arglists (^{:end-column 6, :end-line 1230, :column 4, :line 1230, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1232, :column 7, :line 1232, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1229, :column 7, :line 1229, :file "cljs/core.cljs"} {:arglists (^object [] [& ^{:end-column 15, :end-line 1232, :column 7, :line 1232, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1230, :column 4, :line 1230, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1232, :column 7, :line 1232, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1229, :column 7, :line 1229, :file "cljs/core.cljs"} js-obj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 347, :column 14, :line 347, :file "cljs/core.cljs"} ITransientCollection ^{:impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientHashSet}, :protocol-symbol true, :end-column 35, :end-line 347, :column 14, :line 347, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 347, :column 14, :line 347, :file "cljs/core.cljs"} ITransientCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :end-column 15, :end-line 7178, :column 10, :line 7178, :file "cljs/core.cljs"} Atom {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :end-column 15, :end-line 7178, :column 10, :line 7178, :file "cljs/core.cljs"} Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 7178, :column 15, :line 7178, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7178, :column 16, :line 7178, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 7178, :column 22, :line 7178, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 7178, :column 27, :line 7178, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 7178, :column 37, :line 7178, :file "cljs/core.cljs"} watches], :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 12, :end-line 908, :column 4, :line 908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 908, :column 5, :line 908, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 908, :column 10, :line 908, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 936, :column 4, :line 936, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 936, :column 5, :line 936, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 936, :column 10, :line 936, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 936, :column 12, :line 936, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 903, :column 7, :line 903, :file "cljs/core.cljs"} nth ^{:arglists (^{:end-column 12, :end-line 908, :column 4, :line 908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 908, :column 5, :line 908, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 908, :column 10, :line 908, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 936, :column 4, :line 936, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 936, :column 5, :line 936, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 936, :column 10, :line 936, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 936, :column 12, :line 936, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 903, :column 7, :line 903, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 908, :column 5, :line 908, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 908, :column 10, :line 908, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 936, :column 5, :line 936, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 936, :column 10, :line 936, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 936, :column 12, :line 936, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 908, :column 4, :line 908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 908, :column 5, :line 908, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 908, :column 10, :line 908, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 936, :column 4, :line 936, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 936, :column 5, :line 936, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 936, :column 10, :line 936, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 936, :column 12, :line 936, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 903, :column 7, :line 903, :file "cljs/core.cljs"} nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1206, :column 3, :line 1206, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1206, :column 4, :line 1206, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1204, :column 8, :line 1204, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1204, :column 16, :line 1204, :file "cljs/core.cljs"} sorted? ^{:arglists (^{:end-column 6, :end-line 1206, :column 3, :line 1206, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1206, :column 4, :line 1206, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1204, :column 8, :line 1204, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1204, :column 16, :line 1204, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1206, :column 4, :line 1206, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1206, :column 3, :line 1206, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1206, :column 4, :line 1206, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1204, :column 8, :line 1204, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1204, :column 16, :line 1204, :file "cljs/core.cljs"} sorted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil? ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3045, :column 3, :line 3045, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3045, :column 4, :line 3045, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3045, :column 6, :line 3045, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3043, :column 7, :line 3043, :file "cljs/core.cljs"} split-at ^{:arglists (^{:end-column 11, :end-line 3045, :column 3, :line 3045, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3045, :column 4, :line 3045, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3045, :column 6, :line 3045, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3043, :column 7, :line 3043, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 6, :end-line 3045, :column 4, :line 3045, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3045, :column 6, :line 3045, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3045, :column 3, :line 3045, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3045, :column 4, :line 3045, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3045, :column 6, :line 3045, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3043, :column 7, :line 3043, :file "cljs/core.cljs"} split-at, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 6254, :column 10, :line 6254, :file "cljs/core.cljs"} TransientHashSet {:op :type, :name ^{:skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 6334, :column 10, :line 6334, :file "cljs/core.cljs"} TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 6334, :column 27, :line 6334, :file "cljs/core.cljs"} [^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map], :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, ^{:arglists (^{:end-column 35, :end-line 4263, :column 28, :line 4263, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4263, :column 29, :line 4263, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4263, :column 31, :line 4263, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4263, :column 33, :line 4263, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4263, :column 8, :line 4263, :file "cljs/core.cljs"} array-map-extend-kv ^{:arglists (^{:end-column 35, :end-line 4263, :column 28, :line 4263, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4263, :column 29, :line 4263, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4263, :column 31, :line 4263, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4263, :column 33, :line 4263, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4263, :column 8, :line 4263, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 31, :end-line 4263, :column 29, :line 4263, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4263, :column 31, :line 4263, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4263, :column 33, :line 4263, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4263, :column 28, :line 4263, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4263, :column 29, :line 4263, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4263, :column 31, :line 4263, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4263, :column 33, :line 4263, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4263, :column 8, :line 4263, :file "cljs/core.cljs"} array-map-extend-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6989, :column 3, :line 6989, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6989, :column 4, :line 6989, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6989, :column 9, :line 6989, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 6987, :column 7, :line 6987, :file "cljs/core.cljs"} prn-str-with-opts ^{:arglists (^{:end-column 14, :end-line 6989, :column 3, :line 6989, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6989, :column 4, :line 6989, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6989, :column 9, :line 6989, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 6987, :column 7, :line 6987, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 6989, :column 4, :line 6989, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6989, :column 9, :line 6989, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6989, :column 3, :line 6989, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6989, :column 4, :line 6989, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 6989, :column 9, :line 6989, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 6987, :column 7, :line 6987, :file "cljs/core.cljs"} prn-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6240, :column 3, :line 6240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6240, :column 4, :line 6240, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6240, :column 8, :line 6240, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6238, :column 7, :line 6238, :file "cljs/core.cljs"} select-keys ^{:arglists (^{:end-column 15, :end-line 6240, :column 3, :line 6240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6240, :column 4, :line 6240, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6240, :column 8, :line 6240, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6238, :column 7, :line 6238, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap [^{:end-column 8, :end-line 6240, :column 4, :line 6240, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6240, :column 8, :line 6240, :file "cljs/core.cljs"} keyseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6240, :column 3, :line 6240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6240, :column 4, :line 6240, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6240, :column 8, :line 6240, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6238, :column 7, :line 6238, :file "cljs/core.cljs"} select-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1763, :column 3, :line 1763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1763, :column 6, :line 1763, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1761, :column 7, :line 1761, :file "cljs/core.cljs"} bit-and ^{:arglists (^{:end-column 8, :end-line 1763, :column 3, :line 1763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1763, :column 6, :line 1763, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1761, :column 7, :line 1761, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1763, :column 6, :line 1763, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1763, :column 3, :line 1763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1763, :column 6, :line 1763, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1761, :column 7, :line 1761, :file "cljs/core.cljs"} bit-and, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2496, :column 22, :line 2496, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2496, :column 23, :line 2496, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2496, :column 25, :line 2496, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2496, :column 8, :line 2496, :file "cljs/core.cljs"} bounded-count ^{:arglists (^{:end-column 27, :end-line 2496, :column 22, :line 2496, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2496, :column 23, :line 2496, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2496, :column 25, :line 2496, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2496, :column 8, :line 2496, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2496, :column 23, :line 2496, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2496, :column 25, :line 2496, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2496, :column 22, :line 2496, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2496, :column 23, :line 2496, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2496, :column 25, :line 2496, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2496, :column 8, :line 2496, :file "cljs/core.cljs"} bounded-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 25, :end-line 7340, :column 1, :line 7340, :file "cljs/core.cljs"} gensym_counter ^{:end-column 25, :end-line 7340, :column 1, :line 7340, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 25, :end-line 7340, :column 1, :line 7340, :file "cljs/core.cljs"} gensym_counter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2540, :column 4, :line 2540, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2540, :column 5, :line 2540, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2541, :column 4, :line 2541, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2541, :column 5, :line 2541, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2541, :column 7, :line 2541, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2542, :column 4, :line 2542, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2542, :column 5, :line 2542, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2542, :column 7, :line 2542, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2542, :column 9, :line 2542, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2543, :column 4, :line 2543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2543, :column 5, :line 2543, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2543, :column 7, :line 2543, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2543, :column 9, :line 2543, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2543, :column 11, :line 2543, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2544, :column 4, :line 2544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2544, :column 5, :line 2544, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2544, :column 7, :line 2544, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2544, :column 9, :line 2544, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2544, :column 11, :line 2544, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2544, :column 13, :line 2544, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2544, :column 15, :line 2544, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2537, :column 7, :line 2537, :file "cljs/core.cljs"} list* ^{:arglists (^{:end-column 10, :end-line 2540, :column 4, :line 2540, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2540, :column 5, :line 2540, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2541, :column 4, :line 2541, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2541, :column 5, :line 2541, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2541, :column 7, :line 2541, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2542, :column 4, :line 2542, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2542, :column 5, :line 2542, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2542, :column 7, :line 2542, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2542, :column 9, :line 2542, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2543, :column 4, :line 2543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2543, :column 5, :line 2543, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2543, :column 7, :line 2543, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2543, :column 9, :line 2543, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2543, :column 11, :line 2543, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2544, :column 4, :line 2544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2544, :column 5, :line 2544, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2544, :column 7, :line 2544, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2544, :column 9, :line 2544, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2544, :column 11, :line 2544, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2544, :column 13, :line 2544, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2544, :column 15, :line 2544, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2537, :column 7, :line 2537, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 10, :end-line 2540, :column 5, :line 2540, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2541, :column 5, :line 2541, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2541, :column 7, :line 2541, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2542, :column 5, :line 2542, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2542, :column 7, :line 2542, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2542, :column 9, :line 2542, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2543, :column 5, :line 2543, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2543, :column 7, :line 2543, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2543, :column 9, :line 2543, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2543, :column 11, :line 2543, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2544, :column 5, :line 2544, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2544, :column 7, :line 2544, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2544, :column 9, :line 2544, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2544, :column 11, :line 2544, :file "cljs/core.cljs"} d & ^{:end-column 20, :end-line 2544, :column 15, :line 2544, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2540, :column 4, :line 2540, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2540, :column 5, :line 2540, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2541, :column 4, :line 2541, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2541, :column 5, :line 2541, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2541, :column 7, :line 2541, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2542, :column 4, :line 2542, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2542, :column 5, :line 2542, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2542, :column 7, :line 2542, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2542, :column 9, :line 2542, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2543, :column 4, :line 2543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2543, :column 5, :line 2543, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2543, :column 7, :line 2543, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2543, :column 9, :line 2543, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2543, :column 11, :line 2543, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2544, :column 4, :line 2544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2544, :column 5, :line 2544, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2544, :column 7, :line 2544, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2544, :column 9, :line 2544, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2544, :column 11, :line 2544, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2544, :column 13, :line 2544, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2544, :column 15, :line 2544, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2537, :column 7, :line 2537, :file "cljs/core.cljs"} list*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash])} ->Keyword ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash])} {:arglists (^cljs.core/Keyword [^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash])} ->Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3250, :column 5, :line 3250, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3250, :column 7, :line 3250, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3250, :column 8, :line 3250, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3250, :column 10, :line 3250, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3250, :column 12, :line 3250, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3250, :column 16, :line 3250, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3254, :column 4, :line 3254, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3254, :column 5, :line 3254, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3254, :column 7, :line 3254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3254, :column 8, :line 3254, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3254, :column 10, :line 3254, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3254, :column 12, :line 3254, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3254, :column 16, :line 3254, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3254, :column 18, :line 3254, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3258, :column 8, :line 3258, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3258, :column 10, :line 3258, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3258, :column 12, :line 3258, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3258, :column 16, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3258, :column 18, :line 3258, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3258, :column 20, :line 3258, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3262, :column 4, :line 3262, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3262, :column 5, :line 3262, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3262, :column 8, :line 3262, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3262, :column 10, :line 3262, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3262, :column 12, :line 3262, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3262, :column 16, :line 3262, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3262, :column 18, :line 3262, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3262, :column 20, :line 3262, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3262, :column 22, :line 3262, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3266, :column 4, :line 3266, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3266, :column 5, :line 3266, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3266, :column 8, :line 3266, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3266, :column 10, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3266, :column 12, :line 3266, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3266, :column 16, :line 3266, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3266, :column 18, :line 3266, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3266, :column 20, :line 3266, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3266, :column 22, :line 3266, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3266, :column 24, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3266, :column 26, :line 3266, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} update-in ^{:arglists (^{:end-column 18, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3250, :column 5, :line 3250, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3250, :column 7, :line 3250, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3250, :column 8, :line 3250, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3250, :column 10, :line 3250, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3250, :column 12, :line 3250, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3250, :column 16, :line 3250, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3254, :column 4, :line 3254, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3254, :column 5, :line 3254, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3254, :column 7, :line 3254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3254, :column 8, :line 3254, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3254, :column 10, :line 3254, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3254, :column 12, :line 3254, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3254, :column 16, :line 3254, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3254, :column 18, :line 3254, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3258, :column 8, :line 3258, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3258, :column 10, :line 3258, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3258, :column 12, :line 3258, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3258, :column 16, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3258, :column 18, :line 3258, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3258, :column 20, :line 3258, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3262, :column 4, :line 3262, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3262, :column 5, :line 3262, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3262, :column 8, :line 3262, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3262, :column 10, :line 3262, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3262, :column 12, :line 3262, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3262, :column 16, :line 3262, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3262, :column 18, :line 3262, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3262, :column 20, :line 3262, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3262, :column 22, :line 3262, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3266, :column 4, :line 3266, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3266, :column 5, :line 3266, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3266, :column 8, :line 3266, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3266, :column 10, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3266, :column 12, :line 3266, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3266, :column 16, :line 3266, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3266, :column 18, :line 3266, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3266, :column 20, :line 3266, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3266, :column 22, :line 3266, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3266, :column 24, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3266, :column 26, :line 3266, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3250, :column 5, :line 3250, :file "cljs/core.cljs"} m p__8392 ^{:end-column 18, :end-line 3250, :column 16, :line 3250, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3254, :column 5, :line 3254, :file "cljs/core.cljs"} m p__8395 ^{:end-column 18, :end-line 3254, :column 16, :line 3254, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3254, :column 18, :line 3254, :file "cljs/core.cljs"} a] [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} m p__8398 ^{:end-column 18, :end-line 3258, :column 16, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3258, :column 18, :line 3258, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3258, :column 20, :line 3258, :file "cljs/core.cljs"} b] [^{:end-column 7, :end-line 3262, :column 5, :line 3262, :file "cljs/core.cljs"} m p__8401 ^{:end-column 18, :end-line 3262, :column 16, :line 3262, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3262, :column 18, :line 3262, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3262, :column 20, :line 3262, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3262, :column 22, :line 3262, :file "cljs/core.cljs"} c] [^{:end-column 7, :end-line 3266, :column 5, :line 3266, :file "cljs/core.cljs"} m p__8404 ^{:end-column 18, :end-line 3266, :column 16, :line 3266, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3266, :column 18, :line 3266, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3266, :column 20, :line 3266, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3266, :column 22, :line 3266, :file "cljs/core.cljs"} c & ^{:end-column 31, :end-line 3266, :column 26, :line 3266, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3250, :column 5, :line 3250, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3250, :column 7, :line 3250, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3250, :column 8, :line 3250, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3250, :column 10, :line 3250, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3250, :column 12, :line 3250, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3250, :column 16, :line 3250, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3254, :column 4, :line 3254, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3254, :column 5, :line 3254, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3254, :column 7, :line 3254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3254, :column 8, :line 3254, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3254, :column 10, :line 3254, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3254, :column 12, :line 3254, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3254, :column 16, :line 3254, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3254, :column 18, :line 3254, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3258, :column 8, :line 3258, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3258, :column 10, :line 3258, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3258, :column 12, :line 3258, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3258, :column 16, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3258, :column 18, :line 3258, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3258, :column 20, :line 3258, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3262, :column 4, :line 3262, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3262, :column 5, :line 3262, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3262, :column 8, :line 3262, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3262, :column 10, :line 3262, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3262, :column 12, :line 3262, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3262, :column 16, :line 3262, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3262, :column 18, :line 3262, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3262, :column 20, :line 3262, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3262, :column 22, :line 3262, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3266, :column 4, :line 3266, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3266, :column 5, :line 3266, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3266, :column 8, :line 3266, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3266, :column 10, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3266, :column 12, :line 3266, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3266, :column 16, :line 3266, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3266, :column 18, :line 3266, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3266, :column 20, :line 3266, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3266, :column 22, :line 3266, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3266, :column 24, :line 3266, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3266, :column 26, :line 3266, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} update-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 7885, :column 3, :line 7885, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7885, :column 4, :line 7885, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 7885, :column 12, :line 7885, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 7885, :column 27, :line 7885, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 7882, :column 7, :line 7882, :file "cljs/core.cljs"} prefer-method ^{:arglists (^{:end-column 42, :end-line 7885, :column 3, :line 7885, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7885, :column 4, :line 7885, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 7885, :column 12, :line 7885, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 7885, :column 27, :line 7885, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 7882, :column 7, :line 7882, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7885, :column 4, :line 7885, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 7885, :column 12, :line 7885, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 7885, :column 27, :line 7885, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 7885, :column 3, :line 7885, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7885, :column 4, :line 7885, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 7885, :column 12, :line 7885, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 7885, :column 27, :line 7885, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 7882, :column 7, :line 7882, :file "cljs/core.cljs"} prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 408, :column 20, :line 408, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 408, :column 21, :line 408, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 408, :column 8, :line 408, :file "cljs/core.cljs"} hash-symbol ^{:arglists (^{:end-column 25, :end-line 408, :column 20, :line 408, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 408, :column 21, :line 408, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 408, :column 8, :line 408, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 408, :column 21, :line 408, :file "cljs/core.cljs"} sym]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 408, :column 20, :line 408, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 408, :column 21, :line 408, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 408, :column 8, :line 408, :file "cljs/core.cljs"} hash-symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 4588, :column 4, :line 4588, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4588, :column 5, :line 4588, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4588, :column 11, :line 4588, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4588, :column 16, :line 4588, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4588, :column 18, :line 4588, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 4592, :column 4, :line 4592, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4592, :column 5, :line 4592, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4592, :column 11, :line 4592, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4592, :column 16, :line 4592, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4592, :column 18, :line 4592, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 4592, :column 20, :line 4592, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 4592, :column 22, :line 4592, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 4587, :column 8, :line 4587, :file "cljs/core.cljs"} edit-and-set ^{:arglists (^{:end-column 20, :end-line 4588, :column 4, :line 4588, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4588, :column 5, :line 4588, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4588, :column 11, :line 4588, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4588, :column 16, :line 4588, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4588, :column 18, :line 4588, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 4592, :column 4, :line 4592, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4592, :column 5, :line 4592, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4592, :column 11, :line 4592, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4592, :column 16, :line 4592, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4592, :column 18, :line 4592, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 4592, :column 20, :line 4592, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 4592, :column 22, :line 4592, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 4587, :column 8, :line 4587, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 4588, :column 5, :line 4588, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4588, :column 11, :line 4588, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4588, :column 16, :line 4588, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4588, :column 18, :line 4588, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 4592, :column 5, :line 4592, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4592, :column 11, :line 4592, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4592, :column 16, :line 4592, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4592, :column 18, :line 4592, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 4592, :column 20, :line 4592, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 4592, :column 22, :line 4592, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 4588, :column 4, :line 4588, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4588, :column 5, :line 4588, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4588, :column 11, :line 4588, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4588, :column 16, :line 4588, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4588, :column 18, :line 4588, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 4592, :column 4, :line 4592, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 4592, :column 5, :line 4592, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 4592, :column 11, :line 4592, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 4592, :column 16, :line 4592, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4592, :column 18, :line 4592, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 4592, :column 20, :line 4592, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 4592, :column 22, :line 4592, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 4587, :column 8, :line 4587, :file "cljs/core.cljs"} edit-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash])} ->PersistentArrayMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentArrayMap [^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash])} ->PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 76, :column 10, :line 76, :file "cljs/core.cljs"} instance? ^{:arglists (^{:end-column 31, :end-line 402, :column 26, :line 402, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 402, :column 27, :line 402, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 402, :column 29, :line 402, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 402, :column 8, :line 402, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 402, :column 16, :line 402, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 29, :end-line 402, :column 27, :line 402, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 402, :column 29, :line 402, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 402, :column 26, :line 402, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 402, :column 27, :line 402, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 402, :column 29, :line 402, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 402, :column 8, :line 402, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 402, :column 16, :line 402, :file "cljs/core.cljs"} instance?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6822, :column 3, :line 6822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6822, :column 4, :line 6822, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6822, :column 7, :line 6822, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 6817, :column 7, :line 6817, :file "cljs/core.cljs"} re-find ^{:arglists (^{:end-column 9, :end-line 6822, :column 3, :line 6822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6822, :column 4, :line 6822, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6822, :column 7, :line 6822, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 6817, :column 7, :line 6817, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6822, :column 4, :line 6822, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6822, :column 7, :line 6822, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6822, :column 3, :line 6822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6822, :column 4, :line 6822, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6822, :column 7, :line 6822, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 6817, :column 7, :line 6817, :file "cljs/core.cljs"} re-find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 17, :end-line 6884, :column 1, :line 6876, :file "cljs/core.cljs"} char-escapes ^{:private true, :end-column 17, :end-line 6884, :column 1, :line 6876, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 17, :end-line 6884, :column 1, :line 6876, :file "cljs/core.cljs"} char-escapes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 1904, :column 14, :line 1904, :file "cljs/core.cljs"} val ^{:arglists (^{:end-column 14, :end-line 6211, :column 3, :line 6211, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6211, :column 4, :line 6211, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 6209, :column 7, :line 6209, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6211, :column 4, :line 6211, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6211, :column 3, :line 6211, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6211, :column 4, :line 6211, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 6209, :column 7, :line 6209, :file "cljs/core.cljs"} val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1622, :column 4, :line 1622, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1623, :column 4, :line 1623, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1623, :column 5, :line 1623, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1624, :column 4, :line 1624, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1624, :column 5, :line 1624, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1624, :column 7, :line 1624, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1625, :column 4, :line 1625, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1625, :column 5, :line 1625, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1625, :column 7, :line 1625, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1625, :column 9, :line 1625, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1625, :column 11, :line 1625, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1620, :column 8, :line 1620, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1620, :column 15, :line 1620, :file "cljs/core.cljs"} unchecked-add ^{:arglists (^{:end-column 6, :end-line 1622, :column 4, :line 1622, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1623, :column 4, :line 1623, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1623, :column 5, :line 1623, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1624, :column 4, :line 1624, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1624, :column 5, :line 1624, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1624, :column 7, :line 1624, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1625, :column 4, :line 1625, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1625, :column 5, :line 1625, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1625, :column 7, :line 1625, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1625, :column 9, :line 1625, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1625, :column 11, :line 1625, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1620, :column 8, :line 1620, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1620, :column 15, :line 1620, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1623, :column 5, :line 1623, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1624, :column 5, :line 1624, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1624, :column 7, :line 1624, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1625, :column 5, :line 1625, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1625, :column 7, :line 1625, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1625, :column 11, :line 1625, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1622, :column 4, :line 1622, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1623, :column 4, :line 1623, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1623, :column 5, :line 1623, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1624, :column 4, :line 1624, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1624, :column 5, :line 1624, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1624, :column 7, :line 1624, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1625, :column 4, :line 1625, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1625, :column 5, :line 1625, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1625, :column 7, :line 1625, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1625, :column 9, :line 1625, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1625, :column 11, :line 1625, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1620, :column 8, :line 1620, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1620, :column 15, :line 1620, :file "cljs/core.cljs"} unchecked-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1384, :column 3, :line 1384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1384, :column 4, :line 1384, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1381, :column 17, :line 1381, :file "cljs/core.cljs"} fn->comparator ^{:arglists (^{:end-column 6, :end-line 1384, :column 3, :line 1384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1384, :column 4, :line 1384, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1381, :column 17, :line 1381, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 1384, :column 4, :line 1384, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1384, :column 3, :line 1384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1384, :column 4, :line 1384, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1381, :column 17, :line 1381, :file "cljs/core.cljs"} fn->comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 565, :column 10, :line 565, :file "cljs/core.cljs"} with-meta ^{:arglists (^{:end-column 11, :end-line 1095, :column 3, :line 1095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1095, :column 4, :line 1095, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1095, :column 6, :line 1095, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1092, :column 7, :line 1092, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1095, :column 4, :line 1095, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1095, :column 6, :line 1095, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1095, :column 3, :line 1095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1095, :column 4, :line 1095, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1095, :column 6, :line 1095, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1092, :column 7, :line 1092, :file "cljs/core.cljs"} with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 127, :column 12, :line 127, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 127, :column 13, :line 127, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 127, :column 7, :line 127, :file "cljs/core.cljs"} type ^{:arglists (^{:end-column 15, :end-line 127, :column 12, :line 127, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 127, :column 13, :line 127, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 127, :column 7, :line 127, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 127, :column 13, :line 127, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 127, :column 12, :line 127, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 127, :column 13, :line 127, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 127, :column 7, :line 127, :file "cljs/core.cljs"} type, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical? ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 379, :column 23, :line 379, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 379, :column 24, :line 379, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 379, :column 5, :line 379, :file "cljs/core.cljs"} string, :end-column 23, :end-line 379, :column 12, :line 379, :file "cljs/core.cljs"} -namespace ^{:arglists (^{:end-column 26, :end-line 379, :column 23, :line 379, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 379, :column 24, :line 379, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 379, :column 5, :line 379, :file "cljs/core.cljs"} string, :end-column 23, :end-line 379, :column 12, :line 379, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 379, :column 24, :line 379, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 379, :column 23, :line 379, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 379, :column 24, :line 379, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 379, :column 5, :line 379, :file "cljs/core.cljs"} string, :end-column 23, :end-line 379, :column 12, :line 379, :file "cljs/core.cljs"} -namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1643, :column 4, :line 1643, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1643, :column 5, :line 1643, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1644, :column 4, :line 1644, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1644, :column 5, :line 1644, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1644, :column 7, :line 1644, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1645, :column 9, :line 1645, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1645, :column 11, :line 1645, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1640, :column 8, :line 1640, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1640, :column 15, :line 1640, :file "cljs/core.cljs"} unchecked-divide-int ^{:arglists (^{:end-column 7, :end-line 1643, :column 4, :line 1643, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1643, :column 5, :line 1643, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1644, :column 4, :line 1644, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1644, :column 5, :line 1644, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1644, :column 7, :line 1644, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1645, :column 9, :line 1645, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1645, :column 11, :line 1645, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1640, :column 8, :line 1640, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1640, :column 15, :line 1640, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1643, :column 5, :line 1643, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1644, :column 5, :line 1644, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1644, :column 7, :line 1644, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1645, :column 11, :line 1645, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1643, :column 4, :line 1643, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1643, :column 5, :line 1643, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1644, :column 4, :line 1644, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1644, :column 5, :line 1644, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1644, :column 7, :line 1644, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1645, :column 9, :line 1645, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1645, :column 11, :line 1645, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1640, :column 8, :line 1640, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1640, :column 15, :line 1640, :file "cljs/core.cljs"} unchecked-divide-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 7530, :column 31, :line 7530, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7530, :column 32, :line 7530, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 7530, :column 34, :line 7530, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 7530, :column 36, :line 7530, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 7530, :column 8, :line 7530, :file "cljs/core.cljs"} swap-global-hierarchy! ^{:arglists (^{:end-column 41, :end-line 7530, :column 31, :line 7530, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7530, :column 32, :line 7530, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 7530, :column 34, :line 7530, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 7530, :column 36, :line 7530, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 7530, :column 8, :line 7530, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 7530, :column 32, :line 7530, :file "cljs/core.cljs"} f & ^{:end-column 41, :end-line 7530, :column 36, :line 7530, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 7530, :column 31, :line 7530, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7530, :column 32, :line 7530, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 7530, :column 34, :line 7530, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 7530, :column 36, :line 7530, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 7530, :column 8, :line 7530, :file "cljs/core.cljs"} swap-global-hierarchy!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6543, :column 4, :line 6543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6543, :column 5, :line 6543, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6543, :column 7, :line 6543, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6544, :column 4, :line 6544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6544, :column 5, :line 6544, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6544, :column 7, :line 6544, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6544, :column 9, :line 6544, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6545, :column 4, :line 6545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6545, :column 5, :line 6545, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6545, :column 7, :line 6545, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6545, :column 9, :line 6545, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6545, :column 11, :line 6545, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6545, :column 13, :line 6545, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 6541, :column 7, :line 6541, :file "cljs/core.cljs"} max-key ^{:arglists (^{:end-column 9, :end-line 6543, :column 4, :line 6543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6543, :column 5, :line 6543, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6543, :column 7, :line 6543, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6544, :column 4, :line 6544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6544, :column 5, :line 6544, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6544, :column 7, :line 6544, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6544, :column 9, :line 6544, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6545, :column 4, :line 6545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6545, :column 5, :line 6545, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6545, :column 7, :line 6545, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6545, :column 9, :line 6545, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6545, :column 11, :line 6545, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6545, :column 13, :line 6545, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 6541, :column 7, :line 6541, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6543, :column 5, :line 6543, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6543, :column 7, :line 6543, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 6544, :column 5, :line 6544, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6544, :column 7, :line 6544, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6544, :column 9, :line 6544, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 6545, :column 5, :line 6545, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6545, :column 7, :line 6545, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6545, :column 9, :line 6545, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 6545, :column 13, :line 6545, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6543, :column 4, :line 6543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6543, :column 5, :line 6543, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6543, :column 7, :line 6543, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6544, :column 4, :line 6544, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6544, :column 5, :line 6544, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6544, :column 7, :line 6544, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6544, :column 9, :line 6544, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6545, :column 4, :line 6545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6545, :column 5, :line 6545, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6545, :column 7, :line 6545, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6545, :column 9, :line 6545, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6545, :column 11, :line 6545, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6545, :column 13, :line 6545, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 6541, :column 7, :line 6541, :file "cljs/core.cljs"} max-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash])} ->PersistentTreeSet ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeSet [^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6371, :column 29, :line 6371, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6371, :column 34, :line 6371, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 6371, :column 53, :line 6371, :file "cljs/core.cljs"} __hash])} ->PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end])} ->ChunkBuffer ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end])} {:arglists (^cljs.core/ChunkBuffer [^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2262, :column 33, :line 2262, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2262, :column 47, :line 2262, :file "cljs/core.cljs"} end])} ->ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6150, :column 10, :line 6150, :file "cljs/core.cljs"} ValSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6150, :column 10, :line 6150, :file "cljs/core.cljs"} ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6150, :column 17, :line 6150, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6150, :column 19, :line 6150, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6150, :column 30, :line 6150, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6150, :column 35, :line 6150, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 17, :end-line 7692, :column 13, :line 7692, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7692, :column 14, :line 7692, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7692, :column 4, :line 7692, :file "cljs/core.cljs"} -prefers ^{:arglists (^{:end-column 17, :end-line 7692, :column 13, :line 7692, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7692, :column 14, :line 7692, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7692, :column 4, :line 7692, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 7692, :column 14, :line 7692, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7692, :column 13, :line 7692, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7692, :column 14, :line 7692, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 7692, :column 4, :line 7692, :file "cljs/core.cljs"} -prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7285, :column 3, :line 7285, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7285, :column 4, :line 7285, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7285, :column 9, :line 7285, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 7278, :column 7, :line 7278, :file "cljs/core.cljs"} set-validator! ^{:arglists (^{:end-column 13, :end-line 7285, :column 3, :line 7285, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7285, :column 4, :line 7285, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7285, :column 9, :line 7285, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 7278, :column 7, :line 7278, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7285, :column 4, :line 7285, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7285, :column 9, :line 7285, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7285, :column 3, :line 7285, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7285, :column 4, :line 7285, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7285, :column 9, :line 7285, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 7278, :column 7, :line 7278, :file "cljs/core.cljs"} set-validator!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4240, :column 34, :line 4240, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4240, :column 35, :line 4240, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4240, :column 39, :line 4240, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4240, :column 41, :line 4240, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4240, :column 8, :line 4240, :file "cljs/core.cljs"} array-map-index-of-equiv? ^{:arglists (^{:end-column 43, :end-line 4240, :column 34, :line 4240, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4240, :column 35, :line 4240, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4240, :column 39, :line 4240, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4240, :column 41, :line 4240, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4240, :column 8, :line 4240, :file "cljs/core.cljs"} {:arglists ([^{:end-column 39, :end-line 4240, :column 35, :line 4240, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4240, :column 39, :line 4240, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4240, :column 41, :line 4240, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4240, :column 34, :line 4240, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4240, :column 35, :line 4240, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4240, :column 39, :line 4240, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4240, :column 41, :line 4240, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4240, :column 8, :line 4240, :file "cljs/core.cljs"} array-map-index-of-equiv?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 286, :column 22, :line 286, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 286, :column 23, :line 286, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 286, :column 16, :line 286, :file "cljs/core.cljs"} -meta ^{:arglists (^{:end-column 25, :end-line 286, :column 22, :line 286, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 286, :column 23, :line 286, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 286, :column 16, :line 286, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 286, :column 23, :line 286, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 286, :column 22, :line 286, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 286, :column 23, :line 286, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 286, :column 16, :line 286, :file "cljs/core.cljs"} -meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 5455, :column 10, :line 5455, :file "cljs/core.cljs"} RedNode {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 5660, :column 10, :line 5660, :file "cljs/core.cljs"} RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 5660, :column 18, :line 5660, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 5660, :column 19, :line 5660, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 5660, :column 23, :line 5660, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 5660, :column 27, :line 5660, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 5660, :column 32, :line 5660, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 5660, :column 48, :line 5660, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 40, :end-line 7687, :column 16, :line 7687, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7687, :column 17, :line 7687, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7687, :column 20, :line 7687, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 7687, :column 33, :line 7687, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7687, :column 4, :line 7687, :file "cljs/core.cljs"} -add-method ^{:arglists (^{:end-column 40, :end-line 7687, :column 16, :line 7687, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7687, :column 17, :line 7687, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7687, :column 20, :line 7687, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 7687, :column 33, :line 7687, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7687, :column 4, :line 7687, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 7687, :column 17, :line 7687, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7687, :column 20, :line 7687, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 7687, :column 33, :line 7687, :file "cljs/core.cljs"} method]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 7687, :column 16, :line 7687, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7687, :column 17, :line 7687, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7687, :column 20, :line 7687, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 7687, :column 33, :line 7687, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7687, :column 4, :line 7687, :file "cljs/core.cljs"} -add-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 5504, :column 25, :line 5504, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5504, :column 26, :line 5504, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 5504, :column 30, :line 5504, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 5504, :column 34, :line 5504, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 5504, :column 38, :line 5504, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 5504, :column 8, :line 5504, :file "cljs/core.cljs"} balance-left-del ^{:arglists (^{:end-column 44, :end-line 5504, :column 25, :line 5504, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5504, :column 26, :line 5504, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 5504, :column 30, :line 5504, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 5504, :column 34, :line 5504, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 5504, :column 38, :line 5504, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 5504, :column 8, :line 5504, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5504, :column 26, :line 5504, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 5504, :column 30, :line 5504, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 5504, :column 34, :line 5504, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 5504, :column 38, :line 5504, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 5504, :column 25, :line 5504, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5504, :column 26, :line 5504, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 5504, :column 30, :line 5504, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 5504, :column 34, :line 5504, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 5504, :column 38, :line 5504, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 5504, :column 8, :line 5504, :file "cljs/core.cljs"} balance-left-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7252, :column 4, :line 7252, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7252, :column 5, :line 7252, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7252, :column 7, :line 7252, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7256, :column 7, :line 7256, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7256, :column 9, :line 7256, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 7260, :column 4, :line 7260, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7260, :column 5, :line 7260, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7260, :column 7, :line 7260, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7260, :column 9, :line 7260, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7260, :column 11, :line 7260, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 7264, :column 4, :line 7264, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7264, :column 5, :line 7264, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7264, :column 7, :line 7264, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7264, :column 9, :line 7264, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7264, :column 11, :line 7264, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 7264, :column 13, :line 7264, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 7264, :column 15, :line 7264, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 7247, :column 7, :line 7247, :file "cljs/core.cljs"} swap! ^{:arglists (^{:end-column 9, :end-line 7252, :column 4, :line 7252, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7252, :column 5, :line 7252, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7252, :column 7, :line 7252, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7256, :column 7, :line 7256, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7256, :column 9, :line 7256, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 7260, :column 4, :line 7260, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7260, :column 5, :line 7260, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7260, :column 7, :line 7260, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7260, :column 9, :line 7260, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7260, :column 11, :line 7260, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 7264, :column 4, :line 7264, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7264, :column 5, :line 7264, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7264, :column 7, :line 7264, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7264, :column 9, :line 7264, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7264, :column 11, :line 7264, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 7264, :column 13, :line 7264, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 7264, :column 15, :line 7264, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 7247, :column 7, :line 7247, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7252, :column 5, :line 7252, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7252, :column 7, :line 7252, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7256, :column 7, :line 7256, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7256, :column 9, :line 7256, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7260, :column 5, :line 7260, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7260, :column 7, :line 7260, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7260, :column 9, :line 7260, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7260, :column 11, :line 7260, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7264, :column 5, :line 7264, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7264, :column 7, :line 7264, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7264, :column 9, :line 7264, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7264, :column 11, :line 7264, :file "cljs/core.cljs"} y & ^{:end-column 20, :end-line 7264, :column 15, :line 7264, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7252, :column 4, :line 7252, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7252, :column 5, :line 7252, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7252, :column 7, :line 7252, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7256, :column 7, :line 7256, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7256, :column 9, :line 7256, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 7260, :column 4, :line 7260, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7260, :column 5, :line 7260, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7260, :column 7, :line 7260, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7260, :column 9, :line 7260, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7260, :column 11, :line 7260, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 7264, :column 4, :line 7264, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7264, :column 5, :line 7264, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 7264, :column 7, :line 7264, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7264, :column 9, :line 7264, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 7264, :column 11, :line 7264, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 7264, :column 13, :line 7264, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 7264, :column 15, :line 7264, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 7247, :column 7, :line 7247, :file "cljs/core.cljs"} swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 6205, :column 3, :line 6205, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6205, :column 4, :line 6205, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6203, :column 7, :line 6203, :file "cljs/core.cljs"} vals ^{:arglists (^{:end-column 13, :end-line 6205, :column 3, :line 6205, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6205, :column 4, :line 6205, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6203, :column 7, :line 6203, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6205, :column 4, :line 6205, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6205, :column 3, :line 6205, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6205, :column 4, :line 6205, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6203, :column 7, :line 6203, :file "cljs/core.cljs"} vals, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 375, :column 18, :line 375, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} -chunked-next ^{:arglists (^{:end-column 24, :end-line 375, :column 18, :line 375, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 375, :column 18, :line 375, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} -chunked-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 4575, :column 25, :line 4575, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} remove-pair ^{:arglists (^{:end-column 27, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 4575, :column 25, :line 4575, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 25, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 4575, :column 25, :line 4575, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 4575, :column 25, :line 4575, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} remove-pair, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} IMap ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentTreeMap}, :protocol-symbol true, :end-column 19, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} IMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 6481, :column 4, :line 6481, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6481, :column 5, :line 6481, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6481, :column 16, :line 6481, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 6481, :column 18, :line 6481, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 6479, :column 7, :line 6479, :file "cljs/core.cljs"} sorted-set-by ^{:arglists (^{:end-column 23, :end-line 6481, :column 4, :line 6481, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6481, :column 5, :line 6481, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6481, :column 16, :line 6481, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 6481, :column 18, :line 6481, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 6479, :column 7, :line 6479, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 6481, :column 5, :line 6481, :file "cljs/core.cljs"} comparator & ^{:end-column 23, :end-line 6481, :column 18, :line 6481, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 6481, :column 4, :line 6481, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6481, :column 5, :line 6481, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6481, :column 16, :line 6481, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 6481, :column 18, :line 6481, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 6479, :column 7, :line 6479, :file "cljs/core.cljs"} sorted-set-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 3373, :column 10, :line 3373, :file "cljs/core.cljs"} PersistentVector {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 3373, :column 10, :line 3373, :file "cljs/core.cljs"} PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 70, :end-line 3373, :column 27, :line 3373, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 467, :column 18, :line 467, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 467, :column 19, :line 467, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 467, :column 7, :line 467, :file "cljs/core.cljs"} cloneable? ^{:arglists (^{:end-column 25, :end-line 467, :column 18, :line 467, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 467, :column 19, :line 467, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 467, :column 7, :line 467, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 467, :column 19, :line 467, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 467, :column 18, :line 467, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 467, :column 19, :line 467, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 467, :column 7, :line 467, :file "cljs/core.cljs"} cloneable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4557, :column 25, :line 4557, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4557, :column 26, :line 4557, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 4557, :column 30, :line 4557, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 4557, :column 8, :line 4557, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 4557, :column 16, :line 4557, :file "cljs/core.cljs"} key-test ^{:arglists (^{:end-column 36, :end-line 4557, :column 25, :line 4557, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4557, :column 26, :line 4557, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 4557, :column 30, :line 4557, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 4557, :column 8, :line 4557, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 4557, :column 16, :line 4557, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 4557, :column 26, :line 4557, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 4557, :column 30, :line 4557, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4557, :column 25, :line 4557, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4557, :column 26, :line 4557, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 4557, :column 30, :line 4557, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 4557, :column 8, :line 4557, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 4557, :column 16, :line 4557, :file "cljs/core.cljs"} key-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7686, :column 11, :line 7686, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7686, :column 12, :line 7686, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 7686, :column 4, :line 7686, :file "cljs/core.cljs"} -reset ^{:arglists (^{:end-column 15, :end-line 7686, :column 11, :line 7686, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7686, :column 12, :line 7686, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 7686, :column 4, :line 7686, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 7686, :column 12, :line 7686, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7686, :column 11, :line 7686, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7686, :column 12, :line 7686, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 7686, :column 4, :line 7686, :file "cljs/core.cljs"} -reset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1269, :column 3, :line 1269, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1269, :column 4, :line 1269, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1267, :column 8, :line 1267, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1267, :column 16, :line 1267, :file "cljs/core.cljs"} true? ^{:arglists (^{:end-column 6, :end-line 1269, :column 3, :line 1269, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1269, :column 4, :line 1269, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1267, :column 8, :line 1267, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1267, :column 16, :line 1267, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1269, :column 4, :line 1269, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1269, :column 3, :line 1269, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1269, :column 4, :line 1269, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1267, :column 8, :line 1267, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1267, :column 16, :line 1267, :file "cljs/core.cljs"} true?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 165, :column 3, :line 165, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 165, :column 4, :line 165, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 162, :column 8, :line 162, :file "cljs/core.cljs"} array, :end-column 20, :end-line 162, :column 14, :line 162, :file "cljs/core.cljs"} array ^{:arglists (^{:end-column 13, :end-line 165, :column 3, :line 165, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 165, :column 4, :line 165, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 162, :column 8, :line 162, :file "cljs/core.cljs"} array, :end-column 20, :end-line 162, :column 14, :line 162, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 165, :column 4, :line 165, :file "cljs/core.cljs"} var-args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 165, :column 3, :line 165, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 165, :column 4, :line 165, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 162, :column 8, :line 162, :file "cljs/core.cljs"} array, :end-column 20, :end-line 162, :column 14, :line 162, :file "cljs/core.cljs"} array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7030, :column 1, :line 7025, :file "cljs/core.cljs"} print ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7030, :column 1, :line 7025, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 31, :end-line 7029, :column 26, :line 7029, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7030, :column 1, :line 7025, :file "cljs/core.cljs"} print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 273, :column 10, :line 273, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 273, :column 11, :line 273, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 273, :column 4, :line 273, :file "cljs/core.cljs"} -peek ^{:arglists (^{:end-column 16, :end-line 273, :column 10, :line 273, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 273, :column 11, :line 273, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 273, :column 4, :line 273, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 273, :column 11, :line 273, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 273, :column 10, :line 273, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 273, :column 11, :line 273, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 273, :column 4, :line 273, :file "cljs/core.cljs"} -peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} ISeq ^{:impls #{cljs.core/Cons cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq}, :protocol-symbol true, :end-column 19, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} ISeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 850, :column 7, :line 850, :file "cljs/core.cljs"} empty ^{:arglists (^{:end-column 9, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 850, :column 7, :line 850, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 850, :column 7, :line 850, :file "cljs/core.cljs"} empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 7879, :column 2, :line 7879, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 7879, :column 11, :line 7879, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 7877, :column 7, :line 7877, :file "cljs/core.cljs"} remove-method ^{:arglists (^{:end-column 24, :end-line 7879, :column 2, :line 7879, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 7879, :column 11, :line 7879, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 7877, :column 7, :line 7877, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 7879, :column 11, :line 7879, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 7879, :column 2, :line 7879, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 7879, :column 11, :line 7879, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 7877, :column 7, :line 7877, :file "cljs/core.cljs"} remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 3936, :column 10, :line 3936, :file "cljs/core.cljs"} PersistentQueueSeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 3936, :column 10, :line 3936, :file "cljs/core.cljs"} PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 63, :end-line 3936, :column 29, :line 3936, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 3936, :column 30, :line 3936, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 3936, :column 35, :line 3936, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 3936, :column 41, :line 3936, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 3936, :column 56, :line 3936, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 44, :end-line 5523, :column 26, :line 5523, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5523, :column 27, :line 5523, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5523, :column 31, :line 5523, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 5523, :column 35, :line 5523, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 5523, :column 40, :line 5523, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 5523, :column 8, :line 5523, :file "cljs/core.cljs"} balance-right-del ^{:arglists (^{:end-column 44, :end-line 5523, :column 26, :line 5523, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5523, :column 27, :line 5523, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5523, :column 31, :line 5523, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 5523, :column 35, :line 5523, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 5523, :column 40, :line 5523, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 5523, :column 8, :line 5523, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 5523, :column 27, :line 5523, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5523, :column 31, :line 5523, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 5523, :column 35, :line 5523, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 5523, :column 40, :line 5523, :file "cljs/core.cljs"} del]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 5523, :column 26, :line 5523, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5523, :column 27, :line 5523, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5523, :column 31, :line 5523, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 5523, :column 35, :line 5523, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 5523, :column 40, :line 5523, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 5523, :column 8, :line 5523, :file "cljs/core.cljs"} balance-right-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1530, :column 4, :line 1530, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1530, :column 5, :line 1530, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1531, :column 4, :line 1531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1531, :column 5, :line 1531, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1531, :column 7, :line 1531, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1532, :column 7, :line 1532, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1532, :column 9, :line 1532, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1527, :column 8, :line 1527, :file "cljs/core.cljs"} number} / ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1530, :column 4, :line 1530, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1530, :column 5, :line 1530, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1531, :column 4, :line 1531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1531, :column 5, :line 1531, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1531, :column 7, :line 1531, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1532, :column 7, :line 1532, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1532, :column 9, :line 1532, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1527, :column 8, :line 1527, :file "cljs/core.cljs"} number} {:arglists (^number [^{:end-column 7, :end-line 1530, :column 5, :line 1530, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1531, :column 5, :line 1531, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1531, :column 7, :line 1531, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1532, :column 7, :line 1532, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1530, :column 4, :line 1530, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1530, :column 5, :line 1530, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1531, :column 4, :line 1531, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1531, :column 5, :line 1531, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1531, :column 7, :line 1531, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1532, :column 7, :line 1532, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1532, :column 9, :line 1532, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1527, :column 8, :line 1527, :file "cljs/core.cljs"} number} /, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 4584, :column 15, :line 4584, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4584, :column 16, :line 4584, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 4584, :column 21, :line 4584, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 4584, :column 8, :line 4584, :file "cljs/core.cljs"} bitpos ^{:arglists (^{:end-column 27, :end-line 4584, :column 15, :line 4584, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4584, :column 16, :line 4584, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 4584, :column 21, :line 4584, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 4584, :column 8, :line 4584, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 4584, :column 16, :line 4584, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 4584, :column 21, :line 4584, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 4584, :column 15, :line 4584, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4584, :column 16, :line 4584, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 4584, :column 21, :line 4584, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 4584, :column 8, :line 4584, :file "cljs/core.cljs"} bitpos, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1767, :column 3, :line 1767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1767, :column 6, :line 1767, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} bit-or ^{:arglists (^{:end-column 8, :end-line 1767, :column 3, :line 1767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1767, :column 6, :line 1767, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1767, :column 6, :line 1767, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1767, :column 3, :line 1767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1767, :column 6, :line 1767, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} bit-or, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 3548, :column 14, :line 3548, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3548, :column 15, :line 3548, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 3548, :column 17, :line 3548, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} vector ^{:arglists (^{:end-column 22, :end-line 3548, :column 14, :line 3548, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3548, :column 15, :line 3548, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 3548, :column 17, :line 3548, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 22, :end-line 3548, :column 17, :line 3548, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 3548, :column 14, :line 3548, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3548, :column 15, :line 3548, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 3548, :column 17, :line 3548, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} vector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 662, :column 10, :line 662, :file "cljs/core.cljs"} hash-coll ^{:arglists (^{:end-column 24, :end-line 1896, :column 18, :line 1896, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1896, :column 19, :line 1896, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1896, :column 19, :line 1896, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1896, :column 18, :line 1896, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1896, :column 19, :line 1896, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} hash-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 4567, :column 4, :line 4567, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4567, :column 5, :line 4567, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4567, :column 9, :line 4567, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4567, :column 11, :line 4567, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 4570, :column 4, :line 4570, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4570, :column 5, :line 4570, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4570, :column 9, :line 4570, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4570, :column 11, :line 4570, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 4570, :column 13, :line 4570, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 4570, :column 15, :line 4570, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 4566, :column 8, :line 4566, :file "cljs/core.cljs"} clone-and-set ^{:arglists (^{:end-column 13, :end-line 4567, :column 4, :line 4567, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4567, :column 5, :line 4567, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4567, :column 9, :line 4567, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4567, :column 11, :line 4567, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 4570, :column 4, :line 4570, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4570, :column 5, :line 4570, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4570, :column 9, :line 4570, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4570, :column 11, :line 4570, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 4570, :column 13, :line 4570, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 4570, :column 15, :line 4570, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 4566, :column 8, :line 4566, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 9, :end-line 4567, :column 5, :line 4567, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4567, :column 9, :line 4567, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4567, :column 11, :line 4567, :file "cljs/core.cljs"} a] ^cljs.core/array [^{:end-column 9, :end-line 4570, :column 5, :line 4570, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4570, :column 9, :line 4570, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4570, :column 11, :line 4570, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 4570, :column 13, :line 4570, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 4570, :column 15, :line 4570, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 4567, :column 4, :line 4567, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4567, :column 5, :line 4567, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4567, :column 9, :line 4567, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4567, :column 11, :line 4567, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 4570, :column 4, :line 4570, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4570, :column 5, :line 4570, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 4570, :column 9, :line 4570, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 4570, :column 11, :line 4570, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 4570, :column 13, :line 4570, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 4570, :column 15, :line 4570, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 4566, :column 8, :line 4566, :file "cljs/core.cljs"} clone-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 36, :end-line 4472, :column 10, :line 4472, :file "cljs/core.cljs"} array->transient-hash-map ^{:arglists (^{:end-column 43, :end-line 4544, :column 34, :line 4544, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4544, :column 35, :line 4544, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 4544, :column 39, :line 4544, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 4544, :column 8, :line 4544, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj [^{:end-column 39, :end-line 4544, :column 35, :line 4544, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 4544, :column 39, :line 4544, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4544, :column 34, :line 4544, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4544, :column 35, :line 4544, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 4544, :column 39, :line 4544, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 4544, :column 8, :line 4544, :file "cljs/core.cljs"} array->transient-hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1574, :column 4, :line 1574, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1574, :column 5, :line 1574, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1575, :column 7, :line 1575, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1575, :column 9, :line 1575, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1570, :column 8, :line 1570, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1570, :column 16, :line 1570, :file "cljs/core.cljs"} >= ^{:arglists (^{:end-column 7, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1574, :column 4, :line 1574, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1574, :column 5, :line 1574, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1575, :column 7, :line 1575, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1575, :column 9, :line 1575, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1570, :column 8, :line 1570, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1570, :column 16, :line 1570, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1574, :column 5, :line 1574, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1575, :column 7, :line 1575, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1574, :column 4, :line 1574, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1574, :column 5, :line 1574, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1575, :column 7, :line 1575, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1575, :column 9, :line 1575, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1570, :column 8, :line 1570, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1570, :column 16, :line 1570, :file "cljs/core.cljs"} >=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map])} ->TransientHashSet ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map])} {:arglists (^cljs.core/TransientHashSet [^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 6334, :column 38, :line 6334, :file "cljs/core.cljs"} transient-map])} ->TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3014, :column 4, :line 3014, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3014, :column 5, :line 3014, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3015, :column 4, :line 3015, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3015, :column 5, :line 3015, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3015, :column 7, :line 3015, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3012, :column 7, :line 3012, :file "cljs/core.cljs"} drop-last ^{:arglists (^{:end-column 7, :end-line 3014, :column 4, :line 3014, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3014, :column 5, :line 3014, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3015, :column 4, :line 3015, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3015, :column 5, :line 3015, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3015, :column 7, :line 3015, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3012, :column 7, :line 3012, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3014, :column 5, :line 3014, :file "cljs/core.cljs"} s] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3015, :column 5, :line 3015, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3015, :column 7, :line 3015, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3014, :column 4, :line 3014, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3014, :column 5, :line 3014, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3015, :column 4, :line 3015, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3015, :column 5, :line 3015, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3015, :column 7, :line 3015, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3012, :column 7, :line 3012, :file "cljs/core.cljs"} drop-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 98, :column 24, :line 98, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 98, :column 25, :line 98, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} object? ^{:arglists (^{:end-column 27, :end-line 98, :column 24, :line 98, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 98, :column 25, :line 98, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 98, :column 25, :line 98, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 98, :column 24, :line 98, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 98, :column 25, :line 98, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} object?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash])} ->ArrayNodeSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ArrayNodeSeq [^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5114, :column 24, :line 5114, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5114, :column 29, :line 5114, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5114, :column 35, :line 5114, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5114, :column 37, :line 5114, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5114, :column 49, :line 5114, :file "cljs/core.cljs"} __hash])} ->ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1682, :column 5, :line 1682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1683, :column 7, :line 1683, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1683, :column 9, :line 1683, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1683, :column 11, :line 1683, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1678, :column 8, :line 1678, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1678, :column 15, :line 1678, :file "cljs/core.cljs"} unchecked-substract ^{:arglists (^{:end-column 7, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1682, :column 5, :line 1682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1683, :column 7, :line 1683, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1683, :column 9, :line 1683, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1683, :column 11, :line 1683, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1678, :column 8, :line 1678, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1678, :column 15, :line 1678, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1682, :column 5, :line 1682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1683, :column 7, :line 1683, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1683, :column 11, :line 1683, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1682, :column 5, :line 1682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1683, :column 7, :line 1683, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1683, :column 9, :line 1683, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1683, :column 11, :line 1683, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1678, :column 8, :line 1678, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1678, :column 15, :line 1678, :file "cljs/core.cljs"} unchecked-substract, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5820, :column 24, :line 5820, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5820, :column 25, :line 5820, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 5820, :column 30, :line 5820, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 5820, :column 8, :line 5820, :file "cljs/core.cljs"} tree-map-append ^{:arglists (^{:end-column 36, :end-line 5820, :column 24, :line 5820, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5820, :column 25, :line 5820, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 5820, :column 30, :line 5820, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 5820, :column 8, :line 5820, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5820, :column 25, :line 5820, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 5820, :column 30, :line 5820, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5820, :column 24, :line 5820, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5820, :column 25, :line 5820, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 5820, :column 30, :line 5820, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 5820, :column 8, :line 5820, :file "cljs/core.cljs"} tree-map-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2693, :column 3, :line 2693, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} not-empty ^{:arglists (^{:end-column 9, :end-line 2693, :column 3, :line 2693, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2693, :column 3, :line 2693, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} not-empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6502, :column 3, :line 6502, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6502, :column 4, :line 6502, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 6500, :column 7, :line 6500, :file "cljs/core.cljs"} distinct ^{:arglists (^{:end-column 9, :end-line 6502, :column 3, :line 6502, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6502, :column 4, :line 6502, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 6500, :column 7, :line 6500, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 6502, :column 4, :line 6502, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6502, :column 3, :line 6502, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6502, :column 4, :line 6502, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 6500, :column 7, :line 6500, :file "cljs/core.cljs"} distinct, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3198, :column 4, :line 3198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3198, :column 5, :line 3198, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3198, :column 7, :line 3198, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3200, :column 4, :line 3200, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3200, :column 5, :line 3200, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3200, :column 7, :line 3200, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3200, :column 12, :line 3200, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3206, :column 4, :line 3206, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3206, :column 5, :line 3206, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3206, :column 7, :line 3206, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3206, :column 12, :line 3206, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3206, :column 16, :line 3206, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3192, :column 7, :line 3192, :file "cljs/core.cljs"} partition ^{:arglists (^{:end-column 12, :end-line 3198, :column 4, :line 3198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3198, :column 5, :line 3198, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3198, :column 7, :line 3198, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3200, :column 4, :line 3200, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3200, :column 5, :line 3200, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3200, :column 7, :line 3200, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3200, :column 12, :line 3200, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3206, :column 4, :line 3206, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3206, :column 5, :line 3206, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3206, :column 7, :line 3206, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3206, :column 12, :line 3206, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3206, :column 16, :line 3206, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3192, :column 7, :line 3192, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3198, :column 5, :line 3198, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3198, :column 7, :line 3198, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3200, :column 5, :line 3200, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3200, :column 7, :line 3200, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3200, :column 12, :line 3200, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3206, :column 5, :line 3206, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3206, :column 7, :line 3206, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3206, :column 12, :line 3206, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3206, :column 16, :line 3206, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3198, :column 4, :line 3198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3198, :column 5, :line 3198, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3198, :column 7, :line 3198, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3200, :column 4, :line 3200, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3200, :column 5, :line 3200, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3200, :column 7, :line 3200, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3200, :column 12, :line 3200, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3206, :column 4, :line 3206, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3206, :column 5, :line 3206, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3206, :column 7, :line 3206, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3206, :column 12, :line 3206, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3206, :column 16, :line 3206, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3192, :column 7, :line 3192, :file "cljs/core.cljs"} partition, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 7685, :column 14, :line 7685, :file "cljs/core.cljs"} IMultiFn ^{:impls #{cljs.core/MultiFn}, :protocol-symbol true, :end-column 23, :end-line 7685, :column 14, :line 7685, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 7685, :column 14, :line 7685, :file "cljs/core.cljs"} IMultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1692, :column 20, :line 1692, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1692, :column 21, :line 1692, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1692, :column 16, :line 1692, :file "cljs/core.cljs"} fix ^{:arglists (^{:end-column 23, :end-line 1692, :column 20, :line 1692, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1692, :column 21, :line 1692, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1692, :column 16, :line 1692, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1692, :column 21, :line 1692, :file "cljs/core.cljs"} q]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1692, :column 20, :line 1692, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1692, :column 21, :line 1692, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1692, :column 9, :line 1692, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1692, :column 16, :line 1692, :file "cljs/core.cljs"} fix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 1996, :column 10, :line 1996, :file "cljs/core.cljs"} EmptyList {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 1996, :column 10, :line 1996, :file "cljs/core.cljs"} EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 1996, :column 20, :line 1996, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1996, :column 21, :line 1996, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 256, :column 14, :line 256, :file "cljs/core.cljs"} IAssociative ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/RedNode}, :protocol-symbol true, :end-column 27, :end-line 256, :column 14, :line 256, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 256, :column 14, :line 256, :file "cljs/core.cljs"} IAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1780, :column 3, :line 1780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1780, :column 4, :line 1780, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1780, :column 6, :line 1780, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1778, :column 7, :line 1778, :file "cljs/core.cljs"} bit-flip ^{:arglists (^{:end-column 8, :end-line 1780, :column 3, :line 1780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1780, :column 4, :line 1780, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1780, :column 6, :line 1780, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1778, :column 7, :line 1778, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1780, :column 4, :line 1780, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1780, :column 6, :line 1780, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1780, :column 3, :line 1780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1780, :column 4, :line 1780, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1780, :column 6, :line 1780, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1778, :column 7, :line 1778, :file "cljs/core.cljs"} bit-flip, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2437, :column 4, :line 2437, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2437, :column 5, :line 2437, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2441, :column 4, :line 2441, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2441, :column 5, :line 2441, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2441, :column 10, :line 2441, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2436, :column 7, :line 2436, :file "cljs/core.cljs"} long-array ^{:arglists (^{:end-column 17, :end-line 2437, :column 4, :line 2437, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2437, :column 5, :line 2437, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2441, :column 4, :line 2441, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2441, :column 5, :line 2441, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2441, :column 10, :line 2441, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2436, :column 7, :line 2436, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2437, :column 5, :line 2437, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2441, :column 5, :line 2441, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2441, :column 10, :line 2441, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2437, :column 4, :line 2437, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2437, :column 5, :line 2437, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2441, :column 4, :line 2441, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2441, :column 5, :line 2441, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2441, :column 10, :line 2441, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2436, :column 7, :line 2436, :file "cljs/core.cljs"} long-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7575, :column 4, :line 7575, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7575, :column 5, :line 7575, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7576, :column 4, :line 7576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7576, :column 5, :line 7576, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7576, :column 7, :line 7576, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} descendants ^{:arglists (^{:end-column 9, :end-line 7575, :column 4, :line 7575, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7575, :column 5, :line 7575, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7576, :column 4, :line 7576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7576, :column 5, :line 7576, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7576, :column 7, :line 7576, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7575, :column 5, :line 7575, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 7576, :column 5, :line 7576, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7576, :column 7, :line 7576, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7575, :column 4, :line 7575, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7575, :column 5, :line 7575, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7576, :column 4, :line 7576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7576, :column 5, :line 7576, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7576, :column 7, :line 7576, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} descendants, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f])} ->Delay ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f])} {:arglists (^cljs.core/Delay [^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 7359, :column 17, :line 7359, :file "cljs/core.cljs"} state ^{:end-column 25, :end-line 7359, :column 23, :line 7359, :file "cljs/core.cljs"} f])} ->Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 3341, :column 18, :line 3341, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3341, :column 19, :line 3341, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3341, :column 22, :line 3341, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3341, :column 8, :line 3341, :file "cljs/core.cljs"} array-for ^{:arglists (^{:end-column 24, :end-line 3341, :column 18, :line 3341, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3341, :column 19, :line 3341, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3341, :column 22, :line 3341, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3341, :column 8, :line 3341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3341, :column 19, :line 3341, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3341, :column 22, :line 3341, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 3341, :column 18, :line 3341, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3341, :column 19, :line 3341, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3341, :column 22, :line 3341, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3341, :column 8, :line 3341, :file "cljs/core.cljs"} array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 6218, :column 3, :line 6218, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6218, :column 4, :line 6218, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6218, :column 6, :line 6218, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6214, :column 7, :line 6214, :file "cljs/core.cljs"} merge ^{:arglists (^{:end-column 11, :end-line 6218, :column 3, :line 6218, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6218, :column 4, :line 6218, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6218, :column 6, :line 6218, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6214, :column 7, :line 6214, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 6218, :column 6, :line 6218, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6218, :column 3, :line 6218, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6218, :column 4, :line 6218, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6218, :column 6, :line 6218, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6214, :column 7, :line 6214, :file "cljs/core.cljs"} merge, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 303, :column 14, :line 303, :file "cljs/core.cljs"} ISeqable ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 303, :column 14, :line 303, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 303, :column 14, :line 303, :file "cljs/core.cljs"} ISeqable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1728, :column 3, :line 1728, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1728, :column 6, :line 1728, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1726, :column 7, :line 1726, :file "cljs/core.cljs"} js-mod ^{:arglists (^{:end-column 8, :end-line 1728, :column 3, :line 1728, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1728, :column 6, :line 1728, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1726, :column 7, :line 1726, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1728, :column 6, :line 1728, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1728, :column 3, :line 1728, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1728, :column 6, :line 1728, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1726, :column 7, :line 1726, :file "cljs/core.cljs"} js-mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1294, :column 3, :line 1294, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1294, :column 4, :line 1294, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1292, :column 8, :line 1292, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1292, :column 16, :line 1292, :file "cljs/core.cljs"} integer? ^{:arglists (^{:end-column 6, :end-line 1294, :column 3, :line 1294, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1294, :column 4, :line 1294, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1292, :column 8, :line 1292, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1292, :column 16, :line 1292, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1294, :column 4, :line 1294, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1294, :column 3, :line 1294, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1294, :column 4, :line 1294, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1292, :column 8, :line 1292, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1292, :column 16, :line 1292, :file "cljs/core.cljs"} integer?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1041, :column 10, :line 1041, :file "cljs/core.cljs"} MetaFn {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1041, :column 10, :line 1041, :file "cljs/core.cljs"} MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 27, :end-line 1041, :column 17, :line 1041, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1041, :column 18, :line 1041, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1041, :column 22, :line 1041, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 12, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3176, :column 5, :line 3176, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3176, :column 7, :line 3176, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3176, :column 10, :line 3176, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3178, :column 4, :line 3178, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3178, :column 5, :line 3178, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3178, :column 7, :line 3178, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3178, :column 10, :line 3178, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3178, :column 13, :line 3178, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3180, :column 7, :line 3180, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3180, :column 10, :line 3180, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3180, :column 13, :line 3180, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3180, :column 18, :line 3180, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3167, :column 7, :line 3167, :file "cljs/core.cljs"} mapv ^{:arglists (^{:end-column 12, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3176, :column 5, :line 3176, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3176, :column 7, :line 3176, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3176, :column 10, :line 3176, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3178, :column 4, :line 3178, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3178, :column 5, :line 3178, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3178, :column 7, :line 3178, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3178, :column 10, :line 3178, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3178, :column 13, :line 3178, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3180, :column 7, :line 3180, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3180, :column 10, :line 3180, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3180, :column 13, :line 3180, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3180, :column 18, :line 3180, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3167, :column 7, :line 3167, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 3176, :column 5, :line 3176, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3176, :column 7, :line 3176, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3176, :column 10, :line 3176, :file "cljs/core.cljs"} c2] [^{:end-column 7, :end-line 3178, :column 5, :line 3178, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3178, :column 7, :line 3178, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3178, :column 10, :line 3178, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3178, :column 13, :line 3178, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3180, :column 7, :line 3180, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3180, :column 10, :line 3180, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3180, :column 13, :line 3180, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3180, :column 18, :line 3180, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3176, :column 5, :line 3176, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3176, :column 7, :line 3176, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3176, :column 10, :line 3176, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3178, :column 4, :line 3178, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3178, :column 5, :line 3178, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3178, :column 7, :line 3178, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3178, :column 10, :line 3178, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3178, :column 13, :line 3178, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3180, :column 7, :line 3180, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3180, :column 10, :line 3180, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3180, :column 13, :line 3180, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3180, :column 18, :line 3180, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3167, :column 7, :line 3167, :file "cljs/core.cljs"} mapv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 6558, :column 4, :line 6558, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6558, :column 5, :line 6558, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6558, :column 7, :line 6558, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6560, :column 4, :line 6560, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6560, :column 5, :line 6560, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6560, :column 7, :line 6560, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 6560, :column 12, :line 6560, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.", :end-column 21, :end-line 6555, :column 7, :line 6555, :file "cljs/core.cljs"} partition-all ^{:arglists (^{:end-column 12, :end-line 6558, :column 4, :line 6558, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6558, :column 5, :line 6558, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6558, :column 7, :line 6558, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6560, :column 4, :line 6560, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6560, :column 5, :line 6560, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6560, :column 7, :line 6560, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 6560, :column 12, :line 6560, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.", :end-column 21, :end-line 6555, :column 7, :line 6555, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6558, :column 5, :line 6558, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6558, :column 7, :line 6558, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 6560, :column 5, :line 6560, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6560, :column 7, :line 6560, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 6560, :column 12, :line 6560, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 6558, :column 4, :line 6558, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6558, :column 5, :line 6558, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6558, :column 7, :line 6558, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 6560, :column 4, :line 6560, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6560, :column 5, :line 6560, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 6560, :column 7, :line 6560, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 6560, :column 12, :line 6560, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.", :end-column 21, :end-line 6555, :column 7, :line 6555, :file "cljs/core.cljs"} partition-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 6709, :column 3, :line 6709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6709, :column 4, :line 6709, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 6709, :column 6, :line 6709, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of partitions.", :end-column 20, :end-line 6706, :column 7, :line 6706, :file "cljs/core.cljs"} partition-by ^{:arglists (^{:end-column 11, :end-line 6709, :column 3, :line 6709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6709, :column 4, :line 6709, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 6709, :column 6, :line 6709, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of partitions.", :end-column 20, :end-line 6706, :column 7, :line 6706, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 6709, :column 4, :line 6709, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 6709, :column 6, :line 6709, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6709, :column 3, :line 6709, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6709, :column 4, :line 6709, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 6709, :column 6, :line 6709, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of partitions.", :end-column 20, :end-line 6706, :column 7, :line 6706, :file "cljs/core.cljs"} partition-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 47, :end-line 4232, :column 38, :line 4232, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4232, :column 39, :line 4232, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4232, :column 43, :line 4232, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4232, :column 45, :line 4232, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4232, :column 8, :line 4232, :file "cljs/core.cljs"} array-map-index-of-identical? ^{:arglists (^{:end-column 47, :end-line 4232, :column 38, :line 4232, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4232, :column 39, :line 4232, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4232, :column 43, :line 4232, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4232, :column 45, :line 4232, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4232, :column 8, :line 4232, :file "cljs/core.cljs"} {:arglists ([^{:end-column 43, :end-line 4232, :column 39, :line 4232, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4232, :column 43, :line 4232, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4232, :column 45, :line 4232, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 47, :end-line 4232, :column 38, :line 4232, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4232, :column 39, :line 4232, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4232, :column 43, :line 4232, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4232, :column 45, :line 4232, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4232, :column 8, :line 4232, :file "cljs/core.cljs"} array-map-index-of-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 306, :column 14, :line 306, :file "cljs/core.cljs"} ISequential ^{:impls #{cljs.core/Cons cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 26, :end-line 306, :column 14, :line 306, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 306, :column 14, :line 306, :file "cljs/core.cljs"} ISequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash])} ->LazySeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/LazySeq [^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2197, :column 19, :line 2197, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2197, :column 34, :line 2197, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2197, :column 47, :line 2197, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2197, :column 59, :line 2197, :file "cljs/core.cljs"} __hash])} ->LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 4035, :column 3, :line 4035, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4035, :column 4, :line 4035, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4035, :column 6, :line 4035, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4032, :column 8, :line 4032, :file "cljs/core.cljs"} equiv-map ^{:arglists (^{:end-column 8, :end-line 4035, :column 3, :line 4035, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4035, :column 4, :line 4035, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4035, :column 6, :line 4035, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4032, :column 8, :line 4032, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 4035, :column 4, :line 4035, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4035, :column 6, :line 4035, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 4035, :column 3, :line 4035, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4035, :column 4, :line 4035, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4035, :column 6, :line 4035, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4032, :column 8, :line 4032, :file "cljs/core.cljs"} equiv-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2477, :column 4, :line 2477, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2477, :column 5, :line 2477, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2481, :column 10, :line 2481, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2476, :column 7, :line 2476, :file "cljs/core.cljs"} object-array ^{:arglists (^{:end-column 17, :end-line 2477, :column 4, :line 2477, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2477, :column 5, :line 2477, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2481, :column 10, :line 2481, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2476, :column 7, :line 2476, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2477, :column 5, :line 2477, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2481, :column 10, :line 2481, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2477, :column 4, :line 2477, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2477, :column 5, :line 2477, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2481, :column 10, :line 2481, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2476, :column 7, :line 2476, :file "cljs/core.cljs"} object-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 76, :column 20, :line 76, :file "cljs/core.cljs"} Keyword {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2132, :column 10, :line 2132, :file "cljs/core.cljs"} Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 47, :end-line 2132, :column 18, :line 2132, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2132, :column 19, :line 2132, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2132, :column 22, :line 2132, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2132, :column 27, :line 2132, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2132, :column 41, :line 2132, :file "cljs/core.cljs"} _hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 16, :end-line 7584, :column 4, :line 7584, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7584, :column 5, :line 7584, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7584, :column 9, :line 7584, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7588, :column 4, :line 7588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7588, :column 5, :line 7588, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7588, :column 7, :line 7588, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7588, :column 11, :line 7588, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} derive ^{:arglists (^{:end-column 16, :end-line 7584, :column 4, :line 7584, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7584, :column 5, :line 7584, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7584, :column 9, :line 7584, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7588, :column 4, :line 7588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7588, :column 5, :line 7588, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7588, :column 7, :line 7588, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7588, :column 11, :line 7588, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7584, :column 5, :line 7584, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7584, :column 9, :line 7584, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 7588, :column 5, :line 7588, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7588, :column 7, :line 7588, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7588, :column 11, :line 7588, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7584, :column 4, :line 7584, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7584, :column 5, :line 7584, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7584, :column 9, :line 7584, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7588, :column 4, :line 7588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7588, :column 5, :line 7588, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7588, :column 7, :line 7588, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7588, :column 11, :line 7588, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} derive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} IChunkedSeq ^{:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 26, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} IChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 7967, :column 32, :line 7967, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7967, :column 33, :line 7967, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 7967, :column 8, :line 7967, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 7967, :column 16, :line 7967, :file "cljs/core.cljs"} special-symbol? ^{:arglists (^{:end-column 35, :end-line 7967, :column 32, :line 7967, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7967, :column 33, :line 7967, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 7967, :column 8, :line 7967, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 7967, :column 16, :line 7967, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 35, :end-line 7967, :column 33, :line 7967, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 7967, :column 32, :line 7967, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7967, :column 33, :line 7967, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 7967, :column 8, :line 7967, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 7967, :column 16, :line 7967, :file "cljs/core.cljs"} special-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7566, :column 4, :line 7566, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7566, :column 5, :line 7566, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7567, :column 4, :line 7567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7567, :column 5, :line 7567, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7567, :column 7, :line 7567, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} ancestors ^{:arglists (^{:end-column 9, :end-line 7566, :column 4, :line 7566, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7566, :column 5, :line 7566, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7567, :column 4, :line 7567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7567, :column 5, :line 7567, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7567, :column 7, :line 7567, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7566, :column 5, :line 7566, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 7567, :column 5, :line 7567, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7567, :column 7, :line 7567, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7566, :column 4, :line 7566, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7566, :column 5, :line 7566, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7567, :column 4, :line 7567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7567, :column 5, :line 7567, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7567, :column 7, :line 7567, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} ancestors, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 6584, :column 4, :line 6584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6584, :column 5, :line 6584, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6584, :column 8, :line 6584, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6584, :column 13, :line 6584, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6590, :column 4, :line 6590, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6590, :column 5, :line 6590, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6590, :column 8, :line 6590, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6590, :column 19, :line 6590, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6590, :column 29, :line 6590, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6590, :column 38, :line 6590, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 6580, :column 7, :line 6580, :file "cljs/core.cljs"} subseq ^{:arglists (^{:end-column 17, :end-line 6584, :column 4, :line 6584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6584, :column 5, :line 6584, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6584, :column 8, :line 6584, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6584, :column 13, :line 6584, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6590, :column 4, :line 6590, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6590, :column 5, :line 6590, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6590, :column 8, :line 6590, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6590, :column 19, :line 6590, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6590, :column 29, :line 6590, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6590, :column 38, :line 6590, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 6580, :column 7, :line 6580, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 6584, :column 5, :line 6584, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6584, :column 8, :line 6584, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6584, :column 13, :line 6584, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 6590, :column 5, :line 6590, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6590, :column 8, :line 6590, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6590, :column 19, :line 6590, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6590, :column 29, :line 6590, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6590, :column 38, :line 6590, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 6584, :column 4, :line 6584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6584, :column 5, :line 6584, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6584, :column 8, :line 6584, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6584, :column 13, :line 6584, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6590, :column 4, :line 6590, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6590, :column 5, :line 6590, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6590, :column 8, :line 6590, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6590, :column 19, :line 6590, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6590, :column 29, :line 6590, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6590, :column 38, :line 6590, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 6580, :column 7, :line 6580, :file "cljs/core.cljs"} subseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7346, :column 4, :line 7346, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 7347, :column 4, :line 7347, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 7347, :column 5, :line 7347, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 7342, :column 7, :line 7342, :file "cljs/core.cljs"} gensym ^{:arglists (^{:end-column 6, :end-line 7346, :column 4, :line 7346, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 7347, :column 4, :line 7347, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 7347, :column 5, :line 7347, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 7342, :column 7, :line 7342, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 19, :end-line 7347, :column 5, :line 7347, :file "cljs/core.cljs"} prefix-string]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7346, :column 4, :line 7346, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 7347, :column 4, :line 7347, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 7347, :column 5, :line 7347, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 7342, :column 7, :line 7342, :file "cljs/core.cljs"} gensym, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 251, :column 22, :line 251, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 251, :column 23, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 251, :column 5, :line 251, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 251, :column 16, :line 251, :file "cljs/core.cljs"} -next ^{:arglists (^{:end-column 28, :end-line 251, :column 22, :line 251, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 251, :column 23, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 251, :column 5, :line 251, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 251, :column 16, :line 251, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 251, :column 23, :line 251, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 251, :column 22, :line 251, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 251, :column 23, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 251, :column 5, :line 251, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 251, :column 16, :line 251, :file "cljs/core.cljs"} -next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr])} ->HashCollisionNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/HashCollisionNode [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr])} ->HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7373, :column 3, :line 7373, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7373, :column 4, :line 7373, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 7371, :column 8, :line 7371, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 7371, :column 16, :line 7371, :file "cljs/core.cljs"} delay? ^{:arglists (^{:end-column 6, :end-line 7373, :column 3, :line 7373, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7373, :column 4, :line 7373, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 7371, :column 8, :line 7371, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 7371, :column 16, :line 7371, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 7373, :column 4, :line 7373, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7373, :column 3, :line 7373, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7373, :column 4, :line 7373, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 7371, :column 8, :line 7371, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 7371, :column 16, :line 7371, :file "cljs/core.cljs"} delay?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 4555, :column 10, :line 4555, :file "cljs/core.cljs"} create-inode-seq ^{:arglists (^{:end-column 11, :end-line 5098, :column 4, :line 5098, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5098, :column 5, :line 5098, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5100, :column 4, :line 5100, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5100, :column 5, :line 5100, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5100, :column 11, :line 5100, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5100, :column 13, :line 5100, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5097, :column 8, :line 5097, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5098, :column 5, :line 5098, :file "cljs/core.cljs"} nodes] [^{:end-column 11, :end-line 5100, :column 5, :line 5100, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5100, :column 11, :line 5100, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5100, :column 13, :line 5100, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5098, :column 4, :line 5098, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5098, :column 5, :line 5098, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5100, :column 4, :line 5100, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5100, :column 5, :line 5100, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5100, :column 11, :line 5100, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5100, :column 13, :line 5100, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5097, :column 8, :line 5097, :file "cljs/core.cljs"} create-inode-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3153, :column 3, :line 3153, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3153, :column 4, :line 3153, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} flatten ^{:arglists (^{:end-column 6, :end-line 3153, :column 3, :line 3153, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3153, :column 4, :line 3153, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3153, :column 4, :line 3153, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3153, :column 3, :line 3153, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3153, :column 4, :line 3153, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} flatten, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 263, :column 18, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 263, :column 23, :line 263, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} -dissoc ^{:arglists (^{:end-column 25, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 263, :column 18, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 263, :column 23, :line 263, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 263, :column 18, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 263, :column 23, :line 263, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 263, :column 18, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 263, :column 23, :line 263, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} -dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1723, :column 15, :line 1723, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1723, :column 7, :line 1723, :file "cljs/core.cljs"} doubles ^{:arglists (^{:end-column 18, :end-line 1723, :column 15, :line 1723, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1723, :column 7, :line 1723, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1723, :column 15, :line 1723, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1723, :column 7, :line 1723, :file "cljs/core.cljs"} doubles, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 257, :column 28, :line 257, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 257, :column 29, :line 257, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 257, :column 34, :line 257, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 257, :column 5, :line 257, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 257, :column 13, :line 257, :file "cljs/core.cljs"} -contains-key? ^{:arglists (^{:end-column 36, :end-line 257, :column 28, :line 257, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 257, :column 29, :line 257, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 257, :column 34, :line 257, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 257, :column 5, :line 257, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 257, :column 13, :line 257, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 257, :column 29, :line 257, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 257, :column 34, :line 257, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 257, :column 28, :line 257, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 257, :column 29, :line 257, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 257, :column 34, :line 257, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 257, :column 5, :line 257, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 257, :column 13, :line 257, :file "cljs/core.cljs"} -contains-key?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7335, :column 3, :line 7335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7335, :column 4, :line 7335, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7335, :column 9, :line 7335, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 7331, :column 7, :line 7331, :file "cljs/core.cljs"} remove-watch ^{:arglists (^{:end-column 13, :end-line 7335, :column 3, :line 7335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7335, :column 4, :line 7335, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7335, :column 9, :line 7335, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 7331, :column 7, :line 7331, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7335, :column 4, :line 7335, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7335, :column 9, :line 7335, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7335, :column 3, :line 7335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7335, :column 4, :line 7335, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 7335, :column 9, :line 7335, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 7331, :column 7, :line 7331, :file "cljs/core.cljs"} remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7931, :column 4, :line 7931, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7931, :column 5, :line 7931, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7931, :column 9, :line 7931, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 7933, :column 4, :line 7933, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7933, :column 5, :line 7933, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7933, :column 9, :line 7933, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 7933, :column 13, :line 7933, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} ex-info ^{:arglists (^{:end-column 13, :end-line 7931, :column 4, :line 7931, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7931, :column 5, :line 7931, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7931, :column 9, :line 7931, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 7933, :column 4, :line 7933, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7933, :column 5, :line 7933, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7933, :column 9, :line 7933, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 7933, :column 13, :line 7933, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 7931, :column 5, :line 7931, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7931, :column 9, :line 7931, :file "cljs/core.cljs"} map] ^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 7933, :column 5, :line 7933, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7933, :column 9, :line 7933, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 7933, :column 13, :line 7933, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7931, :column 4, :line 7931, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7931, :column 5, :line 7931, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7931, :column 9, :line 7931, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 7933, :column 4, :line 7933, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7933, :column 5, :line 7933, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 7933, :column 9, :line 7933, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 7933, :column 13, :line 7933, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} ex-info, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1289, :column 21, :line 1289, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1289, :column 22, :line 1289, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1289, :column 8, :line 1289, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1289, :column 16, :line 1289, :file "cljs/core.cljs"} ifn? ^{:arglists (^{:end-column 24, :end-line 1289, :column 21, :line 1289, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1289, :column 22, :line 1289, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1289, :column 8, :line 1289, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1289, :column 16, :line 1289, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 24, :end-line 1289, :column 22, :line 1289, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1289, :column 21, :line 1289, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1289, :column 22, :line 1289, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1289, :column 8, :line 1289, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1289, :column 16, :line 1289, :file "cljs/core.cljs"} ifn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7170, :column 14, :line 7170, :file "cljs/core.cljs"} IAtom ^{:impls #{cljs.core/Atom}, :protocol-symbol true, :end-column 20, :end-line 7170, :column 14, :line 7170, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 7170, :column 14, :line 7170, :file "cljs/core.cljs"} IAtom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash])} ->PersistentQueue ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentQueue [^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash])} ->PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 339, :column 14, :line 339, :file "cljs/core.cljs"} IWatchable ^{:impls #{cljs.core/Atom}, :protocol-symbol true, :end-column 25, :end-line 339, :column 14, :line 339, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 339, :column 14, :line 339, :file "cljs/core.cljs"} IWatchable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3275, :column 22, :line 3275, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3275, :column 23, :line 3275, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3275, :column 8, :line 3275, :file "cljs/core.cljs"} pv-fresh-node ^{:arglists (^{:end-column 28, :end-line 3275, :column 22, :line 3275, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3275, :column 23, :line 3275, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3275, :column 8, :line 3275, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3275, :column 23, :line 3275, :file "cljs/core.cljs"} edit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3275, :column 22, :line 3275, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3275, :column 23, :line 3275, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3275, :column 8, :line 3275, :file "cljs/core.cljs"} pv-fresh-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 3553, :column 10, :line 3553, :file "cljs/core.cljs"} subvec ^{:arglists (^{:end-column 13, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3743, :column 7, :line 3743, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 3745, :column 4, :line 3745, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3745, :column 5, :line 3745, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3745, :column 7, :line 3745, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 3745, :column 13, :line 3745, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 3737, :column 7, :line 3737, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3743, :column 7, :line 3743, :file "cljs/core.cljs"} start] ^cljs.core/Subvec [^{:end-column 7, :end-line 3745, :column 5, :line 3745, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3745, :column 7, :line 3745, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 3745, :column 13, :line 3745, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3743, :column 7, :line 3743, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 3745, :column 4, :line 3745, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3745, :column 5, :line 3745, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 3745, :column 7, :line 3745, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 3745, :column 13, :line 3745, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 3737, :column 7, :line 3737, :file "cljs/core.cljs"} subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 359, :column 15, :line 359, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 359, :column 16, :line 359, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} -pop! ^{:arglists (^{:end-column 22, :end-line 359, :column 15, :line 359, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 359, :column 16, :line 359, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 359, :column 16, :line 359, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 359, :column 15, :line 359, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 359, :column 16, :line 359, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} -pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2782, :column 4, :line 2782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2782, :column 5, :line 2782, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 2783, :column 4, :line 2783, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2783, :column 5, :line 2783, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2783, :column 7, :line 2783, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2785, :column 7, :line 2785, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2785, :column 12, :line 2785, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2787, :column 7, :line 2787, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2787, :column 12, :line 2787, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2789, :column 5, :line 2789, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2789, :column 7, :line 2789, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2789, :column 12, :line 2789, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2789, :column 17, :line 2789, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 2789, :column 22, :line 2789, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 2789, :column 24, :line 2789, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 2778, :column 7, :line 2778, :file "cljs/core.cljs"} partial ^{:arglists (^{:end-column 7, :end-line 2782, :column 4, :line 2782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2782, :column 5, :line 2782, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 2783, :column 4, :line 2783, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2783, :column 5, :line 2783, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2783, :column 7, :line 2783, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2785, :column 7, :line 2785, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2785, :column 12, :line 2785, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2787, :column 7, :line 2787, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2787, :column 12, :line 2787, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2789, :column 5, :line 2789, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2789, :column 7, :line 2789, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2789, :column 12, :line 2789, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2789, :column 17, :line 2789, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 2789, :column 22, :line 2789, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 2789, :column 24, :line 2789, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 2778, :column 7, :line 2778, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2782, :column 5, :line 2782, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 2783, :column 5, :line 2783, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2783, :column 7, :line 2783, :file "cljs/core.cljs"} arg1] ^function [^{:end-column 7, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2785, :column 7, :line 2785, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2785, :column 12, :line 2785, :file "cljs/core.cljs"} arg2] ^function [^{:end-column 7, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2787, :column 7, :line 2787, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2787, :column 12, :line 2787, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} arg3] ^function [^{:end-column 7, :end-line 2789, :column 5, :line 2789, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2789, :column 7, :line 2789, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2789, :column 12, :line 2789, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2789, :column 17, :line 2789, :file "cljs/core.cljs"} arg3 & ^{:end-column 29, :end-line 2789, :column 24, :line 2789, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2782, :column 4, :line 2782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2782, :column 5, :line 2782, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 2783, :column 4, :line 2783, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2783, :column 5, :line 2783, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2783, :column 7, :line 2783, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2785, :column 7, :line 2785, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2785, :column 12, :line 2785, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2787, :column 7, :line 2787, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2787, :column 12, :line 2787, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2789, :column 5, :line 2789, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2789, :column 7, :line 2789, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 2789, :column 12, :line 2789, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 2789, :column 17, :line 2789, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 2789, :column 22, :line 2789, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 2789, :column 24, :line 2789, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 2778, :column 7, :line 2778, :file "cljs/core.cljs"} partial, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1226, :column 3, :line 1226, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1226, :column 4, :line 1226, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1225, :column 8, :line 1225, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1225, :column 16, :line 1225, :file "cljs/core.cljs"} chunked-seq? ^{:arglists (^{:end-column 6, :end-line 1226, :column 3, :line 1226, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1226, :column 4, :line 1226, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1225, :column 8, :line 1225, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1225, :column 16, :line 1225, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1226, :column 4, :line 1226, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1226, :column 3, :line 1226, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1226, :column 4, :line 1226, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1225, :column 8, :line 1225, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1225, :column 16, :line 1225, :file "cljs/core.cljs"} chunked-seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3055, :column 3, :line 3055, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3055, :column 4, :line 3055, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3055, :column 6, :line 3055, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3053, :column 7, :line 3053, :file "cljs/core.cljs"} replicate ^{:arglists (^{:end-column 8, :end-line 3055, :column 3, :line 3055, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3055, :column 4, :line 3055, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3055, :column 6, :line 3055, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3053, :column 7, :line 3053, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3055, :column 4, :line 3055, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3055, :column 6, :line 3055, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3055, :column 3, :line 3055, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3055, :column 4, :line 3055, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3055, :column 6, :line 3055, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3053, :column 7, :line 3053, :file "cljs/core.cljs"} replicate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3972, :column 10, :line 3972, :file "cljs/core.cljs"} PersistentQueue {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3972, :column 10, :line 3972, :file "cljs/core.cljs"} PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 3972, :column 26, :line 3972, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3972, :column 27, :line 3972, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 3972, :column 32, :line 3972, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 3972, :column 38, :line 3972, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 3972, :column 44, :line 3972, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 3972, :column 59, :line 3972, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 9, :end-line 6550, :column 4, :line 6550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6550, :column 5, :line 6550, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6550, :column 7, :line 6550, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6551, :column 4, :line 6551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6551, :column 5, :line 6551, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6551, :column 7, :line 6551, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6551, :column 9, :line 6551, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6552, :column 4, :line 6552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6552, :column 5, :line 6552, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6552, :column 7, :line 6552, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6552, :column 9, :line 6552, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6552, :column 11, :line 6552, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6552, :column 13, :line 6552, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 6548, :column 7, :line 6548, :file "cljs/core.cljs"} min-key ^{:arglists (^{:end-column 9, :end-line 6550, :column 4, :line 6550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6550, :column 5, :line 6550, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6550, :column 7, :line 6550, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6551, :column 4, :line 6551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6551, :column 5, :line 6551, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6551, :column 7, :line 6551, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6551, :column 9, :line 6551, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6552, :column 4, :line 6552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6552, :column 5, :line 6552, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6552, :column 7, :line 6552, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6552, :column 9, :line 6552, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6552, :column 11, :line 6552, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6552, :column 13, :line 6552, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 6548, :column 7, :line 6548, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6550, :column 5, :line 6550, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6550, :column 7, :line 6550, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 6551, :column 5, :line 6551, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6551, :column 7, :line 6551, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6551, :column 9, :line 6551, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 6552, :column 5, :line 6552, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6552, :column 7, :line 6552, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6552, :column 9, :line 6552, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 6552, :column 13, :line 6552, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6550, :column 4, :line 6550, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6550, :column 5, :line 6550, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6550, :column 7, :line 6550, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 6551, :column 4, :line 6551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6551, :column 5, :line 6551, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6551, :column 7, :line 6551, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6551, :column 9, :line 6551, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 6552, :column 4, :line 6552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6552, :column 5, :line 6552, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 6552, :column 7, :line 6552, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 6552, :column 9, :line 6552, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 6552, :column 11, :line 6552, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 6552, :column 13, :line 6552, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 6548, :column 7, :line 6548, :file "cljs/core.cljs"} min-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1916, :column 18, :line 1916, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1916, :column 19, :line 1916, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 1916, :column 8, :line 1916, :file "cljs/core.cljs"} hash-iset ^{:arglists (^{:end-column 21, :end-line 1916, :column 18, :line 1916, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1916, :column 19, :line 1916, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 1916, :column 8, :line 1916, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 1916, :column 19, :line 1916, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1916, :column 18, :line 1916, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1916, :column 19, :line 1916, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 1916, :column 8, :line 1916, :file "cljs/core.cljs"} hash-iset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 590, :column 3, :line 590, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 590, :column 4, :line 590, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 588, :column 7, :line 588, :file "cljs/core.cljs"} reduced ^{:arglists (^{:end-column 6, :end-line 590, :column 3, :line 590, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 590, :column 4, :line 590, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 588, :column 7, :line 588, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 6, :end-line 590, :column 4, :line 590, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 590, :column 3, :line 590, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 590, :column 4, :line 590, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 588, :column 7, :line 588, :file "cljs/core.cljs"} reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6810, :column 3, :line 6810, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6810, :column 4, :line 6810, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6810, :column 7, :line 6810, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 6808, :column 7, :line 6808, :file "cljs/core.cljs"} re-matches ^{:arglists (^{:end-column 9, :end-line 6810, :column 3, :line 6810, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6810, :column 4, :line 6810, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6810, :column 7, :line 6810, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 6808, :column 7, :line 6808, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 6810, :column 4, :line 6810, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6810, :column 7, :line 6810, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6810, :column 3, :line 6810, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6810, :column 4, :line 6810, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 6810, :column 7, :line 6810, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 6808, :column 7, :line 6808, :file "cljs/core.cljs"} re-matches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6051, :column 3, :line 6051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6051, :column 4, :line 6051, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6051, :column 6, :line 6051, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6048, :column 7, :line 6048, :file "cljs/core.cljs"} array-map ^{:arglists (^{:end-column 14, :end-line 6051, :column 3, :line 6051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6051, :column 4, :line 6051, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6051, :column 6, :line 6051, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6048, :column 7, :line 6048, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [& ^{:end-column 14, :end-line 6051, :column 6, :line 6051, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6051, :column 3, :line 6051, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6051, :column 4, :line 6051, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6051, :column 6, :line 6051, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6048, :column 7, :line 6048, :file "cljs/core.cljs"} array-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} ITransientSet ^{:impls #{cljs.core/TransientHashSet}, :protocol-symbol true, :end-column 28, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} ITransientSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1614, :column 30, :line 1614, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1614, :column 31, :line 1614, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1614, :column 8, :line 1614, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1614, :column 15, :line 1614, :file "cljs/core.cljs"} unchecked-byte ^{:arglists (^{:end-column 33, :end-line 1614, :column 30, :line 1614, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1614, :column 31, :line 1614, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1614, :column 8, :line 1614, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1614, :column 15, :line 1614, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1614, :column 31, :line 1614, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1614, :column 30, :line 1614, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1614, :column 31, :line 1614, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1614, :column 8, :line 1614, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1614, :column 15, :line 1614, :file "cljs/core.cljs"} unchecked-byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 4614, :column 10, :line 4614, :file "cljs/core.cljs"} ArrayNode {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 4827, :column 10, :line 4827, :file "cljs/core.cljs"} ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 4827, :column 20, :line 4827, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4827, :column 21, :line 4827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 4827, :column 36, :line 4827, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 4827, :column 50, :line 4827, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash])} ->ChunkedSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 3555, :column 22, :line 3555, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 3555, :column 26, :line 3555, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 3555, :column 31, :line 3555, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 3555, :column 33, :line 3555, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 3555, :column 37, :line 3555, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 3555, :column 52, :line 3555, :file "cljs/core.cljs"} __hash])} ->ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2883, :column 4, :line 2883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2883, :column 5, :line 2883, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2891, :column 4, :line 2891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2891, :column 5, :line 2891, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2891, :column 8, :line 2891, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2899, :column 4, :line 2899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2899, :column 5, :line 2899, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2899, :column 8, :line 2899, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2899, :column 11, :line 2899, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2907, :column 4, :line 2907, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2907, :column 5, :line 2907, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2907, :column 8, :line 2907, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2907, :column 11, :line 2907, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2907, :column 14, :line 2907, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2907, :column 16, :line 2907, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 2878, :column 7, :line 2878, :file "cljs/core.cljs"} every-pred ^{:arglists (^{:end-column 7, :end-line 2883, :column 4, :line 2883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2883, :column 5, :line 2883, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2891, :column 4, :line 2891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2891, :column 5, :line 2891, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2891, :column 8, :line 2891, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2899, :column 4, :line 2899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2899, :column 5, :line 2899, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2899, :column 8, :line 2899, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2899, :column 11, :line 2899, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2907, :column 4, :line 2907, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2907, :column 5, :line 2907, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2907, :column 8, :line 2907, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2907, :column 11, :line 2907, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2907, :column 14, :line 2907, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2907, :column 16, :line 2907, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 2878, :column 7, :line 2878, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 2883, :column 5, :line 2883, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 2891, :column 5, :line 2891, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2891, :column 8, :line 2891, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 2899, :column 5, :line 2899, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2899, :column 8, :line 2899, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2899, :column 11, :line 2899, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 2907, :column 5, :line 2907, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2907, :column 8, :line 2907, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2907, :column 11, :line 2907, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 2907, :column 16, :line 2907, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2883, :column 4, :line 2883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2883, :column 5, :line 2883, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2891, :column 4, :line 2891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2891, :column 5, :line 2891, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2891, :column 8, :line 2891, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2899, :column 4, :line 2899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2899, :column 5, :line 2899, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2899, :column 8, :line 2899, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2899, :column 11, :line 2899, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2907, :column 4, :line 2907, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2907, :column 5, :line 2907, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2907, :column 8, :line 2907, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2907, :column 11, :line 2907, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2907, :column 14, :line 2907, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2907, :column 16, :line 2907, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 2878, :column 7, :line 2878, :file "cljs/core.cljs"} every-pred, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 6141, :column 3, :line 6141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6141, :column 4, :line 6141, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6139, :column 7, :line 6139, :file "cljs/core.cljs"} keys ^{:arglists (^{:end-column 13, :end-line 6141, :column 3, :line 6141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6141, :column 4, :line 6141, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6139, :column 7, :line 6139, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6141, :column 4, :line 6141, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6141, :column 3, :line 6141, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6141, :column 4, :line 6141, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6139, :column 7, :line 6139, :file "cljs/core.cljs"} keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 131, :column 24, :line 131, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 131, :column 25, :line 131, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 131, :column 31, :line 131, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} missing-protocol ^{:arglists (^{:end-column 35, :end-line 131, :column 24, :line 131, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 131, :column 25, :line 131, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 131, :column 31, :line 131, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} {:arglists (^js/Error [^{:end-column 31, :end-line 131, :column 25, :line 131, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 131, :column 31, :line 131, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 131, :column 24, :line 131, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 131, :column 25, :line 131, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 131, :column 31, :line 131, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} missing-protocol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 4332, :column 10, :line 4332, :file "cljs/core.cljs"} PersistentArrayMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 4332, :column 10, :line 4332, :file "cljs/core.cljs"} PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 4332, :column 29, :line 4332, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4332, :column 30, :line 4332, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 4332, :column 35, :line 4332, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4332, :column 39, :line 4332, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 4332, :column 53, :line 4332, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 1321, :column 4, :line 1321, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1321, :column 5, :line 1321, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1322, :column 7, :line 1322, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1323, :column 7, :line 1323, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1323, :column 9, :line 1323, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1323, :column 11, :line 1323, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} distinct? ^{:arglists (^{:end-column 7, :end-line 1321, :column 4, :line 1321, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1321, :column 5, :line 1321, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1322, :column 7, :line 1322, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1323, :column 7, :line 1323, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1323, :column 9, :line 1323, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1323, :column 11, :line 1323, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1321, :column 5, :line 1321, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1322, :column 7, :line 1322, :file "cljs/core.cljs"} y] ^cljs.core/boolean [^{:end-column 7, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1323, :column 7, :line 1323, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1323, :column 11, :line 1323, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1321, :column 4, :line 1321, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1321, :column 5, :line 1321, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1322, :column 7, :line 1322, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1323, :column 7, :line 1323, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1323, :column 9, :line 1323, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1323, :column 11, :line 1323, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} distinct?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 42, :end-line 4030, :column 1, :line 4030, :file "cljs/core.cljs"} never-equiv ^{:private true, :end-column 42, :end-line 4030, :column 1, :line 4030, :file "cljs/core.cljs"} {:tag cljs.core/NeverEquiv, :op :var, :name ^{:private true, :end-column 42, :end-line 4030, :column 1, :line 4030, :file "cljs/core.cljs"} never-equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1616, :column 31, :line 1616, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1616, :column 32, :line 1616, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1616, :column 8, :line 1616, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1616, :column 15, :line 1616, :file "cljs/core.cljs"} unchecked-short ^{:arglists (^{:end-column 34, :end-line 1616, :column 31, :line 1616, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1616, :column 32, :line 1616, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1616, :column 8, :line 1616, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1616, :column 15, :line 1616, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1616, :column 32, :line 1616, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1616, :column 31, :line 1616, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1616, :column 32, :line 1616, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1616, :column 8, :line 1616, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1616, :column 15, :line 1616, :file "cljs/core.cljs"} unchecked-short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash])} ->Range ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Range [^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash])} ->Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7890, :column 3, :line 7890, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 7888, :column 7, :line 7888, :file "cljs/core.cljs"} methods ^{:arglists (^{:end-column 12, :end-line 7890, :column 3, :line 7890, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 7888, :column 7, :line 7888, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7890, :column 3, :line 7890, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 7888, :column 7, :line 7888, :file "cljs/core.cljs"} methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2729, :column 8, :line 2729, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2729, :column 16, :line 2729, :file "cljs/core.cljs"} odd? ^{:arglists (^{:end-column 6, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2729, :column 8, :line 2729, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2729, :column 16, :line 2729, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 2729, :column 8, :line 2729, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2729, :column 16, :line 2729, :file "cljs/core.cljs"} odd?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end])} ->ArrayChunk ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end])} {:arglists (^cljs.core/ArrayChunk [^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end])} ->ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 601, :column 12, :line 601, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 612, :column 4, :line 612, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 612, :column 5, :line 612, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 612, :column 12, :line 612, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 612, :column 14, :line 612, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 621, :column 4, :line 621, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 621, :column 5, :line 621, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 621, :column 12, :line 621, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 621, :column 14, :line 621, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 621, :column 18, :line 621, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 598, :column 8, :line 598, :file "cljs/core.cljs"} ci-reduce ^{:arglists (^{:end-column 14, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 601, :column 12, :line 601, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 612, :column 4, :line 612, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 612, :column 5, :line 612, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 612, :column 12, :line 612, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 612, :column 14, :line 612, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 621, :column 4, :line 621, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 621, :column 5, :line 621, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 621, :column 12, :line 621, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 621, :column 14, :line 621, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 621, :column 18, :line 621, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 598, :column 8, :line 598, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 601, :column 12, :line 601, :file "cljs/core.cljs"} f] [^{:end-column 12, :end-line 612, :column 5, :line 612, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 612, :column 12, :line 612, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 612, :column 14, :line 612, :file "cljs/core.cljs"} val] [^{:end-column 12, :end-line 621, :column 5, :line 621, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 621, :column 12, :line 621, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 621, :column 14, :line 621, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 621, :column 18, :line 621, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 601, :column 12, :line 601, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 612, :column 4, :line 612, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 612, :column 5, :line 612, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 612, :column 12, :line 612, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 612, :column 14, :line 612, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 621, :column 4, :line 621, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 621, :column 5, :line 621, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 621, :column 12, :line 621, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 621, :column 14, :line 621, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 621, :column 18, :line 621, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 598, :column 8, :line 598, :file "cljs/core.cljs"} ci-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3 ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 7690, :column 16, :line 7690, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7690, :column 17, :line 7690, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7690, :column 20, :line 7690, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7690, :column 4, :line 7690, :file "cljs/core.cljs"} -get-method ^{:arglists (^{:end-column 33, :end-line 7690, :column 16, :line 7690, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7690, :column 17, :line 7690, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7690, :column 20, :line 7690, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7690, :column 4, :line 7690, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 7690, :column 17, :line 7690, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7690, :column 20, :line 7690, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 7690, :column 16, :line 7690, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7690, :column 17, :line 7690, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 7690, :column 20, :line 7690, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 7690, :column 4, :line 7690, :file "cljs/core.cljs"} -get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 6720, :column 3, :line 6720, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6720, :column 4, :line 6720, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 6717, :column 7, :line 6717, :file "cljs/core.cljs"} frequencies ^{:arglists (^{:end-column 9, :end-line 6720, :column 3, :line 6720, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6720, :column 4, :line 6720, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 6717, :column 7, :line 6717, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 6720, :column 4, :line 6720, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 6720, :column 3, :line 6720, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6720, :column 4, :line 6720, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 6717, :column 7, :line 6717, :file "cljs/core.cljs"} frequencies, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1210, :column 3, :line 1210, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1210, :column 4, :line 1210, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1208, :column 8, :line 1208, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1208, :column 16, :line 1208, :file "cljs/core.cljs"} reduceable? ^{:arglists (^{:end-column 6, :end-line 1210, :column 3, :line 1210, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1210, :column 4, :line 1210, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1208, :column 8, :line 1208, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1208, :column 16, :line 1208, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1210, :column 4, :line 1210, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1210, :column 3, :line 1210, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1210, :column 4, :line 1210, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1208, :column 8, :line 1208, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1208, :column 16, :line 1208, :file "cljs/core.cljs"} reduceable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 33, :end-line 1138, :column 1, :line 1138, :file "cljs/core.cljs"} string-hash-cache ^{:end-column 33, :end-line 1138, :column 1, :line 1138, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 33, :end-line 1138, :column 1, :line 1138, :file "cljs/core.cljs"} string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 6599, :column 4, :line 6599, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6599, :column 5, :line 6599, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6599, :column 8, :line 6599, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6599, :column 13, :line 6599, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6605, :column 4, :line 6605, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6605, :column 5, :line 6605, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6605, :column 8, :line 6605, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6605, :column 19, :line 6605, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6605, :column 29, :line 6605, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6605, :column 38, :line 6605, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 6595, :column 7, :line 6595, :file "cljs/core.cljs"} rsubseq ^{:arglists (^{:end-column 17, :end-line 6599, :column 4, :line 6599, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6599, :column 5, :line 6599, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6599, :column 8, :line 6599, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6599, :column 13, :line 6599, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6605, :column 4, :line 6605, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6605, :column 5, :line 6605, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6605, :column 8, :line 6605, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6605, :column 19, :line 6605, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6605, :column 29, :line 6605, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6605, :column 38, :line 6605, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 6595, :column 7, :line 6595, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 6599, :column 5, :line 6599, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6599, :column 8, :line 6599, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6599, :column 13, :line 6599, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 6605, :column 5, :line 6605, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6605, :column 8, :line 6605, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6605, :column 19, :line 6605, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6605, :column 29, :line 6605, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6605, :column 38, :line 6605, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 6599, :column 4, :line 6599, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6599, :column 5, :line 6599, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 6599, :column 8, :line 6599, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 6599, :column 13, :line 6599, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 6605, :column 4, :line 6605, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6605, :column 5, :line 6605, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 6605, :column 8, :line 6605, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 6605, :column 19, :line 6605, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 6605, :column 29, :line 6605, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 6605, :column 38, :line 6605, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 6595, :column 7, :line 6595, :file "cljs/core.cljs"} rsubseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 580, :column 3, :line 580, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 580, :column 4, :line 580, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 578, :column 7, :line 578, :file "cljs/core.cljs"} inc ^{:arglists (^{:end-column 6, :end-line 580, :column 3, :line 580, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 580, :column 4, :line 580, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 578, :column 7, :line 578, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 580, :column 4, :line 580, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 580, :column 3, :line 580, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 580, :column 4, :line 580, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 578, :column 7, :line 578, :file "cljs/core.cljs"} inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 140, :column 17, :line 140, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 140, :column 18, :line 140, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 140, :column 7, :line 140, :file "cljs/core.cljs"} type->str ^{:arglists (^{:end-column 21, :end-line 140, :column 17, :line 140, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 140, :column 18, :line 140, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 140, :column 7, :line 140, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 140, :column 18, :line 140, :file "cljs/core.cljs"} ty]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 140, :column 17, :line 140, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 140, :column 18, :line 140, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 140, :column 7, :line 140, :file "cljs/core.cljs"} type->str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4082, :column 23, :line 4082, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} obj-clone ^{:arglists (^{:end-column 26, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4082, :column 23, :line 4082, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} {:arglists (^object [^{:end-column 23, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4082, :column 23, :line 4082, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4082, :column 23, :line 4082, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} obj-clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 7895, :column 3, :line 7895, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7895, :column 4, :line 7895, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 7895, :column 12, :line 7895, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 7892, :column 7, :line 7892, :file "cljs/core.cljs"} get-method ^{:arglists (^{:end-column 25, :end-line 7895, :column 3, :line 7895, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7895, :column 4, :line 7895, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 7895, :column 12, :line 7895, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 7892, :column 7, :line 7892, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7895, :column 4, :line 7895, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 7895, :column 12, :line 7895, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 7895, :column 3, :line 7895, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7895, :column 4, :line 7895, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 7895, :column 12, :line 7895, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 7892, :column 7, :line 7892, :file "cljs/core.cljs"} get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 3319, :column 35, :line 3319, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3319, :column 36, :line 3319, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3319, :column 38, :line 3319, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3319, :column 8, :line 3319, :file "cljs/core.cljs"} vector-index-out-of-bounds ^{:arglists (^{:end-column 42, :end-line 3319, :column 35, :line 3319, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3319, :column 36, :line 3319, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3319, :column 38, :line 3319, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3319, :column 8, :line 3319, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 38, :end-line 3319, :column 36, :line 3319, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3319, :column 38, :line 3319, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 3319, :column 35, :line 3319, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3319, :column 36, :line 3319, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3319, :column 38, :line 3319, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3319, :column 8, :line 3319, :file "cljs/core.cljs"} vector-index-out-of-bounds, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1775, :column 3, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1775, :column 6, :line 1775, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} bit-clear ^{:arglists (^{:end-column 8, :end-line 1775, :column 3, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1775, :column 6, :line 1775, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1775, :column 6, :line 1775, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1775, :column 3, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1775, :column 6, :line 1775, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} bit-clear, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 6610, :column 10, :line 6610, :file "cljs/core.cljs"} Range {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 6610, :column 10, :line 6610, :file "cljs/core.cljs"} Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 6610, :column 16, :line 6610, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 6610, :column 17, :line 6610, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 6610, :column 28, :line 6610, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 6610, :column 47, :line 6610, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 3112, :column 4, :line 3112, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3112, :column 5, :line 3112, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3112, :column 10, :line 3112, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3109, :column 7, :line 3109, :file "cljs/core.cljs"} filter ^{:arglists (^{:end-column 15, :end-line 3112, :column 4, :line 3112, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3112, :column 5, :line 3112, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3112, :column 10, :line 3112, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3109, :column 7, :line 3109, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 10, :end-line 3112, :column 5, :line 3112, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3112, :column 10, :line 3112, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 3112, :column 4, :line 3112, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3112, :column 5, :line 3112, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3112, :column 10, :line 3112, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3109, :column 7, :line 3109, :file "cljs/core.cljs"} filter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMapSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 5403, :column 32, :line 5403, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 5403, :column 37, :line 5403, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 5403, :column 44, :line 5403, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 5403, :column 52, :line 5403, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 5403, :column 63, :line 5403, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 5403, :column 77, :line 5403, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 49, :end-line 4555, :column 27, :line 4555, :file "cljs/core.cljs"} create-array-node-seq ^{:arglists (^{:end-column 11, :end-line 5156, :column 4, :line 5156, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5156, :column 5, :line 5156, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5157, :column 4, :line 5157, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5157, :column 5, :line 5157, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5157, :column 10, :line 5157, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5157, :column 16, :line 5157, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5157, :column 18, :line 5157, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5155, :column 8, :line 5155, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5156, :column 5, :line 5156, :file "cljs/core.cljs"} nodes] [^{:end-column 10, :end-line 5157, :column 5, :line 5157, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5157, :column 10, :line 5157, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5157, :column 16, :line 5157, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5157, :column 18, :line 5157, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5156, :column 4, :line 5156, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5156, :column 5, :line 5156, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5157, :column 4, :line 5157, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5157, :column 5, :line 5157, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5157, :column 10, :line 5157, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5157, :column 16, :line 5157, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5157, :column 18, :line 5157, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5155, :column 8, :line 5155, :file "cljs/core.cljs"} create-array-node-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 358, :column 20, :line 358, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 358, :column 26, :line 358, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 358, :column 28, :line 358, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 358, :column 5, :line 358, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 358, :column 9, :line 358, :file "cljs/core.cljs"} -assoc-n! ^{:arglists (^{:end-column 32, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 358, :column 20, :line 358, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 358, :column 26, :line 358, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 358, :column 28, :line 358, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 358, :column 5, :line 358, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 358, :column 9, :line 358, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 358, :column 20, :line 358, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 358, :column 26, :line 358, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 358, :column 28, :line 358, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 358, :column 20, :line 358, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 358, :column 26, :line 358, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 358, :column 28, :line 358, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 358, :column 5, :line 358, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 358, :column 9, :line 358, :file "cljs/core.cljs"} -assoc-n!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} IWithMeta ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 24, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} IWithMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 400, :column 10, :line 400, :file "cljs/core.cljs"} list ^{:arglists (^{:end-column 18, :end-line 2061, :column 12, :line 2061, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2061, :column 13, :line 2061, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2061, :column 15, :line 2061, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} {:arglists (^cljs.core/not-native [& ^{:end-column 18, :end-line 2061, :column 15, :line 2061, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2061, :column 12, :line 2061, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2061, :column 13, :line 2061, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2061, :column 15, :line 2061, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1505, :column 4, :line 1505, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1506, :column 4, :line 1506, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1506, :column 5, :line 1506, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1507, :column 5, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1507, :column 7, :line 1507, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1508, :column 4, :line 1508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1508, :column 5, :line 1508, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1508, :column 7, :line 1508, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1508, :column 9, :line 1508, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1508, :column 11, :line 1508, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1503, :column 8, :line 1503, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1503, :column 15, :line 1503, :file "cljs/core.cljs"} + ^{:arglists (^{:end-column 6, :end-line 1505, :column 4, :line 1505, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1506, :column 4, :line 1506, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1506, :column 5, :line 1506, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1507, :column 5, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1507, :column 7, :line 1507, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1508, :column 4, :line 1508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1508, :column 5, :line 1508, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1508, :column 7, :line 1508, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1508, :column 9, :line 1508, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1508, :column 11, :line 1508, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1503, :column 8, :line 1503, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1503, :column 15, :line 1503, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1506, :column 5, :line 1506, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1507, :column 5, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1507, :column 7, :line 1507, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1508, :column 5, :line 1508, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1508, :column 7, :line 1508, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1508, :column 11, :line 1508, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1505, :column 4, :line 1505, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1506, :column 4, :line 1506, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1506, :column 5, :line 1506, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1507, :column 5, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1507, :column 7, :line 1507, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1508, :column 4, :line 1508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1508, :column 5, :line 1508, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1508, :column 7, :line 1508, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1508, :column 9, :line 1508, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1508, :column 11, :line 1508, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1503, :column 8, :line 1503, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1503, :column 15, :line 1503, :file "cljs/core.cljs"} +, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6703, :column 3, :line 6703, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6703, :column 4, :line 6703, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6703, :column 9, :line 6703, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 6701, :column 7, :line 6701, :file "cljs/core.cljs"} split-with ^{:arglists (^{:end-column 14, :end-line 6703, :column 3, :line 6703, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6703, :column 4, :line 6703, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6703, :column 9, :line 6703, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 6701, :column 7, :line 6701, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 9, :end-line 6703, :column 4, :line 6703, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6703, :column 9, :line 6703, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6703, :column 3, :line 6703, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6703, :column 4, :line 6703, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 6703, :column 9, :line 6703, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 6701, :column 7, :line 6701, :file "cljs/core.cljs"} split-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr])} ->VectorNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3273, :column 22, :line 3273, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3273, :column 27, :line 3273, :file "cljs/core.cljs"} arr])} ->VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 179, :column 4, :line 179, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 179, :column 5, :line 179, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 179, :column 11, :line 179, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 179, :column 13, :line 179, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 181, :column 15, :line 181, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 181, :column 20, :line 181, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 181, :column 22, :line 181, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 177, :column 7, :line 177, :file "cljs/core.cljs"} aset ^{:arglists (^{:end-column 17, :end-line 179, :column 4, :line 179, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 179, :column 5, :line 179, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 179, :column 11, :line 179, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 179, :column 13, :line 179, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 181, :column 15, :line 181, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 181, :column 20, :line 181, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 181, :column 22, :line 181, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 177, :column 7, :line 177, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 179, :column 5, :line 179, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 179, :column 11, :line 179, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 179, :column 13, :line 179, :file "cljs/core.cljs"} val] [^{:end-column 11, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 181, :column 15, :line 181, :file "cljs/core.cljs"} idx2 & ^{:end-column 27, :end-line 181, :column 22, :line 181, :file "cljs/core.cljs"} idxv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 179, :column 4, :line 179, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 179, :column 5, :line 179, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 179, :column 11, :line 179, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 179, :column 13, :line 179, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 181, :column 15, :line 181, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 181, :column 20, :line 181, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 181, :column 22, :line 181, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 177, :column 7, :line 177, :file "cljs/core.cljs"} aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2185, :column 4, :line 2185, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2185, :column 5, :line 2185, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2194, :column 4, :line 2194, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2194, :column 5, :line 2194, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2194, :column 8, :line 2194, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2182, :column 7, :line 2182, :file "cljs/core.cljs"} keyword ^{:arglists (^{:end-column 10, :end-line 2185, :column 4, :line 2185, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2185, :column 5, :line 2185, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2194, :column 4, :line 2194, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2194, :column 5, :line 2194, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2194, :column 8, :line 2194, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2182, :column 7, :line 2182, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 2185, :column 5, :line 2185, :file "cljs/core.cljs"} name] ^cljs.core/Keyword [^{:end-column 8, :end-line 2194, :column 5, :line 2194, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2194, :column 8, :line 2194, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2185, :column 4, :line 2185, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2185, :column 5, :line 2185, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2194, :column 4, :line 2194, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2194, :column 5, :line 2194, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2194, :column 8, :line 2194, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2182, :column 7, :line 2182, :file "cljs/core.cljs"} keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash])} ->Cons ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Cons [^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2076, :column 16, :line 2076, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2076, :column 21, :line 2076, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2076, :column 27, :line 2076, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2076, :column 42, :line 2076, :file "cljs/core.cljs"} __hash])} ->Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 5452, :column 28, :line 5452, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5452, :column 29, :line 5452, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 5452, :column 34, :line 5452, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 5452, :column 45, :line 5452, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 5452, :column 8, :line 5452, :file "cljs/core.cljs"} create-tree-map-seq ^{:arglists (^{:end-column 49, :end-line 5452, :column 28, :line 5452, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5452, :column 29, :line 5452, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 5452, :column 34, :line 5452, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 5452, :column 45, :line 5452, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 5452, :column 8, :line 5452, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 34, :end-line 5452, :column 29, :line 5452, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 5452, :column 34, :line 5452, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 5452, :column 45, :line 5452, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 5452, :column 28, :line 5452, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5452, :column 29, :line 5452, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 5452, :column 34, :line 5452, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 5452, :column 45, :line 5452, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 5452, :column 8, :line 5452, :file "cljs/core.cljs"} create-tree-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 235, :column 14, :line 235, :file "cljs/core.cljs"} ICollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 26, :end-line 235, :column 14, :line 235, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 235, :column 14, :line 235, :file "cljs/core.cljs"} ICollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1719, :column 13, :line 1719, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1719, :column 14, :line 1719, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1719, :column 7, :line 1719, :file "cljs/core.cljs"} chars ^{:arglists (^{:end-column 16, :end-line 1719, :column 13, :line 1719, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1719, :column 14, :line 1719, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1719, :column 7, :line 1719, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1719, :column 14, :line 1719, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1719, :column 13, :line 1719, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1719, :column 14, :line 1719, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1719, :column 7, :line 1719, :file "cljs/core.cljs"} chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1861, :column 4, :line 1861, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1861, :column 5, :line 1861, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1864, :column 7, :line 1864, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 1864, :column 9, :line 1864, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 1856, :column 7, :line 1856, :file "cljs/core.cljs"} str ^{:arglists (^{:end-column 6, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1861, :column 4, :line 1861, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1861, :column 5, :line 1861, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1864, :column 7, :line 1864, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 1864, :column 9, :line 1864, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 1856, :column 7, :line 1856, :file "cljs/core.cljs"} {:arglists (^string [] [^{:end-column 7, :end-line 1861, :column 5, :line 1861, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x & ^{:end-column 12, :end-line 1864, :column 9, :line 1864, :file "cljs/core.cljs"} ys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1861, :column 4, :line 1861, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1861, :column 5, :line 1861, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1864, :column 7, :line 1864, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 1864, :column 9, :line 1864, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 1856, :column 7, :line 1856, :file "cljs/core.cljs"} str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 520, :column 3, :line 520, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 520, :column 4, :line 520, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 517, :column 8, :line 517, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 517, :column 12, :line 517, :file "cljs/core.cljs"} next ^{:arglists (^{:end-column 9, :end-line 520, :column 3, :line 520, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 520, :column 4, :line 520, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 517, :column 8, :line 517, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 517, :column 12, :line 517, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 520, :column 4, :line 520, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 520, :column 3, :line 520, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 520, :column 4, :line 520, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 517, :column 8, :line 517, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 517, :column 12, :line 517, :file "cljs/core.cljs"} next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 244, :column 14, :line 244, :file "cljs/core.cljs"} ASeq ^{:impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/List cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 19, :end-line 244, :column 14, :line 244, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 244, :column 14, :line 244, :file "cljs/core.cljs"} ASeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 39, :end-line 6966, :column 21, :line 6966, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6966, :column 22, :line 6966, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 6966, :column 27, :line 6966, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 6966, :column 34, :line 6966, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 6966, :column 7, :line 6966, :file "cljs/core.cljs"} pr-seq-writer ^{:arglists (^{:end-column 39, :end-line 6966, :column 21, :line 6966, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6966, :column 22, :line 6966, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 6966, :column 27, :line 6966, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 6966, :column 34, :line 6966, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 6966, :column 7, :line 6966, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6966, :column 22, :line 6966, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 6966, :column 27, :line 6966, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 6966, :column 34, :line 6966, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 39, :end-line 6966, :column 21, :line 6966, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6966, :column 22, :line 6966, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 6966, :column 27, :line 6966, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 6966, :column 34, :line 6966, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 6966, :column 7, :line 6966, :file "cljs/core.cljs"} pr-seq-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 18, :end-line 202, :column 14, :line 202, :file "cljs/core.cljs"} IFn ^{:impls #{cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/Keyword cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Symbol cljs.core/MetaFn cljs.core/RedNode}, :protocol-symbol true, :end-column 18, :end-line 202, :column 14, :line 202, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 18, :end-line 202, :column 14, :line 202, :file "cljs/core.cljs"} IFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 6805, :column 15, :line 6805, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6805, :column 16, :line 6805, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} regexp? ^{:arglists (^{:end-column 18, :end-line 6805, :column 15, :line 6805, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6805, :column 16, :line 6805, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 18, :end-line 6805, :column 16, :line 6805, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 6805, :column 15, :line 6805, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 6805, :column 16, :line 6805, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} regexp?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 545, :column 10, :line 545, :file "cljs/core.cljs"} hash-map ^{:arglists (^{:end-column 14, :end-line 6042, :column 3, :line 6042, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6042, :column 4, :line 6042, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6042, :column 6, :line 6042, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6039, :column 7, :line 6039, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [& ^{:end-column 14, :end-line 6042, :column 6, :line 6042, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6042, :column 3, :line 6042, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6042, :column 4, :line 6042, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6042, :column 6, :line 6042, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6039, :column 7, :line 6039, :file "cljs/core.cljs"} hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7616, :column 4, :line 7616, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7616, :column 5, :line 7616, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7616, :column 9, :line 7616, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} underive ^{:arglists (^{:end-column 16, :end-line 7616, :column 4, :line 7616, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7616, :column 5, :line 7616, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7616, :column 9, :line 7616, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7616, :column 5, :line 7616, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7616, :column 9, :line 7616, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7616, :column 4, :line 7616, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7616, :column 5, :line 7616, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 7616, :column 9, :line 7616, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} underive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1244, :column 4, :line 1244, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1244, :column 5, :line 1244, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1244, :column 10, :line 1244, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1244, :column 12, :line 1244, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1244, :column 15, :line 1244, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1244, :column 17, :line 1244, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1243, :column 8, :line 1243, :file "cljs/core.cljs"} array-copy ^{:arglists (^{:end-column 21, :end-line 1244, :column 4, :line 1244, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1244, :column 5, :line 1244, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1244, :column 10, :line 1244, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1244, :column 12, :line 1244, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1244, :column 15, :line 1244, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1244, :column 17, :line 1244, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1243, :column 8, :line 1243, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1244, :column 5, :line 1244, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1244, :column 10, :line 1244, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1244, :column 12, :line 1244, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1244, :column 15, :line 1244, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1244, :column 17, :line 1244, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1244, :column 4, :line 1244, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1244, :column 5, :line 1244, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1244, :column 10, :line 1244, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1244, :column 12, :line 1244, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1244, :column 15, :line 1244, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1244, :column 17, :line 1244, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1243, :column 8, :line 1243, :file "cljs/core.cljs"} array-copy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4060, :column 29, :line 4060, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4060, :column 30, :line 4060, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4060, :column 32, :line 4060, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} obj-map-compare-keys ^{:arglists (^{:end-column 34, :end-line 4060, :column 29, :line 4060, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4060, :column 30, :line 4060, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4060, :column 32, :line 4060, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 4060, :column 30, :line 4060, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4060, :column 32, :line 4060, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4060, :column 29, :line 4060, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4060, :column 30, :line 4060, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4060, :column 32, :line 4060, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} obj-map-compare-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 7173, :column 12, :line 7173, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7173, :column 13, :line 7173, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 7173, :column 15, :line 7173, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 7173, :column 4, :line 7173, :file "cljs/core.cljs"} -reset! ^{:arglists (^{:end-column 25, :end-line 7173, :column 12, :line 7173, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7173, :column 13, :line 7173, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 7173, :column 15, :line 7173, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 7173, :column 4, :line 7173, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 7173, :column 13, :line 7173, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 7173, :column 15, :line 7173, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 7173, :column 12, :line 7173, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7173, :column 13, :line 7173, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 7173, :column 15, :line 7173, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 7173, :column 4, :line 7173, :file "cljs/core.cljs"} -reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 248, :column 15, :line 248, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 248, :column 16, :line 248, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 248, :column 5, :line 248, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 248, :column 9, :line 248, :file "cljs/core.cljs"} -rest ^{:arglists (^{:end-column 21, :end-line 248, :column 15, :line 248, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 248, :column 16, :line 248, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 248, :column 5, :line 248, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 248, :column 9, :line 248, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 248, :column 16, :line 248, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 248, :column 15, :line 248, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 248, :column 16, :line 248, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 248, :column 5, :line 248, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 248, :column 9, :line 248, :file "cljs/core.cljs"} -rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 3371, :column 31, :line 3371, :file "cljs/core.cljs"} pr-writer ^{:arglists (^{:end-column 20, :end-line 6899, :column 3, :line 6899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6899, :column 4, :line 6899, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 6899, :column 8, :line 6899, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 6899, :column 15, :line 6899, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 6895, :column 8, :line 6895, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 6899, :column 4, :line 6899, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 6899, :column 8, :line 6899, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 6899, :column 15, :line 6899, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 6899, :column 3, :line 6899, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6899, :column 4, :line 6899, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 6899, :column 8, :line 6899, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 6899, :column 15, :line 6899, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 6895, :column 8, :line 6895, :file "cljs/core.cljs"} pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1265, :column 3, :line 1265, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1265, :column 4, :line 1265, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1263, :column 8, :line 1263, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1263, :column 16, :line 1263, :file "cljs/core.cljs"} false? ^{:arglists (^{:end-column 6, :end-line 1265, :column 3, :line 1265, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1265, :column 4, :line 1265, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1263, :column 8, :line 1263, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1263, :column 16, :line 1263, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1265, :column 4, :line 1265, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1265, :column 3, :line 1265, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1265, :column 4, :line 1265, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1263, :column 8, :line 1263, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1263, :column 16, :line 1263, :file "cljs/core.cljs"} false?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably* ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1721, :column 12, :line 1721, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1721, :column 13, :line 1721, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1721, :column 7, :line 1721, :file "cljs/core.cljs"} ints ^{:arglists (^{:end-column 15, :end-line 1721, :column 12, :line 1721, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1721, :column 13, :line 1721, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1721, :column 7, :line 1721, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1721, :column 13, :line 1721, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1721, :column 12, :line 1721, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1721, :column 13, :line 1721, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1721, :column 7, :line 1721, :file "cljs/core.cljs"} ints, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2922, :column 4, :line 2922, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2922, :column 5, :line 2922, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2930, :column 4, :line 2930, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2930, :column 5, :line 2930, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2930, :column 8, :line 2930, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2938, :column 4, :line 2938, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2938, :column 5, :line 2938, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2938, :column 8, :line 2938, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2938, :column 11, :line 2938, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2946, :column 4, :line 2946, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2946, :column 5, :line 2946, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2946, :column 8, :line 2946, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2946, :column 11, :line 2946, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2946, :column 14, :line 2946, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2946, :column 16, :line 2946, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 2917, :column 7, :line 2917, :file "cljs/core.cljs"} some-fn ^{:arglists (^{:end-column 7, :end-line 2922, :column 4, :line 2922, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2922, :column 5, :line 2922, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2930, :column 4, :line 2930, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2930, :column 5, :line 2930, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2930, :column 8, :line 2930, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2938, :column 4, :line 2938, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2938, :column 5, :line 2938, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2938, :column 8, :line 2938, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2938, :column 11, :line 2938, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2946, :column 4, :line 2946, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2946, :column 5, :line 2946, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2946, :column 8, :line 2946, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2946, :column 11, :line 2946, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2946, :column 14, :line 2946, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2946, :column 16, :line 2946, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 2917, :column 7, :line 2917, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 2922, :column 5, :line 2922, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 2930, :column 5, :line 2930, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2930, :column 8, :line 2930, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 2938, :column 5, :line 2938, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2938, :column 8, :line 2938, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2938, :column 11, :line 2938, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 2946, :column 5, :line 2946, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2946, :column 8, :line 2946, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2946, :column 11, :line 2946, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 2946, :column 16, :line 2946, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2922, :column 4, :line 2922, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2922, :column 5, :line 2922, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 2930, :column 4, :line 2930, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2930, :column 5, :line 2930, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2930, :column 8, :line 2930, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 2938, :column 4, :line 2938, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2938, :column 5, :line 2938, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2938, :column 8, :line 2938, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2938, :column 11, :line 2938, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 2946, :column 4, :line 2946, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2946, :column 5, :line 2946, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 2946, :column 8, :line 2946, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 2946, :column 11, :line 2946, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 2946, :column 14, :line 2946, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2946, :column 16, :line 2946, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 2917, :column 7, :line 2917, :file "cljs/core.cljs"} some-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline* ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 1395, :column 10, :line 1395, :file "cljs/core.cljs"} to-array ^{:arglists (^{:end-column 6, :end-line 2397, :column 3, :line 2397, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2397, :column 4, :line 2397, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2395, :column 7, :line 2395, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 6, :end-line 2397, :column 4, :line 2397, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2397, :column 3, :line 2397, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2397, :column 4, :line 2397, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2395, :column 7, :line 2395, :file "cljs/core.cljs"} to-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 23, :end-line 3632, :column 10, :line 3632, :file "cljs/core.cljs"} build-subvec ^{:arglists (^{:end-column 46, :end-line 3726, :column 21, :line 3726, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3726, :column 22, :line 3726, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 3726, :column 27, :line 3726, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 3726, :column 29, :line 3726, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 3726, :column 35, :line 3726, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 3726, :column 39, :line 3726, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 3726, :column 8, :line 3726, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 27, :end-line 3726, :column 22, :line 3726, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 3726, :column 27, :line 3726, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 3726, :column 29, :line 3726, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 3726, :column 35, :line 3726, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 3726, :column 39, :line 3726, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 3726, :column 21, :line 3726, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3726, :column 22, :line 3726, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 3726, :column 27, :line 3726, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 3726, :column 29, :line 3726, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 3726, :column 35, :line 3726, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 3726, :column 39, :line 3726, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 3726, :column 8, :line 3726, :file "cljs/core.cljs"} build-subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2129, :column 22, :line 2129, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2129, :column 23, :line 2129, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2129, :column 8, :line 2129, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2129, :column 16, :line 2129, :file "cljs/core.cljs"} list? ^{:arglists (^{:end-column 25, :end-line 2129, :column 22, :line 2129, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2129, :column 23, :line 2129, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2129, :column 8, :line 2129, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2129, :column 16, :line 2129, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 25, :end-line 2129, :column 23, :line 2129, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2129, :column 22, :line 2129, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2129, :column 23, :line 2129, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2129, :column 8, :line 2129, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2129, :column 16, :line 2129, :file "cljs/core.cljs"} list?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 5877, :column 24, :line 5877, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5877, :column 25, :line 5877, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 5877, :column 30, :line 5877, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 5877, :column 35, :line 5877, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 5877, :column 37, :line 5877, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 5877, :column 8, :line 5877, :file "cljs/core.cljs"} tree-map-remove ^{:arglists (^{:end-column 43, :end-line 5877, :column 24, :line 5877, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5877, :column 25, :line 5877, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 5877, :column 30, :line 5877, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 5877, :column 35, :line 5877, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 5877, :column 37, :line 5877, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 5877, :column 8, :line 5877, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5877, :column 25, :line 5877, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 5877, :column 30, :line 5877, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 5877, :column 35, :line 5877, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 5877, :column 37, :line 5877, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5877, :column 24, :line 5877, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5877, :column 25, :line 5877, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 5877, :column 30, :line 5877, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 5877, :column 35, :line 5877, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 5877, :column 37, :line 5877, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 5877, :column 8, :line 5877, :file "cljs/core.cljs"} tree-map-remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 4933, :column 10, :line 4933, :file "cljs/core.cljs"} HashCollisionNode {:op :type, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 4933, :column 10, :line 4933, :file "cljs/core.cljs"} HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 43, :end-line 4936, :column 28, :line 4933, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 4934, :column 39, :line 4934, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 4935, :column 39, :line 4935, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4936, :column 39, :line 4936, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array? ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7639, :column 3, :line 7639, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7639, :column 4, :line 7639, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7639, :column 6, :line 7639, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7639, :column 8, :line 7639, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 7638, :column 8, :line 7638, :file "cljs/core.cljs"} prefers* ^{:arglists (^{:end-column 21, :end-line 7639, :column 3, :line 7639, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7639, :column 4, :line 7639, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7639, :column 6, :line 7639, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7639, :column 8, :line 7639, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 7638, :column 8, :line 7638, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7639, :column 4, :line 7639, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7639, :column 6, :line 7639, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7639, :column 8, :line 7639, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7639, :column 3, :line 7639, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7639, :column 4, :line 7639, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 7639, :column 6, :line 7639, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 7639, :column 8, :line 7639, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 7638, :column 8, :line 7638, :file "cljs/core.cljs"} prefers*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 464, :column 13, :line 464, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 464, :column 14, :line 464, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 464, :column 7, :line 464, :file "cljs/core.cljs"} clone ^{:arglists (^{:end-column 20, :end-line 464, :column 13, :line 464, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 464, :column 14, :line 464, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 464, :column 7, :line 464, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} clj [^{:end-column 20, :end-line 464, :column 14, :line 464, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 464, :column 13, :line 464, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 464, :column 14, :line 464, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 464, :column 7, :line 464, :file "cljs/core.cljs"} clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4046, :column 19, :line 4046, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4046, :column 20, :line 4046, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4046, :column 25, :line 4046, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4046, :column 27, :line 4046, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4046, :column 8, :line 4046, :file "cljs/core.cljs"} scan-array ^{:arglists (^{:end-column 33, :end-line 4046, :column 19, :line 4046, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4046, :column 20, :line 4046, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4046, :column 25, :line 4046, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4046, :column 27, :line 4046, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4046, :column 8, :line 4046, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4046, :column 20, :line 4046, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4046, :column 25, :line 4046, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4046, :column 27, :line 4046, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4046, :column 19, :line 4046, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4046, :column 20, :line 4046, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4046, :column 25, :line 4046, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4046, :column 27, :line 4046, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4046, :column 8, :line 4046, :file "cljs/core.cljs"} scan-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1785, :column 3, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1783, :column 7, :line 1783, :file "cljs/core.cljs"} bit-not ^{:arglists (^{:end-column 6, :end-line 1785, :column 3, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1783, :column 7, :line 1783, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1785, :column 3, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1783, :column 7, :line 1783, :file "cljs/core.cljs"} bit-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 6887, :column 3, :line 6887, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6887, :column 4, :line 6887, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 6886, :column 17, :line 6886, :file "cljs/core.cljs"} quote-string ^{:arglists (^{:end-column 6, :end-line 6887, :column 3, :line 6887, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6887, :column 4, :line 6887, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 6886, :column 17, :line 6886, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 6887, :column 4, :line 6887, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 6887, :column 3, :line 6887, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6887, :column 4, :line 6887, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 6886, :column 17, :line 6886, :file "cljs/core.cljs"} quote-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1600, :column 20, :line 1600, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1600, :column 21, :line 1600, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1600, :column 8, :line 1600, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1600, :column 15, :line 1600, :file "cljs/core.cljs"} byte ^{:arglists (^{:end-column 23, :end-line 1600, :column 20, :line 1600, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1600, :column 21, :line 1600, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1600, :column 8, :line 1600, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1600, :column 15, :line 1600, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1600, :column 21, :line 1600, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1600, :column 20, :line 1600, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1600, :column 21, :line 1600, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1600, :column 8, :line 1600, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1600, :column 15, :line 1600, :file "cljs/core.cljs"} byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1588, :column 4, :line 1588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1588, :column 5, :line 1588, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1589, :column 4, :line 1589, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1589, :column 5, :line 1589, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1589, :column 7, :line 1589, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1590, :column 4, :line 1590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1590, :column 5, :line 1590, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1590, :column 7, :line 1590, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1590, :column 9, :line 1590, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1590, :column 11, :line 1590, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1586, :column 8, :line 1586, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1586, :column 15, :line 1586, :file "cljs/core.cljs"} max ^{:arglists (^{:end-column 7, :end-line 1588, :column 4, :line 1588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1588, :column 5, :line 1588, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1589, :column 4, :line 1589, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1589, :column 5, :line 1589, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1589, :column 7, :line 1589, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1590, :column 4, :line 1590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1590, :column 5, :line 1590, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1590, :column 7, :line 1590, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1590, :column 9, :line 1590, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1590, :column 11, :line 1590, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1586, :column 8, :line 1586, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1586, :column 15, :line 1586, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1588, :column 5, :line 1588, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1589, :column 5, :line 1589, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1589, :column 7, :line 1589, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1590, :column 5, :line 1590, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1590, :column 7, :line 1590, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1590, :column 11, :line 1590, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1588, :column 4, :line 1588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1588, :column 5, :line 1588, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1589, :column 4, :line 1589, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1589, :column 5, :line 1589, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1589, :column 7, :line 1589, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1590, :column 4, :line 1590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1590, :column 5, :line 1590, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1590, :column 7, :line 1590, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1590, :column 9, :line 1590, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1590, :column 11, :line 1590, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1586, :column 8, :line 1586, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1586, :column 15, :line 1586, :file "cljs/core.cljs"} max, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 364, :column 14, :line 364, :file "cljs/core.cljs"} IComparable ^{:impls #{cljs.core/Keyword cljs.core/Subvec cljs.core/PersistentVector cljs.core/Symbol}, :protocol-symbol true, :end-column 26, :end-line 364, :column 14, :line 364, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 364, :column 14, :line 364, :file "cljs/core.cljs"} IComparable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1824, :column 5, :line 1824, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1825, :column 7, :line 1825, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1826, :column 9, :line 1826, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1826, :column 11, :line 1826, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1820, :column 16, :line 1820, :file "cljs/core.cljs"} == ^{:arglists (^{:end-column 7, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1824, :column 5, :line 1824, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1825, :column 7, :line 1825, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1826, :column 9, :line 1826, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1826, :column 11, :line 1826, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1820, :column 16, :line 1820, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1824, :column 5, :line 1824, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1825, :column 7, :line 1825, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1826, :column 11, :line 1826, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1824, :column 5, :line 1824, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1825, :column 7, :line 1825, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1826, :column 9, :line 1826, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1826, :column 11, :line 1826, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1820, :column 16, :line 1820, :file "cljs/core.cljs"} ==, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7558, :column 4, :line 7558, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7558, :column 5, :line 7558, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7559, :column 4, :line 7559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7559, :column 5, :line 7559, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7559, :column 7, :line 7559, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 7553, :column 7, :line 7553, :file "cljs/core.cljs"} parents ^{:arglists (^{:end-column 9, :end-line 7558, :column 4, :line 7558, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7558, :column 5, :line 7558, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7559, :column 4, :line 7559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7559, :column 5, :line 7559, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7559, :column 7, :line 7559, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 7553, :column 7, :line 7553, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7558, :column 5, :line 7558, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 7559, :column 5, :line 7559, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7559, :column 7, :line 7559, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7558, :column 4, :line 7558, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7558, :column 5, :line 7558, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 7559, :column 4, :line 7559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7559, :column 5, :line 7559, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 7559, :column 7, :line 7559, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 7553, :column 7, :line 7553, :file "cljs/core.cljs"} parents, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 865, :column 3, :line 865, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 865, :column 4, :line 865, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 862, :column 7, :line 862, :file "cljs/core.cljs"} count ^{:arglists (^{:end-column 9, :end-line 865, :column 3, :line 865, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 865, :column 4, :line 865, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 862, :column 7, :line 862, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 865, :column 4, :line 865, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 865, :column 3, :line 865, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 865, :column 4, :line 865, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 862, :column 7, :line 862, :file "cljs/core.cljs"} count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} -disjoin! ^{:arglists (^{:end-column 28, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} -disjoin!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1688, :column 4, :line 1688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1688, :column 5, :line 1688, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1689, :column 4, :line 1689, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1689, :column 5, :line 1689, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1690, :column 4, :line 1690, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1690, :column 5, :line 1690, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1690, :column 7, :line 1690, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1690, :column 9, :line 1690, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1690, :column 11, :line 1690, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1685, :column 8, :line 1685, :file "cljs/core.cljs"} number, :end-column 39, :end-line 1685, :column 15, :line 1685, :file "cljs/core.cljs"} unchecked-substract-int ^{:arglists (^{:end-column 7, :end-line 1688, :column 4, :line 1688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1688, :column 5, :line 1688, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1689, :column 4, :line 1689, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1689, :column 5, :line 1689, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1690, :column 4, :line 1690, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1690, :column 5, :line 1690, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1690, :column 7, :line 1690, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1690, :column 9, :line 1690, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1690, :column 11, :line 1690, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1685, :column 8, :line 1685, :file "cljs/core.cljs"} number, :end-column 39, :end-line 1685, :column 15, :line 1685, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1688, :column 5, :line 1688, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1689, :column 5, :line 1689, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1690, :column 5, :line 1690, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1690, :column 7, :line 1690, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1690, :column 11, :line 1690, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1688, :column 4, :line 1688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1688, :column 5, :line 1688, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1689, :column 4, :line 1689, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1689, :column 5, :line 1689, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1690, :column 4, :line 1690, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1690, :column 5, :line 1690, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1690, :column 7, :line 1690, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1690, :column 9, :line 1690, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1690, :column 11, :line 1690, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1685, :column 8, :line 1685, :file "cljs/core.cljs"} number, :end-column 39, :end-line 1685, :column 15, :line 1685, :file "cljs/core.cljs"} unchecked-substract-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val])} ->TransientHashMap ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val])} {:arglists (^cljs.core/TransientHashMap [^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 5291, :column 39, :line 5291, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 5291, :column 47, :line 5291, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 5292, :column 38, :line 5292, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 5293, :column 38, :line 5293, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 5294, :column 39, :line 5294, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 5294, :column 47, :line 5294, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 5295, :column 38, :line 5295, :file "cljs/core.cljs"} nil-val])} ->TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 2260, :column 10, :line 2260, :file "cljs/core.cljs"} ArrayChunk {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 34, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2279, :column 22, :line 2279, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2279, :column 26, :line 2279, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2279, :column 30, :line 2279, :file "cljs/core.cljs"} end], :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}}, ^{:arglists (^{:end-column 26, :end-line 6079, :column 4, :line 6079, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6079, :column 5, :line 6079, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6079, :column 16, :line 6079, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6079, :column 18, :line 6079, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6076, :column 7, :line 6076, :file "cljs/core.cljs"} sorted-map-by ^{:arglists (^{:end-column 26, :end-line 6079, :column 4, :line 6079, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6079, :column 5, :line 6079, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6079, :column 16, :line 6079, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6079, :column 18, :line 6079, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6076, :column 7, :line 6076, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 16, :end-line 6079, :column 5, :line 6079, :file "cljs/core.cljs"} comparator & ^{:end-column 26, :end-line 6079, :column 18, :line 6079, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 6079, :column 4, :line 6079, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6079, :column 5, :line 6079, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6079, :column 16, :line 6079, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6079, :column 18, :line 6079, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6076, :column 7, :line 6076, :file "cljs/core.cljs"} sorted-map-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 168, :column 10, :line 168, :file "cljs/core.cljs"} apply ^{:arglists (^{:end-column 12, :end-line 2622, :column 4, :line 2622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2622, :column 5, :line 2622, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2622, :column 7, :line 2622, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2630, :column 4, :line 2630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2630, :column 5, :line 2630, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2630, :column 7, :line 2630, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2630, :column 9, :line 2630, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2639, :column 4, :line 2639, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2639, :column 5, :line 2639, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2639, :column 7, :line 2639, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2639, :column 9, :line 2639, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2639, :column 11, :line 2639, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2648, :column 7, :line 2648, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2648, :column 9, :line 2648, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2648, :column 11, :line 2648, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2648, :column 13, :line 2648, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2657, :column 4, :line 2657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2657, :column 5, :line 2657, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2657, :column 7, :line 2657, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2657, :column 9, :line 2657, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2657, :column 11, :line 2657, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2657, :column 13, :line 2657, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2657, :column 15, :line 2657, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2657, :column 17, :line 2657, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2619, :column 7, :line 2619, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2622, :column 5, :line 2622, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2622, :column 7, :line 2622, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2630, :column 5, :line 2630, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2630, :column 7, :line 2630, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2630, :column 9, :line 2630, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2639, :column 5, :line 2639, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2639, :column 7, :line 2639, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2639, :column 9, :line 2639, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2639, :column 11, :line 2639, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2648, :column 7, :line 2648, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2648, :column 9, :line 2648, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2648, :column 11, :line 2648, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2648, :column 13, :line 2648, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2657, :column 5, :line 2657, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2657, :column 7, :line 2657, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2657, :column 9, :line 2657, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2657, :column 11, :line 2657, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2657, :column 13, :line 2657, :file "cljs/core.cljs"} d & ^{:end-column 22, :end-line 2657, :column 17, :line 2657, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2622, :column 4, :line 2622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2622, :column 5, :line 2622, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2622, :column 7, :line 2622, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2630, :column 4, :line 2630, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2630, :column 5, :line 2630, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2630, :column 7, :line 2630, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2630, :column 9, :line 2630, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2639, :column 4, :line 2639, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2639, :column 5, :line 2639, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2639, :column 7, :line 2639, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2639, :column 9, :line 2639, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2639, :column 11, :line 2639, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2648, :column 7, :line 2648, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2648, :column 9, :line 2648, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2648, :column 11, :line 2648, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2648, :column 13, :line 2648, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2657, :column 4, :line 2657, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2657, :column 5, :line 2657, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2657, :column 7, :line 2657, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2657, :column 9, :line 2657, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2657, :column 11, :line 2657, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2657, :column 13, :line 2657, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2657, :column 15, :line 2657, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2657, :column 17, :line 2657, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2619, :column 7, :line 2619, :file "cljs/core.cljs"} apply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 7525, :column 29, :line 7525, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 7525, :column 8, :line 7525, :file "cljs/core.cljs"} get-global-hierarchy ^{:arglists (^{:end-column 31, :end-line 7525, :column 29, :line 7525, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 7525, :column 8, :line 7525, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 7525, :column 29, :line 7525, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 7525, :column 8, :line 7525, :file "cljs/core.cljs"} get-global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1141, :column 32, :line 1141, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1141, :column 33, :line 1141, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 1141, :column 7, :line 1141, :file "cljs/core.cljs"} add-to-string-hash-cache ^{:arglists (^{:end-column 35, :end-line 1141, :column 32, :line 1141, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1141, :column 33, :line 1141, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 1141, :column 7, :line 1141, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 1141, :column 33, :line 1141, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1141, :column 32, :line 1141, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1141, :column 33, :line 1141, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 1141, :column 7, :line 1141, :file "cljs/core.cljs"} add-to-string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 7392, :column 10, :line 7392, :file "cljs/core.cljs"} clj->js ^{:arglists (^{:end-column 7, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 4275, :column 10, :line 4275, :file "cljs/core.cljs"} TransientArrayMap {:op :type, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 4474, :column 10, :line 4474, :file "cljs/core.cljs"} TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 4476, :column 28, :line 4474, :file "cljs/core.cljs"} [^{:mutable true, :end-column 49, :end-line 4474, :column 39, :line 4474, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 4475, :column 39, :line 4475, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 4476, :column 29, :line 4476, :file "cljs/core.cljs"} arr], :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail])} ->TransientVector ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail])} {:arglists (^cljs.core/TransientVector [^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 3803, :column 37, :line 3803, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 3804, :column 37, :line 3804, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 3805, :column 37, :line 3805, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 3806, :column 37, :line 3806, :file "cljs/core.cljs"} tail])} ->TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} IChunkedNext ^{:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 27, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} IChunkedNext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3085, :column 3, :line 3085, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3085, :column 4, :line 3085, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3085, :column 8, :line 3085, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3083, :column 7, :line 3083, :file "cljs/core.cljs"} interpose ^{:arglists (^{:end-column 13, :end-line 3085, :column 3, :line 3085, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3085, :column 4, :line 3085, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3085, :column 8, :line 3085, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3083, :column 7, :line 3083, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3085, :column 4, :line 3085, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3085, :column 8, :line 3085, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3085, :column 3, :line 3085, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3085, :column 4, :line 3085, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3085, :column 8, :line 3085, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3083, :column 7, :line 3083, :file "cljs/core.cljs"} interpose, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash])} ->BlackNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/BlackNode [^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 5558, :column 21, :line 5558, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 5558, :column 25, :line 5558, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 5558, :column 29, :line 5558, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 5558, :column 34, :line 5558, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 5558, :column 50, :line 5558, :file "cljs/core.cljs"} __hash])} ->BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 582, :column 10, :line 582, :file "cljs/core.cljs"} deref ^{:arglists (^{:end-column 6, :end-line 7244, :column 3, :line 7244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} o]), :end-column 13, :end-line 7243, :column 7, :line 7243, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7244, :column 3, :line 7244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} o]), :end-column 13, :end-line 7243, :column 7, :line 7243, :file "cljs/core.cljs"} deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3278, :column 17, :line 3278, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3278, :column 8, :line 3278, :file "cljs/core.cljs"} pv-aget ^{:arglists (^{:end-column 26, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3278, :column 17, :line 3278, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3278, :column 8, :line 3278, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3278, :column 17, :line 3278, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3278, :column 17, :line 3278, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3278, :column 8, :line 3278, :file "cljs/core.cljs"} pv-aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 1014, :column 4, :line 1014, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1014, :column 5, :line 1014, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1014, :column 12, :line 1014, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1018, :column 4, :line 1018, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1018, :column 5, :line 1018, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1018, :column 10, :line 1018, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1018, :column 12, :line 1018, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1018, :column 14, :line 1018, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1018, :column 16, :line 1018, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1009, :column 7, :line 1009, :file "cljs/core.cljs"} assoc ^{:arglists (^{:end-column 14, :end-line 1014, :column 4, :line 1014, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1014, :column 5, :line 1014, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1014, :column 12, :line 1014, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1018, :column 4, :line 1018, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1018, :column 5, :line 1018, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1018, :column 10, :line 1018, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1018, :column 12, :line 1018, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1018, :column 14, :line 1018, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1018, :column 16, :line 1018, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1009, :column 7, :line 1009, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1014, :column 5, :line 1014, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1014, :column 12, :line 1014, :file "cljs/core.cljs"} v] [^{:end-column 10, :end-line 1018, :column 5, :line 1018, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1018, :column 10, :line 1018, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1018, :column 12, :line 1018, :file "cljs/core.cljs"} v & ^{:end-column 20, :end-line 1018, :column 16, :line 1018, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 1014, :column 4, :line 1014, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1014, :column 5, :line 1014, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1014, :column 12, :line 1014, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1018, :column 4, :line 1018, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1018, :column 5, :line 1018, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1018, :column 10, :line 1018, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1018, :column 12, :line 1018, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1018, :column 14, :line 1018, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1018, :column 16, :line 1018, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1009, :column 7, :line 1009, :file "cljs/core.cljs"} assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2552, :column 3, :line 2552, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2552, :column 4, :line 2552, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} transient ^{:arglists (^{:end-column 9, :end-line 2552, :column 3, :line 2552, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2552, :column 4, :line 2552, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 345, :column 5, :line 345, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2552, :column 4, :line 2552, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2552, :column 3, :line 2552, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2552, :column 4, :line 2552, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 270, :column 24, :line 270, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 270, :column 5, :line 270, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} -disjoin ^{:arglists (^{:end-column 26, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 270, :column 24, :line 270, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 270, :column 5, :line 270, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 270, :column 24, :line 270, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 270, :column 24, :line 270, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 270, :column 5, :line 270, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} -disjoin, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2371, :column 18, :line 2371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2371, :column 19, :line 2371, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2371, :column 25, :line 2371, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2371, :column 7, :line 2371, :file "cljs/core.cljs"} chunk-cons ^{:arglists (^{:end-column 30, :end-line 2371, :column 18, :line 2371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2371, :column 19, :line 2371, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2371, :column 25, :line 2371, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2371, :column 7, :line 2371, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2371, :column 19, :line 2371, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2371, :column 25, :line 2371, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2371, :column 18, :line 2371, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2371, :column 19, :line 2371, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2371, :column 25, :line 2371, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2371, :column 7, :line 2371, :file "cljs/core.cljs"} chunk-cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7963, :column 3, :line 7963, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7963, :column 4, :line 7963, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 7961, :column 7, :line 7961, :file "cljs/core.cljs"} comparator ^{:arglists (^{:end-column 9, :end-line 7963, :column 3, :line 7963, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7963, :column 4, :line 7963, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 7961, :column 7, :line 7961, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 7963, :column 4, :line 7963, :file "cljs/core.cljs"} pred]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7963, :column 3, :line 7963, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7963, :column 4, :line 7963, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 7961, :column 7, :line 7961, :file "cljs/core.cljs"} comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6070, :column 4, :line 6070, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6070, :column 5, :line 6070, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6070, :column 7, :line 6070, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6067, :column 7, :line 6067, :file "cljs/core.cljs"} sorted-map ^{:arglists (^{:end-column 15, :end-line 6070, :column 4, :line 6070, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6070, :column 5, :line 6070, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6070, :column 7, :line 6070, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6067, :column 7, :line 6067, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 15, :end-line 6070, :column 7, :line 6070, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6070, :column 4, :line 6070, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6070, :column 5, :line 6070, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6070, :column 7, :line 6070, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6067, :column 7, :line 6067, :file "cljs/core.cljs"} sorted-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3029, :column 3, :line 3029, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3029, :column 4, :line 3029, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3029, :column 9, :line 3029, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the first\n  item for which (pred item) returns nil.", :end-column 18, :end-line 3026, :column 7, :line 3026, :file "cljs/core.cljs"} drop-while ^{:arglists (^{:end-column 14, :end-line 3029, :column 3, :line 3029, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3029, :column 4, :line 3029, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3029, :column 9, :line 3029, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the first\n  item for which (pred item) returns nil.", :end-column 18, :end-line 3026, :column 7, :line 3026, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3029, :column 4, :line 3029, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3029, :column 9, :line 3029, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3029, :column 3, :line 3029, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3029, :column 4, :line 3029, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3029, :column 9, :line 3029, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the first\n  item for which (pred item) returns nil.", :end-column 18, :end-line 3026, :column 7, :line 3026, :file "cljs/core.cljs"} drop-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 324, :column 14, :line 324, :file "cljs/core.cljs"} IWriter ^{:impls #{cljs.core/StringBufferWriter}, :protocol-symbol true, :end-column 22, :end-line 324, :column 14, :line 324, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 324, :column 14, :line 324, :file "cljs/core.cljs"} IWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6086, :column 10, :line 6086, :file "cljs/core.cljs"} KeySeq {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6086, :column 10, :line 6086, :file "cljs/core.cljs"} KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6086, :column 17, :line 6086, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6086, :column 19, :line 6086, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6086, :column 30, :line 6086, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6086, :column 35, :line 6086, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 7382, :column 8, :line 7382, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 7382, :column 16, :line 7382, :file "cljs/core.cljs"} realized? ^{:arglists (^{:end-column 6, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 7382, :column 8, :line 7382, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 7382, :column 16, :line 7382, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 7382, :column 8, :line 7382, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 7382, :column 16, :line 7382, :file "cljs/core.cljs"} realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4210, :column 36, :line 4210, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4210, :column 37, :line 4210, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4210, :column 41, :line 4210, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4210, :column 43, :line 4210, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4210, :column 8, :line 4210, :file "cljs/core.cljs"} array-map-index-of-keyword? ^{:arglists (^{:end-column 45, :end-line 4210, :column 36, :line 4210, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4210, :column 37, :line 4210, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4210, :column 41, :line 4210, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4210, :column 43, :line 4210, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4210, :column 8, :line 4210, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4210, :column 37, :line 4210, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4210, :column 41, :line 4210, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4210, :column 43, :line 4210, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4210, :column 36, :line 4210, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4210, :column 37, :line 4210, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4210, :column 41, :line 4210, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4210, :column 43, :line 4210, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4210, :column 8, :line 4210, :file "cljs/core.cljs"} array-map-index-of-keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn* ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 10, :end-line 25, :column 8, :line 25, :file "cljs/core.cljs"} _]), :tag function, :op :var, :name ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 50, :end-line 400, :column 42, :line 400, :file "cljs/core.cljs"} compare ^{:arglists (^{:end-column 8, :end-line 1350, :column 3, :line 1350, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1350, :column 4, :line 1350, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1350, :column 6, :line 1350, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1345, :column 8, :line 1345, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1345, :column 15, :line 1345, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1350, :column 4, :line 1350, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1350, :column 6, :line 1350, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1350, :column 3, :line 1350, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1350, :column 4, :line 1350, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1350, :column 6, :line 1350, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1345, :column 8, :line 1345, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1345, :column 15, :line 1345, :file "cljs/core.cljs"} compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 2735, :column 8, :line 2735, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2735, :column 16, :line 2735, :file "cljs/core.cljs"} complement ^{:arglists (^{:end-column 6, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 2735, :column 8, :line 2735, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2735, :column 16, :line 2735, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 2735, :column 8, :line 2735, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2735, :column 16, :line 2735, :file "cljs/core.cljs"} complement, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 41, :end-line 1261, :column 1, :line 1261, :file "cljs/core.cljs"} lookup-sentinel ^{:private true, :end-column 41, :end-line 1261, :column 1, :line 1261, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 41, :end-line 1261, :column 1, :line 1261, :file "cljs/core.cljs"} lookup-sentinel, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 352, :column 18, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 352, :column 24, :line 352, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 352, :column 28, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} -assoc! ^{:arglists (^{:end-column 32, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 352, :column 18, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 352, :column 24, :line 352, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 352, :column 28, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 352, :column 18, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 352, :column 24, :line 352, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 352, :column 28, :line 352, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 352, :column 18, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 352, :column 24, :line 352, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 352, :column 28, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} -assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup* ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7389, :column 13, :line 7389, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7389, :column 14, :line 7389, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7389, :column 4, :line 7389, :file "cljs/core.cljs"} -key->js ^{:arglists (^{:end-column 16, :end-line 7389, :column 13, :line 7389, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7389, :column 14, :line 7389, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7389, :column 4, :line 7389, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7389, :column 14, :line 7389, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7389, :column 13, :line 7389, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7389, :column 14, :line 7389, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 7389, :column 4, :line 7389, :file "cljs/core.cljs"} -key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} IDeref ^{:impls #{cljs.core/Reduced cljs.core/Delay cljs.core/Atom}, :protocol-symbol true, :end-column 21, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} IDeref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1340, :column 3, :line 1340, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1340, :column 4, :line 1340, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1337, :column 8, :line 1337, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1337, :column 12, :line 1337, :file "cljs/core.cljs"} sequence ^{:arglists (^{:end-column 9, :end-line 1340, :column 3, :line 1340, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1340, :column 4, :line 1340, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1337, :column 8, :line 1337, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1337, :column 12, :line 1337, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1340, :column 4, :line 1340, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1340, :column 3, :line 1340, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1340, :column 4, :line 1340, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1337, :column 8, :line 1337, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1337, :column 12, :line 1337, :file "cljs/core.cljs"} sequence, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2747, :column 3, :line 2747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 2745, :column 7, :line 2745, :file "cljs/core.cljs"} constantly ^{:arglists (^{:end-column 6, :end-line 2747, :column 3, :line 2747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 2745, :column 7, :line 2745, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2747, :column 3, :line 2747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 2745, :column 7, :line 2745, :file "cljs/core.cljs"} constantly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 53, :end-line 3371, :column 41, :line 3371, :file "cljs/core.cljs"} chunked-seq ^{:arglists (^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 3627, :column 9, :line 3627, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 3627, :column 11, :line 3627, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 3628, :column 4, :line 3628, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3628, :column 5, :line 3628, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3628, :column 9, :line 3628, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3628, :column 14, :line 3628, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3628, :column 16, :line 3628, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 3629, :column 4, :line 3629, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3629, :column 5, :line 3629, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3629, :column 9, :line 3629, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3629, :column 14, :line 3629, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3629, :column 16, :line 3629, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 3629, :column 20, :line 3629, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 3626, :column 7, :line 3626, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 3627, :column 9, :line 3627, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 3627, :column 11, :line 3627, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 3628, :column 5, :line 3628, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3628, :column 9, :line 3628, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3628, :column 14, :line 3628, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3628, :column 16, :line 3628, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 3629, :column 5, :line 3629, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3629, :column 9, :line 3629, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3629, :column 14, :line 3629, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3629, :column 16, :line 3629, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 3629, :column 20, :line 3629, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 3627, :column 9, :line 3627, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 3627, :column 11, :line 3627, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 3628, :column 4, :line 3628, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3628, :column 5, :line 3628, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3628, :column 9, :line 3628, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3628, :column 14, :line 3628, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3628, :column 16, :line 3628, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 3629, :column 4, :line 3629, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3629, :column 5, :line 3629, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 3629, :column 9, :line 3629, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 3629, :column 14, :line 3629, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 3629, :column 16, :line 3629, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 3629, :column 20, :line 3629, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 3626, :column 7, :line 3626, :file "cljs/core.cljs"} chunked-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 318, :column 14, :line 318, :file "cljs/core.cljs"} ISorted ^{:impls #{cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 22, :end-line 318, :column 14, :line 318, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 318, :column 14, :line 318, :file "cljs/core.cljs"} ISorted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 148, :column 4, :line 148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 148, :column 5, :line 148, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 150, :column 4, :line 150, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 150, :column 5, :line 150, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 150, :column 10, :line 150, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 147, :column 8, :line 147, :file "cljs/core.cljs"} array, :end-column 25, :end-line 147, :column 14, :line 147, :file "cljs/core.cljs"} make-array ^{:arglists (^{:end-column 10, :end-line 148, :column 4, :line 148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 148, :column 5, :line 148, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 150, :column 4, :line 150, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 150, :column 5, :line 150, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 150, :column 10, :line 150, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 147, :column 8, :line 147, :file "cljs/core.cljs"} array, :end-column 25, :end-line 147, :column 14, :line 147, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 10, :end-line 148, :column 5, :line 148, :file "cljs/core.cljs"} size] ^array [^{:end-column 10, :end-line 150, :column 5, :line 150, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 150, :column 10, :line 150, :file "cljs/core.cljs"} size]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 148, :column 4, :line 148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 148, :column 5, :line 148, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 150, :column 4, :line 150, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 150, :column 5, :line 150, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 150, :column 10, :line 150, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 147, :column 8, :line 147, :file "cljs/core.cljs"} array, :end-column 25, :end-line 147, :column 14, :line 147, :file "cljs/core.cljs"} make-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1147, :column 31, :line 1147, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1147, :column 32, :line 1147, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 1147, :column 7, :line 1147, :file "cljs/core.cljs"} check-string-hash-cache ^{:arglists (^{:end-column 34, :end-line 1147, :column 31, :line 1147, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1147, :column 32, :line 1147, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 1147, :column 7, :line 1147, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1147, :column 32, :line 1147, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1147, :column 31, :line 1147, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1147, :column 32, :line 1147, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 1147, :column 7, :line 1147, :file "cljs/core.cljs"} check-string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1720, :column 14, :line 1720, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1720, :column 7, :line 1720, :file "cljs/core.cljs"} shorts ^{:arglists (^{:end-column 17, :end-line 1720, :column 14, :line 1720, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1720, :column 7, :line 1720, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1720, :column 14, :line 1720, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1720, :column 7, :line 1720, :file "cljs/core.cljs"} shorts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if* ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta])} ->RSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/RSeq [^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 749, :column 16, :line 749, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 749, :column 19, :line 749, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 749, :column 21, :line 749, :file "cljs/core.cljs"} meta])} ->RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print! ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} {:arglists (^function []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 326, :column 11, :line 326, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 326, :column 12, :line 326, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -flush ^{:arglists (^{:end-column 19, :end-line 326, :column 11, :line 326, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 326, :column 12, :line 326, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 326, :column 12, :line 326, :file "cljs/core.cljs"} writer]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 326, :column 11, :line 326, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 326, :column 12, :line 326, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 1670, :column 28, :line 1670, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1670, :column 29, :line 1670, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1670, :column 7, :line 1670, :file "cljs/core.cljs"} unchecked-negate-int ^{:arglists (^{:end-column 31, :end-line 1670, :column 28, :line 1670, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1670, :column 29, :line 1670, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1670, :column 7, :line 1670, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 31, :end-line 1670, :column 29, :line 1670, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1670, :column 28, :line 1670, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1670, :column 29, :line 1670, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1670, :column 7, :line 1670, :file "cljs/core.cljs"} unchecked-negate-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash])} ->PersistentVector ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentVector [^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3373, :column 28, :line 3373, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3373, :column 33, :line 3373, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3373, :column 37, :line 3373, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3373, :column 43, :line 3373, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3373, :column 48, :line 3373, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3373, :column 63, :line 3373, :file "cljs/core.cljs"} __hash])} ->PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 545, :column 24, :line 545, :file "cljs/core.cljs"} equiv-sequential ^{:arglists (^{:end-column 8, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1881, :column 6, :line 1881, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 1878, :column 8, :line 1878, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1881, :column 6, :line 1881, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1881, :column 6, :line 1881, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 1878, :column 8, :line 1878, :file "cljs/core.cljs"} equiv-sequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3050, :column 4, :line 3050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3050, :column 5, :line 3050, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3051, :column 4, :line 3051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3051, :column 5, :line 3051, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3051, :column 7, :line 3051, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3048, :column 7, :line 3048, :file "cljs/core.cljs"} repeat ^{:arglists (^{:end-column 7, :end-line 3050, :column 4, :line 3050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3050, :column 5, :line 3050, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3051, :column 4, :line 3051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3051, :column 5, :line 3051, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3051, :column 7, :line 3051, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3048, :column 7, :line 3048, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3050, :column 5, :line 3050, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3051, :column 5, :line 3051, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3051, :column 7, :line 3051, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3050, :column 4, :line 3050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3050, :column 5, :line 3050, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3051, :column 4, :line 3051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3051, :column 5, :line 3051, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3051, :column 7, :line 3051, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3048, :column 7, :line 3048, :file "cljs/core.cljs"} repeat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1647, :column 21, :line 1647, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1647, :column 22, :line 1647, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1647, :column 7, :line 1647, :file "cljs/core.cljs"} unchecked-inc ^{:arglists (^{:end-column 24, :end-line 1647, :column 21, :line 1647, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1647, :column 22, :line 1647, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1647, :column 7, :line 1647, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1647, :column 22, :line 1647, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1647, :column 21, :line 1647, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1647, :column 22, :line 1647, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1647, :column 7, :line 1647, :file "cljs/core.cljs"} unchecked-inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1848, :column 3, :line 1848, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1848, :column 4, :line 1848, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1848, :column 9, :line 1848, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} nthnext ^{:arglists (^{:end-column 11, :end-line 1848, :column 3, :line 1848, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1848, :column 4, :line 1848, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1848, :column 9, :line 1848, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 1848, :column 4, :line 1848, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1848, :column 9, :line 1848, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1848, :column 3, :line 1848, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1848, :column 4, :line 1848, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1848, :column 9, :line 1848, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} nthnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7290, :column 3, :line 7290, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7290, :column 4, :line 7290, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 7288, :column 7, :line 7288, :file "cljs/core.cljs"} get-validator ^{:arglists (^{:end-column 9, :end-line 7290, :column 3, :line 7290, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7290, :column 4, :line 7290, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 7288, :column 7, :line 7288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7290, :column 4, :line 7290, :file "cljs/core.cljs"} iref]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7290, :column 3, :line 7290, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7290, :column 4, :line 7290, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 7288, :column 7, :line 7288, :file "cljs/core.cljs"} get-validator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number? ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 348, :column 16, :line 348, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 348, :column 17, :line 348, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 348, :column 23, :line 348, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 348, :column 9, :line 348, :file "cljs/core.cljs"} -conj! ^{:arglists (^{:end-column 27, :end-line 348, :column 16, :line 348, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 348, :column 17, :line 348, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 348, :column 23, :line 348, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 348, :column 9, :line 348, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 348, :column 17, :line 348, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 348, :column 23, :line 348, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 348, :column 16, :line 348, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 348, :column 17, :line 348, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 348, :column 23, :line 348, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 348, :column 5, :line 348, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 348, :column 9, :line 348, :file "cljs/core.cljs"} -conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta])} ->PersistentArrayMapSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/PersistentArrayMapSeq [^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4277, :column 33, :line 4277, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4277, :column 37, :line 4277, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4277, :column 39, :line 4277, :file "cljs/core.cljs"} _meta])} ->PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2388, :column 18, :line 2388, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2388, :column 19, :line 2388, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2388, :column 7, :line 2388, :file "cljs/core.cljs"} chunk-next ^{:arglists (^{:end-column 21, :end-line 2388, :column 18, :line 2388, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2388, :column 19, :line 2388, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2388, :column 7, :line 2388, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2388, :column 19, :line 2388, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2388, :column 18, :line 2388, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2388, :column 19, :line 2388, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2388, :column 7, :line 2388, :file "cljs/core.cljs"} chunk-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7034, :column 3, :line 7034, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7034, :column 4, :line 7034, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7034, :column 6, :line 7034, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7032, :column 7, :line 7032, :file "cljs/core.cljs"} print-str ^{:arglists (^{:end-column 11, :end-line 7034, :column 3, :line 7034, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7034, :column 4, :line 7034, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7034, :column 6, :line 7034, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7032, :column 7, :line 7032, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7034, :column 6, :line 7034, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7034, :column 3, :line 7034, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7034, :column 4, :line 7034, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7034, :column 6, :line 7034, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7032, :column 7, :line 7032, :file "cljs/core.cljs"} print-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 2721, :column 3, :line 2721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 2718, :column 8, :line 2718, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2718, :column 16, :line 2718, :file "cljs/core.cljs"} not-any? ^{:arglists (^{:end-column 14, :end-line 2721, :column 3, :line 2721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 2718, :column 8, :line 2718, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2718, :column 16, :line 2718, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 2721, :column 3, :line 2721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 2718, :column 8, :line 2718, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2718, :column 16, :line 2718, :file "cljs/core.cljs"} not-any?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 47, :column 10, :line 47, :file "cljs/core.cljs"} into-array ^{:arglists (^{:end-column 10, :end-line 192, :column 4, :line 192, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 192, :column 5, :line 192, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 194, :column 4, :line 194, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 194, :column 5, :line 194, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 194, :column 10, :line 194, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 191, :column 8, :line 191, :file "cljs/core.cljs"} array, :end-column 25, :end-line 191, :column 14, :line 191, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 192, :column 5, :line 192, :file "cljs/core.cljs"} aseq] [^{:end-column 10, :end-line 194, :column 5, :line 194, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 194, :column 10, :line 194, :file "cljs/core.cljs"} aseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 192, :column 4, :line 192, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 192, :column 5, :line 192, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 194, :column 4, :line 194, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 194, :column 5, :line 194, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 194, :column 10, :line 194, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 191, :column 8, :line 191, :file "cljs/core.cljs"} array, :end-column 25, :end-line 191, :column 14, :line 191, :file "cljs/core.cljs"} into-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 301, :column 10, :line 301, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 301, :column 11, :line 301, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 301, :column 4, :line 301, :file "cljs/core.cljs"} -hash ^{:arglists (^{:end-column 13, :end-line 301, :column 10, :line 301, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 301, :column 11, :line 301, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 301, :column 4, :line 301, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 301, :column 11, :line 301, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 301, :column 10, :line 301, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 301, :column 11, :line 301, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 301, :column 4, :line 301, :file "cljs/core.cljs"} -hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 355, :column 18, :line 355, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 355, :column 19, :line 355, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 355, :column 25, :line 355, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 355, :column 9, :line 355, :file "cljs/core.cljs"} -dissoc! ^{:arglists (^{:end-column 29, :end-line 355, :column 18, :line 355, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 355, :column 19, :line 355, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 355, :column 25, :line 355, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 355, :column 9, :line 355, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 355, :column 19, :line 355, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 355, :column 25, :line 355, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 355, :column 18, :line 355, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 355, :column 19, :line 355, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 355, :column 25, :line 355, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 355, :column 5, :line 355, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 355, :column 9, :line 355, :file "cljs/core.cljs"} -dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val])} ->Reduced ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val])} {:arglists (^cljs.core/Reduced [^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 584, :column 19, :line 584, :file "cljs/core.cljs"} val])} ->Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2276, :column 20, :line 2276, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2276, :column 21, :line 2276, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2276, :column 7, :line 2276, :file "cljs/core.cljs"} chunk-buffer ^{:arglists (^{:end-column 30, :end-line 2276, :column 20, :line 2276, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2276, :column 21, :line 2276, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2276, :column 7, :line 2276, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:end-column 30, :end-line 2276, :column 21, :line 2276, :file "cljs/core.cljs"} capacity]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2276, :column 20, :line 2276, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2276, :column 21, :line 2276, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2276, :column 7, :line 2276, :file "cljs/core.cljs"} chunk-buffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1283, :column 3, :line 1283, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1283, :column 4, :line 1283, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1281, :column 8, :line 1281, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1281, :column 16, :line 1281, :file "cljs/core.cljs"} seqable? ^{:arglists (^{:end-column 6, :end-line 1283, :column 3, :line 1283, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1283, :column 4, :line 1283, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1281, :column 8, :line 1281, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1281, :column 16, :line 1281, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1283, :column 4, :line 1283, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1283, :column 3, :line 1283, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1283, :column 4, :line 1283, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1281, :column 8, :line 1281, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1281, :column 16, :line 1281, :file "cljs/core.cljs"} seqable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 405, :column 24, :line 405, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 405, :column 25, :line 405, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 405, :column 8, :line 405, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 405, :column 16, :line 405, :file "cljs/core.cljs"} symbol? ^{:arglists (^{:end-column 27, :end-line 405, :column 24, :line 405, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 405, :column 25, :line 405, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 405, :column 8, :line 405, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 405, :column 16, :line 405, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 405, :column 25, :line 405, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 405, :column 24, :line 405, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 405, :column 25, :line 405, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 405, :column 8, :line 405, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 405, :column 16, :line 405, :file "cljs/core.cljs"} symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1615, :column 30, :line 1615, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1615, :column 31, :line 1615, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1615, :column 8, :line 1615, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1615, :column 15, :line 1615, :file "cljs/core.cljs"} unchecked-char ^{:arglists (^{:end-column 33, :end-line 1615, :column 30, :line 1615, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1615, :column 31, :line 1615, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1615, :column 8, :line 1615, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1615, :column 15, :line 1615, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1615, :column 31, :line 1615, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1615, :column 30, :line 1615, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1615, :column 31, :line 1615, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1615, :column 8, :line 1615, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1615, :column 15, :line 1615, :file "cljs/core.cljs"} unchecked-char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{cljs.core/IEquiv}, :end-column 21, :end-line 4026, :column 10, :line 4026, :file "cljs/core.cljs"} NeverEquiv {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{cljs.core/IEquiv}, :end-column 21, :end-line 4026, :column 10, :line 4026, :file "cljs/core.cljs"} NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 4026, :column 21, :line 4026, :file "cljs/core.cljs"} [], :protocols #{cljs.core/IEquiv}}, ^{:arglists (^{:end-column 11, :end-line 204, :column 5, :line 204, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 204, :column 6, :line 204, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 205, :column 5, :line 205, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 205, :column 6, :line 205, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 205, :column 11, :line 205, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 206, :column 5, :line 206, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 206, :column 6, :line 206, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 206, :column 11, :line 206, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 206, :column 13, :line 206, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 207, :column 5, :line 207, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 207, :column 6, :line 207, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 207, :column 11, :line 207, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 207, :column 13, :line 207, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 207, :column 15, :line 207, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 208, :column 11, :line 208, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 208, :column 13, :line 208, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 208, :column 15, :line 208, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 208, :column 17, :line 208, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 209, :column 13, :line 209, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 209, :column 15, :line 209, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 209, :column 17, :line 209, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 209, :column 19, :line 209, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 210, :column 15, :line 210, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 210, :column 17, :line 210, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 210, :column 19, :line 210, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 210, :column 21, :line 210, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 211, :column 17, :line 211, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 211, :column 19, :line 211, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 211, :column 21, :line 211, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 211, :column 23, :line 211, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 212, :column 19, :line 212, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 212, :column 21, :line 212, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 212, :column 23, :line 212, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 212, :column 25, :line 212, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 213, :column 21, :line 213, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 213, :column 23, :line 213, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 213, :column 25, :line 213, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 213, :column 27, :line 213, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 214, :column 23, :line 214, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 214, :column 25, :line 214, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 214, :column 27, :line 214, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 214, :column 29, :line 214, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 215, :column 25, :line 215, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 215, :column 27, :line 215, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 215, :column 29, :line 215, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 215, :column 31, :line 215, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 216, :column 27, :line 216, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 216, :column 29, :line 216, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 216, :column 31, :line 216, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 216, :column 33, :line 216, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 217, :column 29, :line 217, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 217, :column 31, :line 217, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 217, :column 33, :line 217, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 217, :column 35, :line 217, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 218, :column 31, :line 218, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 218, :column 33, :line 218, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 218, :column 35, :line 218, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 218, :column 37, :line 218, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 219, :column 33, :line 219, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 219, :column 35, :line 219, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 219, :column 37, :line 219, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 219, :column 39, :line 219, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 220, :column 35, :line 220, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 220, :column 37, :line 220, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 220, :column 39, :line 220, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 220, :column 41, :line 220, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 221, :column 37, :line 221, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 221, :column 39, :line 221, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 221, :column 41, :line 221, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 221, :column 43, :line 221, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 222, :column 39, :line 222, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 222, :column 41, :line 222, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 222, :column 43, :line 222, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 222, :column 45, :line 222, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 223, :column 41, :line 223, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 223, :column 43, :line 223, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 223, :column 45, :line 223, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 223, :column 47, :line 223, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 224, :column 43, :line 224, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 224, :column 45, :line 224, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 224, :column 47, :line 224, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 224, :column 49, :line 224, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} -invoke ^{:arglists (^{:end-column 11, :end-line 204, :column 5, :line 204, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 204, :column 6, :line 204, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 205, :column 5, :line 205, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 205, :column 6, :line 205, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 205, :column 11, :line 205, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 206, :column 5, :line 206, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 206, :column 6, :line 206, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 206, :column 11, :line 206, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 206, :column 13, :line 206, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 207, :column 5, :line 207, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 207, :column 6, :line 207, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 207, :column 11, :line 207, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 207, :column 13, :line 207, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 207, :column 15, :line 207, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 208, :column 11, :line 208, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 208, :column 13, :line 208, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 208, :column 15, :line 208, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 208, :column 17, :line 208, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 209, :column 13, :line 209, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 209, :column 15, :line 209, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 209, :column 17, :line 209, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 209, :column 19, :line 209, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 210, :column 15, :line 210, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 210, :column 17, :line 210, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 210, :column 19, :line 210, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 210, :column 21, :line 210, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 211, :column 17, :line 211, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 211, :column 19, :line 211, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 211, :column 21, :line 211, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 211, :column 23, :line 211, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 212, :column 19, :line 212, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 212, :column 21, :line 212, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 212, :column 23, :line 212, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 212, :column 25, :line 212, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 213, :column 21, :line 213, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 213, :column 23, :line 213, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 213, :column 25, :line 213, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 213, :column 27, :line 213, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 214, :column 23, :line 214, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 214, :column 25, :line 214, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 214, :column 27, :line 214, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 214, :column 29, :line 214, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 215, :column 25, :line 215, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 215, :column 27, :line 215, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 215, :column 29, :line 215, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 215, :column 31, :line 215, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 216, :column 27, :line 216, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 216, :column 29, :line 216, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 216, :column 31, :line 216, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 216, :column 33, :line 216, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 217, :column 29, :line 217, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 217, :column 31, :line 217, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 217, :column 33, :line 217, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 217, :column 35, :line 217, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 218, :column 31, :line 218, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 218, :column 33, :line 218, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 218, :column 35, :line 218, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 218, :column 37, :line 218, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 219, :column 33, :line 219, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 219, :column 35, :line 219, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 219, :column 37, :line 219, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 219, :column 39, :line 219, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 220, :column 35, :line 220, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 220, :column 37, :line 220, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 220, :column 39, :line 220, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 220, :column 41, :line 220, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 221, :column 37, :line 221, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 221, :column 39, :line 221, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 221, :column 41, :line 221, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 221, :column 43, :line 221, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 222, :column 39, :line 222, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 222, :column 41, :line 222, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 222, :column 43, :line 222, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 222, :column 45, :line 222, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 223, :column 41, :line 223, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 223, :column 43, :line 223, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 223, :column 45, :line 223, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 223, :column 47, :line 223, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 224, :column 43, :line 224, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 224, :column 45, :line 224, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 224, :column 47, :line 224, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 224, :column 49, :line 224, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 204, :column 6, :line 204, :file "cljs/core.cljs"} this] [^{:end-column 11, :end-line 205, :column 6, :line 205, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 205, :column 11, :line 205, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 206, :column 6, :line 206, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 206, :column 11, :line 206, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 206, :column 13, :line 206, :file "cljs/core.cljs"} b] [^{:end-column 11, :end-line 207, :column 6, :line 207, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 207, :column 11, :line 207, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 207, :column 13, :line 207, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 207, :column 15, :line 207, :file "cljs/core.cljs"} c] [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 208, :column 11, :line 208, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 208, :column 13, :line 208, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 208, :column 15, :line 208, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 208, :column 17, :line 208, :file "cljs/core.cljs"} d] [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 209, :column 13, :line 209, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 209, :column 15, :line 209, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 209, :column 17, :line 209, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 209, :column 19, :line 209, :file "cljs/core.cljs"} e] [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 210, :column 15, :line 210, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 210, :column 17, :line 210, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 210, :column 19, :line 210, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 210, :column 21, :line 210, :file "cljs/core.cljs"} f] [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 211, :column 17, :line 211, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 211, :column 19, :line 211, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 211, :column 21, :line 211, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 211, :column 23, :line 211, :file "cljs/core.cljs"} g] [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 212, :column 19, :line 212, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 212, :column 21, :line 212, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 212, :column 23, :line 212, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 212, :column 25, :line 212, :file "cljs/core.cljs"} h] [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 213, :column 21, :line 213, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 213, :column 23, :line 213, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 213, :column 25, :line 213, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 213, :column 27, :line 213, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 214, :column 23, :line 214, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 214, :column 25, :line 214, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 214, :column 27, :line 214, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 214, :column 29, :line 214, :file "cljs/core.cljs"} j] [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 215, :column 25, :line 215, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 215, :column 27, :line 215, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 215, :column 29, :line 215, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 215, :column 31, :line 215, :file "cljs/core.cljs"} k] [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 216, :column 27, :line 216, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 216, :column 29, :line 216, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 216, :column 31, :line 216, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 216, :column 33, :line 216, :file "cljs/core.cljs"} l] [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 217, :column 29, :line 217, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 217, :column 31, :line 217, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 217, :column 33, :line 217, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 217, :column 35, :line 217, :file "cljs/core.cljs"} m] [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 218, :column 31, :line 218, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 218, :column 33, :line 218, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 218, :column 35, :line 218, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 218, :column 37, :line 218, :file "cljs/core.cljs"} n] [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 219, :column 33, :line 219, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 219, :column 35, :line 219, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 219, :column 37, :line 219, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 219, :column 39, :line 219, :file "cljs/core.cljs"} o] [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 220, :column 35, :line 220, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 220, :column 37, :line 220, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 220, :column 39, :line 220, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 220, :column 41, :line 220, :file "cljs/core.cljs"} p] [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 221, :column 37, :line 221, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 221, :column 39, :line 221, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 221, :column 41, :line 221, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 221, :column 43, :line 221, :file "cljs/core.cljs"} q] [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 222, :column 39, :line 222, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 222, :column 41, :line 222, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 222, :column 43, :line 222, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 222, :column 45, :line 222, :file "cljs/core.cljs"} s] [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 223, :column 41, :line 223, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 223, :column 43, :line 223, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 223, :column 45, :line 223, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 223, :column 47, :line 223, :file "cljs/core.cljs"} t] [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 224, :column 43, :line 224, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 224, :column 45, :line 224, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 224, :column 47, :line 224, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 224, :column 49, :line 224, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 204, :column 5, :line 204, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 204, :column 6, :line 204, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 205, :column 5, :line 205, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 205, :column 6, :line 205, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 205, :column 11, :line 205, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 206, :column 5, :line 206, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 206, :column 6, :line 206, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 206, :column 11, :line 206, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 206, :column 13, :line 206, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 207, :column 5, :line 207, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 207, :column 6, :line 207, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 207, :column 11, :line 207, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 207, :column 13, :line 207, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 207, :column 15, :line 207, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 208, :column 11, :line 208, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 208, :column 13, :line 208, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 208, :column 15, :line 208, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 208, :column 17, :line 208, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 209, :column 13, :line 209, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 209, :column 15, :line 209, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 209, :column 17, :line 209, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 209, :column 19, :line 209, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 210, :column 15, :line 210, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 210, :column 17, :line 210, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 210, :column 19, :line 210, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 210, :column 21, :line 210, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 211, :column 17, :line 211, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 211, :column 19, :line 211, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 211, :column 21, :line 211, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 211, :column 23, :line 211, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 212, :column 19, :line 212, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 212, :column 21, :line 212, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 212, :column 23, :line 212, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 212, :column 25, :line 212, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 213, :column 21, :line 213, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 213, :column 23, :line 213, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 213, :column 25, :line 213, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 213, :column 27, :line 213, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 214, :column 23, :line 214, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 214, :column 25, :line 214, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 214, :column 27, :line 214, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 214, :column 29, :line 214, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 215, :column 25, :line 215, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 215, :column 27, :line 215, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 215, :column 29, :line 215, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 215, :column 31, :line 215, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 216, :column 27, :line 216, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 216, :column 29, :line 216, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 216, :column 31, :line 216, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 216, :column 33, :line 216, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 217, :column 29, :line 217, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 217, :column 31, :line 217, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 217, :column 33, :line 217, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 217, :column 35, :line 217, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 218, :column 31, :line 218, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 218, :column 33, :line 218, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 218, :column 35, :line 218, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 218, :column 37, :line 218, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 219, :column 33, :line 219, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 219, :column 35, :line 219, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 219, :column 37, :line 219, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 219, :column 39, :line 219, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 220, :column 35, :line 220, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 220, :column 37, :line 220, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 220, :column 39, :line 220, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 220, :column 41, :line 220, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 221, :column 37, :line 221, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 221, :column 39, :line 221, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 221, :column 41, :line 221, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 221, :column 43, :line 221, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 222, :column 39, :line 222, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 222, :column 41, :line 222, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 222, :column 43, :line 222, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 222, :column 45, :line 222, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 223, :column 41, :line 223, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 223, :column 43, :line 223, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 223, :column 45, :line 223, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 223, :column 47, :line 223, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 224, :column 43, :line 224, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 224, :column 45, :line 224, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 224, :column 47, :line 224, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 224, :column 49, :line 224, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} -invoke, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1184, :column 3, :line 1184, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1184, :column 4, :line 1184, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1182, :column 8, :line 1182, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1182, :column 16, :line 1182, :file "cljs/core.cljs"} coll? ^{:arglists (^{:end-column 6, :end-line 1184, :column 3, :line 1184, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1184, :column 4, :line 1184, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1182, :column 8, :line 1182, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1182, :column 16, :line 1182, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1184, :column 4, :line 1184, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1184, :column 3, :line 1184, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1184, :column 4, :line 1184, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1182, :column 8, :line 1182, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1182, :column 16, :line 1182, :file "cljs/core.cljs"} coll?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3220, :column 7, :line 3220, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3222, :column 4, :line 3222, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3222, :column 5, :line 3222, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3222, :column 7, :line 3222, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3222, :column 10, :line 3222, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} get-in ^{:arglists (^{:end-column 10, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3220, :column 7, :line 3220, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3222, :column 4, :line 3222, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3222, :column 5, :line 3222, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3222, :column 7, :line 3222, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3222, :column 10, :line 3222, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3220, :column 7, :line 3220, :file "cljs/core.cljs"} ks] [^{:end-column 7, :end-line 3222, :column 5, :line 3222, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3222, :column 7, :line 3222, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3222, :column 10, :line 3222, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3220, :column 7, :line 3220, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3222, :column 4, :line 3222, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3222, :column 5, :line 3222, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3222, :column 7, :line 3222, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3222, :column 10, :line 3222, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} get-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 817, :column 3, :line 817, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 817, :column 4, :line 817, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 815, :column 7, :line 815, :file "cljs/core.cljs"} fnext ^{:arglists (^{:end-column 9, :end-line 817, :column 3, :line 817, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 817, :column 4, :line 817, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 815, :column 7, :line 815, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 817, :column 4, :line 817, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 817, :column 3, :line 817, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 817, :column 4, :line 817, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 815, :column 7, :line 815, :file "cljs/core.cljs"} fnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 309, :column 14, :line 309, :file "cljs/core.cljs"} IList ^{:impls #{cljs.core/Cons cljs.core/EmptyList cljs.core/List}, :protocol-symbol true, :end-column 20, :end-line 309, :column 14, :line 309, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 309, :column 14, :line 309, :file "cljs/core.cljs"} IList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 1939, :column 10, :line 1939, :file "cljs/core.cljs"} List {:op :type, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 1939, :column 10, :line 1939, :file "cljs/core.cljs"} List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 1939, :column 15, :line 1939, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1939, :column 16, :line 1939, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 1939, :column 21, :line 1939, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 1939, :column 27, :line 1939, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 1939, :column 32, :line 1939, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 1939, :column 48, :line 1939, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 267, :column 10, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 267, :column 4, :line 267, :file "cljs/core.cljs"} -val ^{:arglists (^{:end-column 15, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 267, :column 10, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 267, :column 4, :line 267, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 267, :column 10, :line 267, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 267, :column 10, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 267, :column 4, :line 267, :file "cljs/core.cljs"} -val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1718, :column 13, :line 1718, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1718, :column 14, :line 1718, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} bytes ^{:arglists (^{:end-column 16, :end-line 1718, :column 13, :line 1718, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1718, :column 14, :line 1718, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1718, :column 14, :line 1718, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1718, :column 13, :line 1718, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1718, :column 14, :line 1718, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} bytes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash])} ->ObjMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ObjMap [^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4092, :column 18, :line 4092, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4092, :column 23, :line 4092, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4092, :column 28, :line 4092, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4092, :column 35, :line 4092, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4092, :column 58, :line 4092, :file "cljs/core.cljs"} __hash])} ->ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 411, :column 24, :line 411, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 411, :column 25, :line 411, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 411, :column 27, :line 411, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 411, :column 8, :line 411, :file "cljs/core.cljs"} compare-symbols ^{:arglists (^{:end-column 29, :end-line 411, :column 24, :line 411, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 411, :column 25, :line 411, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 411, :column 27, :line 411, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 411, :column 8, :line 411, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 411, :column 25, :line 411, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 411, :column 27, :line 411, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 411, :column 24, :line 411, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 411, :column 25, :line 411, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 411, :column 27, :line 411, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 411, :column 8, :line 411, :file "cljs/core.cljs"} compare-symbols, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 304, :column 21, :line 304, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 304, :column 22, :line 304, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 304, :column 5, :line 304, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 304, :column 16, :line 304, :file "cljs/core.cljs"} -seq ^{:arglists (^{:end-column 24, :end-line 304, :column 21, :line 304, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 304, :column 22, :line 304, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 304, :column 5, :line 304, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 304, :column 16, :line 304, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 304, :column 22, :line 304, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 304, :column 21, :line 304, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 304, :column 22, :line 304, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 304, :column 5, :line 304, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 304, :column 16, :line 304, :file "cljs/core.cljs"} -seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}}, :aliases {}, :macro-mappings {unsafe-bit-and #=(var cljs.core/unsafe-bit-and), unchecked-remainder-int #=(var cljs.core/unchecked-remainder-int), when-first #=(var cljs.core/when-first), cond->> #=(var cljs.core/cond->>), bit-set #=(var cljs.core/bit-set), import-macros #=(var cljs.core/import-macros), while #=(var cljs.core/while), satisfies? #=(var cljs.core/satisfies?), unchecked-subtract-int #=(var cljs.core/unchecked-subtract-int), bit-shift-right #=(var cljs.core/bit-shift-right), aget #=(var cljs.core/aget), specify #=(var cljs.core/specify), caching-hash #=(var cljs.core/caching-hash), bit-shift-left #=(var cljs.core/bit-shift-left), coercive-not #=(var cljs.core/coercive-not), dec #=(var cljs.core/dec), < #=(var cljs.core/<), this-as #=(var cljs.core/this-as), .. #=(var cljs.core/..), delay #=(var cljs.core/delay), unchecked-negate #=(var cljs.core/unchecked-negate), simple-benchmark #=(var cljs.core/simple-benchmark), unchecked-inc-int #=(var cljs.core/unchecked-inc-int), bit-shift-right-zero-fill #=(var cljs.core/bit-shift-right-zero-fill), implements? #=(var cljs.core/implements?), pos? #=(var cljs.core/pos?), specify! #=(var cljs.core/specify!), if-not #=(var cljs.core/if-not), alength #=(var cljs.core/alength), bit-xor #=(var cljs.core/bit-xor), doseq #=(var cljs.core/doseq), unsigned-bit-shift-right #=(var cljs.core/unsigned-bit-shift-right), neg? #=(var cljs.core/neg?), unchecked-float #=(var cljs.core/unchecked-float), undefined? #=(var cljs.core/undefined?), deftype #=(var cljs.core/deftype), mask #=(var cljs.core/mask), when-let #=(var cljs.core/when-let), divide #=(var cljs.core/divide), coercive-boolean #=(var cljs.core/coercive-boolean), <= #=(var cljs.core/<=), * #=(var cljs.core/*), min #=(var cljs.core/min), lazy-seq #=(var cljs.core/lazy-seq), js-delete #=(var cljs.core/js-delete), truth_ #=(var cljs.core/truth_), defcurried #=(var cljs.core/defcurried), let #=(var cljs.core/let), -> #=(var cljs.core/->), coercive-not= #=(var cljs.core/coercive-not=), doto #=(var cljs.core/doto), areduce #=(var cljs.core/areduce), double #=(var cljs.core/double), bit-and-not #=(var cljs.core/bit-and-not), unchecked-add-int #=(var cljs.core/unchecked-add-int), fn #=(var cljs.core/fn), short #=(var cljs.core/short), js-this #=(var cljs.core/js-this), unchecked-double #=(var cljs.core/unchecked-double), string? #=(var cljs.core/string?), js-arguments #=(var cljs.core/js-arguments), unchecked-multiply-int #=(var cljs.core/unchecked-multiply-int), as-> #=(var cljs.core/as->), when-not #=(var cljs.core/when-not), when #=(var cljs.core/when), int #=(var cljs.core/int), > #=(var cljs.core/>), keyword? #=(var cljs.core/keyword?), unchecked-multiply #=(var cljs.core/unchecked-multiply), gen-apply-to #=(var cljs.core/gen-apply-to), some->> #=(var cljs.core/some->>), unchecked-dec #=(var cljs.core/unchecked-dec), defn #=(var cljs.core/defn), float #=(var cljs.core/float), amap #=(var cljs.core/amap), declare #=(var cljs.core/declare), - #=(var cljs.core/-), hash-set #=(var cljs.core/hash-set), or #=(var cljs.core/or), assert-args #=(var cljs.core/assert-args), extend-type #=(var cljs.core/extend-type), bit-test #=(var cljs.core/bit-test), defmethod #=(var cljs.core/defmethod), time #=(var cljs.core/time), zero? #=(var cljs.core/zero?), unchecked-dec-int #=(var cljs.core/unchecked-dec-int), memfn #=(var cljs.core/memfn), js-obj #=(var cljs.core/js-obj), nil? #=(var cljs.core/nil?), extend-protocol #=(var cljs.core/extend-protocol), cond-> #=(var cljs.core/cond->), dotimes #=(var cljs.core/dotimes), bit-and #=(var cljs.core/bit-and), reify #=(var cljs.core/reify), instance? #=(var cljs.core/instance?), defonce #=(var cljs.core/defonce), unchecked-add #=(var cljs.core/unchecked-add), rfn #=(var cljs.core/rfn), identical? #=(var cljs.core/identical?), unchecked-divide-int #=(var cljs.core/unchecked-divide-int), defn- #=(var cljs.core/defn-), defprotocol #=(var cljs.core/defprotocol), unchecked-subtract #=(var cljs.core/unchecked-subtract), assert #=(var cljs.core/assert), true? #=(var cljs.core/true?), array #=(var cljs.core/array), letfn #=(var cljs.core/letfn), / #=(var cljs.core//), bitpos #=(var cljs.core/bitpos), bit-or #=(var cljs.core/bit-or), vector #=(var cljs.core/vector), >= #=(var cljs.core/>=), loop #=(var cljs.core/loop), bit-flip #=(var cljs.core/bit-flip), js-mod #=(var cljs.core/js-mod), with-out-str #=(var cljs.core/with-out-str), condp #=(var cljs.core/condp), cond #=(var cljs.core/cond), some-> #=(var cljs.core/some->), for #=(var cljs.core/for), binding #=(var cljs.core/binding), array-map #=(var cljs.core/array-map), unchecked-byte #=(var cljs.core/unchecked-byte), unchecked-short #=(var cljs.core/unchecked-short), inc #=(var cljs.core/inc), with-redefs #=(var cljs.core/with-redefs), bit-clear #=(var cljs.core/bit-clear), list #=(var cljs.core/list), + #=(var cljs.core/+), aset #=(var cljs.core/aset), defmulti #=(var cljs.core/defmulti), str #=(var cljs.core/str), coercive-= #=(var cljs.core/coercive-=), hash-map #=(var cljs.core/hash-map), if-let #=(var cljs.core/if-let), false? #=(var cljs.core/false?), case #=(var cljs.core/case), array? #=(var cljs.core/array?), exists? #=(var cljs.core/exists?), bit-not #=(var cljs.core/bit-not), byte #=(var cljs.core/byte), max #=(var cljs.core/max), == #=(var cljs.core/==), lazy-cat #=(var cljs.core/lazy-cat), comment #=(var cljs.core/comment), defrecord #=(var cljs.core/defrecord), make-array #=(var cljs.core/make-array), unchecked-negate-int #=(var cljs.core/unchecked-negate-int), unchecked-inc #=(var cljs.core/unchecked-inc), and #=(var cljs.core/and), number? #=(var cljs.core/number?), symbol? #=(var cljs.core/symbol?), unchecked-char #=(var cljs.core/unchecked-char), ->> #=(var cljs.core/->>)}, :macro-aliases {}}, goog {:mappings {}, :js-namespace true, :ns goog}, Math {:mappings {}, :js-namespace true, :ns Math}}