{^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core {:ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :mappings {^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash])} ->PersistentHashSet ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentHashSet [^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash])} ->PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause])} ->ExceptionInfo ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause])} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause])} ->ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8246, :column 4, :line 8246, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8246, :column 5, :line 8246, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8247, :column 5, :line 8247, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8247, :column 7, :line 8247, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8247, :column 9, :line 8247, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8241, :column 7, :line 8241, :file "cljs/core.cljs"} js->clj ^{:arglists (^{:end-column 7, :end-line 8246, :column 4, :line 8246, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8246, :column 5, :line 8246, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8247, :column 5, :line 8247, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8247, :column 7, :line 8247, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8247, :column 9, :line 8247, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8241, :column 7, :line 8241, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8246, :column 5, :line 8246, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 8247, :column 5, :line 8247, :file "cljs/core.cljs"} x & ^{:end-column 14, :end-line 8247, :column 9, :line 8247, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8246, :column 4, :line 8246, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8246, :column 5, :line 8246, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8247, :column 5, :line 8247, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8247, :column 7, :line 8247, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8247, :column 9, :line 8247, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8241, :column 7, :line 8241, :file "cljs/core.cljs"} js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1573, :column 11, :line 1573, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1575, :column 16, :line 1575, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1568, :column 7, :line 1568, :file "cljs/core.cljs"} sort-by ^{:arglists (^{:end-column 16, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1573, :column 11, :line 1573, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1575, :column 16, :line 1575, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1568, :column 7, :line 1568, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1573, :column 11, :line 1573, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1575, :column 16, :line 1575, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1573, :column 11, :line 1573, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1575, :column 16, :line 1575, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1568, :column 7, :line 1568, :file "cljs/core.cljs"} sort-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 36, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} ITransientAssociative ^{:impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :protocol-symbol true, :end-column 36, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 36, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} ITransientAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 2096, :column 15, :line 2096, :file "cljs/core.cljs"} chunk-first ^{:arglists (^{:end-column 22, :end-line 2561, :column 19, :line 2561, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2561, :column 20, :line 2561, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2561, :column 7, :line 2561, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 2561, :column 20, :line 2561, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2561, :column 19, :line 2561, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2561, :column 20, :line 2561, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2561, :column 7, :line 2561, :file "cljs/core.cljs"} chunk-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 452, :column 27, :line 452, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 452, :column 28, :line 452, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 27, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} m3-hash-int ^{:arglists (^{:end-column 31, :end-line 452, :column 27, :line 452, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 452, :column 28, :line 452, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 27, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 452, :column 28, :line 452, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 452, :column 27, :line 452, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 452, :column 28, :line 452, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 27, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} m3-hash-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2956, :column 15, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2956, :column 22, :line 2956, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} stepper ^{:arglists (^{:end-column 27, :end-line 2956, :column 15, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2956, :column 22, :line 2956, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2956, :column 22, :line 2956, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2956, :column 15, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2956, :column 22, :line 2956, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 403, :column 3, :line 403, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 403, :column 5, :line 403, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 403, :column 16, :line 403, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 400, :column 7, :line 400, :file "cljs/core.cljs"} pr-str* ^{:arglists (^{:end-column 20, :end-line 403, :column 3, :line 403, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 403, :column 5, :line 403, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 403, :column 16, :line 403, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 400, :column 7, :line 400, :file "cljs/core.cljs"} {:arglists ([^{:tag ^{:end-column 16, :end-line 403, :column 5, :line 403, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 403, :column 16, :line 403, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 403, :column 3, :line 403, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 403, :column 5, :line 403, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 403, :column 16, :line 403, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 400, :column 7, :line 400, :file "cljs/core.cljs"} pr-str*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3751, :column 4, :line 3751, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3751, :column 5, :line 3751, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3751, :column 13, :line 3751, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3751, :column 22, :line 3751, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3744, :column 7, :line 3744, :file "cljs/core.cljs"} tree-seq ^{:arglists (^{:end-column 27, :end-line 3751, :column 4, :line 3751, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3751, :column 5, :line 3751, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3751, :column 13, :line 3751, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3751, :column 22, :line 3751, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3744, :column 7, :line 3744, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 13, :end-line 3751, :column 5, :line 3751, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3751, :column 13, :line 3751, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3751, :column 22, :line 3751, :file "cljs/core.cljs"} root]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3751, :column 4, :line 3751, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3751, :column 5, :line 3751, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3751, :column 13, :line 3751, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3751, :column 22, :line 3751, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3744, :column 7, :line 3744, :file "cljs/core.cljs"} tree-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 1852, :column 31, :line 1852, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1852, :column 32, :line 1852, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1852, :column 34, :line 1852, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} unchecked-remainder-int ^{:arglists (^{:end-column 36, :end-line 1852, :column 31, :line 1852, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1852, :column 32, :line 1852, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1852, :column 34, :line 1852, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1852, :column 32, :line 1852, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1852, :column 34, :line 1852, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 1852, :column 31, :line 1852, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1852, :column 32, :line 1852, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1852, :column 34, :line 1852, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} unchecked-remainder-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 617, :column 3, :line 617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 617, :column 4, :line 617, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 613, :column 8, :line 613, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 613, :column 12, :line 613, :file "cljs/core.cljs"} seq ^{:arglists (^{:end-column 9, :end-line 617, :column 3, :line 617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 617, :column 4, :line 617, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 613, :column 8, :line 613, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 613, :column 12, :line 613, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 617, :column 4, :line 617, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 617, :column 3, :line 617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 617, :column 4, :line 617, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 613, :column 8, :line 613, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 613, :column 12, :line 613, :file "cljs/core.cljs"} seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 193, :column 10, :line 193, :file "cljs/core.cljs"} reduce ^{:arglists (^{:end-column 12, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1612, :column 7, :line 1612, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1628, :column 5, :line 1628, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1628, :column 7, :line 1628, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1628, :column 11, :line 1628, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1612, :column 7, :line 1612, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1628, :column 5, :line 1628, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1628, :column 7, :line 1628, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1628, :column 11, :line 1628, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1612, :column 7, :line 1612, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1628, :column 5, :line 1628, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1628, :column 7, :line 1628, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1628, :column 11, :line 1628, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 18, :end-line 2907, :column 1, :line 2907, :file "cljs/core.cljs"} INIT ^{:end-column 18, :end-line 2907, :column 1, :line 2907, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 18, :end-line 2907, :column 1, :line 2907, :file "cljs/core.cljs"} INIT, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1463, :column 3, :line 1463, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1463, :column 4, :line 1463, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1463, :column 9, :line 1463, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1457, :column 8, :line 1457, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1457, :column 16, :line 1457, :file "cljs/core.cljs"} contains? ^{:arglists (^{:end-column 11, :end-line 1463, :column 3, :line 1463, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1463, :column 4, :line 1463, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1463, :column 9, :line 1463, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1457, :column 8, :line 1457, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1457, :column 16, :line 1457, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 1463, :column 4, :line 1463, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1463, :column 9, :line 1463, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1463, :column 3, :line 1463, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1463, :column 4, :line 1463, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1463, :column 9, :line 1463, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1457, :column 8, :line 1457, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1457, :column 16, :line 1457, :file "cljs/core.cljs"} contains?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3108, :column 3, :line 3108, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3108, :column 9, :line 3108, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3105, :column 8, :line 3105, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3105, :column 16, :line 3105, :file "cljs/core.cljs"} every? ^{:arglists (^{:end-column 14, :end-line 3108, :column 3, :line 3108, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3108, :column 9, :line 3108, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3105, :column 8, :line 3105, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3105, :column 16, :line 3105, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3108, :column 9, :line 3108, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3108, :column 3, :line 3108, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3108, :column 9, :line 3108, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3105, :column 8, :line 3105, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3105, :column 16, :line 3105, :file "cljs/core.cljs"} every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3392, :column 4, :line 3392, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3392, :column 5, :line 3392, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3404, :column 4, :line 3404, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3404, :column 5, :line 3404, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3404, :column 7, :line 3404, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3387, :column 7, :line 3387, :file "cljs/core.cljs"} keep-indexed ^{:arglists (^{:end-column 7, :end-line 3392, :column 4, :line 3392, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3392, :column 5, :line 3392, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3404, :column 4, :line 3404, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3404, :column 5, :line 3404, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3404, :column 7, :line 3404, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3387, :column 7, :line 3387, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3392, :column 5, :line 3392, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3404, :column 5, :line 3404, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3404, :column 7, :line 3404, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3392, :column 4, :line 3392, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3392, :column 5, :line 3392, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3404, :column 4, :line 3404, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3404, :column 5, :line 3404, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3404, :column 7, :line 3404, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3387, :column 7, :line 3387, :file "cljs/core.cljs"} keep-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash])} ->PersistentQueueSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentQueueSeq [^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash])} ->PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2050, :column 5, :line 2050, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2050, :column 7, :line 2050, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2051, :column 4, :line 2051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2051, :column 5, :line 2051, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2051, :column 7, :line 2051, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2051, :column 13, :line 2051, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} subs ^{:arglists (^{:end-column 13, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2050, :column 5, :line 2050, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2050, :column 7, :line 2050, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2051, :column 4, :line 2051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2051, :column 5, :line 2051, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2051, :column 7, :line 2051, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2051, :column 13, :line 2051, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2050, :column 5, :line 2050, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2050, :column 7, :line 2050, :file "cljs/core.cljs"} start] [^{:end-column 7, :end-line 2051, :column 5, :line 2051, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2051, :column 7, :line 2051, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2051, :column 13, :line 2051, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2050, :column 5, :line 2050, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2050, :column 7, :line 2050, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2051, :column 4, :line 2051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2051, :column 5, :line 2051, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2051, :column 7, :line 2051, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2051, :column 13, :line 2051, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} subs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7218, :column 3, :line 7218, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7218, :column 4, :line 7218, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7216, :column 7, :line 7216, :file "cljs/core.cljs"} set ^{:arglists (^{:end-column 9, :end-line 7218, :column 3, :line 7218, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7218, :column 4, :line 7218, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7216, :column 7, :line 7216, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7218, :column 4, :line 7218, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7218, :column 3, :line 7218, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7218, :column 4, :line 7218, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7216, :column 7, :line 7216, :file "cljs/core.cljs"} set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1525, :column 4, :line 1525, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1525, :column 5, :line 1525, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1532, :column 8, :line 1532, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1532, :column 15, :line 1532, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1523, :column 17, :line 1523, :file "cljs/core.cljs"} compare-indexed ^{:arglists (^{:end-column 11, :end-line 1525, :column 4, :line 1525, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1525, :column 5, :line 1525, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1532, :column 8, :line 1532, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1532, :column 15, :line 1532, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1523, :column 17, :line 1523, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1525, :column 5, :line 1525, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} ys] ^^{:end-column 15, :end-line 1502, :column 8, :line 1502, :file "cljs/core.cljs"} number [^{:end-column 8, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1532, :column 8, :line 1532, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1532, :column 15, :line 1532, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1525, :column 4, :line 1525, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1525, :column 5, :line 1525, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1532, :column 8, :line 1532, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1532, :column 15, :line 1532, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1523, :column 17, :line 1523, :file "cljs/core.cljs"} compare-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3604, :column 3, :line 3604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3604, :column 6, :line 3604, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} take-last ^{:arglists (^{:end-column 11, :end-line 3604, :column 3, :line 3604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3604, :column 6, :line 3604, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 6, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3604, :column 6, :line 3604, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3604, :column 3, :line 3604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3604, :column 6, :line 3604, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} take-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 605, :column 29, :line 605, :file "cljs/core.cljs"} IndexedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 858, :column 10, :line 858, :file "cljs/core.cljs"} IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 28, :end-line 858, :column 21, :line 858, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i], :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 8, :end-line 1966, :column 3, :line 1966, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1966, :column 4, :line 1966, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1966, :column 6, :line 1966, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1964, :column 7, :line 1964, :file "cljs/core.cljs"} bit-set ^{:arglists (^{:end-column 8, :end-line 1966, :column 3, :line 1966, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1966, :column 4, :line 1966, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1966, :column 6, :line 1966, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1964, :column 7, :line 1964, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1966, :column 4, :line 1966, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1966, :column 6, :line 1966, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1966, :column 3, :line 1966, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1966, :column 4, :line 1966, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1966, :column 6, :line 1966, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1964, :column 7, :line 1964, :file "cljs/core.cljs"} bit-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 32, :end-line 479, :column 1, :line 479, :file "cljs/core.cljs"} string-hash-cache-count ^{:end-column 32, :end-line 479, :column 1, :line 479, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 32, :end-line 479, :column 1, :line 479, :file "cljs/core.cljs"} string-hash-cache-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 6513, :column 21, :line 6513, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6513, :column 22, :line 6513, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6513, :column 27, :line 6513, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6513, :column 32, :line 6513, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6513, :column 34, :line 6513, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6513, :column 36, :line 6513, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6513, :column 8, :line 6513, :file "cljs/core.cljs"} tree-map-add ^{:arglists (^{:end-column 42, :end-line 6513, :column 21, :line 6513, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6513, :column 22, :line 6513, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6513, :column 27, :line 6513, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6513, :column 32, :line 6513, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6513, :column 34, :line 6513, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6513, :column 36, :line 6513, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6513, :column 8, :line 6513, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6513, :column 22, :line 6513, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6513, :column 27, :line 6513, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6513, :column 32, :line 6513, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6513, :column 34, :line 6513, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6513, :column 36, :line 6513, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 6513, :column 21, :line 6513, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6513, :column 22, :line 6513, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6513, :column 27, :line 6513, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6513, :column 32, :line 6513, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6513, :column 34, :line 6513, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6513, :column 36, :line 6513, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6513, :column 8, :line 6513, :file "cljs/core.cljs"} tree-map-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 293, :column 20, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 21, :line 293, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 293, :column 23, :line 293, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -with-meta ^{:arglists (^{:end-column 28, :end-line 293, :column 20, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 21, :line 293, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 293, :column 23, :line 293, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 293, :column 21, :line 293, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 293, :column 23, :line 293, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 293, :column 20, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 21, :line 293, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 293, :column 23, :line 293, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 57, :end-line 8447, :column 3, :line 8447, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8447, :column 17, :line 8447, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8447, :column 30, :line 8447, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8447, :column 47, :line 8447, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8446, :column 8, :line 8446, :file "cljs/core.cljs"} reset-cache ^{:arglists (^{:end-column 57, :end-line 8447, :column 3, :line 8447, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8447, :column 17, :line 8447, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8447, :column 30, :line 8447, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8447, :column 47, :line 8447, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8446, :column 8, :line 8446, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8447, :column 17, :line 8447, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8447, :column 30, :line 8447, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8447, :column 47, :line 8447, :file "cljs/core.cljs"} hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 57, :end-line 8447, :column 3, :line 8447, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8447, :column 17, :line 8447, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8447, :column 30, :line 8447, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8447, :column 47, :line 8447, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8446, :column 8, :line 8446, :file "cljs/core.cljs"} reset-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7280, :column 15, :line 7280, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7280, :column 16, :line 7280, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7280, :column 7, :line 7280, :file "cljs/core.cljs"} butlast ^{:arglists (^{:end-column 18, :end-line 7280, :column 15, :line 7280, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7280, :column 16, :line 7280, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7280, :column 7, :line 7280, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 18, :end-line 7280, :column 16, :line 7280, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7280, :column 15, :line 7280, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7280, :column 16, :line 7280, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7280, :column 7, :line 7280, :file "cljs/core.cljs"} butlast, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 3901, :column 17, :line 3901, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3901, :column 18, :line 3901, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3901, :column 8, :line 3901, :file "cljs/core.cljs"} tail-off ^{:arglists (^{:end-column 21, :end-line 3901, :column 17, :line 3901, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3901, :column 18, :line 3901, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3901, :column 8, :line 3901, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 3901, :column 18, :line 3901, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 3901, :column 17, :line 3901, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3901, :column 18, :line 3901, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3901, :column 8, :line 3901, :file "cljs/core.cljs"} tail-off, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} unchecked-subtract-int ^{:arglists (^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} unchecked-subtract-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7508, :column 4, :line 7508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7508, :column 5, :line 7508, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7519, :column 4, :line 7519, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7519, :column 5, :line 7519, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7505, :column 7, :line 7505, :file "cljs/core.cljs"} take-nth ^{:arglists (^{:end-column 7, :end-line 7508, :column 4, :line 7508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7508, :column 5, :line 7508, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7519, :column 4, :line 7519, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7519, :column 5, :line 7519, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7505, :column 7, :line 7505, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7508, :column 5, :line 7508, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7519, :column 5, :line 7519, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7508, :column 4, :line 7508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7508, :column 5, :line 7508, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7519, :column 4, :line 7519, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7519, :column 5, :line 7519, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7505, :column 7, :line 7505, :file "cljs/core.cljs"} take-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 639, :column 3, :line 639, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 639, :column 4, :line 639, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 636, :column 7, :line 636, :file "cljs/core.cljs"} first ^{:arglists (^{:end-column 9, :end-line 639, :column 3, :line 639, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 639, :column 4, :line 639, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 636, :column 7, :line 636, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 639, :column 4, :line 639, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 639, :column 3, :line 639, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 639, :column 4, :line 639, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 636, :column 7, :line 636, :file "cljs/core.cljs"} first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies? ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1433, :column 3, :line 1433, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1433, :column 4, :line 1433, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1431, :column 8, :line 1431, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1431, :column 16, :line 1431, :file "cljs/core.cljs"} seq? ^{:arglists (^{:end-column 6, :end-line 1433, :column 3, :line 1433, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1433, :column 4, :line 1433, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1431, :column 8, :line 1431, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1431, :column 16, :line 1431, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1433, :column 4, :line 1433, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1433, :column 3, :line 1433, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1433, :column 4, :line 1433, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1431, :column 8, :line 1431, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1431, :column 16, :line 1431, :file "cljs/core.cljs"} seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 38, :end-line 8336, :column 1, :line 8336, :file "cljs/core.cljs"} -global-hierarchy ^{:private true, :end-column 38, :end-line 8336, :column 1, :line 8336, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:private true, :end-column 38, :end-line 8336, :column 1, :line 8336, :file "cljs/core.cljs"} -global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8716, :column 10, :line 8716, :file "cljs/core.cljs"} UUID {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8716, :column 10, :line 8716, :file "cljs/core.cljs"} UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 21, :end-line 8716, :column 15, :line 8716, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 45, :end-line 324, :column 26, :line 324, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 324, :column 32, :line 324, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 324, :column 34, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq-from ^{:arglists (^{:end-column 45, :end-line 324, :column 26, :line 324, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 324, :column 32, :line 324, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 324, :column 34, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 324, :column 32, :line 324, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 324, :column 34, :line 324, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 324, :column 26, :line 324, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 324, :column 32, :line 324, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 324, :column 34, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq-from, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7903, :column 3, :line 7903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7903, :column 4, :line 7903, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7903, :column 6, :line 7903, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} println-str ^{:arglists (^{:end-column 11, :end-line 7903, :column 3, :line 7903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7903, :column 4, :line 7903, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7903, :column 6, :line 7903, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7903, :column 6, :line 7903, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7903, :column 3, :line 7903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7903, :column 4, :line 7903, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7903, :column 6, :line 7903, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} println-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1076, :column 5, :line 1076, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1076, :column 10, :line 1076, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1085, :column 4, :line 1085, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1085, :column 5, :line 1085, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1085, :column 10, :line 1085, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1085, :column 12, :line 1085, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1075, :column 8, :line 1075, :file "cljs/core.cljs"} linear-traversal-nth ^{:arglists (^{:end-column 12, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1076, :column 5, :line 1076, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1076, :column 10, :line 1076, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1085, :column 4, :line 1085, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1085, :column 5, :line 1085, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1085, :column 10, :line 1085, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1085, :column 12, :line 1085, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1075, :column 8, :line 1075, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1076, :column 5, :line 1076, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1076, :column 10, :line 1076, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 1085, :column 5, :line 1085, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1085, :column 10, :line 1085, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1085, :column 12, :line 1085, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1076, :column 5, :line 1076, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1076, :column 10, :line 1076, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1085, :column 4, :line 1085, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1085, :column 5, :line 1085, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1085, :column 10, :line 1085, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1085, :column 12, :line 1085, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1075, :column 8, :line 1075, :file "cljs/core.cljs"} linear-traversal-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3665, :column 6, :line 3665, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3662, :column 7, :line 3662, :file "cljs/core.cljs"} iterate ^{:arglists (^{:end-column 8, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3665, :column 6, :line 3665, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3662, :column 7, :line 3662, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3665, :column 6, :line 3665, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3665, :column 6, :line 3665, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3662, :column 7, :line 3662, :file "cljs/core.cljs"} iterate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 237, :column 12, :line 237, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 237, :column 4, :line 237, :file "cljs/core.cljs"} -empty ^{:arglists (^{:end-column 17, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 237, :column 12, :line 237, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 237, :column 4, :line 237, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 237, :column 12, :line 237, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 237, :column 12, :line 237, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 237, :column 4, :line 237, :file "cljs/core.cljs"} -empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7859, :column 15, :line 7859, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7859, :column 16, :line 7859, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7859, :column 7, :line 7859, :file "cljs/core.cljs"} newline ^{:arglists (^{:end-column 21, :end-line 7859, :column 15, :line 7859, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7859, :column 16, :line 7859, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7859, :column 7, :line 7859, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 21, :end-line 7859, :column 16, :line 7859, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7859, :column 15, :line 7859, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7859, :column 16, :line 7859, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7859, :column 7, :line 7859, :file "cljs/core.cljs"} newline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} ILookup ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/TransientHashMap cljs.core/PersistentVector cljs.core/TransientArrayMap cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} ILookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 376, :column 18, :line 376, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-rest ^{:arglists (^{:end-column 24, :end-line 376, :column 18, :line 376, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 376, :column 18, :line 376, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 7722, :column 17, :line 7722, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7722, :column 18, :line 7722, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7722, :column 25, :line 7722, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7722, :column 27, :line 7722, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7722, :column 7, :line 7722, :file "cljs/core.cljs"} write-all ^{:arglists (^{:end-column 30, :end-line 7722, :column 17, :line 7722, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7722, :column 18, :line 7722, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7722, :column 25, :line 7722, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7722, :column 27, :line 7722, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7722, :column 7, :line 7722, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 7722, :column 18, :line 7722, :file "cljs/core.cljs"} writer & ^{:end-column 30, :end-line 7722, :column 27, :line 7722, :file "cljs/core.cljs"} ss]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 7722, :column 17, :line 7722, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7722, :column 18, :line 7722, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7722, :column 25, :line 7722, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7722, :column 27, :line 7722, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7722, :column 7, :line 7722, :file "cljs/core.cljs"} write-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1232, :column 20, :line 1232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1232, :column 21, :line 1232, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1232, :column 8, :line 1232, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} fn? ^{:arglists (^{:end-column 23, :end-line 1232, :column 20, :line 1232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1232, :column 21, :line 1232, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1232, :column 8, :line 1232, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1233, :column 8, :line 1233, :file "cljs/core.cljs"} boolean [^{:end-column 23, :end-line 1232, :column 21, :line 1232, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1232, :column 20, :line 1232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1232, :column 21, :line 1232, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1232, :column 8, :line 1232, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} fn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 51, :end-line 8502, :column 19, :line 8502, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8502, :column 20, :line 8502, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8502, :column 23, :line 8502, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8502, :column 36, :line 8502, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8502, :column 4, :line 8502, :file "cljs/core.cljs"} -prefer-method ^{:arglists (^{:end-column 51, :end-line 8502, :column 19, :line 8502, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8502, :column 20, :line 8502, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8502, :column 23, :line 8502, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8502, :column 36, :line 8502, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8502, :column 4, :line 8502, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 8502, :column 20, :line 8502, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8502, :column 23, :line 8502, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8502, :column 36, :line 8502, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 51, :end-line 8502, :column 19, :line 8502, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8502, :column 20, :line 8502, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8502, :column 23, :line 8502, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8502, :column 36, :line 8502, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8502, :column 4, :line 8502, :file "cljs/core.cljs"} -prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 263, :column 16, :line 263, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 263, :column 22, :line 263, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 263, :column 24, :line 263, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} -assoc ^{:arglists (^{:end-column 26, :end-line 263, :column 16, :line 263, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 263, :column 22, :line 263, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 263, :column 24, :line 263, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 263, :column 22, :line 263, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 263, :column 24, :line 263, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 263, :column 16, :line 263, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 263, :column 22, :line 263, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 263, :column 24, :line 263, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} -assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7648, :column 4, :line 7648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7648, :column 5, :line 7648, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7651, :column 7, :line 7651, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7641, :column 7, :line 7641, :file "cljs/core.cljs"} doall ^{:arglists (^{:end-column 10, :end-line 7648, :column 4, :line 7648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7648, :column 5, :line 7648, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7651, :column 7, :line 7651, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7641, :column 7, :line 7641, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 7648, :column 5, :line 7648, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7651, :column 7, :line 7651, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7648, :column 4, :line 7648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7648, :column 5, :line 7648, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7651, :column 7, :line 7651, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7641, :column 7, :line 7641, :file "cljs/core.cljs"} doall, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 2343, :column 35, :line 2343, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2343, :column 36, :line 2343, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2343, :column 38, :line 2343, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2343, :column 8, :line 2343, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2343, :column 16, :line 2343, :file "cljs/core.cljs"} keyword-identical? ^{:arglists (^{:end-column 40, :end-line 2343, :column 35, :line 2343, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2343, :column 36, :line 2343, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2343, :column 38, :line 2343, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2343, :column 8, :line 2343, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2343, :column 16, :line 2343, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 38, :end-line 2343, :column 36, :line 2343, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2343, :column 38, :line 2343, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 2343, :column 35, :line 2343, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2343, :column 36, :line 2343, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2343, :column 38, :line 2343, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2343, :column 8, :line 2343, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2343, :column 16, :line 2343, :file "cljs/core.cljs"} keyword-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 3895, :column 16, :line 3895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3895, :column 17, :line 3895, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3895, :column 22, :line 3895, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3895, :column 26, :line 3895, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3895, :column 8, :line 3895, :file "cljs/core.cljs"} pv-aset ^{:arglists (^{:end-column 30, :end-line 3895, :column 16, :line 3895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3895, :column 17, :line 3895, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3895, :column 22, :line 3895, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3895, :column 26, :line 3895, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3895, :column 8, :line 3895, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3895, :column 17, :line 3895, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3895, :column 22, :line 3895, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3895, :column 26, :line 3895, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 3895, :column 16, :line 3895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3895, :column 17, :line 3895, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3895, :column 22, :line 3895, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3895, :column 26, :line 3895, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3895, :column 8, :line 3895, :file "cljs/core.cljs"} pv-aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8712, :column 3, :line 8712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8712, :column 4, :line 8712, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8710, :column 7, :line 8710, :file "cljs/core.cljs"} prefers ^{:arglists (^{:end-column 12, :end-line 8712, :column 3, :line 8712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8712, :column 4, :line 8712, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8710, :column 7, :line 8710, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8712, :column 4, :line 8712, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8712, :column 3, :line 8712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8712, :column 4, :line 8712, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8710, :column 7, :line 8710, :file "cljs/core.cljs"} prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8239, :column 13, :line 8239, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8239, :column 14, :line 8239, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8239, :column 16, :line 8239, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8239, :column 4, :line 8239, :file "cljs/core.cljs"} -js->clj ^{:arglists (^{:end-column 24, :end-line 8239, :column 13, :line 8239, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8239, :column 14, :line 8239, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8239, :column 16, :line 8239, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8239, :column 4, :line 8239, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8239, :column 14, :line 8239, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8239, :column 16, :line 8239, :file "cljs/core.cljs"} options]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8239, :column 13, :line 8239, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8239, :column 14, :line 8239, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8239, :column 16, :line 8239, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8239, :column 4, :line 8239, :file "cljs/core.cljs"} -js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2373, :column 10, :line 2373, :file "cljs/core.cljs"} LazySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2373, :column 10, :line 2373, :file "cljs/core.cljs"} LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 2373, :column 18, :line 2373, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8152, :column 4, :line 8152, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8164, :column 4, :line 8164, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8164, :column 5, :line 8164, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8149, :column 7, :line 8149, :file "cljs/core.cljs"} dedupe ^{:arglists (^{:end-column 6, :end-line 8152, :column 4, :line 8152, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8164, :column 4, :line 8164, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8164, :column 5, :line 8164, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8149, :column 7, :line 8149, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 10, :end-line 8164, :column 5, :line 8164, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8152, :column 4, :line 8152, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8164, :column 4, :line 8164, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8164, :column 5, :line 8164, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8149, :column 7, :line 8149, :file "cljs/core.cljs"} dedupe, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4407, :column 37, :line 4407, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4407, :column 38, :line 4407, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4407, :column 41, :line 4407, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4407, :column 8, :line 4407, :file "cljs/core.cljs"} unchecked-editable-array-for ^{:arglists (^{:end-column 43, :end-line 4407, :column 37, :line 4407, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4407, :column 38, :line 4407, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4407, :column 41, :line 4407, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4407, :column 8, :line 4407, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4407, :column 38, :line 4407, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4407, :column 41, :line 4407, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4407, :column 37, :line 4407, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4407, :column 38, :line 4407, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4407, :column 41, :line 4407, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4407, :column 8, :line 4407, :file "cljs/core.cljs"} unchecked-editable-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3887, :column 10, :line 3887, :file "cljs/core.cljs"} VectorNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3887, :column 10, :line 3887, :file "cljs/core.cljs"} VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 3887, :column 21, :line 3887, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr], :protocols #{}}, ^{:arglists (^{:end-column 10, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1221, :column 5, :line 1221, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1222, :column 4, :line 1222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1222, :column 5, :line 1222, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1222, :column 10, :line 1222, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1225, :column 4, :line 1225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1225, :column 5, :line 1225, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1225, :column 10, :line 1225, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1225, :column 12, :line 1225, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1225, :column 14, :line 1225, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1218, :column 7, :line 1218, :file "cljs/core.cljs"} dissoc ^{:arglists (^{:end-column 10, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1221, :column 5, :line 1221, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1222, :column 4, :line 1222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1222, :column 5, :line 1222, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1222, :column 10, :line 1222, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1225, :column 4, :line 1225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1225, :column 5, :line 1225, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1225, :column 10, :line 1225, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1225, :column 12, :line 1225, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1225, :column 14, :line 1225, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1218, :column 7, :line 1218, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1221, :column 5, :line 1221, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1222, :column 5, :line 1222, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1222, :column 10, :line 1222, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1225, :column 5, :line 1225, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1225, :column 10, :line 1225, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1225, :column 14, :line 1225, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1221, :column 5, :line 1221, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1222, :column 4, :line 1222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1222, :column 5, :line 1222, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1222, :column 10, :line 1222, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1225, :column 4, :line 1225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1225, :column 5, :line 1225, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1225, :column 10, :line 1225, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1225, :column 12, :line 1225, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1225, :column 14, :line 1225, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1218, :column 7, :line 1218, :file "cljs/core.cljs"} dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3321, :column 4, :line 3321, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 3322, :column 4, :line 3322, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3322, :column 5, :line 3322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 3322, :column 7, :line 3322, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 3322, :column 9, :line 3322, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 3322, :column 16, :line 3322, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3322, :column 17, :line 3322, :file "cljs/core.cljs"} meta ^{:end-column 32, :end-line 3322, :column 22, :line 3322, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 12, :end-line 3307, :column 7, :line 3307, :file "cljs/core.cljs"} atom ^{:declared true, :end-column 73, :end-line 5244, :column 68, :line 5244, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 73, :end-line 5244, :column 68, :line 5244, :file "cljs/core.cljs"} atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1980, :column 3, :line 1980, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1980, :column 4, :line 1980, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1980, :column 6, :line 1980, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1978, :column 7, :line 1978, :file "cljs/core.cljs"} bit-shift-right ^{:arglists (^{:end-column 8, :end-line 1980, :column 3, :line 1980, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1980, :column 4, :line 1980, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1980, :column 6, :line 1980, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1978, :column 7, :line 1978, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1980, :column 4, :line 1980, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1980, :column 6, :line 1980, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1980, :column 3, :line 1980, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1980, :column 4, :line 1980, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1980, :column 6, :line 1980, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1978, :column 7, :line 1978, :file "cljs/core.cljs"} bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version* ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} {:tag string, :op :var, :name ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s])} ->SetEntriesIterator ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s])} {:arglists (^cljs.core/SetEntriesIterator [^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s])} ->SetEntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 251, :column 11, :line 251, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 251, :column 12, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 251, :column 4, :line 251, :file "cljs/core.cljs"} -first ^{:arglists (^{:end-column 17, :end-line 251, :column 11, :line 251, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 251, :column 12, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 251, :column 4, :line 251, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 251, :column 12, :line 251, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 251, :column 11, :line 251, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 251, :column 12, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 251, :column 4, :line 251, :file "cljs/core.cljs"} -first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1307, :column 3, :line 1307, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1307, :column 4, :line 1307, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1304, :column 7, :line 1304, :file "cljs/core.cljs"} peek ^{:arglists (^{:end-column 9, :end-line 1307, :column 3, :line 1307, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1307, :column 4, :line 1307, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1304, :column 7, :line 1304, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1307, :column 4, :line 1307, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1307, :column 3, :line 1307, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1307, :column 4, :line 1307, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1304, :column 7, :line 1304, :file "cljs/core.cljs"} peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} IKVReduce ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/PersistentTreeMap}, :protocol-symbol true, :end-column 24, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} IKVReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} aget ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6113, :column 10, :line 6113, :file "cljs/core.cljs"} PersistentTreeMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6113, :column 10, :line 6113, :file "cljs/core.cljs"} PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 84, :end-line 6113, :column 31, :line 6113, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 21, :end-line 329, :column 11, :line 329, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 329, :column 12, :line 329, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 329, :column 19, :line 329, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 329, :column 4, :line 329, :file "cljs/core.cljs"} -write ^{:arglists (^{:end-column 21, :end-line 329, :column 11, :line 329, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 329, :column 12, :line 329, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 329, :column 19, :line 329, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 329, :column 4, :line 329, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 329, :column 12, :line 329, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 329, :column 19, :line 329, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 329, :column 11, :line 329, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 329, :column 12, :line 329, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 329, :column 19, :line 329, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 329, :column 4, :line 329, :file "cljs/core.cljs"} -write, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2931, :column 12, :line 2931, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2931, :column 13, :line 2931, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2931, :column 7, :line 2931, :file "cljs/core.cljs"} iter ^{:arglists (^{:end-column 18, :end-line 2931, :column 12, :line 2931, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2931, :column 13, :line 2931, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2931, :column 7, :line 2931, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 2931, :column 13, :line 2931, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2931, :column 12, :line 2931, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2931, :column 13, :line 2931, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2931, :column 7, :line 2931, :file "cljs/core.cljs"} iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7384, :column 7, :line 7384, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7384, :column 12, :line 7384, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} mk-bound-fn ^{:arglists (^{:end-column 16, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7384, :column 7, :line 7384, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7384, :column 12, :line 7384, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7384, :column 7, :line 7384, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7384, :column 12, :line 7384, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7384, :column 7, :line 7384, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7384, :column 12, :line 7384, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} mk-bound-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} last ^{:arglists (^{:end-column 6, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7879, :column 4, :line 7879, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7879, :column 6, :line 7879, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7874, :column 7, :line 7874, :file "cljs/core.cljs"} pr ^{:arglists (^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7879, :column 4, :line 7879, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7879, :column 6, :line 7879, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7874, :column 7, :line 7874, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7879, :column 6, :line 7879, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7879, :column 4, :line 7879, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7879, :column 6, :line 7879, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7874, :column 7, :line 7874, :file "cljs/core.cljs"} pr, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 58, :end-line 6106, :column 26, :line 6106, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6106, :column 27, :line 6106, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6106, :column 32, :line 6106, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6106, :column 39, :line 6106, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6106, :column 47, :line 6106, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6106, :column 8, :line 6106, :file "cljs/core.cljs"} tree-map-seq-push ^{:arglists (^{:end-column 58, :end-line 6106, :column 26, :line 6106, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6106, :column 27, :line 6106, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6106, :column 32, :line 6106, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6106, :column 39, :line 6106, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6106, :column 47, :line 6106, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6106, :column 8, :line 6106, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 6106, :column 27, :line 6106, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6106, :column 32, :line 6106, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6106, :column 39, :line 6106, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6106, :column 47, :line 6106, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 58, :end-line 6106, :column 26, :line 6106, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6106, :column 27, :line 6106, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6106, :column 32, :line 6106, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6106, :column 39, :line 6106, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6106, :column 47, :line 6106, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6106, :column 8, :line 6106, :file "cljs/core.cljs"} tree-map-seq-push, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2353, :column 3, :line 2353, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2353, :column 4, :line 2353, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2351, :column 7, :line 2351, :file "cljs/core.cljs"} namespace ^{:arglists (^{:end-column 6, :end-line 2353, :column 3, :line 2353, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2353, :column 4, :line 2353, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2351, :column 7, :line 2351, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string [^{:end-column 6, :end-line 2353, :column 4, :line 2353, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2353, :column 3, :line 2353, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2353, :column 4, :line 2353, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2351, :column 7, :line 2351, :file "cljs/core.cljs"} namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6786, :column 3, :line 6786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6786, :column 4, :line 6786, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6786, :column 6, :line 6786, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6783, :column 7, :line 6783, :file "cljs/core.cljs"} obj-map ^{:arglists (^{:end-column 14, :end-line 6786, :column 3, :line 6786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6786, :column 4, :line 6786, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6786, :column 6, :line 6786, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6783, :column 7, :line 6783, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 14, :end-line 6786, :column 6, :line 6786, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6786, :column 3, :line 6786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6786, :column 4, :line 6786, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6786, :column 6, :line 6786, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6783, :column 7, :line 6783, :file "cljs/core.cljs"} obj-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 764, :column 10, :line 764, :file "cljs/core.cljs"} Reduced {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 764, :column 10, :line 764, :file "cljs/core.cljs"} Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 764, :column 18, :line 764, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val], :protocols #{cljs.core/IDeref}}, ^{:arglists (^{:end-column 23, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 240, :column 16, :line 240, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 240, :column 9, :line 240, :file "cljs/core.cljs"} -conj ^{:arglists (^{:end-column 23, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 240, :column 16, :line 240, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 240, :column 9, :line 240, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 240, :column 16, :line 240, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 240, :column 16, :line 240, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 240, :column 9, :line 240, :file "cljs/core.cljs"} -conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5738, :column 10, :line 5738, :file "cljs/core.cljs"} NodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5738, :column 10, :line 5738, :file "cljs/core.cljs"} NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 5738, :column 18, :line 5738, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:declared true, :end-column 24, :end-line 475, :column 22, :line 475, :file "cljs/core.cljs"} = ^{:arglists (^{:end-column 7, :end-line 674, :column 4, :line 674, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 674, :column 5, :line 674, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 675, :column 4, :line 675, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 675, :column 5, :line 675, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 675, :column 7, :line 675, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 680, :column 4, :line 680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 680, :column 5, :line 680, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 680, :column 7, :line 680, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 680, :column 9, :line 680, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 680, :column 11, :line 680, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 669, :column 8, :line 669, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 669, :column 16, :line 669, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 674, :column 5, :line 674, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 675, :column 5, :line 675, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 675, :column 7, :line 675, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 680, :column 5, :line 680, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 680, :column 7, :line 680, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 680, :column 11, :line 680, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 674, :column 4, :line 674, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 674, :column 5, :line 674, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 675, :column 4, :line 675, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 675, :column 5, :line 675, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 675, :column 7, :line 675, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 680, :column 4, :line 680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 680, :column 5, :line 680, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 680, :column 7, :line 680, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 680, :column 9, :line 680, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 680, :column 11, :line 680, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 669, :column 8, :line 669, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 669, :column 16, :line 669, :file "cljs/core.cljs"} =, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 358, :column 14, :line 358, :file "cljs/core.cljs"} ITransientMap ^{:impls #{cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :protocol-symbol true, :end-column 28, :end-line 358, :column 14, :line 358, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 358, :column 14, :line 358, :file "cljs/core.cljs"} ITransientMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 3917, :column 18, :line 3917, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3917, :column 19, :line 3917, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3917, :column 22, :line 3917, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3917, :column 28, :line 3917, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3917, :column 35, :line 3917, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3917, :column 8, :line 3917, :file "cljs/core.cljs"} push-tail ^{:arglists (^{:end-column 44, :end-line 3917, :column 18, :line 3917, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3917, :column 19, :line 3917, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3917, :column 22, :line 3917, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3917, :column 28, :line 3917, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3917, :column 35, :line 3917, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3917, :column 8, :line 3917, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 22, :end-line 3917, :column 19, :line 3917, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3917, :column 22, :line 3917, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3917, :column 28, :line 3917, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3917, :column 35, :line 3917, :file "cljs/core.cljs"} tailnode]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 3917, :column 18, :line 3917, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3917, :column 19, :line 3917, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3917, :column 22, :line 3917, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3917, :column 28, :line 3917, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3917, :column 35, :line 3917, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3917, :column 8, :line 3917, :file "cljs/core.cljs"} push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3552, :column 4, :line 3552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3552, :column 5, :line 3552, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3567, :column 4, :line 3567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3567, :column 5, :line 3567, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3567, :column 7, :line 3567, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} take ^{:arglists (^{:end-column 7, :end-line 3552, :column 4, :line 3552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3552, :column 5, :line 3552, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3567, :column 4, :line 3567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3567, :column 5, :line 3567, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3567, :column 7, :line 3567, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3552, :column 5, :line 3552, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3567, :column 5, :line 3567, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3567, :column 7, :line 3567, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3552, :column 4, :line 3552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3552, :column 5, :line 3552, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3567, :column 4, :line 3567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3567, :column 5, :line 3567, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3567, :column 7, :line 3567, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} take, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1376, :column 8, :line 1376, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1376, :column 16, :line 1376, :file "cljs/core.cljs"} vector? ^{:arglists (^{:end-column 6, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1376, :column 8, :line 1376, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1376, :column 16, :line 1376, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1376, :column 8, :line 1376, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1376, :column 16, :line 1376, :file "cljs/core.cljs"} vector?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 46, :end-line 5270, :column 34, :line 5270, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5270, :column 35, :line 5270, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5270, :column 42, :line 5270, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5270, :column 8, :line 5270, :file "cljs/core.cljs"} bitmap-indexed-node-index ^{:arglists (^{:end-column 46, :end-line 5270, :column 34, :line 5270, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5270, :column 35, :line 5270, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5270, :column 42, :line 5270, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5270, :column 8, :line 5270, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 42, :end-line 5270, :column 35, :line 5270, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5270, :column 42, :line 5270, :file "cljs/core.cljs"} bit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 5270, :column 34, :line 5270, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5270, :column 35, :line 5270, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5270, :column 42, :line 5270, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5270, :column 8, :line 5270, :file "cljs/core.cljs"} bitmap-indexed-node-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1443, :column 24, :line 1443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1443, :column 25, :line 1443, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1443, :column 8, :line 1443, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1443, :column 16, :line 1443, :file "cljs/core.cljs"} boolean ^{:arglists (^{:end-column 27, :end-line 1443, :column 24, :line 1443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1443, :column 25, :line 1443, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1443, :column 8, :line 1443, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1443, :column 16, :line 1443, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 27, :end-line 1443, :column 25, :line 1443, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1443, :column 24, :line 1443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1443, :column 25, :line 1443, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1443, :column 8, :line 1443, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1443, :column 16, :line 1443, :file "cljs/core.cljs"} boolean, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 371, :column 14, :line 371, :file "cljs/core.cljs"} IChunk ^{:impls #{cljs.core/ArrayChunk}, :protocol-symbol true, :end-column 21, :end-line 371, :column 14, :line 371, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 371, :column 14, :line 371, :file "cljs/core.cljs"} IChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1976, :column 3, :line 1976, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1976, :column 4, :line 1976, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1976, :column 6, :line 1976, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1974, :column 7, :line 1974, :file "cljs/core.cljs"} bit-shift-left ^{:arglists (^{:end-column 8, :end-line 1976, :column 3, :line 1976, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1976, :column 4, :line 1976, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1976, :column 6, :line 1976, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1974, :column 7, :line 1974, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1976, :column 4, :line 1976, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1976, :column 6, :line 1976, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1976, :column 3, :line 1976, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1976, :column 4, :line 1976, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1976, :column 6, :line 1976, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1974, :column 7, :line 1974, :file "cljs/core.cljs"} bit-shift-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1932, :column 3, :line 1932, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 1930, :column 7, :line 1930, :file "cljs/core.cljs"} rand-int ^{:arglists (^{:end-column 6, :end-line 8312, :column 3, :line 8312, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8312, :column 4, :line 8312, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 8310, :column 7, :line 8310, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8312, :column 4, :line 8312, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8312, :column 3, :line 8312, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8312, :column 4, :line 8312, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 8310, :column 7, :line 8310, :file "cljs/core.cljs"} rand-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} aclone ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} aclone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 6167, :column 18, :line 6167, :file "cljs/core.cljs"} BlackNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6270, :column 10, :line 6270, :file "cljs/core.cljs"} BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 57, :end-line 6270, :column 20, :line 6270, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 16, :end-line 2558, :column 13, :line 2558, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2558, :column 14, :line 2558, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2558, :column 7, :line 2558, :file "cljs/core.cljs"} chunk ^{:arglists (^{:end-column 16, :end-line 2558, :column 13, :line 2558, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2558, :column 14, :line 2558, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2558, :column 7, :line 2558, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2558, :column 14, :line 2558, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 2558, :column 13, :line 2558, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2558, :column 14, :line 2558, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2558, :column 7, :line 2558, :file "cljs/core.cljs"} chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1761, :column 3, :line 1761, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1761, :column 4, :line 1761, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1759, :column 7, :line 1759, :file "cljs/core.cljs"} dec ^{:arglists (^{:end-column 6, :end-line 1761, :column 3, :line 1761, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1761, :column 4, :line 1761, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1759, :column 7, :line 1759, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1761, :column 4, :line 1761, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1761, :column 3, :line 1761, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1761, :column 4, :line 1761, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1759, :column 7, :line 1759, :file "cljs/core.cljs"} dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 2053, :column 10, :line 2053, :file "cljs/core.cljs"} map ^{:arglists (^{:end-column 7, :end-line 3508, :column 4, :line 3508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3508, :column 5, :line 3508, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3517, :column 4, :line 3517, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3517, :column 5, :line 3517, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3517, :column 7, :line 3517, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3528, :column 4, :line 3528, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3528, :column 5, :line 3528, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3528, :column 7, :line 3528, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3528, :column 10, :line 3528, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3534, :column 4, :line 3534, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3534, :column 5, :line 3534, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3534, :column 7, :line 3534, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3534, :column 10, :line 3534, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3534, :column 13, :line 3534, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3540, :column 4, :line 3540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3540, :column 5, :line 3540, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3540, :column 7, :line 3540, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3540, :column 10, :line 3540, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3540, :column 13, :line 3540, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3540, :column 16, :line 3540, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3540, :column 18, :line 3540, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 11, :end-line 3501, :column 7, :line 3501, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3508, :column 5, :line 3508, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3517, :column 5, :line 3517, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3517, :column 7, :line 3517, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3528, :column 5, :line 3528, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3528, :column 7, :line 3528, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3528, :column 10, :line 3528, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3534, :column 5, :line 3534, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3534, :column 7, :line 3534, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3534, :column 10, :line 3534, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3534, :column 13, :line 3534, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3540, :column 5, :line 3540, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3540, :column 7, :line 3540, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3540, :column 10, :line 3540, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3540, :column 13, :line 3540, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3540, :column 18, :line 3540, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3508, :column 4, :line 3508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3508, :column 5, :line 3508, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3517, :column 4, :line 3517, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3517, :column 5, :line 3517, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3517, :column 7, :line 3517, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3528, :column 4, :line 3528, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3528, :column 5, :line 3528, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3528, :column 7, :line 3528, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3528, :column 10, :line 3528, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3534, :column 4, :line 3534, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3534, :column 5, :line 3534, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3534, :column 7, :line 3534, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3534, :column 10, :line 3534, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3534, :column 13, :line 3534, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3540, :column 4, :line 3540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3540, :column 5, :line 3540, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3540, :column 7, :line 3540, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3540, :column 10, :line 3540, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3540, :column 13, :line 3540, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3540, :column 16, :line 3540, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3540, :column 18, :line 3540, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 11, :end-line 3501, :column 7, :line 3501, :file "cljs/core.cljs"} map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7598, :column 5, :line 7598, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7605, :column 4, :line 7605, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7605, :column 5, :line 7605, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7605, :column 7, :line 7605, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7612, :column 4, :line 7612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7612, :column 5, :line 7612, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7612, :column 9, :line 7612, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7619, :column 9, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7619, :column 13, :line 7619, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7592, :column 7, :line 7592, :file "cljs/core.cljs"} juxt ^{:arglists (^{:end-column 7, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7598, :column 5, :line 7598, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7605, :column 4, :line 7605, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7605, :column 5, :line 7605, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7605, :column 7, :line 7605, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7612, :column 4, :line 7612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7612, :column 5, :line 7612, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7612, :column 9, :line 7612, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7619, :column 9, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7619, :column 13, :line 7619, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7592, :column 7, :line 7592, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7598, :column 5, :line 7598, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 7605, :column 5, :line 7605, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7605, :column 7, :line 7605, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 7612, :column 5, :line 7612, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7612, :column 9, :line 7612, :file "cljs/core.cljs"} h] ^function [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7619, :column 9, :line 7619, :file "cljs/core.cljs"} h & ^{:end-column 16, :end-line 7619, :column 13, :line 7619, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7598, :column 5, :line 7598, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7605, :column 4, :line 7605, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7605, :column 5, :line 7605, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7605, :column 7, :line 7605, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7612, :column 4, :line 7612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7612, :column 5, :line 7612, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7612, :column 9, :line 7612, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7619, :column 9, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7619, :column 13, :line 7619, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7592, :column 7, :line 7592, :file "cljs/core.cljs"} juxt, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1714, :column 5, :line 1714, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1716, :column 7, :line 1716, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1716, :column 9, :line 1716, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1716, :column 11, :line 1716, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1711, :column 8, :line 1711, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1711, :column 16, :line 1711, :file "cljs/core.cljs"} < ^{:arglists (^{:end-column 7, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1714, :column 5, :line 1714, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1716, :column 7, :line 1716, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1716, :column 9, :line 1716, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1716, :column 11, :line 1716, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1711, :column 8, :line 1711, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1711, :column 16, :line 1711, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1714, :column 5, :line 1714, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1716, :column 7, :line 1716, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1716, :column 11, :line 1716, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1714, :column 5, :line 1714, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1716, :column 7, :line 1716, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1716, :column 9, :line 1716, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1716, :column 11, :line 1716, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1711, :column 8, :line 1711, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1711, :column 16, :line 1711, :file "cljs/core.cljs"} <, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5287, :column 24, :line 5287, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5287, :column 25, :line 5287, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5287, :column 29, :line 5287, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5287, :column 31, :line 5287, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5287, :column 8, :line 5287, :file "cljs/core.cljs"} inode-kv-reduce ^{:arglists (^{:end-column 36, :end-line 5287, :column 24, :line 5287, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5287, :column 25, :line 5287, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5287, :column 29, :line 5287, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5287, :column 31, :line 5287, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5287, :column 8, :line 5287, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 5287, :column 25, :line 5287, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5287, :column 29, :line 5287, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5287, :column 31, :line 5287, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5287, :column 24, :line 5287, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5287, :column 25, :line 5287, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5287, :column 29, :line 5287, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5287, :column 31, :line 5287, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5287, :column 8, :line 5287, :file "cljs/core.cljs"} inode-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4695, :column 26, :line 4695, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4695, :column 27, :line 4695, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4695, :column 29, :line 4695, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4695, :column 31, :line 4695, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4695, :column 8, :line 4695, :file "cljs/core.cljs"} obj-map->hash-map ^{:arglists (^{:end-column 33, :end-line 4695, :column 26, :line 4695, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4695, :column 27, :line 4695, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4695, :column 29, :line 4695, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4695, :column 31, :line 4695, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4695, :column 8, :line 4695, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 4695, :column 27, :line 4695, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4695, :column 29, :line 4695, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4695, :column 31, :line 4695, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4695, :column 26, :line 4695, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4695, :column 27, :line 4695, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4695, :column 29, :line 4695, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4695, :column 31, :line 4695, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4695, :column 8, :line 4695, :file "cljs/core.cljs"} obj-map->hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 650, :column 3, :line 650, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 650, :column 4, :line 650, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 647, :column 8, :line 647, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 647, :column 12, :line 647, :file "cljs/core.cljs"} rest ^{:arglists (^{:end-column 9, :end-line 650, :column 3, :line 650, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 650, :column 4, :line 650, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 647, :column 8, :line 647, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 647, :column 12, :line 647, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 650, :column 4, :line 650, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 650, :column 3, :line 650, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 650, :column 4, :line 650, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 647, :column 8, :line 647, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 647, :column 12, :line 647, :file "cljs/core.cljs"} rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8755, :column 3, :line 8755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8755, :column 4, :line 8755, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8751, :column 7, :line 8751, :file "cljs/core.cljs"} ex-data ^{:arglists (^{:end-column 7, :end-line 8755, :column 3, :line 8755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8755, :column 4, :line 8755, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8751, :column 7, :line 8751, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8755, :column 4, :line 8755, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8755, :column 3, :line 8755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8755, :column 4, :line 8755, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8751, :column 7, :line 8751, :file "cljs/core.cljs"} ex-data, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 4945, :column 10, :line 4945, :file "cljs/core.cljs"} PersistentArrayMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 4945, :column 10, :line 4945, :file "cljs/core.cljs"} PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 4945, :column 32, :line 4945, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 22, :end-line 372, :column 16, :line 372, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 372, :column 17, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} -drop-first ^{:arglists (^{:end-column 22, :end-line 372, :column 16, :line 372, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 372, :column 17, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 372, :column 17, :line 372, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 372, :column 16, :line 372, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 372, :column 17, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} -drop-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8352, :column 4, :line 8352, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8352, :column 5, :line 8352, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8352, :column 11, :line 8352, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8353, :column 4, :line 8353, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8353, :column 5, :line 8353, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8353, :column 7, :line 8353, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8353, :column 13, :line 8353, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8346, :column 8, :line 8346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8346, :column 16, :line 8346, :file "cljs/core.cljs"} isa? ^{:arglists (^{:end-column 18, :end-line 8352, :column 4, :line 8352, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8352, :column 5, :line 8352, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8352, :column 11, :line 8352, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8353, :column 4, :line 8353, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8353, :column 5, :line 8353, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8353, :column 7, :line 8353, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8353, :column 13, :line 8353, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8346, :column 8, :line 8346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8346, :column 16, :line 8346, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8352, :column 5, :line 8352, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8352, :column 11, :line 8352, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8353, :column 5, :line 8353, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8353, :column 7, :line 8353, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8353, :column 13, :line 8353, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8352, :column 4, :line 8352, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8352, :column 5, :line 8352, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8352, :column 11, :line 8352, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8353, :column 4, :line 8353, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8353, :column 5, :line 8353, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8353, :column 7, :line 8353, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8353, :column 13, :line 8353, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8346, :column 8, :line 8346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8346, :column 16, :line 8346, :file "cljs/core.cljs"} isa?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 231, :column 16, :line 231, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 231, :column 9, :line 231, :file "cljs/core.cljs"} -clone ^{:arglists (^{:end-column 23, :end-line 231, :column 16, :line 231, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 231, :column 9, :line 231, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 231, :column 16, :line 231, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 231, :column 9, :line 231, :file "cljs/core.cljs"} -clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([])} ->NeverEquiv ^{:file "cljs/core.cljs", :arglists ([])} {:arglists (^cljs.core/NeverEquiv []), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([])} ->NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7688, :column 3, :line 7688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7686, :column 7, :line 7686, :file "cljs/core.cljs"} re-seq ^{:arglists (^{:end-column 9, :end-line 7688, :column 3, :line 7688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7686, :column 7, :line 7686, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7688, :column 3, :line 7688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7686, :column 7, :line 7686, :file "cljs/core.cljs"} re-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 8334, :column 3, :line 8334, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8332, :column 7, :line 8332, :file "cljs/core.cljs"} make-hierarchy ^{:arglists (^{:end-column 5, :end-line 8334, :column 3, :line 8334, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8332, :column 7, :line 8332, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 8334, :column 3, :line 8334, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8332, :column 7, :line 8332, :file "cljs/core.cljs"} make-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 475, :column 15, :line 475, :file "cljs/core.cljs"} Symbol {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 558, :column 10, :line 558, :file "cljs/core.cljs"} Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 558, :column 17, :line 558, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 48, :end-line 4381, :column 21, :line 4381, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4381, :column 22, :line 4381, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4381, :column 25, :line 4381, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4381, :column 31, :line 4381, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4381, :column 38, :line 4381, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4381, :column 8, :line 4381, :file "cljs/core.cljs"} tv-push-tail ^{:arglists (^{:end-column 48, :end-line 4381, :column 21, :line 4381, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4381, :column 22, :line 4381, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4381, :column 25, :line 4381, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4381, :column 31, :line 4381, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4381, :column 38, :line 4381, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4381, :column 8, :line 4381, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4381, :column 22, :line 4381, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4381, :column 25, :line 4381, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4381, :column 31, :line 4381, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4381, :column 38, :line 4381, :file "cljs/core.cljs"} tail-node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 48, :end-line 4381, :column 21, :line 4381, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4381, :column 22, :line 4381, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4381, :column 25, :line 4381, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4381, :column 31, :line 4381, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4381, :column 38, :line 4381, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4381, :column 8, :line 4381, :file "cljs/core.cljs"} tv-push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 296, :column 12, :line 296, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 296, :column 13, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 296, :column 18, :line 296, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 296, :column 21, :line 296, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 296, :column 22, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 296, :column 27, :line 296, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 296, :column 29, :line 296, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 296, :column 4, :line 296, :file "cljs/core.cljs"} -reduce ^{:arglists (^{:end-column 20, :end-line 296, :column 12, :line 296, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 296, :column 13, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 296, :column 18, :line 296, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 296, :column 21, :line 296, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 296, :column 22, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 296, :column 27, :line 296, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 296, :column 29, :line 296, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 296, :column 4, :line 296, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 296, :column 13, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 296, :column 18, :line 296, :file "cljs/core.cljs"} f] [^{:end-column 27, :end-line 296, :column 22, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 296, :column 27, :line 296, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 296, :column 29, :line 296, :file "cljs/core.cljs"} start]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 296, :column 12, :line 296, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 296, :column 13, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 296, :column 18, :line 296, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 296, :column 21, :line 296, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 296, :column 22, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 296, :column 27, :line 296, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 296, :column 29, :line 296, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 296, :column 4, :line 296, :file "cljs/core.cljs"} -reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 234, :column 20, :line 234, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} number, :end-column 19, :end-line 234, :column 12, :line 234, :file "cljs/core.cljs"} -count ^{:arglists (^{:end-column 25, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 234, :column 20, :line 234, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} number, :end-column 19, :end-line 234, :column 12, :line 234, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 234, :column 20, :line 234, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 234, :column 20, :line 234, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} number, :end-column 19, :end-line 234, :column 12, :line 234, :file "cljs/core.cljs"} -count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3248, :column 4, :line 3248, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3248, :column 5, :line 3248, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} keep ^{:arglists (^{:end-column 7, :end-line 3248, :column 4, :line 3248, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3248, :column 5, :line 3248, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3248, :column 5, :line 3248, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3248, :column 4, :line 3248, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3248, :column 5, :line 3248, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} keep, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1781, :column 3, :line 1781, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1781, :column 4, :line 1781, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1779, :column 7, :line 1779, :file "cljs/core.cljs"} char ^{:arglists (^{:end-column 6, :end-line 1781, :column 3, :line 1781, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1781, :column 4, :line 1781, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1779, :column 7, :line 1779, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1781, :column 4, :line 1781, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1781, :column 3, :line 1781, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1781, :column 4, :line 1781, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1779, :column 7, :line 1779, :file "cljs/core.cljs"} char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3702, :column 4, :line 3702, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3702, :column 5, :line 3702, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3702, :column 7, :line 3702, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3704, :column 4, :line 3704, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3704, :column 5, :line 3704, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3704, :column 7, :line 3704, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3704, :column 12, :line 3704, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3704, :column 14, :line 3704, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3699, :column 7, :line 3699, :file "cljs/core.cljs"} mapcat ^{:arglists (^{:end-column 12, :end-line 3702, :column 4, :line 3702, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3702, :column 5, :line 3702, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3702, :column 7, :line 3702, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3704, :column 4, :line 3704, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3704, :column 5, :line 3704, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3704, :column 7, :line 3704, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3704, :column 12, :line 3704, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3704, :column 14, :line 3704, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3699, :column 7, :line 3699, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3702, :column 5, :line 3702, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3702, :column 7, :line 3702, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3704, :column 5, :line 3704, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3704, :column 7, :line 3704, :file "cljs/core.cljs"} coll & ^{:end-column 20, :end-line 3704, :column 14, :line 3704, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3702, :column 4, :line 3702, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3702, :column 5, :line 3702, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3702, :column 7, :line 3702, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3704, :column 4, :line 3704, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3704, :column 5, :line 3704, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3704, :column 7, :line 3704, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3704, :column 12, :line 3704, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3704, :column 14, :line 3704, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3699, :column 7, :line 3699, :file "cljs/core.cljs"} mapcat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1891, :column 3, :line 1891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1889, :column 7, :line 1889, :file "cljs/core.cljs"} unchecked-long ^{:arglists (^{:end-column 6, :end-line 1891, :column 3, :line 1891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1889, :column 7, :line 1889, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1891, :column 3, :line 1891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1889, :column 7, :line 1889, :file "cljs/core.cljs"} unchecked-long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 16, :end-line 433, :column 1, :line 433, :file "cljs/core.cljs"} m3-seed ^{:end-column 16, :end-line 433, :column 1, :line 433, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 16, :end-line 433, :column 1, :line 433, :file "cljs/core.cljs"} m3-seed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some? ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1844, :column 24, :line 1844, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1844, :column 25, :line 1844, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} unchecked-negate ^{:arglists (^{:end-column 27, :end-line 1844, :column 24, :line 1844, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1844, :column 25, :line 1844, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1844, :column 25, :line 1844, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1844, :column 24, :line 1844, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1844, :column 25, :line 1844, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} unchecked-negate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2231, :column 3, :line 2231, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2231, :column 4, :line 2231, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2229, :column 7, :line 2229, :file "cljs/core.cljs"} reverse ^{:arglists (^{:end-column 9, :end-line 2231, :column 3, :line 2231, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2231, :column 4, :line 2231, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2229, :column 7, :line 2229, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2231, :column 4, :line 2231, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2231, :column 3, :line 2231, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2231, :column 4, :line 2231, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2229, :column 7, :line 2229, :file "cljs/core.cljs"} reverse, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7500, :column 4, :line 7500, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7501, :column 4, :line 7501, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7501, :column 5, :line 7501, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7502, :column 4, :line 7502, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7502, :column 5, :line 7502, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7502, :column 11, :line 7502, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7503, :column 5, :line 7503, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7503, :column 11, :line 7503, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7503, :column 15, :line 7503, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7496, :column 7, :line 7496, :file "cljs/core.cljs"} range ^{:arglists (^{:end-column 6, :end-line 7500, :column 4, :line 7500, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7501, :column 4, :line 7501, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7501, :column 5, :line 7501, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7502, :column 4, :line 7502, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7502, :column 5, :line 7502, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7502, :column 11, :line 7502, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7503, :column 5, :line 7503, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7503, :column 11, :line 7503, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7503, :column 15, :line 7503, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7496, :column 7, :line 7496, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 9, :end-line 7501, :column 5, :line 7501, :file "cljs/core.cljs"} end] [^{:end-column 11, :end-line 7502, :column 5, :line 7502, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7502, :column 11, :line 7502, :file "cljs/core.cljs"} end] ^cljs.core/Range [^{:end-column 11, :end-line 7503, :column 5, :line 7503, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7503, :column 11, :line 7503, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7503, :column 15, :line 7503, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7500, :column 4, :line 7500, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7501, :column 4, :line 7501, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7501, :column 5, :line 7501, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7502, :column 4, :line 7502, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7502, :column 5, :line 7502, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7502, :column 11, :line 7502, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7503, :column 5, :line 7503, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7503, :column 11, :line 7503, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7503, :column 15, :line 7503, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7496, :column 7, :line 7496, :file "cljs/core.cljs"} range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1992, :column 3, :line 1992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1992, :column 4, :line 1992, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} bit-count ^{:arglists (^{:end-column 6, :end-line 1992, :column 3, :line 1992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1992, :column 4, :line 1992, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1992, :column 4, :line 1992, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1992, :column 3, :line 1992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1992, :column 4, :line 1992, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} bit-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 68, :end-line 5244, :column 56, :line 5244, :file "cljs/core.cljs"} create-node ^{:arglists (^{:end-column 40, :end-line 5721, :column 4, :line 5721, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5721, :column 5, :line 5721, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5721, :column 11, :line 5721, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5721, :column 16, :line 5721, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5721, :column 30, :line 5721, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5721, :column 35, :line 5721, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5729, :column 4, :line 5729, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5729, :column 5, :line 5729, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5729, :column 10, :line 5729, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5729, :column 16, :line 5729, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5729, :column 21, :line 5729, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5729, :column 26, :line 5729, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5729, :column 35, :line 5729, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5729, :column 40, :line 5729, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5720, :column 8, :line 5720, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5721, :column 5, :line 5721, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5721, :column 11, :line 5721, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5721, :column 16, :line 5721, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5721, :column 30, :line 5721, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5721, :column 35, :line 5721, :file "cljs/core.cljs"} val2] [^{:end-column 10, :end-line 5729, :column 5, :line 5729, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5729, :column 10, :line 5729, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5729, :column 16, :line 5729, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5729, :column 21, :line 5729, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5729, :column 26, :line 5729, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5729, :column 35, :line 5729, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5729, :column 40, :line 5729, :file "cljs/core.cljs"} val2]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5721, :column 4, :line 5721, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5721, :column 5, :line 5721, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5721, :column 11, :line 5721, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5721, :column 16, :line 5721, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5721, :column 30, :line 5721, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5721, :column 35, :line 5721, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5729, :column 4, :line 5729, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5729, :column 5, :line 5729, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5729, :column 10, :line 5729, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5729, :column 16, :line 5729, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5729, :column 21, :line 5729, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5729, :column 26, :line 5729, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5729, :column 35, :line 5729, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5729, :column 40, :line 5729, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5720, :column 8, :line 5720, :file "cljs/core.cljs"} create-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1558, :column 4, :line 1558, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1558, :column 5, :line 1558, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1560, :column 4, :line 1560, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1560, :column 5, :line 1560, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1560, :column 10, :line 1560, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1554, :column 7, :line 1554, :file "cljs/core.cljs"} sort ^{:arglists (^{:end-column 10, :end-line 1558, :column 4, :line 1558, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1558, :column 5, :line 1558, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1560, :column 4, :line 1560, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1560, :column 5, :line 1560, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1560, :column 10, :line 1560, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1554, :column 7, :line 1554, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1558, :column 5, :line 1558, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1560, :column 5, :line 1560, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1560, :column 10, :line 1560, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1558, :column 4, :line 1558, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1558, :column 5, :line 1558, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1560, :column 4, :line 1560, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1560, :column 5, :line 1560, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1560, :column 10, :line 1560, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1554, :column 7, :line 1554, :file "cljs/core.cljs"} sort, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta])} ->MetaFn ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/MetaFn [^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta])} ->MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1827, :column 25, :line 1827, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1827, :column 26, :line 1827, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} unchecked-inc-int ^{:arglists (^{:end-column 28, :end-line 1827, :column 25, :line 1827, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1827, :column 26, :line 1827, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1827, :column 26, :line 1827, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1827, :column 25, :line 1827, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1827, :column 26, :line 1827, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} unchecked-inc-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 369, :column 21, :line 369, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 369, :column 22, :line 369, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 369, :column 24, :line 369, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 369, :column 5, :line 369, :file "cljs/core.cljs"} number, :end-column 21, :end-line 369, :column 12, :line 369, :file "cljs/core.cljs"} -compare ^{:arglists (^{:end-column 26, :end-line 369, :column 21, :line 369, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 369, :column 22, :line 369, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 369, :column 24, :line 369, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 369, :column 5, :line 369, :file "cljs/core.cljs"} number, :end-column 21, :end-line 369, :column 12, :line 369, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 369, :column 22, :line 369, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 369, :column 24, :line 369, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 369, :column 21, :line 369, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 369, :column 22, :line 369, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 369, :column 24, :line 369, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 369, :column 5, :line 369, :file "cljs/core.cljs"} number, :end-column 21, :end-line 369, :column 12, :line 369, :file "cljs/core.cljs"} -compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3230, :column 3, :line 3230, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3230, :column 4, :line 3230, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3230, :column 6, :line 3230, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} map-indexed ^{:arglists (^{:end-column 11, :end-line 3230, :column 3, :line 3230, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3230, :column 4, :line 3230, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3230, :column 6, :line 3230, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3230, :column 4, :line 3230, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3230, :column 6, :line 3230, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3230, :column 3, :line 3230, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3230, :column 4, :line 3230, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3230, :column 6, :line 3230, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} map-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 7329, :column 18, :line 7329, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7329, :column 7, :line 7329, :file "cljs/core.cljs"} array-list ^{:arglists (^{:end-column 20, :end-line 7329, :column 18, :line 7329, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7329, :column 7, :line 7329, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList []), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7329, :column 18, :line 7329, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7329, :column 7, :line 7329, :file "cljs/core.cljs"} array-list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8318, :column 3, :line 8318, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8318, :column 4, :line 8318, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} rand-nth ^{:arglists (^{:end-column 9, :end-line 8318, :column 3, :line 8318, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8318, :column 4, :line 8318, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8318, :column 4, :line 8318, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8318, :column 3, :line 8318, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8318, :column 4, :line 8318, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} rand-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3164, :column 4, :line 3164, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3166, :column 4, :line 3166, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3166, :column 5, :line 3166, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3166, :column 7, :line 3166, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3173, :column 9, :line 3173, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3180, :column 8, :line 3180, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3180, :column 11, :line 3180, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3180, :column 14, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3159, :column 7, :line 3159, :file "cljs/core.cljs"} comp ^{:arglists (^{:end-column 6, :end-line 3164, :column 4, :line 3164, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3166, :column 4, :line 3166, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3166, :column 5, :line 3166, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3166, :column 7, :line 3166, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3173, :column 9, :line 3173, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3180, :column 8, :line 3180, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3180, :column 11, :line 3180, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3180, :column 14, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3159, :column 7, :line 3159, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 3166, :column 5, :line 3166, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3166, :column 7, :line 3166, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3173, :column 9, :line 3173, :file "cljs/core.cljs"} h] ^function [^{:end-column 8, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3180, :column 8, :line 3180, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3180, :column 11, :line 3180, :file "cljs/core.cljs"} f3 & ^{:end-column 19, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3164, :column 4, :line 3164, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3166, :column 4, :line 3166, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3166, :column 5, :line 3166, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3166, :column 7, :line 3166, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3173, :column 9, :line 3173, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3180, :column 8, :line 3180, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3180, :column 11, :line 3180, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3180, :column 14, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3159, :column 7, :line 3159, :file "cljs/core.cljs"} comp, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2483, :column 4, :line 2483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2483, :column 5, :line 2483, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2483, :column 9, :line 2483, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2485, :column 4, :line 2485, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2485, :column 5, :line 2485, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2485, :column 9, :line 2485, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2485, :column 13, :line 2485, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2480, :column 7, :line 2480, :file "cljs/core.cljs"} array-chunk ^{:arglists (^{:end-column 9, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2483, :column 4, :line 2483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2483, :column 5, :line 2483, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2483, :column 9, :line 2483, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2485, :column 4, :line 2485, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2485, :column 5, :line 2485, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2485, :column 9, :line 2485, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2485, :column 13, :line 2485, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2480, :column 7, :line 2480, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} arr] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2483, :column 5, :line 2483, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2483, :column 9, :line 2483, :file "cljs/core.cljs"} off] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2485, :column 5, :line 2485, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2485, :column 9, :line 2485, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2485, :column 13, :line 2485, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2483, :column 4, :line 2483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2483, :column 5, :line 2483, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2483, :column 9, :line 2483, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2485, :column 4, :line 2485, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2485, :column 5, :line 2485, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2485, :column 9, :line 2485, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2485, :column 13, :line 2485, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2480, :column 7, :line 2480, :file "cljs/core.cljs"} array-chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1984, :column 3, :line 1984, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1984, :column 4, :line 1984, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1984, :column 6, :line 1984, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1982, :column 7, :line 1982, :file "cljs/core.cljs"} bit-shift-right-zero-fill ^{:arglists (^{:end-column 8, :end-line 1984, :column 3, :line 1984, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1984, :column 4, :line 1984, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1984, :column 6, :line 1984, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1982, :column 7, :line 1982, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1984, :column 4, :line 1984, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1984, :column 6, :line 1984, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1984, :column 3, :line 1984, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1984, :column 4, :line 1984, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1984, :column 6, :line 1984, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1982, :column 7, :line 1982, :file "cljs/core.cljs"} bit-shift-right-zero-fill, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 24, :line 349, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} -as-transient ^{:arglists (^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 24, :line 349, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 349, :column 24, :line 349, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 24, :line 349, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} -as-transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7634, :column 5, :line 7634, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7628, :column 7, :line 7628, :file "cljs/core.cljs"} dorun ^{:arglists (^{:end-column 10, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7634, :column 5, :line 7634, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7628, :column 7, :line 7628, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 10, :end-line 7634, :column 5, :line 7634, :file "cljs/core.cljs"} coll] ^clj-nil [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7634, :column 5, :line 7634, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7628, :column 7, :line 7628, :file "cljs/core.cljs"} dorun, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 3985, :column 10, :line 3985, :file "cljs/core.cljs"} pr-sequential-writer ^{:arglists (^{:end-column 70, :end-line 7703, :column 28, :line 7703, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7703, :column 29, :line 7703, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7703, :column 36, :line 7703, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7703, :column 46, :line 7703, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7703, :column 52, :line 7703, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7703, :column 56, :line 7703, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7703, :column 60, :line 7703, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7703, :column 65, :line 7703, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 7703, :column 7, :line 7703, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 7703, :column 29, :line 7703, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7703, :column 36, :line 7703, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7703, :column 46, :line 7703, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7703, :column 52, :line 7703, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7703, :column 56, :line 7703, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7703, :column 60, :line 7703, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7703, :column 65, :line 7703, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 70, :end-line 7703, :column 28, :line 7703, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7703, :column 29, :line 7703, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7703, :column 36, :line 7703, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7703, :column 46, :line 7703, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7703, :column 52, :line 7703, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7703, :column 56, :line 7703, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7703, :column 60, :line 7703, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7703, :column 65, :line 7703, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 7703, :column 7, :line 7703, :file "cljs/core.cljs"} pr-sequential-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 37, :end-line 1048, :column 31, :line 1048, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1048, :column 32, :line 1048, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1048, :column 8, :line 1048, :file "cljs/core.cljs"} accumulating-seq-count ^{:arglists (^{:end-column 37, :end-line 1048, :column 31, :line 1048, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1048, :column 32, :line 1048, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1048, :column 8, :line 1048, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 37, :end-line 1048, :column 32, :line 1048, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 37, :end-line 1048, :column 31, :line 1048, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1048, :column 32, :line 1048, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1048, :column 8, :line 1048, :file "cljs/core.cljs"} accumulating-seq-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} IIndexed ^{:impls #{cljs.core/TransientVector cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/Range cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} IIndexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1323, :column 10, :line 1323, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1326, :column 4, :line 1326, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1326, :column 5, :line 1326, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1326, :column 10, :line 1326, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1326, :column 12, :line 1326, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1326, :column 14, :line 1326, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1319, :column 7, :line 1319, :file "cljs/core.cljs"} disj ^{:arglists (^{:end-column 10, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1323, :column 10, :line 1323, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1326, :column 4, :line 1326, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1326, :column 5, :line 1326, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1326, :column 10, :line 1326, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1326, :column 12, :line 1326, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1326, :column 14, :line 1326, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1319, :column 7, :line 1319, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1323, :column 10, :line 1323, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1326, :column 5, :line 1326, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1326, :column 10, :line 1326, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1326, :column 14, :line 1326, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1323, :column 10, :line 1323, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1326, :column 4, :line 1326, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1326, :column 5, :line 1326, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1326, :column 10, :line 1326, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1326, :column 12, :line 1326, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1326, :column 14, :line 1326, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1319, :column 7, :line 1319, :file "cljs/core.cljs"} disj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 332, :column 14, :line 332, :file "cljs/core.cljs"} IPrintWithWriter ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/Iteration cljs.core/LazyTransformer cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 31, :end-line 332, :column 14, :line 332, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 332, :column 14, :line 332, :file "cljs/core.cljs"} IPrintWithWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid])} ->UUID ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid])} {:arglists (^cljs.core/UUID [^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid])} ->UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 280, :column 14, :line 280, :file "cljs/core.cljs"} IVector ^{:impls #{cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 280, :column 14, :line 280, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 280, :column 14, :line 280, :file "cljs/core.cljs"} IVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2 ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 4852, :column 24, :line 4852, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4852, :column 25, :line 4852, :file "cljs/core.cljs"} coll]), :end-column 24, :end-line 4852, :column 7, :line 4852, :file "cljs/core.cljs"} entries-iterator ^{:arglists (^{:end-column 30, :end-line 4852, :column 24, :line 4852, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4852, :column 25, :line 4852, :file "cljs/core.cljs"} coll]), :end-column 24, :end-line 4852, :column 7, :line 4852, :file "cljs/core.cljs"} {:arglists (^cljs.core/EntriesIterator [^{:end-column 30, :end-line 4852, :column 25, :line 4852, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 4852, :column 24, :line 4852, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4852, :column 25, :line 4852, :file "cljs/core.cljs"} coll]), :end-column 24, :end-line 4852, :column 7, :line 4852, :file "cljs/core.cljs"} entries-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3898, :column 22, :line 3898, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3898, :column 23, :line 3898, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3898, :column 8, :line 3898, :file "cljs/core.cljs"} pv-clone-node ^{:arglists (^{:end-column 28, :end-line 3898, :column 22, :line 3898, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3898, :column 23, :line 3898, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3898, :column 8, :line 3898, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3898, :column 23, :line 3898, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3898, :column 22, :line 3898, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3898, :column 23, :line 3898, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3898, :column 8, :line 3898, :file "cljs/core.cljs"} pv-clone-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 25, :end-line 848, :column 20, :line 848, :file "cljs/core.cljs"} cons ^{:arglists (^{:end-column 11, :end-line 2300, :column 3, :line 2300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2300, :column 4, :line 2300, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2300, :column 6, :line 2300, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2298, :column 7, :line 2298, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 2300, :column 4, :line 2300, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2300, :column 6, :line 2300, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2300, :column 3, :line 2300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2300, :column 4, :line 2300, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2300, :column 6, :line 2300, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2298, :column 7, :line 2298, :file "cljs/core.cljs"} cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7119, :column 10, :line 7119, :file "cljs/core.cljs"} PersistentTreeSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7119, :column 10, :line 7119, :file "cljs/core.cljs"} PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7119, :column 28, :line 7119, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 17, :end-line 1899, :column 14, :line 1899, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1899, :column 15, :line 1899, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} floats ^{:arglists (^{:end-column 17, :end-line 1899, :column 14, :line 1899, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1899, :column 15, :line 1899, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1899, :column 15, :line 1899, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1899, :column 14, :line 1899, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1899, :column 15, :line 1899, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} floats, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 60, :end-line 3984, :column 44, :line 3984, :file "cljs/core.cljs"} TransientVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4423, :column 10, :line 4423, :file "cljs/core.cljs"} TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4426, :column 26, :line 4423, :file "cljs/core.cljs"} [^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail], :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 2012, :column 3, :line 2012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2012, :column 4, :line 2012, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2010, :column 8, :line 2010, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2010, :column 16, :line 2010, :file "cljs/core.cljs"} pos? ^{:arglists (^{:end-column 6, :end-line 2012, :column 3, :line 2012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2012, :column 4, :line 2012, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2010, :column 8, :line 2010, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2010, :column 16, :line 2010, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2012, :column 4, :line 2012, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2012, :column 3, :line 2012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2012, :column 4, :line 2012, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2010, :column 8, :line 2010, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2010, :column 16, :line 2010, :file "cljs/core.cljs"} pos?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3208, :column 7, :line 3208, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3214, :column 4, :line 3214, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3214, :column 5, :line 3214, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3214, :column 9, :line 3214, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3219, :column 4, :line 3219, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3219, :column 5, :line 3219, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3219, :column 7, :line 3219, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3219, :column 9, :line 3219, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3219, :column 11, :line 3219, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3202, :column 7, :line 3202, :file "cljs/core.cljs"} fnil ^{:arglists (^{:end-column 9, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3208, :column 7, :line 3208, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3214, :column 4, :line 3214, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3214, :column 5, :line 3214, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3214, :column 9, :line 3214, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3219, :column 4, :line 3219, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3219, :column 5, :line 3219, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3219, :column 7, :line 3219, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3219, :column 9, :line 3219, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3219, :column 11, :line 3219, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3202, :column 7, :line 3202, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3208, :column 7, :line 3208, :file "cljs/core.cljs"} x] ^function [^{:end-column 7, :end-line 3214, :column 5, :line 3214, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3214, :column 9, :line 3214, :file "cljs/core.cljs"} y] ^function [^{:end-column 7, :end-line 3219, :column 5, :line 3219, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3219, :column 7, :line 3219, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3219, :column 9, :line 3219, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3219, :column 11, :line 3219, :file "cljs/core.cljs"} z]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3208, :column 7, :line 3208, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3214, :column 4, :line 3214, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3214, :column 5, :line 3214, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3214, :column 9, :line 3214, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3219, :column 4, :line 3219, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3219, :column 5, :line 3219, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3219, :column 7, :line 3219, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3219, :column 9, :line 3219, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3219, :column 11, :line 3219, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3202, :column 7, :line 3202, :file "cljs/core.cljs"} fnil, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 6960, :column 3, :line 6960, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6960, :column 4, :line 6960, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6960, :column 6, :line 6960, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6960, :column 8, :line 6960, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6955, :column 7, :line 6955, :file "cljs/core.cljs"} merge-with ^{:arglists (^{:end-column 13, :end-line 6960, :column 3, :line 6960, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6960, :column 4, :line 6960, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6960, :column 6, :line 6960, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6960, :column 8, :line 6960, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6955, :column 7, :line 6955, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 6960, :column 4, :line 6960, :file "cljs/core.cljs"} f & ^{:end-column 13, :end-line 6960, :column 8, :line 6960, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6960, :column 3, :line 6960, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6960, :column 4, :line 6960, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6960, :column 6, :line 6960, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6960, :column 8, :line 6960, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6955, :column 7, :line 6955, :file "cljs/core.cljs"} merge-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1359, :column 3, :line 1359, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1359, :column 4, :line 1359, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1357, :column 8, :line 1357, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1357, :column 16, :line 1357, :file "cljs/core.cljs"} sequential? ^{:arglists (^{:end-column 6, :end-line 1359, :column 3, :line 1359, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1359, :column 4, :line 1359, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1357, :column 8, :line 1357, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1357, :column 16, :line 1357, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1359, :column 4, :line 1359, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1359, :column 3, :line 1359, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1359, :column 4, :line 1359, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1357, :column 8, :line 1357, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1357, :column 16, :line 1357, :file "cljs/core.cljs"} sequential?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6611, :column 25, :line 6611, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6611, :column 26, :line 6611, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6611, :column 31, :line 6611, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6611, :column 36, :line 6611, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6611, :column 38, :line 6611, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6611, :column 8, :line 6611, :file "cljs/core.cljs"} tree-map-replace ^{:arglists (^{:end-column 40, :end-line 6611, :column 25, :line 6611, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6611, :column 26, :line 6611, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6611, :column 31, :line 6611, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6611, :column 36, :line 6611, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6611, :column 38, :line 6611, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6611, :column 8, :line 6611, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6611, :column 26, :line 6611, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6611, :column 31, :line 6611, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6611, :column 36, :line 6611, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6611, :column 38, :line 6611, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6611, :column 25, :line 6611, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6611, :column 26, :line 6611, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6611, :column 31, :line 6611, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6611, :column 36, :line 6611, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6611, :column 38, :line 6611, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6611, :column 8, :line 6611, :file "cljs/core.cljs"} tree-map-replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 440, :column 25, :line 440, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 440, :column 26, :line 440, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 440, :column 29, :line 440, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 440, :column 8, :line 440, :file "cljs/core.cljs"} number, :end-column 25, :end-line 440, :column 15, :line 440, :file "cljs/core.cljs"} m3-mix-H1 ^{:arglists (^{:end-column 32, :end-line 440, :column 25, :line 440, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 440, :column 26, :line 440, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 440, :column 29, :line 440, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 440, :column 8, :line 440, :file "cljs/core.cljs"} number, :end-column 25, :end-line 440, :column 15, :line 440, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 29, :end-line 440, :column 26, :line 440, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 440, :column 29, :line 440, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 440, :column 25, :line 440, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 440, :column 26, :line 440, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 440, :column 29, :line 440, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 440, :column 8, :line 440, :file "cljs/core.cljs"} number, :end-column 25, :end-line 440, :column 15, :line 440, :file "cljs/core.cljs"} m3-mix-H1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr])} ->TransientArrayMap ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/TransientArrayMap [^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr])} ->TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 29, :end-line 605, :column 20, :line 605, :file "cljs/core.cljs"} prim-seq ^{:arglists (^{:end-column 10, :end-line 923, :column 4, :line 923, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 923, :column 5, :line 923, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 925, :column 4, :line 925, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 925, :column 5, :line 925, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 925, :column 10, :line 925, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 922, :column 7, :line 922, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 923, :column 5, :line 923, :file "cljs/core.cljs"} prim] [^{:end-column 10, :end-line 925, :column 5, :line 925, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 925, :column 10, :line 925, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 923, :column 4, :line 923, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 923, :column 5, :line 923, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 925, :column 4, :line 925, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 925, :column 5, :line 925, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 925, :column 10, :line 925, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 922, :column 7, :line 922, :file "cljs/core.cljs"} prim-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level* ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1597, :column 3, :line 1597, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1595, :column 7, :line 1595, :file "cljs/core.cljs"} shuffle ^{:arglists (^{:end-column 9, :end-line 1597, :column 3, :line 1597, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1595, :column 7, :line 1595, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1597, :column 3, :line 1597, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1595, :column 7, :line 1595, :file "cljs/core.cljs"} shuffle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 33, :end-line 1380, :column 22, :line 1380, :file "cljs/core.cljs"} ChunkedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4171, :column 10, :line 4171, :file "cljs/core.cljs"} ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 59, :end-line 4171, :column 21, :line 4171, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 23, :end-line 2309, :column 20, :line 2309, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2309, :column 21, :line 2309, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2309, :column 7, :line 2309, :file "cljs/core.cljs"} hash-keyword ^{:arglists (^{:end-column 23, :end-line 2309, :column 20, :line 2309, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2309, :column 21, :line 2309, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2309, :column 7, :line 2309, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 2309, :column 21, :line 2309, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2309, :column 20, :line 2309, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2309, :column 21, :line 2309, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2309, :column 7, :line 2309, :file "cljs/core.cljs"} hash-keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1470, :column 9, :line 1470, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1468, :column 7, :line 1468, :file "cljs/core.cljs"} find ^{:arglists (^{:end-column 11, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1470, :column 9, :line 1470, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1468, :column 7, :line 1468, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1470, :column 9, :line 1470, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1470, :column 9, :line 1470, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1468, :column 7, :line 1468, :file "cljs/core.cljs"} find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} alength ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} alength, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1936, :column 3, :line 1936, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1936, :column 4, :line 1936, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1936, :column 6, :line 1936, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} bit-xor ^{:arglists (^{:end-column 8, :end-line 1936, :column 3, :line 1936, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1936, :column 4, :line 1936, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1936, :column 6, :line 1936, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1936, :column 4, :line 1936, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1936, :column 6, :line 1936, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1936, :column 3, :line 1936, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1936, :column 4, :line 1936, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1936, :column 6, :line 1936, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} bit-xor, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i])} ->IndexedSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i])} {:arglists (^cljs.core/IndexedSeq [^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i])} ->IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4719, :column 10, :line 4719, :file "cljs/core.cljs"} ObjMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4719, :column 10, :line 4719, :file "cljs/core.cljs"} ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4719, :column 17, :line 4719, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1988, :column 3, :line 1988, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1988, :column 4, :line 1988, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1988, :column 6, :line 1988, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} unsigned-bit-shift-right ^{:arglists (^{:end-column 8, :end-line 1988, :column 3, :line 1988, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1988, :column 4, :line 1988, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1988, :column 6, :line 1988, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1988, :column 4, :line 1988, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1988, :column 6, :line 1988, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1988, :column 3, :line 1988, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1988, :column 4, :line 1988, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1988, :column 6, :line 1988, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} unsigned-bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2019, :column 3, :line 2019, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2017, :column 8, :line 2017, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2017, :column 16, :line 2017, :file "cljs/core.cljs"} neg? ^{:arglists (^{:end-column 6, :end-line 2019, :column 3, :line 2019, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2017, :column 8, :line 2017, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2017, :column 16, :line 2017, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2019, :column 3, :line 2019, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2017, :column 8, :line 2017, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2017, :column 16, :line 2017, :file "cljs/core.cljs"} neg?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2251, :column 10, :line 2251, :file "cljs/core.cljs"} Cons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2251, :column 10, :line 2251, :file "cljs/core.cljs"} Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 49, :end-line 2251, :column 15, :line 2251, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 36, :end-line 8501, :column 19, :line 8501, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8501, :column 20, :line 8501, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8501, :column 23, :line 8501, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} -remove-method ^{:arglists (^{:end-column 36, :end-line 8501, :column 19, :line 8501, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8501, :column 20, :line 8501, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8501, :column 23, :line 8501, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 8501, :column 20, :line 8501, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8501, :column 23, :line 8501, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 8501, :column 19, :line 8501, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8501, :column 20, :line 8501, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8501, :column 23, :line 8501, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} -remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i])} ->StringIter ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i])} {:arglists (^cljs.core/StringIter [^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i])} ->StringIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash])} ->List ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/List [^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash])} ->List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 437, :column 26, :line 437, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 437, :column 8, :line 437, :file "cljs/core.cljs"} number, :end-column 25, :end-line 437, :column 15, :line 437, :file "cljs/core.cljs"} m3-mix-K1 ^{:arglists (^{:end-column 29, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 437, :column 26, :line 437, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 437, :column 8, :line 437, :file "cljs/core.cljs"} number, :end-column 25, :end-line 437, :column 15, :line 437, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 29, :end-line 437, :column 26, :line 437, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 437, :column 26, :line 437, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 437, :column 8, :line 437, :file "cljs/core.cljs"} number, :end-column 25, :end-line 437, :column 15, :line 437, :file "cljs/core.cljs"} m3-mix-K1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1794, :column 31, :line 1794, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1794, :column 32, :line 1794, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1794, :column 8, :line 1794, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1794, :column 15, :line 1794, :file "cljs/core.cljs"} unchecked-float ^{:arglists (^{:end-column 34, :end-line 1794, :column 31, :line 1794, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1794, :column 32, :line 1794, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1794, :column 8, :line 1794, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1794, :column 15, :line 1794, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1794, :column 32, :line 1794, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1794, :column 31, :line 1794, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1794, :column 32, :line 1794, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1794, :column 8, :line 1794, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1794, :column 15, :line 1794, :file "cljs/core.cljs"} unchecked-float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 1428, :column 27, :line 1428, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1428, :column 28, :line 1428, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1428, :column 16, :line 1428, :file "cljs/core.cljs"} undefined? ^{:arglists (^{:end-column 30, :end-line 1428, :column 27, :line 1428, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1428, :column 28, :line 1428, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1428, :column 16, :line 1428, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 30, :end-line 1428, :column 28, :line 1428, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 1428, :column 27, :line 1428, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1428, :column 28, :line 1428, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1428, :column 16, :line 1428, :file "cljs/core.cljs"} undefined?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 289, :column 14, :line 289, :file "cljs/core.cljs"} IMeta ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/t9657 cljs.core/PersistentHashSet ^{:end-column 23, :end-line 747, :column 14, :line 747, :file "cljs/core.cljs"} function cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 20, :end-line 289, :column 14, :line 289, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 289, :column 14, :line 289, :file "cljs/core.cljs"} IMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 775, :column 3, :line 775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 775, :column 4, :line 775, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 773, :column 8, :line 773, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 773, :column 16, :line 773, :file "cljs/core.cljs"} reduced? ^{:arglists (^{:end-column 6, :end-line 775, :column 3, :line 775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 775, :column 4, :line 775, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 773, :column 8, :line 773, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 773, :column 16, :line 773, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 775, :column 4, :line 775, :file "cljs/core.cljs"} r]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 775, :column 3, :line 775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 775, :column 4, :line 775, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 773, :column 8, :line 773, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 773, :column 16, :line 773, :file "cljs/core.cljs"} reduced?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to ^{:file "cljs/core.cljs", :arglists ([f argc args])} {:arglists ([f argc args]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2785, :column 11, :line 2785, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2787, :column 11, :line 2787, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2787, :column 15, :line 2787, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} disj! ^{:arglists (^{:end-column 15, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2785, :column 11, :line 2785, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2787, :column 11, :line 2787, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2787, :column 15, :line 2787, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2785, :column 11, :line 2785, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2787, :column 11, :line 2787, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2785, :column 11, :line 2785, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2787, :column 11, :line 2787, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2787, :column 15, :line 2787, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} disj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 258, :column 12, :line 258, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 258, :column 13, :line 258, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 258, :column 21, :line 258, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 258, :column 23, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -lookup ^{:arglists (^{:end-column 17, :end-line 258, :column 12, :line 258, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 258, :column 13, :line 258, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 258, :column 21, :line 258, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 258, :column 23, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 258, :column 13, :line 258, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} k] [^{:end-column 21, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 258, :column 21, :line 258, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 258, :column 23, :line 258, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 258, :column 12, :line 258, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 258, :column 13, :line 258, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 258, :column 21, :line 258, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 258, :column 23, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -lookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 230, :column 14, :line 230, :file "cljs/core.cljs"} ICloneable ^{:impls #{cljs.core/PersistentHashMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Range}, :protocol-symbol true, :end-column 25, :end-line 230, :column 14, :line 230, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 230, :column 14, :line 230, :file "cljs/core.cljs"} ICloneable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 8238, :column 14, :line 8238, :file "cljs/core.cljs"} IEncodeClojure ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 8238, :column 14, :line 8238, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 8238, :column 14, :line 8238, :file "cljs/core.cljs"} IEncodeClojure, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1894, :column 17, :line 1894, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} booleans ^{:arglists (^{:end-column 19, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1894, :column 17, :line 1894, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 1894, :column 17, :line 1894, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1894, :column 17, :line 1894, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} booleans, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 4889, :column 35, :line 4889, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4889, :column 36, :line 4889, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4889, :column 40, :line 4889, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4889, :column 42, :line 4889, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4889, :column 8, :line 4889, :file "cljs/core.cljs"} array-map-index-of-symbol? ^{:arglists (^{:end-column 44, :end-line 4889, :column 35, :line 4889, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4889, :column 36, :line 4889, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4889, :column 40, :line 4889, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4889, :column 42, :line 4889, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4889, :column 8, :line 4889, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 4889, :column 36, :line 4889, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4889, :column 40, :line 4889, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4889, :column 42, :line 4889, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 4889, :column 35, :line 4889, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4889, :column 36, :line 4889, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4889, :column 40, :line 4889, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4889, :column 42, :line 4889, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4889, :column 8, :line 4889, :file "cljs/core.cljs"} array-map-index-of-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr])} ->ArrayList ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/ArrayList [^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr])} ->ArrayList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 848, :column 25, :line 848, :file "cljs/core.cljs"} RSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 937, :column 10, :line 937, :file "cljs/core.cljs"} RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 937, :column 15, :line 937, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 5252, :column 13, :line 5252, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5252, :column 14, :line 5252, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5252, :column 19, :line 5252, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5252, :column 8, :line 5252, :file "cljs/core.cljs"} mask ^{:arglists (^{:end-column 25, :end-line 5252, :column 13, :line 5252, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5252, :column 14, :line 5252, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5252, :column 19, :line 5252, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5252, :column 8, :line 5252, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 19, :end-line 5252, :column 14, :line 5252, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5252, :column 19, :line 5252, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 5252, :column 13, :line 5252, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5252, :column 14, :line 5252, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5252, :column 19, :line 5252, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5252, :column 8, :line 5252, :file "cljs/core.cljs"} mask, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2596, :column 4, :line 2596, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2596, :column 5, :line 2596, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2600, :column 4, :line 2600, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2600, :column 5, :line 2600, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2600, :column 10, :line 2600, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} int-array ^{:arglists (^{:end-column 17, :end-line 2596, :column 4, :line 2596, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2596, :column 5, :line 2596, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2600, :column 4, :line 2600, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2600, :column 5, :line 2600, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2600, :column 10, :line 2600, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2596, :column 5, :line 2596, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2600, :column 5, :line 2600, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2600, :column 10, :line 2600, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2596, :column 4, :line 2596, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2596, :column 5, :line 2596, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2600, :column 4, :line 2600, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2600, :column 5, :line 2600, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2600, :column 10, :line 2600, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} int-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 88, :end-line 8474, :column 3, :line 8474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8474, :column 9, :line 8474, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8474, :column 22, :line 8474, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8474, :column 32, :line 8474, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8474, :column 45, :line 8474, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8474, :column 58, :line 8474, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8474, :column 71, :line 8474, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8473, :column 8, :line 8473, :file "cljs/core.cljs"} find-and-cache-best-method ^{:arglists (^{:end-column 88, :end-line 8474, :column 3, :line 8474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8474, :column 9, :line 8474, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8474, :column 22, :line 8474, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8474, :column 32, :line 8474, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8474, :column 45, :line 8474, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8474, :column 58, :line 8474, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8474, :column 71, :line 8474, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8473, :column 8, :line 8473, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8474, :column 9, :line 8474, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8474, :column 22, :line 8474, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8474, :column 32, :line 8474, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8474, :column 45, :line 8474, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8474, :column 58, :line 8474, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8474, :column 71, :line 8474, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 88, :end-line 8474, :column 3, :line 8474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8474, :column 9, :line 8474, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8474, :column 22, :line 8474, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8474, :column 32, :line 8474, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8474, :column 45, :line 8474, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8474, :column 58, :line 8474, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8474, :column 71, :line 8474, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8473, :column 8, :line 8473, :file "cljs/core.cljs"} find-and-cache-best-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1348, :column 3, :line 1348, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1348, :column 4, :line 1348, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1346, :column 8, :line 1346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1346, :column 16, :line 1346, :file "cljs/core.cljs"} set? ^{:arglists (^{:end-column 6, :end-line 1348, :column 3, :line 1348, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1348, :column 4, :line 1348, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1346, :column 8, :line 1346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1346, :column 16, :line 1346, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1348, :column 4, :line 1348, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1348, :column 3, :line 1348, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1348, :column 4, :line 1348, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1346, :column 8, :line 1346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1346, :column 16, :line 1346, :file "cljs/core.cljs"} set?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}} t9657 {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}} t9657, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields [meta9658], :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}}, ^{:declared true, :end-column 17, :end-line 1702, :column 10, :line 1702, :file "cljs/core.cljs"} divide ^{:declared true, :end-column 17, :end-line 1702, :column 10, :line 1702, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 17, :end-line 1702, :column 10, :line 1702, :file "cljs/core.cljs"} divide, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 338, :column 15, :line 338, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 338, :column 18, :line 338, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 338, :column 25, :line 338, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -pr-writer ^{:arglists (^{:end-column 30, :end-line 338, :column 15, :line 338, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 338, :column 18, :line 338, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 338, :column 25, :line 338, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 338, :column 18, :line 338, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 338, :column 25, :line 338, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 338, :column 15, :line 338, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 338, :column 18, :line 338, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 338, :column 25, :line 338, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7730, :column 13, :line 7730, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7730, :column 7, :line 7730, :file "cljs/core.cljs"} flush ^{:arglists (^{:end-column 15, :end-line 7730, :column 13, :line 7730, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7730, :column 7, :line 7730, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7730, :column 13, :line 7730, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7730, :column 7, :line 7730, :file "cljs/core.cljs"} flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 7210, :column 28, :line 7210, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7210, :column 29, :line 7210, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7210, :column 7, :line 7210, :file "cljs/core.cljs"} set-from-indexed-seq ^{:arglists (^{:end-column 34, :end-line 7210, :column 28, :line 7210, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7210, :column 29, :line 7210, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7210, :column 7, :line 7210, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 34, :end-line 7210, :column 29, :line 7210, :file "cljs/core.cljs"} iseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 7210, :column 28, :line 7210, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7210, :column 29, :line 7210, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7210, :column 7, :line 7210, :file "cljs/core.cljs"} set-from-indexed-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7368, :column 4, :line 7368, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7368, :column 5, :line 7368, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7377, :column 5, :line 7377, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7377, :column 10, :line 7377, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7364, :column 7, :line 7364, :file "cljs/core.cljs"} take-while ^{:arglists (^{:end-column 10, :end-line 7368, :column 4, :line 7368, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7368, :column 5, :line 7368, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7377, :column 5, :line 7377, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7377, :column 10, :line 7377, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7364, :column 7, :line 7364, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 7368, :column 5, :line 7368, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 7377, :column 5, :line 7377, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7377, :column 10, :line 7377, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7368, :column 4, :line 7368, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7368, :column 5, :line 7368, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7377, :column 5, :line 7377, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7377, :column 10, :line 7377, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7364, :column 7, :line 7364, :file "cljs/core.cljs"} take-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2852, :column 4, :line 2852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2852, :column 5, :line 2852, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2852, :column 9, :line 2852, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2854, :column 4, :line 2854, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2854, :column 5, :line 2854, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2854, :column 9, :line 2854, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2854, :column 11, :line 2854, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2856, :column 4, :line 2856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2856, :column 5, :line 2856, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2856, :column 9, :line 2856, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2856, :column 11, :line 2856, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2856, :column 13, :line 2856, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2858, :column 4, :line 2858, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2858, :column 5, :line 2858, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2858, :column 9, :line 2858, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2858, :column 11, :line 2858, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2858, :column 13, :line 2858, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2858, :column 15, :line 2858, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2860, :column 4, :line 2860, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2860, :column 5, :line 2860, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2860, :column 9, :line 2860, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2860, :column 11, :line 2860, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2860, :column 13, :line 2860, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2860, :column 15, :line 2860, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2860, :column 17, :line 2860, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2862, :column 4, :line 2862, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2862, :column 5, :line 2862, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2862, :column 9, :line 2862, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2862, :column 11, :line 2862, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2862, :column 13, :line 2862, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2862, :column 15, :line 2862, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2862, :column 17, :line 2862, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2862, :column 19, :line 2862, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2862, :column 21, :line 2862, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2849, :column 7, :line 2849, :file "cljs/core.cljs"} vary-meta ^{:arglists (^{:end-column 11, :end-line 2852, :column 4, :line 2852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2852, :column 5, :line 2852, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2852, :column 9, :line 2852, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2854, :column 4, :line 2854, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2854, :column 5, :line 2854, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2854, :column 9, :line 2854, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2854, :column 11, :line 2854, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2856, :column 4, :line 2856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2856, :column 5, :line 2856, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2856, :column 9, :line 2856, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2856, :column 11, :line 2856, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2856, :column 13, :line 2856, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2858, :column 4, :line 2858, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2858, :column 5, :line 2858, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2858, :column 9, :line 2858, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2858, :column 11, :line 2858, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2858, :column 13, :line 2858, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2858, :column 15, :line 2858, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2860, :column 4, :line 2860, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2860, :column 5, :line 2860, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2860, :column 9, :line 2860, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2860, :column 11, :line 2860, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2860, :column 13, :line 2860, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2860, :column 15, :line 2860, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2860, :column 17, :line 2860, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2862, :column 4, :line 2862, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2862, :column 5, :line 2862, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2862, :column 9, :line 2862, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2862, :column 11, :line 2862, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2862, :column 13, :line 2862, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2862, :column 15, :line 2862, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2862, :column 17, :line 2862, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2862, :column 19, :line 2862, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2862, :column 21, :line 2862, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2849, :column 7, :line 2849, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2852, :column 5, :line 2852, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2852, :column 9, :line 2852, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 2854, :column 5, :line 2854, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2854, :column 9, :line 2854, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2854, :column 11, :line 2854, :file "cljs/core.cljs"} a] [^{:end-column 9, :end-line 2856, :column 5, :line 2856, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2856, :column 9, :line 2856, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2856, :column 11, :line 2856, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2856, :column 13, :line 2856, :file "cljs/core.cljs"} b] [^{:end-column 9, :end-line 2858, :column 5, :line 2858, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2858, :column 9, :line 2858, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2858, :column 11, :line 2858, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2858, :column 13, :line 2858, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2858, :column 15, :line 2858, :file "cljs/core.cljs"} c] [^{:end-column 9, :end-line 2860, :column 5, :line 2860, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2860, :column 9, :line 2860, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2860, :column 11, :line 2860, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2860, :column 13, :line 2860, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2860, :column 15, :line 2860, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2860, :column 17, :line 2860, :file "cljs/core.cljs"} d] [^{:end-column 9, :end-line 2862, :column 5, :line 2862, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2862, :column 9, :line 2862, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2862, :column 11, :line 2862, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2862, :column 13, :line 2862, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2862, :column 15, :line 2862, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2862, :column 17, :line 2862, :file "cljs/core.cljs"} d & ^{:end-column 26, :end-line 2862, :column 21, :line 2862, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2852, :column 4, :line 2852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2852, :column 5, :line 2852, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2852, :column 9, :line 2852, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2854, :column 4, :line 2854, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2854, :column 5, :line 2854, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2854, :column 9, :line 2854, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2854, :column 11, :line 2854, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2856, :column 4, :line 2856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2856, :column 5, :line 2856, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2856, :column 9, :line 2856, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2856, :column 11, :line 2856, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2856, :column 13, :line 2856, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2858, :column 4, :line 2858, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2858, :column 5, :line 2858, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2858, :column 9, :line 2858, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2858, :column 11, :line 2858, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2858, :column 13, :line 2858, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2858, :column 15, :line 2858, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2860, :column 4, :line 2860, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2860, :column 5, :line 2860, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2860, :column 9, :line 2860, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2860, :column 11, :line 2860, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2860, :column 13, :line 2860, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2860, :column 15, :line 2860, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2860, :column 17, :line 2860, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2862, :column 4, :line 2862, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2862, :column 5, :line 2862, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2862, :column 9, :line 2862, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2862, :column 11, :line 2862, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2862, :column 13, :line 2862, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2862, :column 15, :line 2862, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2862, :column 17, :line 2862, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2862, :column 19, :line 2862, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2862, :column 21, :line 2862, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2849, :column 7, :line 2849, :file "cljs/core.cljs"} vary-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 254, :column 14, :line 254, :file "cljs/core.cljs"} INext ^{:impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range}, :protocol-symbol true, :end-column 20, :end-line 254, :column 14, :line 254, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 254, :column 14, :line 254, :file "cljs/core.cljs"} INext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_ ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 19, :end-line 2908, :column 1, :line 2908, :file "cljs/core.cljs"} START ^{:end-column 19, :end-line 2908, :column 1, :line 2908, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 19, :end-line 2908, :column 1, :line 2908, :file "cljs/core.cljs"} START, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 233, :column 14, :line 233, :file "cljs/core.cljs"} ICounted ^{:impls #{nil cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/TransientHashMap cljs.core/ChunkBuffer cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/TransientArrayMap cljs.core/RSeq cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/ArrayChunk cljs.core/PersistentTreeSet cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 233, :column 14, :line 233, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 233, :column 14, :line 233, :file "cljs/core.cljs"} ICounted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} IMapEntry ^{:impls #{cljs.core/BlackNode cljs.core/PersistentVector cljs.core/RedNode}, :protocol-symbol true, :end-column 24, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} IMapEntry, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1726, :column 4, :line 1726, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1726, :column 5, :line 1726, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1727, :column 4, :line 1727, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1727, :column 5, :line 1727, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1727, :column 7, :line 1727, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1728, :column 5, :line 1728, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1728, :column 7, :line 1728, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1728, :column 9, :line 1728, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1728, :column 11, :line 1728, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1723, :column 8, :line 1723, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} <= ^{:arglists (^{:end-column 7, :end-line 1726, :column 4, :line 1726, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1726, :column 5, :line 1726, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1727, :column 4, :line 1727, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1727, :column 5, :line 1727, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1727, :column 7, :line 1727, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1728, :column 5, :line 1728, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1728, :column 7, :line 1728, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1728, :column 9, :line 1728, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1728, :column 11, :line 1728, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1723, :column 8, :line 1723, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1726, :column 5, :line 1726, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1727, :column 5, :line 1727, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1727, :column 7, :line 1727, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1728, :column 5, :line 1728, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1728, :column 7, :line 1728, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1728, :column 11, :line 1728, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1726, :column 4, :line 1726, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1726, :column 5, :line 1726, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1727, :column 4, :line 1727, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1727, :column 5, :line 1727, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1727, :column 7, :line 1727, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1728, :column 5, :line 1728, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1728, :column 7, :line 1728, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1728, :column 9, :line 1728, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1728, :column 11, :line 1728, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1723, :column 8, :line 1723, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} <=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2744, :column 4, :line 2744, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2746, :column 4, :line 2746, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2746, :column 5, :line 2746, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2746, :column 11, :line 2746, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2748, :column 11, :line 2748, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2748, :column 15, :line 2748, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2748, :column 17, :line 2748, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2741, :column 7, :line 2741, :file "cljs/core.cljs"} conj! ^{:arglists (^{:end-column 6, :end-line 2744, :column 4, :line 2744, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2746, :column 4, :line 2746, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2746, :column 5, :line 2746, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2746, :column 11, :line 2746, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2748, :column 11, :line 2748, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2748, :column 15, :line 2748, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2748, :column 17, :line 2748, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2741, :column 7, :line 2741, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [] [^{:end-column 10, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} coll] ^^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2746, :column 5, :line 2746, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2746, :column 11, :line 2746, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2748, :column 11, :line 2748, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2748, :column 17, :line 2748, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2744, :column 4, :line 2744, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2746, :column 4, :line 2746, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2746, :column 5, :line 2746, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2746, :column 11, :line 2746, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2748, :column 11, :line 2748, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2748, :column 15, :line 2748, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2748, :column 17, :line 2748, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2741, :column 7, :line 2741, :file "cljs/core.cljs"} conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 278, :column 14, :line 278, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 278, :column 15, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 278, :column 5, :line 278, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 278, :column 9, :line 278, :file "cljs/core.cljs"} -pop ^{:arglists (^{:end-column 20, :end-line 278, :column 14, :line 278, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 278, :column 15, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 278, :column 5, :line 278, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 278, :column 9, :line 278, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 278, :column 15, :line 278, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 278, :column 14, :line 278, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 278, :column 15, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 278, :column 5, :line 278, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 278, :column 9, :line 278, :file "cljs/core.cljs"} -pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3660, :column 4, :line 3660, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3660, :column 5, :line 3660, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3660, :column 7, :line 3660, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} repeatedly ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3660, :column 4, :line 3660, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3660, :column 5, :line 3660, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3660, :column 7, :line 3660, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3660, :column 5, :line 3660, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3660, :column 7, :line 3660, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3660, :column 4, :line 3660, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3660, :column 5, :line 3660, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3660, :column 7, :line 3660, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} repeatedly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7297, :column 3, :line 7297, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7297, :column 4, :line 7297, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7297, :column 9, :line 7297, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7295, :column 7, :line 7295, :file "cljs/core.cljs"} zipmap ^{:arglists (^{:end-column 14, :end-line 7297, :column 3, :line 7297, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7297, :column 4, :line 7297, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7297, :column 9, :line 7297, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7295, :column 7, :line 7295, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 7297, :column 4, :line 7297, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7297, :column 9, :line 7297, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7297, :column 3, :line 7297, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7297, :column 4, :line 7297, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7297, :column 9, :line 7297, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7295, :column 7, :line 7295, :file "cljs/core.cljs"} zipmap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} IStack ^{:impls #{cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RedNode}, :protocol-symbol true, :end-column 21, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} IStack, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 346, :column 18, :line 346, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 346, :column 19, :line 346, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 346, :column 24, :line 346, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -remove-watch ^{:arglists (^{:end-column 28, :end-line 346, :column 18, :line 346, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 346, :column 19, :line 346, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 346, :column 24, :line 346, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 346, :column 19, :line 346, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 346, :column 24, :line 346, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 346, :column 18, :line 346, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 346, :column 19, :line 346, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 346, :column 24, :line 346, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3740, :column 4, :line 3740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3740, :column 5, :line 3740, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3741, :column 4, :line 3741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3741, :column 5, :line 3741, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3741, :column 10, :line 3741, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} remove ^{:arglists (^{:end-column 10, :end-line 3740, :column 4, :line 3740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3740, :column 5, :line 3740, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3741, :column 4, :line 3741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3741, :column 5, :line 3741, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3741, :column 10, :line 3741, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3740, :column 5, :line 3740, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3741, :column 5, :line 3741, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3741, :column 10, :line 3741, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3740, :column 4, :line 3740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3740, :column 5, :line 3740, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3741, :column 4, :line 3741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3741, :column 5, :line 3741, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3741, :column 10, :line 3741, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr])} ->BitmapIndexedNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/BitmapIndexedNode [^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr])} ->BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1698, :column 4, :line 1698, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1698, :column 5, :line 1698, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1700, :column 4, :line 1700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1700, :column 5, :line 1700, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1700, :column 7, :line 1700, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1700, :column 9, :line 1700, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1700, :column 11, :line 1700, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1695, :column 8, :line 1695, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1695, :column 15, :line 1695, :file "cljs/core.cljs"} * ^{:arglists (^{:end-column 6, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1698, :column 4, :line 1698, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1698, :column 5, :line 1698, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1700, :column 4, :line 1700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1700, :column 5, :line 1700, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1700, :column 7, :line 1700, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1700, :column 9, :line 1700, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1700, :column 11, :line 1700, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1695, :column 8, :line 1695, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1695, :column 15, :line 1695, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1698, :column 5, :line 1698, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1700, :column 5, :line 1700, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1700, :column 7, :line 1700, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1700, :column 11, :line 1700, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1698, :column 4, :line 1698, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1698, :column 5, :line 1698, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1700, :column 4, :line 1700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1700, :column 5, :line 1700, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1700, :column 7, :line 1700, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1700, :column 9, :line 1700, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1700, :column 11, :line 1700, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1695, :column 8, :line 1695, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1695, :column 15, :line 1695, :file "cljs/core.cljs"} *, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7697, :column 3, :line 7697, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7697, :column 4, :line 7697, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7695, :column 7, :line 7695, :file "cljs/core.cljs"} re-pattern ^{:arglists (^{:end-column 6, :end-line 7697, :column 3, :line 7697, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7697, :column 4, :line 7697, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7695, :column 7, :line 7695, :file "cljs/core.cljs"} {:arglists (^js/RegExp [^{:end-column 6, :end-line 7697, :column 4, :line 7697, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7697, :column 3, :line 7697, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7697, :column 4, :line 7697, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7695, :column 7, :line 7695, :file "cljs/core.cljs"} re-pattern, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1772, :column 4, :line 1772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1772, :column 5, :line 1772, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1773, :column 4, :line 1773, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1773, :column 5, :line 1773, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1774, :column 5, :line 1774, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1774, :column 7, :line 1774, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1774, :column 9, :line 1774, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1774, :column 11, :line 1774, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1770, :column 8, :line 1770, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1770, :column 15, :line 1770, :file "cljs/core.cljs"} min ^{:arglists (^{:end-column 7, :end-line 1772, :column 4, :line 1772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1772, :column 5, :line 1772, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1773, :column 4, :line 1773, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1773, :column 5, :line 1773, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1774, :column 5, :line 1774, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1774, :column 7, :line 1774, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1774, :column 9, :line 1774, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1774, :column 11, :line 1774, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1770, :column 8, :line 1770, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1770, :column 15, :line 1770, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1772, :column 5, :line 1772, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1773, :column 5, :line 1773, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1774, :column 5, :line 1774, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1774, :column 7, :line 1774, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1774, :column 11, :line 1774, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1772, :column 4, :line 1772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1772, :column 5, :line 1772, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1773, :column 4, :line 1773, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1773, :column 5, :line 1773, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1774, :column 5, :line 1774, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1774, :column 7, :line 1774, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1774, :column 9, :line 1774, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1774, :column 11, :line 1774, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1770, :column 8, :line 1770, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1770, :column 15, :line 1770, :file "cljs/core.cljs"} min, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 4870, :column 32, :line 4870, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4870, :column 33, :line 4870, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4870, :column 37, :line 4870, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4870, :column 39, :line 4870, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4870, :column 8, :line 4870, :file "cljs/core.cljs"} array-map-index-of-nil? ^{:arglists (^{:end-column 41, :end-line 4870, :column 32, :line 4870, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4870, :column 33, :line 4870, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4870, :column 37, :line 4870, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4870, :column 39, :line 4870, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4870, :column 8, :line 4870, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4870, :column 33, :line 4870, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4870, :column 37, :line 4870, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4870, :column 39, :line 4870, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 4870, :column 32, :line 4870, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4870, :column 33, :line 4870, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4870, :column 37, :line 4870, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4870, :column 39, :line 4870, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4870, :column 8, :line 4870, :file "cljs/core.cljs"} array-map-index-of-nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 353, :column 22, :line 353, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -persistent! ^{:arglists (^{:end-column 29, :end-line 353, :column 22, :line 353, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 353, :column 22, :line 353, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 246, :column 9, :line 246, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 246, :column 10, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 246, :column 15, :line 246, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 246, :column 18, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 246, :column 24, :line 246, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 246, :column 26, :line 246, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 246, :column 4, :line 246, :file "cljs/core.cljs"} -nth ^{:arglists (^{:end-column 17, :end-line 246, :column 9, :line 246, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 246, :column 10, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 246, :column 15, :line 246, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 246, :column 18, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 246, :column 24, :line 246, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 246, :column 26, :line 246, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 246, :column 4, :line 246, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 246, :column 10, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 246, :column 15, :line 246, :file "cljs/core.cljs"} n] [^{:end-column 24, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 246, :column 24, :line 246, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 246, :column 26, :line 246, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 246, :column 9, :line 246, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 246, :column 10, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 246, :column 15, :line 246, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 246, :column 18, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 246, :column 24, :line 246, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 246, :column 26, :line 246, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 246, :column 4, :line 246, :file "cljs/core.cljs"} -nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2779, :column 3, :line 2779, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2779, :column 4, :line 2779, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2776, :column 7, :line 2776, :file "cljs/core.cljs"} pop! ^{:arglists (^{:end-column 10, :end-line 2779, :column 3, :line 2779, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2779, :column 4, :line 2779, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2776, :column 7, :line 2776, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2779, :column 4, :line 2779, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2779, :column 3, :line 2779, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2779, :column 4, :line 2779, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2776, :column 7, :line 2776, :file "cljs/core.cljs"} pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2555, :column 20, :line 2555, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2555, :column 21, :line 2555, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2555, :column 23, :line 2555, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} chunk-append ^{:arglists (^{:end-column 25, :end-line 2555, :column 20, :line 2555, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2555, :column 21, :line 2555, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2555, :column 23, :line 2555, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 2555, :column 21, :line 2555, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2555, :column 23, :line 2555, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2555, :column 20, :line 2555, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2555, :column 21, :line 2555, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2555, :column 23, :line 2555, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} chunk-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7871, :column 3, :line 7871, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7871, :column 4, :line 7871, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7871, :column 6, :line 7871, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7869, :column 7, :line 7869, :file "cljs/core.cljs"} prn-str ^{:arglists (^{:end-column 11, :end-line 7871, :column 3, :line 7871, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7871, :column 4, :line 7871, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7871, :column 6, :line 7871, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7869, :column 7, :line 7869, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7871, :column 6, :line 7871, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7871, :column 3, :line 7871, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7871, :column 4, :line 7871, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7871, :column 6, :line 7871, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7869, :column 7, :line 7869, :file "cljs/core.cljs"} prn-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} IReversible ^{:impls #{cljs.core/IndexedSeq cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 26, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} IReversible, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 2223, :column 28, :line 2223, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2223, :column 29, :line 2223, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2223, :column 8, :line 2223, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2223, :column 16, :line 2223, :file "cljs/core.cljs"} reversible? ^{:arglists (^{:end-column 34, :end-line 2223, :column 28, :line 2223, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2223, :column 29, :line 2223, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2223, :column 8, :line 2223, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2223, :column 16, :line 2223, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 34, :end-line 2223, :column 29, :line 2223, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 2223, :column 28, :line 2223, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2223, :column 29, :line 2223, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2223, :column 8, :line 2223, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2223, :column 16, :line 2223, :file "cljs/core.cljs"} reversible?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 341, :column 24, :line 341, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 341, :column 5, :line 341, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 341, :column 13, :line 341, :file "cljs/core.cljs"} -realized? ^{:arglists (^{:end-column 27, :end-line 341, :column 24, :line 341, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 341, :column 5, :line 341, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 341, :column 13, :line 341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 341, :column 24, :line 341, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 341, :column 5, :line 341, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 341, :column 13, :line 341, :file "cljs/core.cljs"} -realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 345, :column 15, :line 345, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 345, :column 16, :line 345, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 345, :column 25, :line 345, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -add-watch ^{:arglists (^{:end-column 27, :end-line 345, :column 15, :line 345, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 345, :column 16, :line 345, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 345, :column 25, :line 345, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 345, :column 16, :line 345, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 345, :column 25, :line 345, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 345, :column 15, :line 345, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 345, :column 16, :line 345, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 345, :column 25, :line 345, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 287, :column 24, :line 287, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 287, :column 25, :line 287, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 287, :column 27, :line 287, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 287, :column 32, :line 287, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 287, :column 4, :line 287, :file "cljs/core.cljs"} -deref-with-timeout ^{:arglists (^{:end-column 44, :end-line 287, :column 24, :line 287, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 287, :column 25, :line 287, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 287, :column 27, :line 287, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 287, :column 32, :line 287, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 287, :column 4, :line 287, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 287, :column 25, :line 287, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 287, :column 27, :line 287, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 287, :column 32, :line 287, :file "cljs/core.cljs"} timeout-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 287, :column 24, :line 287, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 287, :column 25, :line 287, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 287, :column 27, :line 287, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 287, :column 32, :line 287, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 287, :column 4, :line 287, :file "cljs/core.cljs"} -deref-with-timeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1032, :column 5, :line 1032, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1033, :column 4, :line 1033, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1033, :column 5, :line 1033, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1033, :column 10, :line 1033, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1037, :column 5, :line 1037, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1037, :column 10, :line 1037, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1037, :column 12, :line 1037, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1037, :column 14, :line 1037, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1027, :column 7, :line 1027, :file "cljs/core.cljs"} conj ^{:arglists (^{:end-column 6, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1032, :column 5, :line 1032, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1033, :column 4, :line 1033, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1033, :column 5, :line 1033, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1033, :column 10, :line 1033, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1037, :column 5, :line 1037, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1037, :column 10, :line 1037, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1037, :column 12, :line 1037, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1037, :column 14, :line 1037, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1027, :column 7, :line 1027, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [] [^{:end-column 10, :end-line 1032, :column 5, :line 1032, :file "cljs/core.cljs"} coll] ^^{:end-column 9, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 1033, :column 5, :line 1033, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1033, :column 10, :line 1033, :file "cljs/core.cljs"} x] [^{:end-column 10, :end-line 1037, :column 5, :line 1037, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1037, :column 10, :line 1037, :file "cljs/core.cljs"} x & ^{:end-column 17, :end-line 1037, :column 14, :line 1037, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1032, :column 5, :line 1032, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1033, :column 4, :line 1033, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1033, :column 5, :line 1033, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1033, :column 10, :line 1033, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1037, :column 5, :line 1037, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1037, :column 10, :line 1037, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1037, :column 12, :line 1037, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1037, :column 14, :line 1037, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1027, :column 7, :line 1027, :file "cljs/core.cljs"} conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 323, :column 21, :line 323, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 323, :column 22, :line 323, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 323, :column 27, :line 323, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 323, :column 5, :line 323, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 323, :column 9, :line 323, :file "cljs/core.cljs"} -sorted-seq ^{:arglists (^{:end-column 38, :end-line 323, :column 21, :line 323, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 323, :column 22, :line 323, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 323, :column 27, :line 323, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 323, :column 5, :line 323, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 323, :column 9, :line 323, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 323, :column 22, :line 323, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 323, :column 27, :line 323, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 323, :column 21, :line 323, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 323, :column 22, :line 323, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 323, :column 27, :line 323, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 323, :column 5, :line 323, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 323, :column 9, :line 323, :file "cljs/core.cljs"} -sorted-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3690, :column 3, :line 3690, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3690, :column 4, :line 3690, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3687, :column 8, :line 3687, :file "cljs/core.cljs"} flatten1 ^{:arglists (^{:end-column 10, :end-line 3690, :column 3, :line 3690, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3690, :column 4, :line 3690, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3687, :column 8, :line 3687, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 10, :end-line 3690, :column 4, :line 3690, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3690, :column 3, :line 3690, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3690, :column 4, :line 3690, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3687, :column 8, :line 3687, :file "cljs/core.cljs"} flatten1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1670, :column 4, :line 1670, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1670, :column 5, :line 1670, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1670, :column 11, :line 1670, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1670, :column 13, :line 1670, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1671, :column 13, :line 1671, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1671, :column 18, :line 1671, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. Returns the result of\n  applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1663, :column 7, :line 1663, :file "cljs/core.cljs"} transduce ^{:arglists (^{:end-column 18, :end-line 1670, :column 4, :line 1670, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1670, :column 5, :line 1670, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1670, :column 11, :line 1670, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1670, :column 13, :line 1670, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1671, :column 13, :line 1671, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1671, :column 18, :line 1671, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. Returns the result of\n  applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1663, :column 7, :line 1663, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1670, :column 5, :line 1670, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1670, :column 11, :line 1670, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1670, :column 13, :line 1670, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1671, :column 13, :line 1671, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1671, :column 18, :line 1671, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1670, :column 4, :line 1670, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1670, :column 5, :line 1670, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1670, :column 11, :line 1670, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1670, :column 13, :line 1670, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1671, :column 13, :line 1671, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1671, :column 18, :line 1671, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. Returns the result of\n  applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1663, :column 7, :line 1663, :file "cljs/core.cljs"} transduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8096, :column 1, :line 8096, :file "cljs/core.cljs"} fixture1 ^{:end-column 17, :end-line 8096, :column 1, :line 8096, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8096, :column 1, :line 8096, :file "cljs/core.cljs"} fixture1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 391, :column 11, :line 391, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 391, :column 12, :line 391, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 391, :column 17, :line 391, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 391, :column 20, :line 391, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 391, :column 22, :line 391, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 391, :column 25, :line 391, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 391, :column 26, :line 391, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 391, :column 28, :line 391, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 391, :column 30, :line 391, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 391, :column 32, :line 391, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 391, :column 35, :line 391, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 391, :column 36, :line 391, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 391, :column 38, :line 391, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 391, :column 40, :line 391, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 391, :column 42, :line 391, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 391, :column 44, :line 391, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -swap! ^{:arglists (^{:end-column 16, :end-line 391, :column 11, :line 391, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 391, :column 12, :line 391, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 391, :column 17, :line 391, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 391, :column 20, :line 391, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 391, :column 22, :line 391, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 391, :column 25, :line 391, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 391, :column 26, :line 391, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 391, :column 28, :line 391, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 391, :column 30, :line 391, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 391, :column 32, :line 391, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 391, :column 35, :line 391, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 391, :column 36, :line 391, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 391, :column 38, :line 391, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 391, :column 40, :line 391, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 391, :column 42, :line 391, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 391, :column 44, :line 391, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 391, :column 12, :line 391, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} f] [^{:end-column 20, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 391, :column 20, :line 391, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 391, :column 22, :line 391, :file "cljs/core.cljs"} a] [^{:end-column 28, :end-line 391, :column 26, :line 391, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 391, :column 28, :line 391, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 391, :column 30, :line 391, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 391, :column 32, :line 391, :file "cljs/core.cljs"} b] [^{:end-column 38, :end-line 391, :column 36, :line 391, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 391, :column 38, :line 391, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 391, :column 40, :line 391, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 391, :column 42, :line 391, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 391, :column 44, :line 391, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 391, :column 11, :line 391, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 391, :column 12, :line 391, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 391, :column 17, :line 391, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 391, :column 20, :line 391, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 391, :column 22, :line 391, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 391, :column 25, :line 391, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 391, :column 26, :line 391, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 391, :column 28, :line 391, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 391, :column 30, :line 391, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 391, :column 32, :line 391, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 391, :column 35, :line 391, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 391, :column 36, :line 391, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 391, :column 38, :line 391, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 391, :column 40, :line 391, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 391, :column 42, :line 391, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 391, :column 44, :line 391, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length* ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 1397, :column 17, :line 1397, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1397, :column 18, :line 1397, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1397, :column 22, :line 1397, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} js-delete ^{:arglists (^{:end-column 26, :end-line 1397, :column 17, :line 1397, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1397, :column 18, :line 1397, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1397, :column 22, :line 1397, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1397, :column 18, :line 1397, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1397, :column 22, :line 1397, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 1397, :column 17, :line 1397, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1397, :column 18, :line 1397, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1397, :column 22, :line 1397, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} js-delete, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_ ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy])} ->MultiFn ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy])} {:arglists (^cljs.core/MultiFn [^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy])} ->MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8207, :column 15, :line 8207, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8207, :column 16, :line 8207, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8207, :column 7, :line 8207, :file "cljs/core.cljs"} key->js ^{:arglists (^{:end-column 18, :end-line 8207, :column 15, :line 8207, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8207, :column 16, :line 8207, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8207, :column 7, :line 8207, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 8207, :column 16, :line 8207, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8207, :column 15, :line 8207, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8207, :column 16, :line 8207, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8207, :column 7, :line 8207, :file "cljs/core.cljs"} key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts])} ->MultiStepper ^{:file "cljs/core.cljs", :arglists ([^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts])} {:arglists (^cljs.core/MultiStepper [^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts])} ->MultiStepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 8200, :column 14, :line 8200, :file "cljs/core.cljs"} IEncodeJS ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 8200, :column 14, :line 8200, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 8200, :column 14, :line 8200, :file "cljs/core.cljs"} IEncodeJS, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3907, :column 17, :line 3907, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3907, :column 18, :line 3907, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3907, :column 23, :line 3907, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3907, :column 29, :line 3907, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3907, :column 8, :line 3907, :file "cljs/core.cljs"} new-path ^{:arglists (^{:end-column 34, :end-line 3907, :column 17, :line 3907, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3907, :column 18, :line 3907, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3907, :column 23, :line 3907, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3907, :column 29, :line 3907, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3907, :column 8, :line 3907, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 3907, :column 18, :line 3907, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3907, :column 23, :line 3907, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3907, :column 29, :line 3907, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3907, :column 17, :line 3907, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3907, :column 18, :line 3907, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3907, :column 23, :line 3907, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3907, :column 29, :line 3907, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3907, :column 8, :line 3907, :file "cljs/core.cljs"} new-path, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 3367, :column 3, :line 3367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3367, :column 4, :line 3367, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3367, :column 6, :line 3367, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3367, :column 13, :line 3367, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3363, :column 7, :line 3363, :file "cljs/core.cljs"} compare-and-set! ^{:arglists (^{:end-column 20, :end-line 3367, :column 3, :line 3367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3367, :column 4, :line 3367, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3367, :column 6, :line 3367, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3367, :column 13, :line 3367, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3363, :column 7, :line 3363, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 3367, :column 4, :line 3367, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3367, :column 6, :line 3367, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3367, :column 13, :line 3367, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 3367, :column 3, :line 3367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3367, :column 4, :line 3367, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3367, :column 6, :line 3367, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3367, :column 13, :line 3367, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3363, :column 7, :line 3363, :file "cljs/core.cljs"} compare-and-set!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 605, :column 10, :line 605, :file "cljs/core.cljs"} array-seq ^{:arglists (^{:end-column 11, :end-line 930, :column 4, :line 930, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 930, :column 5, :line 930, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 932, :column 4, :line 932, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 932, :column 5, :line 932, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 932, :column 11, :line 932, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 929, :column 7, :line 929, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 930, :column 5, :line 930, :file "cljs/core.cljs"} array] [^{:end-column 11, :end-line 932, :column 5, :line 932, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 932, :column 11, :line 932, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 930, :column 4, :line 930, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 930, :column 5, :line 930, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 932, :column 4, :line 932, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 932, :column 5, :line 932, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 932, :column 11, :line 932, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 929, :column 7, :line 929, :file "cljs/core.cljs"} array-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1409, :column 10, :line 1409, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1409, :column 12, :line 1409, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1409, :column 15, :line 1409, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1409, :column 17, :line 1409, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1408, :column 8, :line 1408, :file "cljs/core.cljs"} array-copy-downward ^{:arglists (^{:end-column 21, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1409, :column 10, :line 1409, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1409, :column 12, :line 1409, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1409, :column 15, :line 1409, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1409, :column 17, :line 1409, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1408, :column 8, :line 1408, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1409, :column 10, :line 1409, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1409, :column 12, :line 1409, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1409, :column 15, :line 1409, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1409, :column 17, :line 1409, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1409, :column 10, :line 1409, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1409, :column 12, :line 1409, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1409, :column 15, :line 1409, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1409, :column 17, :line 1409, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1408, :column 8, :line 1408, :file "cljs/core.cljs"} array-copy-downward, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5503, :column 24, :line 5503, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5503, :column 25, :line 5503, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5503, :column 36, :line 5503, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5503, :column 41, :line 5503, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5503, :column 8, :line 5503, :file "cljs/core.cljs"} pack-array-node ^{:arglists (^{:end-column 45, :end-line 5503, :column 24, :line 5503, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5503, :column 25, :line 5503, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5503, :column 36, :line 5503, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5503, :column 41, :line 5503, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5503, :column 8, :line 5503, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 5503, :column 25, :line 5503, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5503, :column 36, :line 5503, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5503, :column 41, :line 5503, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5503, :column 24, :line 5503, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5503, :column 25, :line 5503, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5503, :column 36, :line 5503, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5503, :column 41, :line 5503, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5503, :column 8, :line 5503, :file "cljs/core.cljs"} pack-array-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3669, :column 4, :line 3669, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3669, :column 5, :line 3669, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3669, :column 8, :line 3669, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3675, :column 4, :line 3675, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3675, :column 5, :line 3675, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3675, :column 8, :line 3675, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3675, :column 11, :line 3675, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3675, :column 13, :line 3675, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3667, :column 7, :line 3667, :file "cljs/core.cljs"} interleave ^{:arglists (^{:end-column 11, :end-line 3669, :column 4, :line 3669, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3669, :column 5, :line 3669, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3669, :column 8, :line 3669, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3675, :column 4, :line 3675, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3675, :column 5, :line 3675, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3675, :column 8, :line 3675, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3675, :column 11, :line 3675, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3675, :column 13, :line 3675, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3667, :column 7, :line 3667, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3669, :column 5, :line 3669, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3669, :column 8, :line 3669, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 8, :end-line 3675, :column 5, :line 3675, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3675, :column 8, :line 3675, :file "cljs/core.cljs"} c2 & ^{:end-column 19, :end-line 3675, :column 13, :line 3675, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3669, :column 4, :line 3669, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3669, :column 5, :line 3669, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3669, :column 8, :line 3669, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3675, :column 4, :line 3675, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3675, :column 5, :line 3675, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3675, :column 8, :line 3675, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3675, :column 11, :line 3675, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3675, :column 13, :line 3675, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3667, :column 7, :line 3667, :file "cljs/core.cljs"} interleave, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 7750, :column 10, :line 7750, :file "cljs/core.cljs"} print-map ^{:arglists (^{:end-column 42, :end-line 7913, :column 17, :line 7913, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7913, :column 18, :line 7913, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7913, :column 20, :line 7913, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7913, :column 30, :line 7913, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7913, :column 37, :line 7913, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 7913, :column 7, :line 7913, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 7913, :column 18, :line 7913, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7913, :column 20, :line 7913, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7913, :column 30, :line 7913, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7913, :column 37, :line 7913, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 7913, :column 17, :line 7913, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7913, :column 18, :line 7913, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7913, :column 20, :line 7913, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7913, :column 30, :line 7913, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7913, :column 37, :line 7913, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 7913, :column 7, :line 7913, :file "cljs/core.cljs"} print-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1371, :column 3, :line 1371, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1371, :column 4, :line 1371, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1369, :column 8, :line 1369, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1369, :column 16, :line 1369, :file "cljs/core.cljs"} map? ^{:arglists (^{:end-column 6, :end-line 1371, :column 3, :line 1371, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1371, :column 4, :line 1371, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1369, :column 8, :line 1369, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1369, :column 16, :line 1369, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1371, :column 4, :line 1371, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1371, :column 3, :line 1371, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1371, :column 4, :line 1371, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1369, :column 8, :line 1369, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1369, :column 16, :line 1369, :file "cljs/core.cljs"} map?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 434, :column 1, :line 434, :file "cljs/core.cljs"} m3-C1 ^{:end-column 23, :end-line 434, :column 1, :line 434, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 434, :column 1, :line 434, :file "cljs/core.cljs"} m3-C1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1161, :column 4, :line 1161, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1161, :column 5, :line 1161, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1161, :column 7, :line 1161, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1179, :column 9, :line 1179, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1159, :column 7, :line 1159, :file "cljs/core.cljs"} get ^{:arglists (^{:end-column 9, :end-line 1161, :column 4, :line 1161, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1161, :column 5, :line 1161, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1161, :column 7, :line 1161, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1179, :column 9, :line 1179, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1159, :column 7, :line 1159, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1161, :column 5, :line 1161, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1161, :column 7, :line 1161, :file "cljs/core.cljs"} k] [^{:end-column 7, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1179, :column 9, :line 1179, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1161, :column 4, :line 1161, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1161, :column 5, :line 1161, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1161, :column 7, :line 1161, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1179, :column 9, :line 1179, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1159, :column 7, :line 1159, :file "cljs/core.cljs"} get, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 3143, :column 16, :line 3143, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 3143, :column 17, :line 3143, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 3143, :column 7, :line 3143, :file "cljs/core.cljs"} identity ^{:arglists (^{:end-column 19, :end-line 3143, :column 16, :line 3143, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 3143, :column 17, :line 3143, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 3143, :column 7, :line 3143, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 3143, :column 17, :line 3143, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 3143, :column 16, :line 3143, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 3143, :column 17, :line 3143, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 3143, :column 7, :line 3143, :file "cljs/core.cljs"} identity, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3770, :column 4, :line 3770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3770, :column 5, :line 3770, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3770, :column 8, :line 3770, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3776, :column 14, :line 3776, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} into ^{:arglists (^{:end-column 13, :end-line 3770, :column 4, :line 3770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3770, :column 5, :line 3770, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3770, :column 8, :line 3770, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3776, :column 14, :line 3776, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3770, :column 5, :line 3770, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3770, :column 8, :line 3770, :file "cljs/core.cljs"} from] [^{:end-column 8, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3776, :column 14, :line 3776, :file "cljs/core.cljs"} from]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3770, :column 4, :line 3770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3770, :column 5, :line 3770, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3770, :column 8, :line 3770, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3776, :column 14, :line 3776, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} into, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1886, :column 3, :line 1886, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1886, :column 4, :line 1886, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} long ^{:arglists (^{:end-column 6, :end-line 1886, :column 3, :line 1886, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1886, :column 4, :line 1886, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1886, :column 4, :line 1886, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1886, :column 3, :line 1886, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1886, :column 4, :line 1886, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1789, :column 22, :line 1789, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1789, :column 23, :line 1789, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1789, :column 8, :line 1789, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1789, :column 15, :line 1789, :file "cljs/core.cljs"} double ^{:arglists (^{:end-column 25, :end-line 1789, :column 22, :line 1789, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1789, :column 23, :line 1789, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1789, :column 8, :line 1789, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1789, :column 15, :line 1789, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 1789, :column 23, :line 1789, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1789, :column 22, :line 1789, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1789, :column 23, :line 1789, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1789, :column 8, :line 1789, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1789, :column 15, :line 1789, :file "cljs/core.cljs"} double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2439, :column 10, :line 2439, :file "cljs/core.cljs"} ChunkBuffer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2439, :column 10, :line 2439, :file "cljs/core.cljs"} ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 2439, :column 22, :line 2439, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end], :protocols #{Object cljs.core/ICounted}}, ^{:arglists (^{:end-column 15, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 270, :column 10, :line 270, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -key ^{:arglists (^{:end-column 15, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 270, :column 10, :line 270, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 270, :column 10, :line 270, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 270, :column 10, :line 270, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1002, :column 3, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1000, :column 7, :line 1000, :file "cljs/core.cljs"} nfirst ^{:arglists (^{:end-column 9, :end-line 1002, :column 3, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1000, :column 7, :line 1000, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1002, :column 3, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1000, :column 7, :line 1000, :file "cljs/core.cljs"} nfirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 395, :column 10, :line 395, :file "cljs/core.cljs"} StringBufferWriter {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 395, :column 10, :line 395, :file "cljs/core.cljs"} StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 395, :column 29, :line 395, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb], :protocols #{cljs.core/IWriter}}, ^{:arglists (^{:end-column 6, :end-line 1299, :column 3, :line 1299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1297, :column 7, :line 1297, :file "cljs/core.cljs"} meta ^{:arglists (^{:end-column 6, :end-line 1299, :column 3, :line 1299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1297, :column 7, :line 1297, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1299, :column 3, :line 1299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1297, :column 7, :line 1297, :file "cljs/core.cljs"} meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 44, :end-line 3984, :column 27, :line 3984, :file "cljs/core.cljs"} tv-editable-tail ^{:arglists (^{:end-column 29, :end-line 4376, :column 25, :line 4376, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4376, :column 26, :line 4376, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 4376, :column 8, :line 4376, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 29, :end-line 4376, :column 26, :line 4376, :file "cljs/core.cljs"} tl]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 4376, :column 25, :line 4376, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4376, :column 26, :line 4376, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 4376, :column 8, :line 4376, :file "cljs/core.cljs"} tv-editable-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 299, :column 15, :line 299, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 299, :column 16, :line 299, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 299, :column 21, :line 299, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 299, :column 23, :line 299, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -kv-reduce ^{:arglists (^{:end-column 28, :end-line 299, :column 15, :line 299, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 299, :column 16, :line 299, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 299, :column 21, :line 299, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 299, :column 23, :line 299, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 299, :column 16, :line 299, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 299, :column 21, :line 299, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 299, :column 23, :line 299, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 299, :column 15, :line 299, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 299, :column 16, :line 299, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 299, :column 21, :line 299, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 299, :column 23, :line 299, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} IHash ^{:impls #{cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq ^{:end-column 22, :end-line 752, :column 14, :line 752, :file "cljs/core.cljs"} default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/LazyTransformer cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 20, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} IHash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1948, :column 3, :line 1948, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1948, :column 4, :line 1948, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1948, :column 6, :line 1948, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1946, :column 7, :line 1946, :file "cljs/core.cljs"} bit-and-not ^{:arglists (^{:end-column 8, :end-line 1948, :column 3, :line 1948, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1948, :column 4, :line 1948, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1948, :column 6, :line 1948, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1946, :column 7, :line 1946, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1948, :column 4, :line 1948, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1948, :column 6, :line 1948, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1948, :column 3, :line 1948, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1948, :column 4, :line 1948, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1948, :column 6, :line 1948, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1946, :column 7, :line 1946, :file "cljs/core.cljs"} bit-and-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 326, :column 17, :line 326, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -comparator ^{:arglists (^{:end-column 22, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 326, :column 17, :line 326, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 326, :column 17, :line 326, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 326, :column 17, :line 326, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1809, :column 4, :line 1809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1809, :column 5, :line 1809, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1809, :column 9, :line 1809, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1809, :column 11, :line 1809, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1804, :column 8, :line 1804, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1804, :column 15, :line 1804, :file "cljs/core.cljs"} unchecked-add-int ^{:arglists (^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1809, :column 4, :line 1809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1809, :column 5, :line 1809, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1809, :column 9, :line 1809, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1809, :column 11, :line 1809, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1804, :column 8, :line 1804, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1804, :column 15, :line 1804, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1809, :column 5, :line 1809, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1809, :column 11, :line 1809, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1809, :column 4, :line 1809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1809, :column 5, :line 1809, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1809, :column 9, :line 1809, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1809, :column 11, :line 1809, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1804, :column 8, :line 1804, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1804, :column 15, :line 1804, :file "cljs/core.cljs"} unchecked-add-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 705, :column 3, :line 705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 705, :column 4, :line 705, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 701, :column 8, :line 701, :file "cljs/core.cljs"} number, :end-column 33, :end-line 701, :column 15, :line 701, :file "cljs/core.cljs"} hash-ordered-coll ^{:arglists (^{:end-column 9, :end-line 705, :column 3, :line 705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 705, :column 4, :line 705, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 701, :column 8, :line 701, :file "cljs/core.cljs"} number, :end-column 33, :end-line 701, :column 15, :line 701, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 705, :column 4, :line 705, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 705, :column 3, :line 705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 705, :column 4, :line 705, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 701, :column 8, :line 701, :file "cljs/core.cljs"} number, :end-column 33, :end-line 701, :column 15, :line 701, :file "cljs/core.cljs"} hash-ordered-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2103, :column 3, :line 2103, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2103, :column 4, :line 2103, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2103, :column 8, :line 2103, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2098, :column 8, :line 2098, :file "cljs/core.cljs"} extend-object! ^{:arglists (^{:end-column 15, :end-line 2103, :column 3, :line 2103, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2103, :column 4, :line 2103, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2103, :column 8, :line 2103, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2098, :column 8, :line 2098, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2103, :column 4, :line 2103, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2103, :column 8, :line 2103, :file "cljs/core.cljs"} fn-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2103, :column 3, :line 2103, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2103, :column 4, :line 2103, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2103, :column 8, :line 2103, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2098, :column 8, :line 2098, :file "cljs/core.cljs"} extend-object!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s])} ->EntriesIterator ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s])} {:arglists (^cljs.core/EntriesIterator [^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s])} ->EntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 3960, :column 17, :line 3960, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3960, :column 18, :line 3960, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3960, :column 21, :line 3960, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3960, :column 27, :line 3960, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3960, :column 32, :line 3960, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3960, :column 34, :line 3960, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3960, :column 8, :line 3960, :file "cljs/core.cljs"} do-assoc ^{:arglists (^{:end-column 38, :end-line 3960, :column 17, :line 3960, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3960, :column 18, :line 3960, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3960, :column 21, :line 3960, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3960, :column 27, :line 3960, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3960, :column 32, :line 3960, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3960, :column 34, :line 3960, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3960, :column 8, :line 3960, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 21, :end-line 3960, :column 18, :line 3960, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3960, :column 21, :line 3960, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3960, :column 27, :line 3960, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3960, :column 32, :line 3960, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3960, :column 34, :line 3960, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 3960, :column 17, :line 3960, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3960, :column 18, :line 3960, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3960, :column 21, :line 3960, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3960, :column 27, :line 3960, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3960, :column 32, :line 3960, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3960, :column 34, :line 3960, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3960, :column 8, :line 3960, :file "cljs/core.cljs"} do-assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8046, :column 3, :line 8046, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8046, :column 4, :line 8046, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8046, :column 9, :line 8046, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8044, :column 7, :line 8044, :file "cljs/core.cljs"} reset-meta! ^{:arglists (^{:end-column 11, :end-line 8046, :column 3, :line 8046, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8046, :column 4, :line 8046, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8046, :column 9, :line 8046, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8044, :column 7, :line 8044, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8046, :column 4, :line 8046, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8046, :column 9, :line 8046, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8046, :column 3, :line 8046, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8046, :column 4, :line 8046, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8046, :column 9, :line 8046, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8044, :column 7, :line 8044, :file "cljs/core.cljs"} reset-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta])} ->KeySeq ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/KeySeq [^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta])} ->KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} IEquiv ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq ^{:end-column 21, :end-line 741, :column 14, :line 741, :file "cljs/core.cljs"} number ^{:end-column 22, :end-line 1023, :column 14, :line 1023, :file "cljs/core.cljs"} default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/NeverEquiv Date cljs.core/LazyTransformer cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 21, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} IEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6254, :column 27, :line 6254, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6254, :column 28, :line 6254, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6254, :column 33, :line 6254, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6254, :column 35, :line 6254, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6254, :column 8, :line 6254, :file "cljs/core.cljs"} tree-map-kv-reduce ^{:arglists (^{:end-column 40, :end-line 6254, :column 27, :line 6254, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6254, :column 28, :line 6254, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6254, :column 33, :line 6254, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6254, :column 35, :line 6254, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6254, :column 8, :line 6254, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 6254, :column 28, :line 6254, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6254, :column 33, :line 6254, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6254, :column 35, :line 6254, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6254, :column 27, :line 6254, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6254, :column 28, :line 6254, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6254, :column 33, :line 6254, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6254, :column 35, :line 6254, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6254, :column 8, :line 6254, :file "cljs/core.cljs"} tree-map-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3637, :column 3, :line 3637, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3637, :column 4, :line 3637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} cycle ^{:arglists (^{:end-column 9, :end-line 3637, :column 3, :line 3637, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3637, :column 4, :line 3637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3637, :column 4, :line 3637, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3637, :column 3, :line 3637, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3637, :column 4, :line 3637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} cycle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 284, :column 10, :line 284, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 284, :column 11, :line 284, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 284, :column 3, :line 284, :file "cljs/core.cljs"} -deref ^{:arglists (^{:end-column 13, :end-line 284, :column 10, :line 284, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 284, :column 11, :line 284, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 284, :column 3, :line 284, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 284, :column 11, :line 284, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 284, :column 10, :line 284, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 284, :column 11, :line 284, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 284, :column 3, :line 284, :file "cljs/core.cljs"} -deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1336, :column 3, :line 1336, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1336, :column 4, :line 1336, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1333, :column 8, :line 1333, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1333, :column 16, :line 1333, :file "cljs/core.cljs"} empty? ^{:arglists (^{:end-column 9, :end-line 1336, :column 3, :line 1336, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1336, :column 4, :line 1336, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1333, :column 8, :line 1333, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1333, :column 16, :line 1333, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 1336, :column 4, :line 1336, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1336, :column 3, :line 1336, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1336, :column 4, :line 1336, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1333, :column 8, :line 1333, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1333, :column 16, :line 1333, :file "cljs/core.cljs"} empty?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1787, :column 21, :line 1787, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1787, :column 22, :line 1787, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} short ^{:arglists (^{:end-column 24, :end-line 1787, :column 21, :line 1787, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1787, :column 22, :line 1787, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1787, :column 22, :line 1787, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1787, :column 21, :line 1787, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1787, :column 22, :line 1787, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8201, :column 13, :line 8201, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8201, :column 14, :line 8201, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8201, :column 4, :line 8201, :file "cljs/core.cljs"} -clj->js ^{:arglists (^{:end-column 16, :end-line 8201, :column 13, :line 8201, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8201, :column 14, :line 8201, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8201, :column 4, :line 8201, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8201, :column 14, :line 8201, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8201, :column 13, :line 8201, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8201, :column 14, :line 8201, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8201, :column 4, :line 8201, :file "cljs/core.cljs"} -clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 375, :column 20, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} -chunked-first ^{:arglists (^{:end-column 25, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 375, :column 20, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 375, :column 20, :line 375, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 375, :column 20, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} -chunked-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3800, :column 3, :line 3800, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3800, :column 4, :line 3800, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3800, :column 9, :line 3800, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3797, :column 7, :line 3797, :file "cljs/core.cljs"} filterv ^{:arglists (^{:end-column 14, :end-line 3800, :column 3, :line 3800, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3800, :column 4, :line 3800, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3800, :column 9, :line 3800, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3797, :column 7, :line 3797, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 3800, :column 4, :line 3800, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3800, :column 9, :line 3800, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3800, :column 3, :line 3800, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3800, :column 4, :line 3800, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3800, :column 9, :line 3800, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3797, :column 7, :line 3797, :file "cljs/core.cljs"} filterv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 3984, :column 10, :line 3984, :file "cljs/core.cljs"} tv-editable-root ^{:arglists (^{:end-column 31, :end-line 4373, :column 25, :line 4373, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4373, :column 26, :line 4373, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 4373, :column 8, :line 4373, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 31, :end-line 4373, :column 26, :line 4373, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 4373, :column 25, :line 4373, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4373, :column 26, :line 4373, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 4373, :column 8, :line 4373, :file "cljs/core.cljs"} tv-editable-root, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 508, :column 12, :line 508, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 508, :column 13, :line 508, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} hash ^{:arglists (^{:end-column 15, :end-line 508, :column 12, :line 508, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 508, :column 13, :line 508, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 508, :column 13, :line 508, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 508, :column 12, :line 508, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 508, :column 13, :line 508, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1915, :column 3, :line 1915, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1915, :column 4, :line 1915, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1915, :column 6, :line 1915, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} quot ^{:arglists (^{:end-column 8, :end-line 1915, :column 3, :line 1915, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1915, :column 4, :line 1915, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1915, :column 6, :line 1915, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1915, :column 4, :line 1915, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1915, :column 6, :line 1915, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1915, :column 3, :line 1915, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1915, :column 4, :line 1915, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1915, :column 6, :line 1915, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} quot, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1795, :column 32, :line 1795, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1795, :column 33, :line 1795, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} unchecked-double ^{:arglists (^{:end-column 35, :end-line 1795, :column 32, :line 1795, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1795, :column 33, :line 1795, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 1795, :column 33, :line 1795, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1795, :column 32, :line 1795, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1795, :column 33, :line 1795, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} unchecked-double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash])} ->ChunkedCons ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ChunkedCons [^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash])} ->ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} ITransientVector ^{:impls #{cljs.core/TransientVector}, :protocol-symbol true, :end-column 31, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} ITransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 2075, :column 10, :line 2075, :file "cljs/core.cljs"} key ^{:arglists (^{:end-column 14, :end-line 6878, :column 3, :line 6878, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6878, :column 4, :line 6878, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6876, :column 7, :line 6876, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6878, :column 4, :line 6878, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6878, :column 3, :line 6878, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6878, :column 4, :line 6878, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6876, :column 7, :line 6876, :file "cljs/core.cljs"} key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1901, :column 13, :line 1901, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1901, :column 14, :line 1901, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} longs ^{:arglists (^{:end-column 16, :end-line 1901, :column 13, :line 1901, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1901, :column 14, :line 1901, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1901, :column 14, :line 1901, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1901, :column 13, :line 1901, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1901, :column 14, :line 1901, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} longs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2867, :column 4, :line 2867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2867, :column 5, :line 2867, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2868, :column 4, :line 2868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2868, :column 5, :line 2868, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2868, :column 7, :line 2868, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2869, :column 4, :line 2869, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2869, :column 5, :line 2869, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2869, :column 7, :line 2869, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2869, :column 9, :line 2869, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2869, :column 11, :line 2869, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2865, :column 8, :line 2865, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2865, :column 16, :line 2865, :file "cljs/core.cljs"} not= ^{:arglists (^{:end-column 7, :end-line 2867, :column 4, :line 2867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2867, :column 5, :line 2867, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2868, :column 4, :line 2868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2868, :column 5, :line 2868, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2868, :column 7, :line 2868, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2869, :column 4, :line 2869, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2869, :column 5, :line 2869, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2869, :column 7, :line 2869, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2869, :column 9, :line 2869, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2869, :column 11, :line 2869, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2865, :column 8, :line 2865, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2865, :column 16, :line 2865, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 2867, :column 5, :line 2867, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 2868, :column 5, :line 2868, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2868, :column 7, :line 2868, :file "cljs/core.cljs"} y] ^cljs.core/boolean [^{:end-column 7, :end-line 2869, :column 5, :line 2869, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2869, :column 7, :line 2869, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2869, :column 11, :line 2869, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2867, :column 4, :line 2867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2867, :column 5, :line 2867, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2868, :column 4, :line 2868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2868, :column 5, :line 2868, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2868, :column 7, :line 2868, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2869, :column 4, :line 2869, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2869, :column 5, :line 2869, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2869, :column 7, :line 2869, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2869, :column 9, :line 2869, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2869, :column 11, :line 2869, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2865, :column 8, :line 2865, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2865, :column 16, :line 2865, :file "cljs/core.cljs"} not=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string? ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8101, :column 10, :line 8101, :file "cljs/core.cljs"} Delay {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8101, :column 10, :line 8101, :file "cljs/core.cljs"} Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 8101, :column 16, :line 8101, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value], :protocols #{cljs.core/IPending cljs.core/IDeref}}, ^{:arglists (^{:end-column 14, :end-line 7839, :column 3, :line 7839, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7839, :column 4, :line 7839, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7839, :column 9, :line 7839, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7836, :column 7, :line 7836, :file "cljs/core.cljs"} pr-str-with-opts ^{:arglists (^{:end-column 14, :end-line 7839, :column 3, :line 7839, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7839, :column 4, :line 7839, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7839, :column 9, :line 7839, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7836, :column 7, :line 7836, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7839, :column 4, :line 7839, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7839, :column 9, :line 7839, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7839, :column 3, :line 7839, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7839, :column 4, :line 7839, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7839, :column 9, :line 7839, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7836, :column 7, :line 7836, :file "cljs/core.cljs"} pr-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 435, :column 1, :line 435, :file "cljs/core.cljs"} m3-C2 ^{:end-column 23, :end-line 435, :column 1, :line 435, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 435, :column 1, :line 435, :file "cljs/core.cljs"} m3-C2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta])} ->Symbol ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/Symbol [^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta])} ->Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline* ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1839, :column 4, :line 1839, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1840, :column 4, :line 1840, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1840, :column 5, :line 1840, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1841, :column 4, :line 1841, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1841, :column 5, :line 1841, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1841, :column 7, :line 1841, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1842, :column 7, :line 1842, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1842, :column 9, :line 1842, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1842, :column 11, :line 1842, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1837, :column 15, :line 1837, :file "cljs/core.cljs"} unchecked-multiply-int ^{:arglists (^{:end-column 6, :end-line 1839, :column 4, :line 1839, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1840, :column 4, :line 1840, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1840, :column 5, :line 1840, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1841, :column 4, :line 1841, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1841, :column 5, :line 1841, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1841, :column 7, :line 1841, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1842, :column 7, :line 1842, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1842, :column 9, :line 1842, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1842, :column 11, :line 1842, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1837, :column 15, :line 1837, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1840, :column 5, :line 1840, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1841, :column 5, :line 1841, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1841, :column 7, :line 1841, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1842, :column 7, :line 1842, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1842, :column 11, :line 1842, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1839, :column 4, :line 1839, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1840, :column 4, :line 1840, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1840, :column 5, :line 1840, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1841, :column 4, :line 1841, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1841, :column 5, :line 1841, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1841, :column 7, :line 1841, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1842, :column 7, :line 1842, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1842, :column 9, :line 1842, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1842, :column 11, :line 1842, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1837, :column 15, :line 1837, :file "cljs/core.cljs"} unchecked-multiply-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 38, :end-line 2096, :column 27, :line 2096, :file "cljs/core.cljs"} chunk-rest ^{:arglists (^{:end-column 21, :end-line 2564, :column 18, :line 2564, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2564, :column 19, :line 2564, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2564, :column 7, :line 2564, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2564, :column 19, :line 2564, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2564, :column 18, :line 2564, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2564, :column 19, :line 2564, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2564, :column 7, :line 2564, :file "cljs/core.cljs"} chunk-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8687, :column 2, :line 8687, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8687, :column 3, :line 8687, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8685, :column 7, :line 8685, :file "cljs/core.cljs"} remove-all-methods ^{:arglists (^{:end-column 11, :end-line 8687, :column 2, :line 8687, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8687, :column 3, :line 8687, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8685, :column 7, :line 8685, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8687, :column 3, :line 8687, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8687, :column 2, :line 8687, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8687, :column 3, :line 8687, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8685, :column 7, :line 8685, :file "cljs/core.cljs"} remove-all-methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8296, :column 4, :line 8296, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8296, :column 5, :line 8296, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8301, :column 4, :line 8301, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8301, :column 5, :line 8301, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8301, :column 7, :line 8301, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8301, :column 9, :line 8301, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} trampoline ^{:arglists (^{:end-column 7, :end-line 8296, :column 4, :line 8296, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8296, :column 5, :line 8296, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8301, :column 4, :line 8301, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8301, :column 5, :line 8301, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8301, :column 7, :line 8301, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8301, :column 9, :line 8301, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8296, :column 5, :line 8296, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 8301, :column 5, :line 8301, :file "cljs/core.cljs"} f & ^{:end-column 14, :end-line 8301, :column 9, :line 8301, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8296, :column 4, :line 8296, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8296, :column 5, :line 8296, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8301, :column 4, :line 8301, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8301, :column 5, :line 8301, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8301, :column 7, :line 8301, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8301, :column 9, :line 8301, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} trampoline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1 ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1593, :column 10, :line 1593, :file "cljs/core.cljs"} vec ^{:arglists (^{:end-column 17, :end-line 4158, :column 11, :line 4158, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4158, :column 12, :line 4158, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 4158, :column 7, :line 4158, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 17, :end-line 4158, :column 12, :line 4158, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 4158, :column 11, :line 4158, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4158, :column 12, :line 4158, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 4158, :column 7, :line 4158, :file "cljs/core.cljs"} vec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta* ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 344, :column 20, :line 344, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 344, :column 21, :line 344, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 344, :column 26, :line 344, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 344, :column 33, :line 344, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 344, :column 4, :line 344, :file "cljs/core.cljs"} -notify-watches ^{:arglists (^{:end-column 40, :end-line 344, :column 20, :line 344, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 344, :column 21, :line 344, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 344, :column 26, :line 344, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 344, :column 33, :line 344, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 344, :column 4, :line 344, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 344, :column 21, :line 344, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 344, :column 26, :line 344, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 344, :column 33, :line 344, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 344, :column 20, :line 344, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 344, :column 21, :line 344, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 344, :column 26, :line 344, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 344, :column 33, :line 344, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 344, :column 4, :line 344, :file "cljs/core.cljs"} -notify-watches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8510, :column 10, :line 8510, :file "cljs/core.cljs"} MultiFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8510, :column 10, :line 8510, :file "cljs/core.cljs"} MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 75, :end-line 8511, :column 18, :line 8510, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy], :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 4830, :column 10, :line 4830, :file "cljs/core.cljs"} Iterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 4830, :column 10, :line 4830, :file "cljs/core.cljs"} Iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 32, :end-line 4830, :column 19, :line 4830, :file "cljs/core.cljs"} [^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 6, :end-line 1876, :column 3, :line 1876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1876, :column 4, :line 1876, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} int ^{:arglists (^{:end-column 6, :end-line 1876, :column 3, :line 1876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1876, :column 4, :line 1876, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1876, :column 4, :line 1876, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1876, :column 3, :line 1876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1876, :column 4, :line 1876, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta])} ->ValSeq ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/ValSeq [^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta])} ->ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1927, :column 4, :line 1927, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1928, :column 4, :line 1928, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1928, :column 5, :line 1928, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).", :tag ^{:end-column 15, :end-line 1925, :column 8, :line 1925, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} rand ^{:arglists (^{:end-column 6, :end-line 8307, :column 4, :line 8307, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8308, :column 4, :line 8308, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8308, :column 5, :line 8308, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 8304, :column 7, :line 8304, :file "cljs/core.cljs"} {:arglists ([] ^number [^{:end-column 7, :end-line 8308, :column 5, :line 8308, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8307, :column 4, :line 8307, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8308, :column 4, :line 8308, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8308, :column 5, :line 8308, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 8304, :column 7, :line 8304, :file "cljs/core.cljs"} rand, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 992, :column 3, :line 992, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 992, :column 4, :line 992, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 990, :column 7, :line 990, :file "cljs/core.cljs"} second ^{:arglists (^{:end-column 9, :end-line 992, :column 3, :line 992, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 992, :column 4, :line 992, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 990, :column 7, :line 990, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 992, :column 4, :line 992, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 992, :column 3, :line 992, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 992, :column 4, :line 992, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 990, :column 7, :line 990, :file "cljs/core.cljs"} second, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 34, :end-line 348, :column 14, :line 348, :file "cljs/core.cljs"} IEditableCollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/PersistentHashSet}, :protocol-symbol true, :end-column 34, :end-line 348, :column 14, :line 348, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 34, :end-line 348, :column 14, :line 348, :file "cljs/core.cljs"} IEditableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 528, :column 20, :line 528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 528, :column 21, :line 528, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 528, :column 26, :line 528, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 528, :column 7, :line 528, :file "cljs/core.cljs"} hash-combine ^{:arglists (^{:end-column 31, :end-line 528, :column 20, :line 528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 528, :column 21, :line 528, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 528, :column 26, :line 528, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 528, :column 7, :line 528, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 528, :column 21, :line 528, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 528, :column 26, :line 528, :file "cljs/core.cljs"} hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 528, :column 20, :line 528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 528, :column 21, :line 528, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 528, :column 26, :line 528, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 528, :column 7, :line 528, :file "cljs/core.cljs"} hash-combine, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1738, :column 5, :line 1738, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1740, :column 9, :line 1740, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1740, :column 11, :line 1740, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1735, :column 8, :line 1735, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1735, :column 16, :line 1735, :file "cljs/core.cljs"} > ^{:arglists (^{:end-column 7, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1738, :column 5, :line 1738, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1740, :column 9, :line 1740, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1740, :column 11, :line 1740, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1735, :column 8, :line 1735, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1735, :column 16, :line 1735, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1738, :column 5, :line 1738, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1740, :column 11, :line 1740, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1738, :column 5, :line 1738, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1740, :column 9, :line 1740, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1740, :column 11, :line 1740, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1735, :column 8, :line 1735, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1735, :column 16, :line 1735, :file "cljs/core.cljs"} >, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 382, :column 18, :line 382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 382, :column 19, :line 382, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 382, :column 5, :line 382, :file "cljs/core.cljs"} string, :end-column 18, :end-line 382, :column 12, :line 382, :file "cljs/core.cljs"} -name ^{:arglists (^{:end-column 21, :end-line 382, :column 18, :line 382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 382, :column 19, :line 382, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 382, :column 5, :line 382, :file "cljs/core.cljs"} string, :end-column 18, :end-line 382, :column 12, :line 382, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 382, :column 19, :line 382, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 382, :column 18, :line 382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 382, :column 19, :line 382, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 382, :column 5, :line 382, :file "cljs/core.cljs"} string, :end-column 18, :end-line 382, :column 12, :line 382, :file "cljs/core.cljs"} -name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7254, :column 4, :line 7254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7254, :column 5, :line 7254, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7256, :column 10, :line 7256, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7249, :column 7, :line 7249, :file "cljs/core.cljs"} replace ^{:arglists (^{:end-column 10, :end-line 7254, :column 4, :line 7254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7254, :column 5, :line 7254, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7256, :column 10, :line 7256, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7249, :column 7, :line 7249, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 7254, :column 5, :line 7254, :file "cljs/core.cljs"} smap] [^{:end-column 10, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7256, :column 10, :line 7256, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7254, :column 4, :line 7254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7254, :column 5, :line 7254, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7256, :column 10, :line 7256, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7249, :column 7, :line 7249, :file "cljs/core.cljs"} replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash])} ->Subvec ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Subvec [^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash])} ->Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1355, :column 3, :line 1355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1355, :column 4, :line 1355, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} associative? ^{:arglists (^{:end-column 6, :end-line 1355, :column 3, :line 1355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1355, :column 4, :line 1355, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1355, :column 4, :line 1355, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1355, :column 3, :line 1355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1355, :column 4, :line 1355, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} associative?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1879, :column 7, :line 1879, :file "cljs/core.cljs"} unchecked-int ^{:arglists (^{:end-column 6, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1879, :column 7, :line 1879, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1879, :column 7, :line 1879, :file "cljs/core.cljs"} unchecked-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 1392, :column 15, :line 1392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1392, :column 16, :line 1392, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1392, :column 7, :line 1392, :file "cljs/core.cljs"} js-keys ^{:arglists (^{:end-column 20, :end-line 1392, :column 15, :line 1392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1392, :column 16, :line 1392, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1392, :column 7, :line 1392, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 20, :end-line 1392, :column 16, :line 1392, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 1392, :column 15, :line 1392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1392, :column 16, :line 1392, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1392, :column 7, :line 1392, :file "cljs/core.cljs"} js-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 2340, :column 25, :line 2340, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2340, :column 26, :line 2340, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2340, :column 8, :line 2340, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2340, :column 16, :line 2340, :file "cljs/core.cljs"} keyword? ^{:arglists (^{:end-column 28, :end-line 2340, :column 25, :line 2340, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2340, :column 26, :line 2340, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2340, :column 8, :line 2340, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2340, :column 16, :line 2340, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 28, :end-line 2340, :column 26, :line 2340, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 2340, :column 25, :line 2340, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2340, :column 26, :line 2340, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2340, :column 8, :line 2340, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2340, :column 16, :line 2340, :file "cljs/core.cljs"} keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2904, :column 18, :line 2904, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2904, :column 19, :line 2904, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} array-iter ^{:arglists (^{:end-column 21, :end-line 2904, :column 18, :line 2904, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2904, :column 19, :line 2904, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 21, :end-line 2904, :column 19, :line 2904, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2904, :column 18, :line 2904, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2904, :column 19, :line 2904, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} array-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8119, :column 3, :line 8119, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8119, :column 4, :line 8119, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8117, :column 7, :line 8117, :file "cljs/core.cljs"} force ^{:arglists (^{:end-column 6, :end-line 8119, :column 3, :line 8119, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8119, :column 4, :line 8119, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8117, :column 7, :line 8117, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8119, :column 4, :line 8119, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8119, :column 3, :line 8119, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8119, :column 4, :line 8119, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8117, :column 7, :line 8117, :file "cljs/core.cljs"} force, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8325, :column 3, :line 8325, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8325, :column 4, :line 8325, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8325, :column 6, :line 8325, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8321, :column 7, :line 8321, :file "cljs/core.cljs"} group-by ^{:arglists (^{:end-column 11, :end-line 8325, :column 3, :line 8325, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8325, :column 4, :line 8325, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8325, :column 6, :line 8325, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8321, :column 7, :line 8321, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8325, :column 4, :line 8325, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8325, :column 6, :line 8325, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8325, :column 3, :line 8325, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8325, :column 4, :line 8325, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8325, :column 6, :line 8325, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8321, :column 7, :line 8321, :file "cljs/core.cljs"} group-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 320, :column 15, :line 320, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} -rseq ^{:arglists (^{:end-column 21, :end-line 320, :column 15, :line 320, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 320, :column 15, :line 320, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} -rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7908, :column 3, :line 7908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7908, :column 4, :line 7908, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7908, :column 6, :line 7908, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7906, :column 7, :line 7906, :file "cljs/core.cljs"} prn ^{:arglists (^{:end-column 11, :end-line 7908, :column 3, :line 7908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7908, :column 4, :line 7908, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7908, :column 6, :line 7908, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7906, :column 7, :line 7906, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7908, :column 6, :line 7908, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7908, :column 3, :line 7908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7908, :column 4, :line 7908, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7908, :column 6, :line 7908, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7906, :column 7, :line 7906, :file "cljs/core.cljs"} prn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 4393, :column 20, :line 4393, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4393, :column 21, :line 4393, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4393, :column 24, :line 4393, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4393, :column 30, :line 4393, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4393, :column 8, :line 4393, :file "cljs/core.cljs"} tv-pop-tail ^{:arglists (^{:end-column 35, :end-line 4393, :column 20, :line 4393, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4393, :column 21, :line 4393, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4393, :column 24, :line 4393, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4393, :column 30, :line 4393, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4393, :column 8, :line 4393, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 4393, :column 21, :line 4393, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4393, :column 24, :line 4393, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4393, :column 30, :line 4393, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4393, :column 20, :line 4393, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4393, :column 21, :line 4393, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4393, :column 24, :line 4393, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4393, :column 30, :line 4393, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4393, :column 8, :line 4393, :file "cljs/core.cljs"} tv-pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches])} ->Atom ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches])} {:arglists (^cljs.core/Atom [^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches])} ->Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 1201, :column 10, :line 1201, :file "cljs/core.cljs"} PersistentHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5864, :column 10, :line 5864, :file "cljs/core.cljs"} PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 86, :end-line 5864, :column 28, :line 5864, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1835, :column 5, :line 1835, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1835, :column 7, :line 1835, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1835, :column 9, :line 1835, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1835, :column 11, :line 1835, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1830, :column 8, :line 1830, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1830, :column 15, :line 1830, :file "cljs/core.cljs"} unchecked-multiply ^{:arglists (^{:end-column 6, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1835, :column 5, :line 1835, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1835, :column 7, :line 1835, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1835, :column 9, :line 1835, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1835, :column 11, :line 1835, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1830, :column 8, :line 1830, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1830, :column 15, :line 1830, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1835, :column 5, :line 1835, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1835, :column 7, :line 1835, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1835, :column 11, :line 1835, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1835, :column 5, :line 1835, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1835, :column 7, :line 1835, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1835, :column 9, :line 1835, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1835, :column 11, :line 1835, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1830, :column 8, :line 1830, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1830, :column 15, :line 1830, :file "cljs/core.cljs"} unchecked-multiply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5805, :column 10, :line 5805, :file "cljs/core.cljs"} ArrayNodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5805, :column 10, :line 5805, :file "cljs/core.cljs"} ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 5805, :column 23, :line 5805, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 3135, :column 4, :line 3135, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3135, :column 5, :line 3135, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3133, :column 8, :line 3133, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3133, :column 16, :line 3133, :file "cljs/core.cljs"} even? ^{:arglists (^{:end-column 7, :end-line 3135, :column 4, :line 3135, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3135, :column 5, :line 3135, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3133, :column 8, :line 3133, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3133, :column 16, :line 3133, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 3135, :column 5, :line 3135, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3135, :column 4, :line 3135, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3135, :column 5, :line 3135, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3133, :column 8, :line 3133, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3133, :column 16, :line 3133, :file "cljs/core.cljs"} even?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1811, :column 21, :line 1811, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1811, :column 22, :line 1811, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1811, :column 7, :line 1811, :file "cljs/core.cljs"} unchecked-dec ^{:arglists (^{:end-column 24, :end-line 1811, :column 21, :line 1811, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1811, :column 22, :line 1811, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1811, :column 7, :line 1811, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1811, :column 22, :line 1811, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1811, :column 21, :line 1811, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1811, :column 22, :line 1811, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1811, :column 7, :line 1811, :file "cljs/core.cljs"} unchecked-dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 52, :end-line 5613, :column 39, :line 5613, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5613, :column 40, :line 5613, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5613, :column 44, :line 5613, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5613, :column 48, :line 5613, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5613, :column 8, :line 5613, :file "cljs/core.cljs"} hash-collision-node-find-index ^{:arglists (^{:end-column 52, :end-line 5613, :column 39, :line 5613, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5613, :column 40, :line 5613, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5613, :column 44, :line 5613, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5613, :column 48, :line 5613, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5613, :column 8, :line 5613, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 44, :end-line 5613, :column 40, :line 5613, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5613, :column 44, :line 5613, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5613, :column 48, :line 5613, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 52, :end-line 5613, :column 39, :line 5613, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5613, :column 40, :line 5613, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5613, :column 44, :line 5613, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5613, :column 48, :line 5613, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5613, :column 8, :line 5613, :file "cljs/core.cljs"} hash-collision-node-find-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4998, :column 32, :line 4998, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4998, :column 33, :line 4998, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4998, :column 37, :line 4998, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4998, :column 39, :line 4998, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4998, :column 7, :line 4998, :file "cljs/core.cljs"} persistent-array-map-seq ^{:arglists (^{:end-column 45, :end-line 4998, :column 32, :line 4998, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4998, :column 33, :line 4998, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4998, :column 37, :line 4998, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4998, :column 39, :line 4998, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4998, :column 7, :line 4998, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4998, :column 33, :line 4998, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4998, :column 37, :line 4998, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4998, :column 39, :line 4998, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4998, :column 32, :line 4998, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4998, :column 33, :line 4998, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4998, :column 37, :line 4998, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4998, :column 39, :line 4998, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4998, :column 7, :line 4998, :file "cljs/core.cljs"} persistent-array-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 2972, :column 10, :line 2972, :file "cljs/core.cljs"} MultiStepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 2972, :column 10, :line 2972, :file "cljs/core.cljs"} MultiStepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 2972, :column 23, :line 2972, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts], :protocols #{Object}}, ^{:arglists (^{:end-column 17, :end-line 2636, :column 4, :line 2636, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2636, :column 5, :line 2636, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2640, :column 4, :line 2640, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2640, :column 5, :line 2640, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2640, :column 10, :line 2640, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2635, :column 7, :line 2635, :file "cljs/core.cljs"} double-array ^{:arglists (^{:end-column 17, :end-line 2636, :column 4, :line 2636, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2636, :column 5, :line 2636, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2640, :column 4, :line 2640, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2640, :column 5, :line 2640, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2640, :column 10, :line 2640, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2635, :column 7, :line 2635, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2636, :column 5, :line 2636, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2640, :column 5, :line 2640, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2640, :column 10, :line 2640, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2636, :column 4, :line 2636, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2636, :column 5, :line 2636, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2640, :column 4, :line 2640, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2640, :column 5, :line 2640, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2640, :column 10, :line 2640, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2635, :column 7, :line 2635, :file "cljs/core.cljs"} double-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta])} ->EmptyList ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/EmptyList [^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta])} ->EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 935, :column 20, :line 935, :file "cljs/core.cljs"} seq-reduce ^{:arglists (^{:end-column 12, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1580, :column 7, :line 1580, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1584, :column 5, :line 1584, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1584, :column 7, :line 1584, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1584, :column 11, :line 1584, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1579, :column 8, :line 1579, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1580, :column 7, :line 1580, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1584, :column 5, :line 1584, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1584, :column 7, :line 1584, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1584, :column 11, :line 1584, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1580, :column 7, :line 1580, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1584, :column 5, :line 1584, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1584, :column 7, :line 1584, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1584, :column 11, :line 1584, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1579, :column 8, :line 1579, :file "cljs/core.cljs"} seq-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2684, :column 3, :line 2684, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} spread ^{:arglists (^{:end-column 12, :end-line 2684, :column 3, :line 2684, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} arglist]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2684, :column 3, :line 2684, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} spread, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6169, :column 21, :line 6169, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6169, :column 22, :line 6169, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6169, :column 26, :line 6169, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6169, :column 30, :line 6169, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6169, :column 34, :line 6169, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6169, :column 8, :line 6169, :file "cljs/core.cljs"} balance-left ^{:arglists (^{:end-column 40, :end-line 6169, :column 21, :line 6169, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6169, :column 22, :line 6169, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6169, :column 26, :line 6169, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6169, :column 30, :line 6169, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6169, :column 34, :line 6169, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6169, :column 8, :line 6169, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 6169, :column 22, :line 6169, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6169, :column 26, :line 6169, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6169, :column 30, :line 6169, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6169, :column 34, :line 6169, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6169, :column 21, :line 6169, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6169, :column 22, :line 6169, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6169, :column 26, :line 6169, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6169, :column 30, :line 6169, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6169, :column 34, :line 6169, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6169, :column 8, :line 6169, :file "cljs/core.cljs"} balance-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 2226, :column 17, :line 2226, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2226, :column 18, :line 2226, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2226, :column 8, :line 2226, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2226, :column 12, :line 2226, :file "cljs/core.cljs"} rseq ^{:arglists (^{:end-column 23, :end-line 2226, :column 17, :line 2226, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2226, :column 18, :line 2226, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2226, :column 8, :line 2226, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2226, :column 12, :line 2226, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj [^{:end-column 23, :end-line 2226, :column 18, :line 2226, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2226, :column 17, :line 2226, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2226, :column 18, :line 2226, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2226, :column 8, :line 2226, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2226, :column 12, :line 2226, :file "cljs/core.cljs"} rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8772, :column 3, :line 8772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8772, :column 4, :line 8772, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8767, :column 7, :line 8767, :file "cljs/core.cljs"} ex-cause ^{:arglists (^{:end-column 7, :end-line 8772, :column 3, :line 8772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8772, :column 4, :line 8772, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8767, :column 7, :line 8767, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8772, :column 4, :line 8772, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8772, :column 3, :line 8772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8772, :column 4, :line 8772, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8767, :column 7, :line 8767, :file "cljs/core.cljs"} ex-cause, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 387, :column 14, :line 387, :file "cljs/core.cljs"} IReset ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 387, :column 14, :line 387, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 387, :column 14, :line 387, :file "cljs/core.cljs"} IReset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 236, :column 14, :line 236, :file "cljs/core.cljs"} IEmptyableCollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 35, :end-line 236, :column 14, :line 236, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 236, :column 14, :line 236, :file "cljs/core.cljs"} IEmptyableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4916, :column 27, :line 4916, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4916, :column 28, :line 4916, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4916, :column 30, :line 4916, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4916, :column 8, :line 4916, :file "cljs/core.cljs"} array-map-index-of ^{:arglists (^{:end-column 32, :end-line 4916, :column 27, :line 4916, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4916, :column 28, :line 4916, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4916, :column 30, :line 4916, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4916, :column 8, :line 4916, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 4916, :column 28, :line 4916, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4916, :column 30, :line 4916, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4916, :column 27, :line 4916, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4916, :column 28, :line 4916, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4916, :column 30, :line 4916, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4916, :column 8, :line 4916, :file "cljs/core.cljs"} array-map-index-of, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8763, :column 3, :line 8763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8763, :column 4, :line 8763, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8759, :column 7, :line 8759, :file "cljs/core.cljs"} ex-message ^{:arglists (^{:end-column 7, :end-line 8763, :column 3, :line 8763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8763, :column 4, :line 8763, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8759, :column 7, :line 8759, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8763, :column 4, :line 8763, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8763, :column 3, :line 8763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8763, :column 4, :line 8763, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8759, :column 7, :line 8759, :file "cljs/core.cljs"} ex-message, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7726, :column 20, :line 7726, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7726, :column 21, :line 7726, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7726, :column 7, :line 7726, :file "cljs/core.cljs"} string-print ^{:arglists (^{:end-column 23, :end-line 7726, :column 20, :line 7726, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7726, :column 21, :line 7726, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7726, :column 7, :line 7726, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 23, :end-line 7726, :column 21, :line 7726, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7726, :column 20, :line 7726, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7726, :column 21, :line 7726, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7726, :column 7, :line 7726, :file "cljs/core.cljs"} string-print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1788, :column 21, :line 1788, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1788, :column 22, :line 1788, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} float ^{:arglists (^{:end-column 24, :end-line 1788, :column 21, :line 1788, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1788, :column 22, :line 1788, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1788, :column 22, :line 1788, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1788, :column 21, :line 1788, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1788, :column 22, :line 1788, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8097, :column 1, :line 8097, :file "cljs/core.cljs"} fixture2 ^{:end-column 17, :end-line 8097, :column 1, :line 8097, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8097, :column 1, :line 8097, :file "cljs/core.cljs"} fixture2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} IRecord ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} IRecord, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 3324, :column 10, :line 3324, :file "cljs/core.cljs"} pr-str ^{:arglists (^{:end-column 11, :end-line 7866, :column 3, :line 7866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7866, :column 4, :line 7866, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7866, :column 6, :line 7866, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7864, :column 7, :line 7864, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7866, :column 6, :line 7866, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7866, :column 3, :line 7866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7866, :column 4, :line 7866, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7866, :column 6, :line 7866, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7864, :column 7, :line 7864, :file "cljs/core.cljs"} pr-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 3936, :column 32, :line 3936, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3936, :column 33, :line 3936, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3936, :column 8, :line 3936, :file "cljs/core.cljs"} first-array-for-longvec ^{:arglists (^{:end-column 36, :end-line 3936, :column 32, :line 3936, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3936, :column 33, :line 3936, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3936, :column 8, :line 3936, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 3936, :column 33, :line 3936, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 3936, :column 32, :line 3936, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3936, :column 33, :line 3936, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3936, :column 8, :line 3936, :file "cljs/core.cljs"} first-array-for-longvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2694, :column 4, :line 2694, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2694, :column 5, :line 2694, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2695, :column 4, :line 2695, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2695, :column 5, :line 2695, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2695, :column 7, :line 2695, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2703, :column 4, :line 2703, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2703, :column 5, :line 2703, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2703, :column 7, :line 2703, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2703, :column 9, :line 2703, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2703, :column 11, :line 2703, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} concat ^{:arglists (^{:end-column 6, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2694, :column 4, :line 2694, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2694, :column 5, :line 2694, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2695, :column 4, :line 2695, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2695, :column 5, :line 2695, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2695, :column 7, :line 2695, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2703, :column 4, :line 2703, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2703, :column 5, :line 2703, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2703, :column 7, :line 2703, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2703, :column 9, :line 2703, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2703, :column 11, :line 2703, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2694, :column 5, :line 2694, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2695, :column 5, :line 2695, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2695, :column 7, :line 2695, :file "cljs/core.cljs"} y] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2703, :column 5, :line 2703, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2703, :column 7, :line 2703, :file "cljs/core.cljs"} y & ^{:end-column 14, :end-line 2703, :column 11, :line 2703, :file "cljs/core.cljs"} zs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2694, :column 4, :line 2694, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2694, :column 5, :line 2694, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2695, :column 4, :line 2695, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2695, :column 5, :line 2695, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2695, :column 7, :line 2695, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2703, :column 4, :line 2703, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2703, :column 5, :line 2703, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2703, :column 7, :line 2703, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2703, :column 9, :line 2703, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2703, :column 11, :line 2703, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} concat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 8504, :column 13, :line 8504, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8504, :column 14, :line 8504, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8504, :column 4, :line 8504, :file "cljs/core.cljs"} -methods ^{:arglists (^{:end-column 17, :end-line 8504, :column 13, :line 8504, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8504, :column 14, :line 8504, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8504, :column 4, :line 8504, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8504, :column 14, :line 8504, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8504, :column 13, :line 8504, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8504, :column 14, :line 8504, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8504, :column 4, :line 8504, :file "cljs/core.cljs"} -methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 286, :column 14, :line 286, :file "cljs/core.cljs"} IDerefWithTimeout ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 286, :column 14, :line 286, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 286, :column 14, :line 286, :file "cljs/core.cljs"} IDerefWithTimeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 593, :column 4, :line 593, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 593, :column 5, :line 593, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 597, :column 8, :line 597, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 592, :column 7, :line 592, :file "cljs/core.cljs"} symbol ^{:arglists (^{:end-column 10, :end-line 593, :column 4, :line 593, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 593, :column 5, :line 593, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 597, :column 8, :line 597, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 592, :column 7, :line 592, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 593, :column 5, :line 593, :file "cljs/core.cljs"} name] ^cljs.core/Symbol [^{:end-column 8, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 597, :column 8, :line 597, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 593, :column 4, :line 593, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 593, :column 5, :line 593, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 597, :column 8, :line 597, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 592, :column 7, :line 592, :file "cljs/core.cljs"} symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2587, :column 3, :line 2587, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2584, :column 7, :line 2584, :file "cljs/core.cljs"} to-array-2d ^{:arglists (^{:end-column 9, :end-line 2587, :column 3, :line 2587, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2584, :column 7, :line 2584, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 9, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2587, :column 3, :line 2587, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2584, :column 7, :line 2584, :file "cljs/core.cljs"} to-array-2d, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4252, :column 10, :line 4252, :file "cljs/core.cljs"} Subvec {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4252, :column 10, :line 4252, :file "cljs/core.cljs"} Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 4252, :column 17, :line 4252, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8736, :column 10, :line 8736, :file "cljs/core.cljs"} ExceptionInfo {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8736, :column 10, :line 8736, :file "cljs/core.cljs"} ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 44, :end-line 8736, :column 24, :line 8736, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause], :protocols #{}}, ^{:declared true, :end-column 14, :end-line 1850, :column 10, :line 1850, :file "cljs/core.cljs"} mod ^{:arglists (^{:end-column 8, :end-line 1910, :column 3, :line 1910, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1910, :column 4, :line 1910, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1910, :column 6, :line 1910, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1908, :column 7, :line 1908, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1910, :column 4, :line 1910, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1910, :column 6, :line 1910, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1910, :column 3, :line 1910, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1910, :column 4, :line 1910, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1910, :column 6, :line 1910, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1908, :column 7, :line 1908, :file "cljs/core.cljs"} mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 273, :column 14, :line 273, :file "cljs/core.cljs"} ISet ^{:impls #{cljs.core/PersistentHashSet cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 19, :end-line 273, :column 14, :line 273, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 273, :column 14, :line 273, :file "cljs/core.cljs"} ISet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1315, :column 3, :line 1315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1315, :column 4, :line 1315, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} pop ^{:arglists (^{:end-column 9, :end-line 1315, :column 3, :line 1315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1315, :column 4, :line 1315, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1315, :column 4, :line 1315, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1315, :column 3, :line 1315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1315, :column 4, :line 1315, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} IPending ^{:impls #{cljs.core/Delay}, :protocol-symbol true, :end-column 23, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} IPending, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 325, :column 15, :line 325, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 325, :column 16, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 325, :column 21, :line 325, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} -entry-key ^{:arglists (^{:end-column 27, :end-line 325, :column 15, :line 325, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 325, :column 16, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 325, :column 21, :line 325, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 325, :column 16, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 325, :column 21, :line 325, :file "cljs/core.cljs"} entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 325, :column 15, :line 325, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 325, :column 16, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 325, :column 21, :line 325, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} -entry-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 3970, :column 17, :line 3970, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3970, :column 18, :line 3970, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3970, :column 21, :line 3970, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3970, :column 27, :line 3970, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3970, :column 8, :line 3970, :file "cljs/core.cljs"} pop-tail ^{:arglists (^{:end-column 32, :end-line 3970, :column 17, :line 3970, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3970, :column 18, :line 3970, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3970, :column 21, :line 3970, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3970, :column 27, :line 3970, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3970, :column 8, :line 3970, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 3970, :column 18, :line 3970, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3970, :column 21, :line 3970, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3970, :column 27, :line 3970, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 3970, :column 17, :line 3970, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3970, :column 18, :line 3970, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3970, :column 21, :line 3970, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3970, :column 27, :line 3970, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3970, :column 8, :line 3970, :file "cljs/core.cljs"} pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2768, :column 4, :line 2768, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2768, :column 5, :line 2768, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2768, :column 11, :line 2768, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2770, :column 15, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2770, :column 17, :line 2770, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2766, :column 7, :line 2766, :file "cljs/core.cljs"} dissoc! ^{:arglists (^{:end-column 15, :end-line 2768, :column 4, :line 2768, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2768, :column 5, :line 2768, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2768, :column 11, :line 2768, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2770, :column 15, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2770, :column 17, :line 2770, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2766, :column 7, :line 2766, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2768, :column 5, :line 2768, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2768, :column 11, :line 2768, :file "cljs/core.cljs"} key] ^^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} key & ^{:end-column 20, :end-line 2770, :column 17, :line 2770, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2768, :column 4, :line 2768, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2768, :column 5, :line 2768, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2768, :column 11, :line 2768, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2770, :column 15, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2770, :column 17, :line 2770, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2766, :column 7, :line 2766, :file "cljs/core.cljs"} dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7581, :column 4, :line 7581, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7581, :column 5, :line 7581, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7581, :column 7, :line 7581, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7586, :column 4, :line 7586, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7586, :column 5, :line 7586, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7586, :column 7, :line 7586, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7586, :column 12, :line 7586, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} reductions ^{:arglists (^{:end-column 12, :end-line 7581, :column 4, :line 7581, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7581, :column 5, :line 7581, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7581, :column 7, :line 7581, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7586, :column 4, :line 7586, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7586, :column 5, :line 7586, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7586, :column 7, :line 7586, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7586, :column 12, :line 7586, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 7581, :column 5, :line 7581, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7581, :column 7, :line 7581, :file "cljs/core.cljs"} coll] ^cljs.core/Cons [^{:end-column 7, :end-line 7586, :column 5, :line 7586, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7586, :column 7, :line 7586, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7586, :column 12, :line 7586, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7581, :column 4, :line 7581, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7581, :column 5, :line 7581, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7581, :column 7, :line 7581, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7586, :column 4, :line 7586, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7586, :column 5, :line 7586, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7586, :column 7, :line 7586, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7586, :column 12, :line 7586, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} reductions, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 856, :column 3, :line 856, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 856, :column 4, :line 856, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 854, :column 8, :line 854, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 854, :column 16, :line 854, :file "cljs/core.cljs"} indexed? ^{:arglists (^{:end-column 6, :end-line 856, :column 3, :line 856, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 856, :column 4, :line 856, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 854, :column 8, :line 854, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 854, :column 16, :line 854, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 856, :column 4, :line 856, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 856, :column 3, :line 856, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 856, :column 4, :line 856, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 854, :column 8, :line 854, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 854, :column 16, :line 854, :file "cljs/core.cljs"} indexed?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1691, :column 4, :line 1691, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1691, :column 5, :line 1691, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1692, :column 4, :line 1692, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1692, :column 5, :line 1692, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1692, :column 7, :line 1692, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1693, :column 4, :line 1693, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1693, :column 5, :line 1693, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1693, :column 7, :line 1693, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1693, :column 9, :line 1693, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1693, :column 11, :line 1693, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1688, :column 8, :line 1688, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1688, :column 15, :line 1688, :file "cljs/core.cljs"} - ^{:arglists (^{:end-column 7, :end-line 1691, :column 4, :line 1691, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1691, :column 5, :line 1691, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1692, :column 4, :line 1692, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1692, :column 5, :line 1692, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1692, :column 7, :line 1692, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1693, :column 4, :line 1693, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1693, :column 5, :line 1693, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1693, :column 7, :line 1693, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1693, :column 9, :line 1693, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1693, :column 11, :line 1693, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1688, :column 8, :line 1688, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1688, :column 15, :line 1688, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1691, :column 5, :line 1691, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1692, :column 5, :line 1692, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1692, :column 7, :line 1692, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1693, :column 5, :line 1693, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1693, :column 7, :line 1693, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1693, :column 11, :line 1693, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1691, :column 4, :line 1691, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1691, :column 5, :line 1691, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1692, :column 4, :line 1692, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1692, :column 5, :line 1692, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1692, :column 7, :line 1692, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1693, :column 4, :line 1693, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1693, :column 5, :line 1693, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1693, :column 7, :line 1693, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1693, :column 9, :line 1693, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1693, :column 11, :line 1693, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1688, :column 8, :line 1688, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1688, :column 15, :line 1688, :file "cljs/core.cljs"} -, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 302, :column 20, :line 302, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 302, :column 21, :line 302, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 302, :column 13, :line 302, :file "cljs/core.cljs"} -equiv ^{:arglists (^{:end-column 29, :end-line 302, :column 20, :line 302, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 302, :column 21, :line 302, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 302, :column 13, :line 302, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 302, :column 21, :line 302, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 302, :column 20, :line 302, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 302, :column 21, :line 302, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 302, :column 13, :line 302, :file "cljs/core.cljs"} -equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr])} ->ArrayNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/ArrayNode [^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr])} ->ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2758, :column 4, :line 2758, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2758, :column 5, :line 2758, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2758, :column 11, :line 2758, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2758, :column 15, :line 2758, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2760, :column 4, :line 2760, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2760, :column 5, :line 2760, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2760, :column 11, :line 2760, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2760, :column 15, :line 2760, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2760, :column 19, :line 2760, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2760, :column 21, :line 2760, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2754, :column 7, :line 2754, :file "cljs/core.cljs"} assoc! ^{:arglists (^{:end-column 19, :end-line 2758, :column 4, :line 2758, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2758, :column 5, :line 2758, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2758, :column 11, :line 2758, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2758, :column 15, :line 2758, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2760, :column 4, :line 2760, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2760, :column 5, :line 2760, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2760, :column 11, :line 2760, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2760, :column 15, :line 2760, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2760, :column 19, :line 2760, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2760, :column 21, :line 2760, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2754, :column 7, :line 2754, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2758, :column 5, :line 2758, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2758, :column 11, :line 2758, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2758, :column 15, :line 2758, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2760, :column 5, :line 2760, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2760, :column 11, :line 2760, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2760, :column 15, :line 2760, :file "cljs/core.cljs"} val & ^{:end-column 25, :end-line 2760, :column 21, :line 2760, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2758, :column 4, :line 2758, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2758, :column 5, :line 2758, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2758, :column 11, :line 2758, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2758, :column 15, :line 2758, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2760, :column 4, :line 2760, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2760, :column 5, :line 2760, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2760, :column 11, :line 2760, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2760, :column 15, :line 2760, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2760, :column 19, :line 2760, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2760, :column 21, :line 2760, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2754, :column 7, :line 2754, :file "cljs/core.cljs"} assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7234, :column 4, :line 7234, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7235, :column 4, :line 7235, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7235, :column 5, :line 7235, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7235, :column 7, :line 7235, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7233, :column 7, :line 7233, :file "cljs/core.cljs"} hash-set ^{:arglists (^{:end-column 6, :end-line 7234, :column 4, :line 7234, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7235, :column 4, :line 7235, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7235, :column 5, :line 7235, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7235, :column 7, :line 7235, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7233, :column 7, :line 7233, :file "cljs/core.cljs"} {:arglists (^cljs.core/ISet [] [& ^{:end-column 12, :end-line 7235, :column 7, :line 7235, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7234, :column 4, :line 7234, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7235, :column 4, :line 7235, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7235, :column 5, :line 7235, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7235, :column 7, :line 7235, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7233, :column 7, :line 7233, :file "cljs/core.cljs"} hash-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1652, :column 4, :line 1652, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1652, :column 5, :line 1652, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1652, :column 7, :line 1652, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1652, :column 12, :line 1652, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} reduce-kv ^{:arglists (^{:end-column 17, :end-line 1652, :column 4, :line 1652, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1652, :column 5, :line 1652, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1652, :column 7, :line 1652, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1652, :column 12, :line 1652, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1652, :column 5, :line 1652, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1652, :column 7, :line 1652, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1652, :column 12, :line 1652, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1652, :column 4, :line 1652, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1652, :column 5, :line 1652, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1652, :column 7, :line 1652, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1652, :column 12, :line 1652, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} reduce-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 3329, :column 3, :line 3329, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3329, :column 4, :line 3329, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 3329, :column 6, :line 3329, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 14, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} reset! ^{:declared true, :end-column 56, :end-line 5244, :column 49, :line 5244, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 56, :end-line 5244, :column 49, :line 5244, :file "cljs/core.cljs"} reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 2053, :column 14, :line 2053, :file "cljs/core.cljs"} name ^{:arglists (^{:end-column 6, :end-line 7288, :column 3, :line 7288, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7288, :column 4, :line 7288, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 7286, :column 7, :line 7286, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7288, :column 4, :line 7288, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7288, :column 3, :line 7288, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7288, :column 4, :line 7288, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 7286, :column 7, :line 7286, :file "cljs/core.cljs"} name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash])} ->RedNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/RedNode [^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash])} ->RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3944, :column 28, :line 3944, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3944, :column 29, :line 3944, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3944, :column 32, :line 3944, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3944, :column 8, :line 3944, :file "cljs/core.cljs"} unchecked-array-for ^{:arglists (^{:end-column 34, :end-line 3944, :column 28, :line 3944, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3944, :column 29, :line 3944, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3944, :column 32, :line 3944, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3944, :column 8, :line 3944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 3944, :column 29, :line 3944, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3944, :column 32, :line 3944, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3944, :column 28, :line 3944, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3944, :column 29, :line 3944, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3944, :column 32, :line 3944, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3944, :column 8, :line 3944, :file "cljs/core.cljs"} unchecked-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} Fn ^{:impls #{^{:end-column 23, :end-line 747, :column 14, :line 747, :file "cljs/core.cljs"} function cljs.core/MetaFn}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} Fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 997, :column 3, :line 997, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 997, :column 4, :line 997, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 995, :column 7, :line 995, :file "cljs/core.cljs"} ffirst ^{:arglists (^{:end-column 9, :end-line 997, :column 3, :line 997, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 997, :column 4, :line 997, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 995, :column 7, :line 995, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 997, :column 4, :line 997, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 997, :column 3, :line 997, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 997, :column 4, :line 997, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 995, :column 7, :line 995, :file "cljs/core.cljs"} ffirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7239, :column 4, :line 7239, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7239, :column 5, :line 7239, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7239, :column 7, :line 7239, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7237, :column 7, :line 7237, :file "cljs/core.cljs"} sorted-set ^{:arglists (^{:end-column 12, :end-line 7239, :column 4, :line 7239, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7239, :column 5, :line 7239, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7239, :column 7, :line 7239, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7237, :column 7, :line 7237, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 12, :end-line 7239, :column 7, :line 7239, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7239, :column 4, :line 7239, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7239, :column 5, :line 7239, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7239, :column 7, :line 7239, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7237, :column 7, :line 7237, :file "cljs/core.cljs"} sorted-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7856, :column 3, :line 7856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7856, :column 4, :line 7856, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7856, :column 9, :line 7856, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7853, :column 8, :line 7853, :file "cljs/core.cljs"} pr-with-opts ^{:arglists (^{:end-column 14, :end-line 7856, :column 3, :line 7856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7856, :column 4, :line 7856, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7856, :column 9, :line 7856, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7853, :column 8, :line 7853, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7856, :column 4, :line 7856, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7856, :column 9, :line 7856, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7856, :column 3, :line 7856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7856, :column 4, :line 7856, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7856, :column 9, :line 7856, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7853, :column 8, :line 7853, :file "cljs/core.cljs"} pr-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6620, :column 10, :line 6620, :file "cljs/core.cljs"} PersistentTreeMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6620, :column 10, :line 6620, :file "cljs/core.cljs"} PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 6620, :column 28, :line 6620, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 818, :column 4, :line 818, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 818, :column 5, :line 818, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 818, :column 9, :line 818, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 829, :column 4, :line 829, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 829, :column 5, :line 829, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 829, :column 9, :line 829, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 829, :column 11, :line 829, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 838, :column 4, :line 838, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 838, :column 5, :line 838, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 838, :column 9, :line 838, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 838, :column 11, :line 838, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 838, :column 15, :line 838, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 817, :column 8, :line 817, :file "cljs/core.cljs"} array-reduce ^{:arglists (^{:end-column 11, :end-line 818, :column 4, :line 818, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 818, :column 5, :line 818, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 818, :column 9, :line 818, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 829, :column 4, :line 829, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 829, :column 5, :line 829, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 829, :column 9, :line 829, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 829, :column 11, :line 829, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 838, :column 4, :line 838, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 838, :column 5, :line 838, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 838, :column 9, :line 838, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 838, :column 11, :line 838, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 838, :column 15, :line 838, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 817, :column 8, :line 817, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 818, :column 5, :line 818, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 818, :column 9, :line 818, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 829, :column 5, :line 829, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 829, :column 9, :line 829, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 829, :column 11, :line 829, :file "cljs/core.cljs"} val] [^{:end-column 9, :end-line 838, :column 5, :line 838, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 838, :column 9, :line 838, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 838, :column 11, :line 838, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 838, :column 15, :line 838, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 818, :column 4, :line 818, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 818, :column 5, :line 818, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 818, :column 9, :line 818, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 829, :column 4, :line 829, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 829, :column 5, :line 829, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 829, :column 9, :line 829, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 829, :column 11, :line 829, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 838, :column 4, :line 838, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 838, :column 5, :line 838, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 838, :column 9, :line 838, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 838, :column 11, :line 838, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 838, :column 15, :line 838, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 817, :column 8, :line 817, :file "cljs/core.cljs"} array-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 850, :column 8, :line 850, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 850, :column 16, :line 850, :file "cljs/core.cljs"} counted? ^{:arglists (^{:end-column 6, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 850, :column 8, :line 850, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 850, :column 16, :line 850, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 850, :column 8, :line 850, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 850, :column 16, :line 850, :file "cljs/core.cljs"} counted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8140, :column 4, :line 8140, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8140, :column 5, :line 8140, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 8147, :column 4, :line 8147, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8147, :column 5, :line 8147, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} coll]), :doc "maps f over coll and concatenates the results.  Thus function f\n  should return a collection.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 8136, :column 7, :line 8136, :file "cljs/core.cljs"} flatmap ^{:arglists (^{:end-column 7, :end-line 8140, :column 4, :line 8140, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8140, :column 5, :line 8140, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 8147, :column 4, :line 8147, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8147, :column 5, :line 8147, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} coll]), :doc "maps f over coll and concatenates the results.  Thus function f\n  should return a collection.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 8136, :column 7, :line 8136, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 8140, :column 5, :line 8140, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 8147, :column 5, :line 8147, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8140, :column 4, :line 8140, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8140, :column 5, :line 8140, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 8147, :column 4, :line 8147, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8147, :column 5, :line 8147, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} coll]), :doc "maps f over coll and concatenates the results.  Thus function f\n  should return a collection.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 8136, :column 7, :line 8136, :file "cljs/core.cljs"} flatmap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7896, :column 3, :line 7896, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7896, :column 4, :line 7896, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7896, :column 6, :line 7896, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7894, :column 7, :line 7894, :file "cljs/core.cljs"} println ^{:arglists (^{:end-column 11, :end-line 7896, :column 3, :line 7896, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7896, :column 4, :line 7896, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7896, :column 6, :line 7896, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7894, :column 7, :line 7894, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7896, :column 6, :line 7896, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7896, :column 3, :line 7896, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7896, :column 4, :line 7896, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7896, :column 6, :line 7896, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7894, :column 7, :line 7894, :file "cljs/core.cljs"} println, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3853, :column 3, :line 3853, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3853, :column 4, :line 3853, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3853, :column 6, :line 3853, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3853, :column 7, :line 3853, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3853, :column 9, :line 3853, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3853, :column 11, :line 3853, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3853, :column 15, :line 3853, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3849, :column 7, :line 3849, :file "cljs/core.cljs"} assoc-in ^{:arglists (^{:end-column 17, :end-line 3853, :column 3, :line 3853, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3853, :column 4, :line 3853, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3853, :column 6, :line 3853, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3853, :column 7, :line 3853, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3853, :column 9, :line 3853, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3853, :column 11, :line 3853, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3853, :column 15, :line 3853, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3849, :column 7, :line 3849, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3853, :column 4, :line 3853, :file "cljs/core.cljs"} m p__10006 ^{:end-column 17, :end-line 3853, :column 15, :line 3853, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3853, :column 3, :line 3853, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3853, :column 4, :line 3853, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3853, :column 6, :line 3853, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3853, :column 7, :line 3853, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3853, :column 9, :line 3853, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3853, :column 11, :line 3853, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3853, :column 15, :line 3853, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3849, :column 7, :line 3849, :file "cljs/core.cljs"} assoc-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6989, :column 10, :line 6989, :file "cljs/core.cljs"} PersistentHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6989, :column 10, :line 6989, :file "cljs/core.cljs"} PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 6989, :column 28, :line 6989, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1971, :column 3, :line 1971, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1971, :column 4, :line 1971, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1971, :column 6, :line 1971, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1969, :column 7, :line 1969, :file "cljs/core.cljs"} bit-test ^{:arglists (^{:end-column 8, :end-line 1971, :column 3, :line 1971, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1971, :column 4, :line 1971, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1971, :column 6, :line 1971, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1969, :column 7, :line 1969, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1971, :column 4, :line 1971, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1971, :column 6, :line 1971, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1971, :column 3, :line 1971, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1971, :column 4, :line 1971, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1971, :column 6, :line 1971, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1969, :column 7, :line 1969, :file "cljs/core.cljs"} bit-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5231, :column 10, :line 5231, :file "cljs/core.cljs"} TransientHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6001, :column 10, :line 6001, :file "cljs/core.cljs"} TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 6005, :column 27, :line 6001, :file "cljs/core.cljs"} [^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val], :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash])} ->PersistentHashMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentHashMap [^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash])} ->PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} ISwap ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} ISwap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 1380, :column 10, :line 1380, :file "cljs/core.cljs"} ChunkedCons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2488, :column 10, :line 2488, :file "cljs/core.cljs"} ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 2488, :column 22, :line 2488, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8278, :column 3, :line 8278, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8278, :column 4, :line 8278, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8273, :column 7, :line 8273, :file "cljs/core.cljs"} memoize ^{:arglists (^{:end-column 6, :end-line 8278, :column 3, :line 8278, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8278, :column 4, :line 8278, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8273, :column 7, :line 8273, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 8278, :column 4, :line 8278, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8278, :column 3, :line 8278, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8278, :column 4, :line 8278, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8273, :column 7, :line 8273, :file "cljs/core.cljs"} memoize, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8041, :column 3, :line 8041, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8041, :column 4, :line 8041, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8041, :column 9, :line 8041, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8041, :column 11, :line 8041, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8041, :column 13, :line 8041, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8035, :column 7, :line 8035, :file "cljs/core.cljs"} alter-meta! ^{:arglists (^{:end-column 18, :end-line 8041, :column 3, :line 8041, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8041, :column 4, :line 8041, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8041, :column 9, :line 8041, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8041, :column 11, :line 8041, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8041, :column 13, :line 8041, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8035, :column 7, :line 8035, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8041, :column 4, :line 8041, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8041, :column 9, :line 8041, :file "cljs/core.cljs"} f & ^{:end-column 18, :end-line 8041, :column 13, :line 8041, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8041, :column 3, :line 8041, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8041, :column 4, :line 8041, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8041, :column 9, :line 8041, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8041, :column 11, :line 8041, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8041, :column 13, :line 8041, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8035, :column 7, :line 8035, :file "cljs/core.cljs"} alter-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb])} ->StringBufferWriter ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb])} {:arglists (^cljs.core/StringBufferWriter [^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb])} ->StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2014, :column 22, :line 2014, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2014, :column 23, :line 2014, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2014, :column 8, :line 2014, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2014, :column 16, :line 2014, :file "cljs/core.cljs"} zero? ^{:arglists (^{:end-column 25, :end-line 2014, :column 22, :line 2014, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2014, :column 23, :line 2014, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2014, :column 8, :line 2014, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2014, :column 16, :line 2014, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 2014, :column 23, :line 2014, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2014, :column 22, :line 2014, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2014, :column 23, :line 2014, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2014, :column 8, :line 2014, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2014, :column 16, :line 2014, :file "cljs/core.cljs"} zero?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4368, :column 27, :line 4368, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4368, :column 28, :line 4368, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4368, :column 33, :line 4368, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4368, :column 8, :line 4368, :file "cljs/core.cljs"} tv-ensure-editable ^{:arglists (^{:end-column 38, :end-line 4368, :column 27, :line 4368, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4368, :column 28, :line 4368, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4368, :column 33, :line 4368, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4368, :column 8, :line 4368, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 4368, :column 28, :line 4368, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4368, :column 33, :line 4368, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4368, :column 27, :line 4368, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4368, :column 28, :line 4368, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4368, :column 33, :line 4368, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4368, :column 8, :line 4368, :file "cljs/core.cljs"} tv-ensure-editable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn* ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 281, :column 18, :line 281, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 281, :column 19, :line 281, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 281, :column 24, :line 281, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 281, :column 26, :line 281, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 281, :column 5, :line 281, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 281, :column 9, :line 281, :file "cljs/core.cljs"} -assoc-n ^{:arglists (^{:end-column 30, :end-line 281, :column 18, :line 281, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 281, :column 19, :line 281, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 281, :column 24, :line 281, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 281, :column 26, :line 281, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 281, :column 5, :line 281, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 281, :column 9, :line 281, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 281, :column 19, :line 281, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 281, :column 24, :line 281, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 281, :column 26, :line 281, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 281, :column 18, :line 281, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 281, :column 19, :line 281, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 281, :column 24, :line 281, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 281, :column 26, :line 281, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 281, :column 5, :line 281, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 281, :column 9, :line 281, :file "cljs/core.cljs"} -assoc-n, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1814, :column 25, :line 1814, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1814, :column 26, :line 1814, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1814, :column 7, :line 1814, :file "cljs/core.cljs"} unchecked-dec-int ^{:arglists (^{:end-column 28, :end-line 1814, :column 25, :line 1814, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1814, :column 26, :line 1814, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1814, :column 7, :line 1814, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1814, :column 26, :line 1814, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1814, :column 25, :line 1814, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1814, :column 26, :line 1814, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1814, :column 7, :line 1814, :file "cljs/core.cljs"} unchecked-dec-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2077, :column 18, :line 2077, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2077, :column 19, :line 2077, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2077, :column 8, :line 2077, :file "cljs/core.cljs"} hash-imap ^{:arglists (^{:end-column 21, :end-line 2077, :column 18, :line 2077, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2077, :column 19, :line 2077, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2077, :column 8, :line 2077, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 2077, :column 19, :line 2077, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2077, :column 18, :line 2077, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2077, :column 19, :line 2077, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2077, :column 8, :line 2077, :file "cljs/core.cljs"} hash-imap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8470, :column 3, :line 8470, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8470, :column 4, :line 8470, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8470, :column 6, :line 8470, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8470, :column 8, :line 8470, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8469, :column 8, :line 8469, :file "cljs/core.cljs"} dominates ^{:arglists (^{:end-column 21, :end-line 8470, :column 3, :line 8470, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8470, :column 4, :line 8470, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8470, :column 6, :line 8470, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8470, :column 8, :line 8470, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8469, :column 8, :line 8469, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8470, :column 4, :line 8470, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8470, :column 6, :line 8470, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8470, :column 8, :line 8470, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8470, :column 3, :line 8470, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8470, :column 4, :line 8470, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8470, :column 6, :line 8470, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8470, :column 8, :line 8470, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8469, :column 8, :line 8469, :file "cljs/core.cljs"} dominates, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2734, :column 7, :line 2734, :file "cljs/core.cljs"} persistent! ^{:arglists (^{:end-column 10, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2734, :column 7, :line 2734, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2734, :column 7, :line 2734, :file "cljs/core.cljs"} persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn! ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} nnext ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} nnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5242, :column 10, :line 5242, :file "cljs/core.cljs"} Box {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5242, :column 10, :line 5242, :file "cljs/core.cljs"} Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 29, :end-line 5242, :column 14, :line 5242, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val], :protocols #{}}, StringBuffer {:op :js-var, :ns goog.string, :name StringBuffer}, ^{:arglists (^{:end-column 40, :end-line 6194, :column 22, :line 6194, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6194, :column 23, :line 6194, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6194, :column 27, :line 6194, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6194, :column 31, :line 6194, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6194, :column 36, :line 6194, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6194, :column 8, :line 6194, :file "cljs/core.cljs"} balance-right ^{:arglists (^{:end-column 40, :end-line 6194, :column 22, :line 6194, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6194, :column 23, :line 6194, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6194, :column 27, :line 6194, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6194, :column 31, :line 6194, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6194, :column 36, :line 6194, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6194, :column 8, :line 6194, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6194, :column 23, :line 6194, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6194, :column 27, :line 6194, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6194, :column 31, :line 6194, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6194, :column 36, :line 6194, :file "cljs/core.cljs"} ins]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6194, :column 22, :line 6194, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6194, :column 23, :line 6194, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6194, :column 27, :line 6194, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6194, :column 31, :line 6194, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6194, :column 36, :line 6194, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6194, :column 8, :line 6194, :file "cljs/core.cljs"} balance-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 8507, :column 30, :line 8507, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8507, :column 31, :line 8507, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8507, :column 36, :line 8507, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8507, :column 8, :line 8507, :file "cljs/core.cljs"} throw-no-method-error ^{:arglists (^{:end-column 49, :end-line 8507, :column 30, :line 8507, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8507, :column 31, :line 8507, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8507, :column 36, :line 8507, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8507, :column 8, :line 8507, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 36, :end-line 8507, :column 31, :line 8507, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8507, :column 36, :line 8507, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 8507, :column 30, :line 8507, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8507, :column 31, :line 8507, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8507, :column 36, :line 8507, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8507, :column 8, :line 8507, :file "cljs/core.cljs"} throw-no-method-error, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8070, :column 3, :line 8070, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8070, :column 4, :line 8070, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8070, :column 9, :line 8070, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8070, :column 13, :line 8070, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8049, :column 7, :line 8049, :file "cljs/core.cljs"} add-watch ^{:arglists (^{:end-column 15, :end-line 8070, :column 3, :line 8070, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8070, :column 4, :line 8070, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8070, :column 9, :line 8070, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8070, :column 13, :line 8070, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8049, :column 7, :line 8049, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8070, :column 4, :line 8070, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8070, :column 9, :line 8070, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8070, :column 13, :line 8070, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8070, :column 3, :line 8070, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8070, :column 4, :line 8070, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8070, :column 9, :line 8070, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8070, :column 13, :line 8070, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8049, :column 7, :line 8049, :file "cljs/core.cljs"} add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3117, :column 3, :line 3117, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3117, :column 4, :line 3117, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3117, :column 9, :line 3117, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3114, :column 8, :line 3114, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3114, :column 16, :line 3114, :file "cljs/core.cljs"} not-every? ^{:arglists (^{:end-column 14, :end-line 3117, :column 3, :line 3117, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3117, :column 4, :line 3117, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3117, :column 9, :line 3117, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3114, :column 8, :line 3114, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3114, :column 16, :line 3114, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 3117, :column 4, :line 3117, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3117, :column 9, :line 3117, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3117, :column 3, :line 3117, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3117, :column 4, :line 3117, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3117, :column 9, :line 3117, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3114, :column 8, :line 3114, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3114, :column 16, :line 3114, :file "cljs/core.cljs"} not-every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1921, :column 3, :line 1921, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1921, :column 4, :line 1921, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1921, :column 6, :line 1921, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} rem ^{:arglists (^{:end-column 8, :end-line 1921, :column 3, :line 1921, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1921, :column 4, :line 1921, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1921, :column 6, :line 1921, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1921, :column 4, :line 1921, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1921, :column 6, :line 1921, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1921, :column 3, :line 1921, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1921, :column 4, :line 1921, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1921, :column 6, :line 1921, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} rem, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s])} ->Iterator ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s])} {:arglists (^cljs.core/Iterator [^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s])} ->Iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 7829, :column 24, :line 7829, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7829, :column 25, :line 7829, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7829, :column 30, :line 7829, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7829, :column 8, :line 7829, :file "cljs/core.cljs"} pr-sb-with-opts ^{:arglists (^{:end-column 35, :end-line 7829, :column 24, :line 7829, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7829, :column 25, :line 7829, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7829, :column 30, :line 7829, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7829, :column 8, :line 7829, :file "cljs/core.cljs"} {:arglists (^goog.string/StringBuffer [^{:end-column 30, :end-line 7829, :column 25, :line 7829, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7829, :column 30, :line 7829, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 7829, :column 24, :line 7829, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7829, :column 25, :line 7829, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7829, :column 30, :line 7829, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7829, :column 8, :line 7829, :file "cljs/core.cljs"} pr-sb-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4856, :column 10, :line 4856, :file "cljs/core.cljs"} SetEntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4856, :column 10, :line 4856, :file "cljs/core.cljs"} SetEntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4856, :column 29, :line 4856, :file "cljs/core.cljs"} [^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5305, :column 10, :line 5305, :file "cljs/core.cljs"} BitmapIndexedNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5305, :column 10, :line 5305, :file "cljs/core.cljs"} BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 5305, :column 28, :line 5305, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash])} ->NodeSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/NodeSeq [^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash])} ->NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3124, :column 3, :line 3124, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3124, :column 4, :line 3124, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3124, :column 9, :line 3124, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3119, :column 7, :line 3119, :file "cljs/core.cljs"} some ^{:arglists (^{:end-column 14, :end-line 3124, :column 3, :line 3124, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3124, :column 4, :line 3124, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3124, :column 9, :line 3124, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3119, :column 7, :line 3119, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3124, :column 4, :line 3124, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3124, :column 9, :line 3124, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3124, :column 3, :line 3124, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3124, :column 4, :line 3124, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3124, :column 9, :line 3124, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3119, :column 7, :line 3119, :file "cljs/core.cljs"} some, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 381, :column 14, :line 381, :file "cljs/core.cljs"} INamed ^{:impls #{cljs.core/Keyword cljs.core/Symbol}, :protocol-symbol true, :end-column 21, :end-line 381, :column 14, :line 381, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 381, :column 14, :line 381, :file "cljs/core.cljs"} INamed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val])} ->Box ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val])} {:arglists (^cljs.core/Box [^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val])} ->Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} IReduce ^{:impls #{cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ArrayChunk cljs.core/Iteration cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} IReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3576, :column 4, :line 3576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3576, :column 5, :line 3576, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3588, :column 4, :line 3588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3588, :column 5, :line 3588, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3588, :column 7, :line 3588, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3573, :column 7, :line 3573, :file "cljs/core.cljs"} drop ^{:arglists (^{:end-column 7, :end-line 3576, :column 4, :line 3576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3576, :column 5, :line 3576, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3588, :column 4, :line 3588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3588, :column 5, :line 3588, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3588, :column 7, :line 3588, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3573, :column 7, :line 3573, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3576, :column 5, :line 3576, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3588, :column 5, :line 3588, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3588, :column 7, :line 3588, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3576, :column 4, :line 3576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3576, :column 5, :line 3576, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3588, :column 4, :line 3588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3588, :column 5, :line 3588, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3588, :column 7, :line 3588, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3573, :column 7, :line 3573, :file "cljs/core.cljs"} drop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1389, :column 4, :line 1389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1389, :column 5, :line 1389, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1389, :column 7, :line 1389, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1386, :column 7, :line 1386, :file "cljs/core.cljs"} js-obj ^{:arglists (^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1389, :column 4, :line 1389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1389, :column 5, :line 1389, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1389, :column 7, :line 1389, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1386, :column 7, :line 1386, :file "cljs/core.cljs"} {:arglists (^object [] [& ^{:end-column 15, :end-line 1389, :column 7, :line 1389, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1389, :column 4, :line 1389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1389, :column 5, :line 1389, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1389, :column 7, :line 1389, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1386, :column 7, :line 1386, :file "cljs/core.cljs"} js-obj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} ITransientCollection ^{:impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientHashSet}, :protocol-symbol true, :end-column 35, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} ITransientCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3278, :column 10, :line 3278, :file "cljs/core.cljs"} Atom {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3278, :column 10, :line 3278, :file "cljs/core.cljs"} Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 3278, :column 15, :line 3278, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches], :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}}, ^{:arglists (^{:end-column 12, :end-line 1100, :column 4, :line 1100, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1100, :column 5, :line 1100, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1100, :column 10, :line 1100, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1128, :column 4, :line 1128, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1128, :column 5, :line 1128, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1128, :column 10, :line 1128, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1128, :column 12, :line 1128, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1095, :column 7, :line 1095, :file "cljs/core.cljs"} nth ^{:arglists (^{:end-column 12, :end-line 1100, :column 4, :line 1100, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1100, :column 5, :line 1100, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1100, :column 10, :line 1100, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1128, :column 4, :line 1128, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1128, :column 5, :line 1128, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1128, :column 10, :line 1128, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1128, :column 12, :line 1128, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1095, :column 7, :line 1095, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1100, :column 5, :line 1100, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1100, :column 10, :line 1100, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 1128, :column 5, :line 1128, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1128, :column 10, :line 1128, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1128, :column 12, :line 1128, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1100, :column 4, :line 1100, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1100, :column 5, :line 1100, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1100, :column 10, :line 1100, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1128, :column 4, :line 1128, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1128, :column 5, :line 1128, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1128, :column 10, :line 1128, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1128, :column 12, :line 1128, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1095, :column 7, :line 1095, :file "cljs/core.cljs"} nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1363, :column 3, :line 1363, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1363, :column 4, :line 1363, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1361, :column 8, :line 1361, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1361, :column 16, :line 1361, :file "cljs/core.cljs"} sorted? ^{:arglists (^{:end-column 6, :end-line 1363, :column 3, :line 1363, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1363, :column 4, :line 1363, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1361, :column 8, :line 1361, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1361, :column 16, :line 1361, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1363, :column 4, :line 1363, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1363, :column 3, :line 1363, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1363, :column 4, :line 1363, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1361, :column 8, :line 1361, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1361, :column 16, :line 1361, :file "cljs/core.cljs"} sorted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil? ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3643, :column 3, :line 3643, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3643, :column 4, :line 3643, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3643, :column 6, :line 3643, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} split-at ^{:arglists (^{:end-column 11, :end-line 3643, :column 3, :line 3643, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3643, :column 4, :line 3643, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3643, :column 6, :line 3643, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 6, :end-line 3643, :column 4, :line 3643, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3643, :column 6, :line 3643, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3643, :column 3, :line 3643, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3643, :column 4, :line 3643, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3643, :column 6, :line 3643, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} split-at, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 6987, :column 10, :line 6987, :file "cljs/core.cljs"} TransientHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7082, :column 10, :line 7082, :file "cljs/core.cljs"} TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 7082, :column 27, :line 7082, :file "cljs/core.cljs"} [^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map], :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, ^{:arglists (^{:end-column 35, :end-line 4931, :column 28, :line 4931, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4931, :column 29, :line 4931, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4931, :column 31, :line 4931, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4931, :column 33, :line 4931, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4931, :column 8, :line 4931, :file "cljs/core.cljs"} array-map-extend-kv ^{:arglists (^{:end-column 35, :end-line 4931, :column 28, :line 4931, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4931, :column 29, :line 4931, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4931, :column 31, :line 4931, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4931, :column 33, :line 4931, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4931, :column 8, :line 4931, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 31, :end-line 4931, :column 29, :line 4931, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4931, :column 31, :line 4931, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4931, :column 33, :line 4931, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4931, :column 28, :line 4931, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4931, :column 29, :line 4931, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4931, :column 31, :line 4931, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4931, :column 33, :line 4931, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4931, :column 8, :line 4931, :file "cljs/core.cljs"} array-map-extend-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7846, :column 3, :line 7846, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7846, :column 4, :line 7846, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7846, :column 9, :line 7846, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} prn-str-with-opts ^{:arglists (^{:end-column 14, :end-line 7846, :column 3, :line 7846, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7846, :column 4, :line 7846, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7846, :column 9, :line 7846, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7846, :column 4, :line 7846, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7846, :column 9, :line 7846, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7846, :column 3, :line 7846, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7846, :column 4, :line 7846, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7846, :column 9, :line 7846, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} prn-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 8169, :column 4, :line 8169, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8169, :column 5, :line 8169, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8171, :column 4, :line 8171, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8171, :column 5, :line 8171, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8171, :column 10, :line 8171, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8166, :column 7, :line 8166, :file "cljs/core.cljs"} random-sample ^{:arglists (^{:end-column 10, :end-line 8169, :column 4, :line 8169, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8169, :column 5, :line 8169, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8171, :column 4, :line 8171, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8171, :column 5, :line 8171, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8171, :column 10, :line 8171, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8166, :column 7, :line 8166, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 8169, :column 5, :line 8169, :file "cljs/core.cljs"} prob] ^cljs.core/LazySeq [^{:end-column 10, :end-line 8171, :column 5, :line 8171, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8171, :column 10, :line 8171, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 8169, :column 4, :line 8169, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8169, :column 5, :line 8169, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8171, :column 4, :line 8171, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8171, :column 5, :line 8171, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8171, :column 10, :line 8171, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8166, :column 7, :line 8166, :file "cljs/core.cljs"} random-sample, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6973, :column 3, :line 6973, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6973, :column 4, :line 6973, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6973, :column 8, :line 6973, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6971, :column 7, :line 6971, :file "cljs/core.cljs"} select-keys ^{:arglists (^{:end-column 15, :end-line 6973, :column 3, :line 6973, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6973, :column 4, :line 6973, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6973, :column 8, :line 6973, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6971, :column 7, :line 6971, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap [^{:end-column 8, :end-line 6973, :column 4, :line 6973, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6973, :column 8, :line 6973, :file "cljs/core.cljs"} keyseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6973, :column 3, :line 6973, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6973, :column 4, :line 6973, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6973, :column 8, :line 6973, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6971, :column 7, :line 6971, :file "cljs/core.cljs"} select-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} bit-and ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} bit-and, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2675, :column 22, :line 2675, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2675, :column 23, :line 2675, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2675, :column 25, :line 2675, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2675, :column 8, :line 2675, :file "cljs/core.cljs"} bounded-count ^{:arglists (^{:end-column 27, :end-line 2675, :column 22, :line 2675, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2675, :column 23, :line 2675, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2675, :column 25, :line 2675, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2675, :column 8, :line 2675, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2675, :column 23, :line 2675, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2675, :column 25, :line 2675, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2675, :column 22, :line 2675, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2675, :column 23, :line 2675, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2675, :column 25, :line 2675, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2675, :column 8, :line 2675, :file "cljs/core.cljs"} bounded-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 25, :end-line 8082, :column 1, :line 8082, :file "cljs/core.cljs"} gensym_counter ^{:end-column 25, :end-line 8082, :column 1, :line 8082, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 25, :end-line 8082, :column 1, :line 8082, :file "cljs/core.cljs"} gensym_counter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2719, :column 4, :line 2719, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2719, :column 5, :line 2719, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2720, :column 4, :line 2720, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2720, :column 5, :line 2720, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2721, :column 7, :line 2721, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2722, :column 7, :line 2722, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2722, :column 9, :line 2722, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2722, :column 11, :line 2722, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2723, :column 9, :line 2723, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2723, :column 11, :line 2723, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2723, :column 13, :line 2723, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2723, :column 15, :line 2723, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2716, :column 7, :line 2716, :file "cljs/core.cljs"} list* ^{:arglists (^{:end-column 10, :end-line 2719, :column 4, :line 2719, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2719, :column 5, :line 2719, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2720, :column 4, :line 2720, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2720, :column 5, :line 2720, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2721, :column 7, :line 2721, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2722, :column 7, :line 2722, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2722, :column 9, :line 2722, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2722, :column 11, :line 2722, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2723, :column 9, :line 2723, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2723, :column 11, :line 2723, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2723, :column 13, :line 2723, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2723, :column 15, :line 2723, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2716, :column 7, :line 2716, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 10, :end-line 2719, :column 5, :line 2719, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2720, :column 5, :line 2720, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2721, :column 7, :line 2721, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2722, :column 7, :line 2722, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2722, :column 9, :line 2722, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2722, :column 11, :line 2722, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2723, :column 9, :line 2723, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2723, :column 11, :line 2723, :file "cljs/core.cljs"} d & ^{:end-column 20, :end-line 2723, :column 15, :line 2723, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2719, :column 4, :line 2719, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2719, :column 5, :line 2719, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2720, :column 4, :line 2720, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2720, :column 5, :line 2720, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2721, :column 7, :line 2721, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2722, :column 7, :line 2722, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2722, :column 9, :line 2722, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2722, :column 11, :line 2722, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2723, :column 9, :line 2723, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2723, :column 11, :line 2723, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2723, :column 13, :line 2723, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2723, :column 15, :line 2723, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2716, :column 7, :line 2716, :file "cljs/core.cljs"} list*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash])} ->Keyword ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash])} {:arglists (^cljs.core/Keyword [^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash])} ->Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3864, :column 4, :line 3864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3864, :column 5, :line 3864, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3864, :column 7, :line 3864, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3864, :column 8, :line 3864, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3864, :column 10, :line 3864, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3864, :column 12, :line 3864, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3864, :column 16, :line 3864, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3868, :column 8, :line 3868, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3868, :column 12, :line 3868, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3868, :column 16, :line 3868, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3868, :column 18, :line 3868, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3872, :column 4, :line 3872, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3872, :column 5, :line 3872, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3872, :column 7, :line 3872, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3872, :column 8, :line 3872, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3872, :column 10, :line 3872, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3872, :column 12, :line 3872, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3872, :column 16, :line 3872, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3872, :column 18, :line 3872, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3872, :column 20, :line 3872, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3876, :column 4, :line 3876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3876, :column 5, :line 3876, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3876, :column 7, :line 3876, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3876, :column 8, :line 3876, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3876, :column 10, :line 3876, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3876, :column 12, :line 3876, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3876, :column 16, :line 3876, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3876, :column 18, :line 3876, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3876, :column 20, :line 3876, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3876, :column 22, :line 3876, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3880, :column 4, :line 3880, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3880, :column 5, :line 3880, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3880, :column 7, :line 3880, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3880, :column 8, :line 3880, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3880, :column 10, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3880, :column 12, :line 3880, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3880, :column 16, :line 3880, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3880, :column 18, :line 3880, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3880, :column 20, :line 3880, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3880, :column 22, :line 3880, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3880, :column 24, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3880, :column 26, :line 3880, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3858, :column 7, :line 3858, :file "cljs/core.cljs"} update-in ^{:arglists (^{:end-column 18, :end-line 3864, :column 4, :line 3864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3864, :column 5, :line 3864, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3864, :column 7, :line 3864, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3864, :column 8, :line 3864, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3864, :column 10, :line 3864, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3864, :column 12, :line 3864, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3864, :column 16, :line 3864, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3868, :column 8, :line 3868, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3868, :column 12, :line 3868, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3868, :column 16, :line 3868, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3868, :column 18, :line 3868, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3872, :column 4, :line 3872, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3872, :column 5, :line 3872, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3872, :column 7, :line 3872, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3872, :column 8, :line 3872, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3872, :column 10, :line 3872, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3872, :column 12, :line 3872, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3872, :column 16, :line 3872, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3872, :column 18, :line 3872, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3872, :column 20, :line 3872, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3876, :column 4, :line 3876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3876, :column 5, :line 3876, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3876, :column 7, :line 3876, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3876, :column 8, :line 3876, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3876, :column 10, :line 3876, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3876, :column 12, :line 3876, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3876, :column 16, :line 3876, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3876, :column 18, :line 3876, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3876, :column 20, :line 3876, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3876, :column 22, :line 3876, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3880, :column 4, :line 3880, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3880, :column 5, :line 3880, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3880, :column 7, :line 3880, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3880, :column 8, :line 3880, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3880, :column 10, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3880, :column 12, :line 3880, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3880, :column 16, :line 3880, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3880, :column 18, :line 3880, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3880, :column 20, :line 3880, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3880, :column 22, :line 3880, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3880, :column 24, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3880, :column 26, :line 3880, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3858, :column 7, :line 3858, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3864, :column 5, :line 3864, :file "cljs/core.cljs"} m p__10009 ^{:end-column 18, :end-line 3864, :column 16, :line 3864, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m p__10012 ^{:end-column 18, :end-line 3868, :column 16, :line 3868, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3868, :column 18, :line 3868, :file "cljs/core.cljs"} a] [^{:end-column 7, :end-line 3872, :column 5, :line 3872, :file "cljs/core.cljs"} m p__10015 ^{:end-column 18, :end-line 3872, :column 16, :line 3872, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3872, :column 18, :line 3872, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3872, :column 20, :line 3872, :file "cljs/core.cljs"} b] [^{:end-column 7, :end-line 3876, :column 5, :line 3876, :file "cljs/core.cljs"} m p__10018 ^{:end-column 18, :end-line 3876, :column 16, :line 3876, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3876, :column 18, :line 3876, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3876, :column 20, :line 3876, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3876, :column 22, :line 3876, :file "cljs/core.cljs"} c] [^{:end-column 7, :end-line 3880, :column 5, :line 3880, :file "cljs/core.cljs"} m p__10021 ^{:end-column 18, :end-line 3880, :column 16, :line 3880, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3880, :column 18, :line 3880, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3880, :column 20, :line 3880, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3880, :column 22, :line 3880, :file "cljs/core.cljs"} c & ^{:end-column 31, :end-line 3880, :column 26, :line 3880, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3864, :column 4, :line 3864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3864, :column 5, :line 3864, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3864, :column 7, :line 3864, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3864, :column 8, :line 3864, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3864, :column 10, :line 3864, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3864, :column 12, :line 3864, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3864, :column 16, :line 3864, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3868, :column 8, :line 3868, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3868, :column 12, :line 3868, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3868, :column 16, :line 3868, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3868, :column 18, :line 3868, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3872, :column 4, :line 3872, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3872, :column 5, :line 3872, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3872, :column 7, :line 3872, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3872, :column 8, :line 3872, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3872, :column 10, :line 3872, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3872, :column 12, :line 3872, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3872, :column 16, :line 3872, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3872, :column 18, :line 3872, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3872, :column 20, :line 3872, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3876, :column 4, :line 3876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3876, :column 5, :line 3876, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3876, :column 7, :line 3876, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3876, :column 8, :line 3876, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3876, :column 10, :line 3876, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3876, :column 12, :line 3876, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3876, :column 16, :line 3876, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3876, :column 18, :line 3876, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3876, :column 20, :line 3876, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3876, :column 22, :line 3876, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3880, :column 4, :line 3880, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3880, :column 5, :line 3880, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3880, :column 7, :line 3880, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3880, :column 8, :line 3880, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3880, :column 10, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3880, :column 12, :line 3880, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3880, :column 16, :line 3880, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3880, :column 18, :line 3880, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3880, :column 20, :line 3880, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3880, :column 22, :line 3880, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3880, :column 24, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3880, :column 26, :line 3880, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3858, :column 7, :line 3858, :file "cljs/core.cljs"} update-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 8698, :column 3, :line 8698, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8698, :column 4, :line 8698, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8698, :column 12, :line 8698, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8698, :column 27, :line 8698, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8695, :column 7, :line 8695, :file "cljs/core.cljs"} prefer-method ^{:arglists (^{:end-column 42, :end-line 8698, :column 3, :line 8698, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8698, :column 4, :line 8698, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8698, :column 12, :line 8698, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8698, :column 27, :line 8698, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8695, :column 7, :line 8695, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8698, :column 4, :line 8698, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8698, :column 12, :line 8698, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8698, :column 27, :line 8698, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8698, :column 3, :line 8698, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8698, :column 4, :line 8698, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8698, :column 12, :line 8698, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8698, :column 27, :line 8698, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8695, :column 7, :line 8695, :file "cljs/core.cljs"} prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 541, :column 20, :line 541, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 541, :column 21, :line 541, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 541, :column 8, :line 541, :file "cljs/core.cljs"} hash-symbol ^{:arglists (^{:end-column 25, :end-line 541, :column 20, :line 541, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 541, :column 21, :line 541, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 541, :column 8, :line 541, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 541, :column 21, :line 541, :file "cljs/core.cljs"} sym]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 541, :column 20, :line 541, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 541, :column 21, :line 541, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 541, :column 8, :line 541, :file "cljs/core.cljs"} hash-symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 5277, :column 4, :line 5277, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5277, :column 5, :line 5277, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5277, :column 11, :line 5277, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5277, :column 16, :line 5277, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5277, :column 18, :line 5277, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5281, :column 4, :line 5281, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5281, :column 5, :line 5281, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5281, :column 11, :line 5281, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5281, :column 16, :line 5281, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5281, :column 18, :line 5281, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5281, :column 20, :line 5281, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5281, :column 22, :line 5281, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5276, :column 8, :line 5276, :file "cljs/core.cljs"} edit-and-set ^{:arglists (^{:end-column 20, :end-line 5277, :column 4, :line 5277, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5277, :column 5, :line 5277, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5277, :column 11, :line 5277, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5277, :column 16, :line 5277, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5277, :column 18, :line 5277, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5281, :column 4, :line 5281, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5281, :column 5, :line 5281, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5281, :column 11, :line 5281, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5281, :column 16, :line 5281, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5281, :column 18, :line 5281, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5281, :column 20, :line 5281, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5281, :column 22, :line 5281, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5276, :column 8, :line 5276, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5277, :column 5, :line 5277, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5277, :column 11, :line 5277, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5277, :column 16, :line 5277, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5277, :column 18, :line 5277, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 5281, :column 5, :line 5281, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5281, :column 11, :line 5281, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5281, :column 16, :line 5281, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5281, :column 18, :line 5281, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5281, :column 20, :line 5281, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5281, :column 22, :line 5281, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 5277, :column 4, :line 5277, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5277, :column 5, :line 5277, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5277, :column 11, :line 5277, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5277, :column 16, :line 5277, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5277, :column 18, :line 5277, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5281, :column 4, :line 5281, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5281, :column 5, :line 5281, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5281, :column 11, :line 5281, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5281, :column 16, :line 5281, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5281, :column 18, :line 5281, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5281, :column 20, :line 5281, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5281, :column 22, :line 5281, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5276, :column 8, :line 5276, :file "cljs/core.cljs"} edit-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash])} ->PersistentArrayMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentArrayMap [^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash])} ->PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 76, :column 10, :line 76, :file "cljs/core.cljs"} instance? ^{:arglists (^{:end-column 31, :end-line 535, :column 26, :line 535, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 535, :column 27, :line 535, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 535, :column 29, :line 535, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 535, :column 8, :line 535, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 535, :column 16, :line 535, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 29, :end-line 535, :column 27, :line 535, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 535, :column 29, :line 535, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 535, :column 26, :line 535, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 535, :column 27, :line 535, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 535, :column 29, :line 535, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 535, :column 8, :line 535, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 535, :column 16, :line 535, :file "cljs/core.cljs"} instance?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 695, :column 3, :line 695, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 695, :column 15, :line 695, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 689, :column 8, :line 689, :file "cljs/core.cljs"} number, :end-column 35, :end-line 689, :column 15, :line 689, :file "cljs/core.cljs"} mix-collection-hash ^{:arglists (^{:end-column 21, :end-line 695, :column 3, :line 695, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 695, :column 15, :line 695, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 689, :column 8, :line 689, :file "cljs/core.cljs"} number, :end-column 35, :end-line 689, :column 15, :line 689, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 15, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 695, :column 15, :line 695, :file "cljs/core.cljs"} count]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 695, :column 3, :line 695, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 695, :column 15, :line 695, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 689, :column 8, :line 689, :file "cljs/core.cljs"} number, :end-column 35, :end-line 689, :column 15, :line 689, :file "cljs/core.cljs"} mix-collection-hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7677, :column 3, :line 7677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7677, :column 4, :line 7677, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7677, :column 7, :line 7677, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7672, :column 7, :line 7672, :file "cljs/core.cljs"} re-find ^{:arglists (^{:end-column 9, :end-line 7677, :column 3, :line 7677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7677, :column 4, :line 7677, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7677, :column 7, :line 7677, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7672, :column 7, :line 7672, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7677, :column 4, :line 7677, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7677, :column 7, :line 7677, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7677, :column 3, :line 7677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7677, :column 4, :line 7677, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7677, :column 7, :line 7677, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7672, :column 7, :line 7672, :file "cljs/core.cljs"} re-find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8197, :column 3, :line 8197, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8197, :column 4, :line 8197, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8197, :column 9, :line 8197, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} run! ^{:arglists (^{:end-column 14, :end-line 8197, :column 3, :line 8197, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8197, :column 4, :line 8197, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8197, :column 9, :line 8197, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8197, :column 4, :line 8197, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8197, :column 9, :line 8197, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8197, :column 3, :line 8197, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8197, :column 4, :line 8197, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8197, :column 9, :line 8197, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} run!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 17, :end-line 7741, :column 1, :line 7733, :file "cljs/core.cljs"} char-escapes ^{:private true, :end-column 17, :end-line 7741, :column 1, :line 7733, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 17, :end-line 7741, :column 1, :line 7733, :file "cljs/core.cljs"} char-escapes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 2075, :column 14, :line 2075, :file "cljs/core.cljs"} val ^{:arglists (^{:end-column 14, :end-line 6944, :column 3, :line 6944, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6944, :column 4, :line 6944, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 6942, :column 7, :line 6942, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6944, :column 4, :line 6944, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6944, :column 3, :line 6944, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6944, :column 4, :line 6944, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 6942, :column 7, :line 6942, :file "cljs/core.cljs"} val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1802, :column 4, :line 1802, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1802, :column 5, :line 1802, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1802, :column 7, :line 1802, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1802, :column 9, :line 1802, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1802, :column 11, :line 1802, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1797, :column 8, :line 1797, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1797, :column 15, :line 1797, :file "cljs/core.cljs"} unchecked-add ^{:arglists (^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1802, :column 4, :line 1802, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1802, :column 5, :line 1802, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1802, :column 7, :line 1802, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1802, :column 9, :line 1802, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1802, :column 11, :line 1802, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1797, :column 8, :line 1797, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1797, :column 15, :line 1797, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1802, :column 5, :line 1802, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1802, :column 7, :line 1802, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1802, :column 11, :line 1802, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1802, :column 4, :line 1802, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1802, :column 5, :line 1802, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1802, :column 7, :line 1802, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1802, :column 9, :line 1802, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1802, :column 11, :line 1802, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1797, :column 8, :line 1797, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1797, :column 15, :line 1797, :file "cljs/core.cljs"} unchecked-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1541, :column 3, :line 1541, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1541, :column 4, :line 1541, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1538, :column 17, :line 1538, :file "cljs/core.cljs"} fn->comparator ^{:arglists (^{:end-column 6, :end-line 1541, :column 3, :line 1541, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1541, :column 4, :line 1541, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1538, :column 17, :line 1538, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 1541, :column 4, :line 1541, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1541, :column 3, :line 1541, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1541, :column 4, :line 1541, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1538, :column 17, :line 1538, :file "cljs/core.cljs"} fn->comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 745, :column 10, :line 745, :file "cljs/core.cljs"} with-meta ^{:arglists (^{:end-column 11, :end-line 1291, :column 3, :line 1291, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1291, :column 4, :line 1291, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1291, :column 6, :line 1291, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1288, :column 7, :line 1288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1291, :column 4, :line 1291, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1291, :column 6, :line 1291, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1291, :column 3, :line 1291, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1291, :column 4, :line 1291, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1291, :column 6, :line 1291, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1288, :column 7, :line 1288, :file "cljs/core.cljs"} with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical? ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 383, :column 23, :line 383, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 383, :column 24, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 23, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -namespace ^{:arglists (^{:end-column 26, :end-line 383, :column 23, :line 383, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 383, :column 24, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 23, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 383, :column 24, :line 383, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 383, :column 23, :line 383, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 383, :column 24, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 23, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1821, :column 4, :line 1821, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1821, :column 5, :line 1821, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1821, :column 7, :line 1821, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1822, :column 4, :line 1822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1822, :column 5, :line 1822, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1822, :column 7, :line 1822, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1822, :column 9, :line 1822, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1822, :column 11, :line 1822, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} unchecked-divide-int ^{:arglists (^{:end-column 7, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1821, :column 4, :line 1821, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1821, :column 5, :line 1821, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1821, :column 7, :line 1821, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1822, :column 4, :line 1822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1822, :column 5, :line 1822, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1822, :column 7, :line 1822, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1822, :column 9, :line 1822, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1822, :column 11, :line 1822, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1821, :column 5, :line 1821, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1821, :column 7, :line 1821, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1822, :column 5, :line 1822, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1822, :column 7, :line 1822, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1822, :column 11, :line 1822, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1821, :column 4, :line 1821, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1821, :column 5, :line 1821, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1821, :column 7, :line 1821, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1822, :column 4, :line 1822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1822, :column 5, :line 1822, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1822, :column 7, :line 1822, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1822, :column 9, :line 1822, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1822, :column 11, :line 1822, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} unchecked-divide-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 8343, :column 31, :line 8343, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8343, :column 32, :line 8343, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8343, :column 34, :line 8343, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8343, :column 36, :line 8343, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8343, :column 8, :line 8343, :file "cljs/core.cljs"} swap-global-hierarchy! ^{:arglists (^{:end-column 41, :end-line 8343, :column 31, :line 8343, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8343, :column 32, :line 8343, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8343, :column 34, :line 8343, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8343, :column 36, :line 8343, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8343, :column 8, :line 8343, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 8343, :column 32, :line 8343, :file "cljs/core.cljs"} f & ^{:end-column 41, :end-line 8343, :column 36, :line 8343, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 8343, :column 31, :line 8343, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8343, :column 32, :line 8343, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8343, :column 34, :line 8343, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8343, :column 36, :line 8343, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8343, :column 8, :line 8343, :file "cljs/core.cljs"} swap-global-hierarchy!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7309, :column 4, :line 7309, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7309, :column 5, :line 7309, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7309, :column 7, :line 7309, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7310, :column 4, :line 7310, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7310, :column 5, :line 7310, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7310, :column 7, :line 7310, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7310, :column 9, :line 7310, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7311, :column 4, :line 7311, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7311, :column 5, :line 7311, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7311, :column 7, :line 7311, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7311, :column 9, :line 7311, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7311, :column 11, :line 7311, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7311, :column 13, :line 7311, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} max-key ^{:arglists (^{:end-column 9, :end-line 7309, :column 4, :line 7309, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7309, :column 5, :line 7309, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7309, :column 7, :line 7309, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7310, :column 4, :line 7310, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7310, :column 5, :line 7310, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7310, :column 7, :line 7310, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7310, :column 9, :line 7310, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7311, :column 4, :line 7311, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7311, :column 5, :line 7311, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7311, :column 7, :line 7311, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7311, :column 9, :line 7311, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7311, :column 11, :line 7311, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7311, :column 13, :line 7311, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7309, :column 5, :line 7309, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7309, :column 7, :line 7309, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7310, :column 5, :line 7310, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7310, :column 7, :line 7310, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7310, :column 9, :line 7310, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7311, :column 5, :line 7311, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7311, :column 7, :line 7311, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7311, :column 9, :line 7311, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 7311, :column 13, :line 7311, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7309, :column 4, :line 7309, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7309, :column 5, :line 7309, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7309, :column 7, :line 7309, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7310, :column 4, :line 7310, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7310, :column 5, :line 7310, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7310, :column 7, :line 7310, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7310, :column 9, :line 7310, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7311, :column 4, :line 7311, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7311, :column 5, :line 7311, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7311, :column 7, :line 7311, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7311, :column 9, :line 7311, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7311, :column 11, :line 7311, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7311, :column 13, :line 7311, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} max-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash])} ->PersistentTreeSet ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeSet [^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash])} ->PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end])} ->ChunkBuffer ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end])} {:arglists (^cljs.core/ChunkBuffer [^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end])} ->ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 499, :column 19, :line 499, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 499, :column 20, :line 499, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 499, :column 7, :line 499, :file "cljs/core.cljs"} hash-string ^{:arglists (^{:end-column 22, :end-line 499, :column 19, :line 499, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 499, :column 20, :line 499, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 499, :column 7, :line 499, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 499, :column 20, :line 499, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 499, :column 19, :line 499, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 499, :column 20, :line 499, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 499, :column 7, :line 499, :file "cljs/core.cljs"} hash-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6881, :column 10, :line 6881, :file "cljs/core.cljs"} ValSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6881, :column 10, :line 6881, :file "cljs/core.cljs"} ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6881, :column 17, :line 6881, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 17, :end-line 8505, :column 13, :line 8505, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8505, :column 14, :line 8505, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8505, :column 4, :line 8505, :file "cljs/core.cljs"} -prefers ^{:arglists (^{:end-column 17, :end-line 8505, :column 13, :line 8505, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8505, :column 14, :line 8505, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8505, :column 4, :line 8505, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8505, :column 14, :line 8505, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8505, :column 13, :line 8505, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8505, :column 14, :line 8505, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8505, :column 4, :line 8505, :file "cljs/core.cljs"} -prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3379, :column 3, :line 3379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3379, :column 4, :line 3379, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3379, :column 9, :line 3379, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3372, :column 7, :line 3372, :file "cljs/core.cljs"} set-validator! ^{:arglists (^{:end-column 13, :end-line 3379, :column 3, :line 3379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3379, :column 4, :line 3379, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3379, :column 9, :line 3379, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3372, :column 7, :line 3372, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3379, :column 4, :line 3379, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3379, :column 9, :line 3379, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3379, :column 3, :line 3379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3379, :column 4, :line 3379, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3379, :column 9, :line 3379, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3372, :column 7, :line 3372, :file "cljs/core.cljs"} set-validator!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4908, :column 34, :line 4908, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4908, :column 35, :line 4908, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4908, :column 39, :line 4908, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4908, :column 41, :line 4908, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4908, :column 8, :line 4908, :file "cljs/core.cljs"} array-map-index-of-equiv? ^{:arglists (^{:end-column 43, :end-line 4908, :column 34, :line 4908, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4908, :column 35, :line 4908, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4908, :column 39, :line 4908, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4908, :column 41, :line 4908, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4908, :column 8, :line 4908, :file "cljs/core.cljs"} {:arglists ([^{:end-column 39, :end-line 4908, :column 35, :line 4908, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4908, :column 39, :line 4908, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4908, :column 41, :line 4908, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4908, :column 34, :line 4908, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4908, :column 35, :line 4908, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4908, :column 39, :line 4908, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4908, :column 41, :line 4908, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4908, :column 8, :line 4908, :file "cljs/core.cljs"} array-map-index-of-equiv?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 290, :column 22, :line 290, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 290, :column 23, :line 290, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 290, :column 16, :line 290, :file "cljs/core.cljs"} -meta ^{:arglists (^{:end-column 25, :end-line 290, :column 22, :line 290, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 290, :column 23, :line 290, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 290, :column 16, :line 290, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 290, :column 23, :line 290, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 290, :column 22, :line 290, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 290, :column 23, :line 290, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 290, :column 16, :line 290, :file "cljs/core.cljs"} -meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 6167, :column 10, :line 6167, :file "cljs/core.cljs"} RedNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6372, :column 10, :line 6372, :file "cljs/core.cljs"} RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 6372, :column 18, :line 6372, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 40, :end-line 8500, :column 16, :line 8500, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8500, :column 17, :line 8500, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8500, :column 20, :line 8500, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8500, :column 33, :line 8500, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} -add-method ^{:arglists (^{:end-column 40, :end-line 8500, :column 16, :line 8500, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8500, :column 17, :line 8500, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8500, :column 20, :line 8500, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8500, :column 33, :line 8500, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8500, :column 17, :line 8500, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8500, :column 20, :line 8500, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8500, :column 33, :line 8500, :file "cljs/core.cljs"} method]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 8500, :column 16, :line 8500, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8500, :column 17, :line 8500, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8500, :column 20, :line 8500, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8500, :column 33, :line 8500, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} -add-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 6216, :column 25, :line 6216, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6216, :column 26, :line 6216, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6216, :column 30, :line 6216, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6216, :column 34, :line 6216, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6216, :column 38, :line 6216, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6216, :column 8, :line 6216, :file "cljs/core.cljs"} balance-left-del ^{:arglists (^{:end-column 44, :end-line 6216, :column 25, :line 6216, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6216, :column 26, :line 6216, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6216, :column 30, :line 6216, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6216, :column 34, :line 6216, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6216, :column 38, :line 6216, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6216, :column 8, :line 6216, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6216, :column 26, :line 6216, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6216, :column 30, :line 6216, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6216, :column 34, :line 6216, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6216, :column 38, :line 6216, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6216, :column 25, :line 6216, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6216, :column 26, :line 6216, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6216, :column 30, :line 6216, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6216, :column 34, :line 6216, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6216, :column 38, :line 6216, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6216, :column 8, :line 6216, :file "cljs/core.cljs"} balance-left-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3346, :column 4, :line 3346, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3346, :column 5, :line 3346, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3346, :column 7, :line 3346, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3350, :column 4, :line 3350, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3354, :column 4, :line 3354, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3354, :column 5, :line 3354, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3354, :column 9, :line 3354, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3354, :column 11, :line 3354, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3358, :column 4, :line 3358, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3358, :column 5, :line 3358, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3358, :column 7, :line 3358, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3358, :column 9, :line 3358, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3358, :column 11, :line 3358, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3358, :column 13, :line 3358, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3358, :column 15, :line 3358, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3341, :column 7, :line 3341, :file "cljs/core.cljs"} swap! ^{:arglists (^{:end-column 9, :end-line 3346, :column 4, :line 3346, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3346, :column 5, :line 3346, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3346, :column 7, :line 3346, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3350, :column 4, :line 3350, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3354, :column 4, :line 3354, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3354, :column 5, :line 3354, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3354, :column 9, :line 3354, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3354, :column 11, :line 3354, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3358, :column 4, :line 3358, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3358, :column 5, :line 3358, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3358, :column 7, :line 3358, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3358, :column 9, :line 3358, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3358, :column 11, :line 3358, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3358, :column 13, :line 3358, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3358, :column 15, :line 3358, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3341, :column 7, :line 3341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3346, :column 5, :line 3346, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3346, :column 7, :line 3346, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 3354, :column 5, :line 3354, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3354, :column 9, :line 3354, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3354, :column 11, :line 3354, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 3358, :column 5, :line 3358, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3358, :column 7, :line 3358, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3358, :column 9, :line 3358, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3358, :column 11, :line 3358, :file "cljs/core.cljs"} y & ^{:end-column 20, :end-line 3358, :column 15, :line 3358, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3346, :column 4, :line 3346, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3346, :column 5, :line 3346, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3346, :column 7, :line 3346, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3350, :column 4, :line 3350, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3354, :column 4, :line 3354, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3354, :column 5, :line 3354, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3354, :column 9, :line 3354, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3354, :column 11, :line 3354, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3358, :column 4, :line 3358, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3358, :column 5, :line 3358, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3358, :column 7, :line 3358, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3358, :column 9, :line 3358, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3358, :column 11, :line 3358, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3358, :column 13, :line 3358, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3358, :column 15, :line 3358, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3341, :column 7, :line 3341, :file "cljs/core.cljs"} swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 5002, :column 15, :line 5002, :file "cljs/core.cljs"} vals ^{:arglists (^{:end-column 13, :end-line 6938, :column 3, :line 6938, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6938, :column 4, :line 6938, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6936, :column 7, :line 6936, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6938, :column 4, :line 6938, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6938, :column 3, :line 6938, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6938, :column 4, :line 6938, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6936, :column 7, :line 6936, :file "cljs/core.cljs"} vals, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 379, :column 18, :line 379, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 379, :column 19, :line 379, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 379, :column 4, :line 379, :file "cljs/core.cljs"} -chunked-next ^{:arglists (^{:end-column 24, :end-line 379, :column 18, :line 379, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 379, :column 19, :line 379, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 379, :column 4, :line 379, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 379, :column 19, :line 379, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 379, :column 18, :line 379, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 379, :column 19, :line 379, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 379, :column 4, :line 379, :file "cljs/core.cljs"} -chunked-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4865, :column 28, :line 4865, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4865, :column 29, :line 4865, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4865, :column 7, :line 4865, :file "cljs/core.cljs"} set-entries-iterator ^{:arglists (^{:end-column 34, :end-line 4865, :column 28, :line 4865, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4865, :column 29, :line 4865, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4865, :column 7, :line 4865, :file "cljs/core.cljs"} {:arglists (^cljs.core/SetEntriesIterator [^{:end-column 34, :end-line 4865, :column 29, :line 4865, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4865, :column 28, :line 4865, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4865, :column 29, :line 4865, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4865, :column 7, :line 4865, :file "cljs/core.cljs"} set-entries-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} unchecked-subtract ^{:arglists (^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} unchecked-subtract, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5264, :column 20, :line 5264, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5264, :column 21, :line 5264, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5264, :column 25, :line 5264, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5264, :column 8, :line 5264, :file "cljs/core.cljs"} remove-pair ^{:arglists (^{:end-column 27, :end-line 5264, :column 20, :line 5264, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5264, :column 21, :line 5264, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5264, :column 25, :line 5264, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5264, :column 8, :line 5264, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 25, :end-line 5264, :column 21, :line 5264, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5264, :column 25, :line 5264, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5264, :column 20, :line 5264, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5264, :column 21, :line 5264, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5264, :column 25, :line 5264, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5264, :column 8, :line 5264, :file "cljs/core.cljs"} remove-pair, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} IMap ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentTreeMap}, :protocol-symbol true, :end-column 19, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} IMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next])} ->SeqIter ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next])} {:arglists (^cljs.core/SeqIter [^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next])} ->SeqIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7244, :column 5, :line 7244, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7244, :column 16, :line 7244, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7244, :column 18, :line 7244, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7242, :column 7, :line 7242, :file "cljs/core.cljs"} sorted-set-by ^{:arglists (^{:end-column 23, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7244, :column 5, :line 7244, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7244, :column 16, :line 7244, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7244, :column 18, :line 7244, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7242, :column 7, :line 7242, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7244, :column 5, :line 7244, :file "cljs/core.cljs"} comparator & ^{:end-column 23, :end-line 7244, :column 18, :line 7244, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7244, :column 5, :line 7244, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7244, :column 16, :line 7244, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7244, :column 18, :line 7244, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7242, :column 7, :line 7242, :file "cljs/core.cljs"} sorted-set-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} PersistentVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 70, :end-line 3987, :column 27, :line 3987, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 610, :column 18, :line 610, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 610, :column 19, :line 610, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} cloneable? ^{:arglists (^{:end-column 25, :end-line 610, :column 18, :line 610, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 610, :column 19, :line 610, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 610, :column 19, :line 610, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 610, :column 18, :line 610, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 610, :column 19, :line 610, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} cloneable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 482, :column 20, :line 482, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 482, :column 21, :line 482, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 482, :column 7, :line 482, :file "cljs/core.cljs"} hash-string* ^{:arglists (^{:end-column 23, :end-line 482, :column 20, :line 482, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 482, :column 21, :line 482, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 482, :column 7, :line 482, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 482, :column 21, :line 482, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 482, :column 20, :line 482, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 482, :column 21, :line 482, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 482, :column 7, :line 482, :file "cljs/core.cljs"} hash-string*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5246, :column 25, :line 5246, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5246, :column 26, :line 5246, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5246, :column 30, :line 5246, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5246, :column 8, :line 5246, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5246, :column 16, :line 5246, :file "cljs/core.cljs"} key-test ^{:arglists (^{:end-column 36, :end-line 5246, :column 25, :line 5246, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5246, :column 26, :line 5246, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5246, :column 30, :line 5246, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5246, :column 8, :line 5246, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5246, :column 16, :line 5246, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5246, :column 26, :line 5246, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5246, :column 30, :line 5246, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5246, :column 25, :line 5246, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5246, :column 26, :line 5246, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5246, :column 30, :line 5246, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5246, :column 8, :line 5246, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5246, :column 16, :line 5246, :file "cljs/core.cljs"} key-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta])} ->LazyTransformer ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/LazyTransformer [^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta])} ->LazyTransformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8499, :column 11, :line 8499, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8499, :column 12, :line 8499, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8499, :column 4, :line 8499, :file "cljs/core.cljs"} -reset ^{:arglists (^{:end-column 15, :end-line 8499, :column 11, :line 8499, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8499, :column 12, :line 8499, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8499, :column 4, :line 8499, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8499, :column 12, :line 8499, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8499, :column 11, :line 8499, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8499, :column 12, :line 8499, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8499, :column 4, :line 8499, :file "cljs/core.cljs"} -reset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1426, :column 3, :line 1426, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1426, :column 4, :line 1426, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1424, :column 8, :line 1424, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1424, :column 16, :line 1424, :file "cljs/core.cljs"} true? ^{:arglists (^{:end-column 6, :end-line 1426, :column 3, :line 1426, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1426, :column 4, :line 1426, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1424, :column 8, :line 1424, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1424, :column 16, :line 1424, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1426, :column 4, :line 1426, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1426, :column 3, :line 1426, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1426, :column 4, :line 1426, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1424, :column 8, :line 1424, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1424, :column 16, :line 1424, :file "cljs/core.cljs"} true?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} array ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7887, :column 1, :line 7882, :file "cljs/core.cljs"} print ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7887, :column 1, :line 7882, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 31, :end-line 7886, :column 26, :line 7886, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7887, :column 1, :line 7882, :file "cljs/core.cljs"} print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 277, :column 10, :line 277, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 277, :column 11, :line 277, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 277, :column 4, :line 277, :file "cljs/core.cljs"} -peek ^{:arglists (^{:end-column 16, :end-line 277, :column 10, :line 277, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 277, :column 11, :line 277, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 277, :column 4, :line 277, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 277, :column 11, :line 277, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 277, :column 10, :line 277, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 277, :column 11, :line 277, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 277, :column 4, :line 277, :file "cljs/core.cljs"} -peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} ISeq ^{:impls #{cljs.core/Cons cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq}, :protocol-symbol true, :end-column 19, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} ISeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1044, :column 3, :line 1044, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1044, :column 4, :line 1044, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1042, :column 7, :line 1042, :file "cljs/core.cljs"} empty ^{:arglists (^{:end-column 9, :end-line 1044, :column 3, :line 1044, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1044, :column 4, :line 1044, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1042, :column 7, :line 1042, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1044, :column 4, :line 1044, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1044, :column 3, :line 1044, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1044, :column 4, :line 1044, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1042, :column 7, :line 1042, :file "cljs/core.cljs"} empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8692, :column 2, :line 8692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8692, :column 3, :line 8692, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8692, :column 11, :line 8692, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8690, :column 7, :line 8690, :file "cljs/core.cljs"} remove-method ^{:arglists (^{:end-column 24, :end-line 8692, :column 2, :line 8692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8692, :column 3, :line 8692, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8692, :column 11, :line 8692, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8690, :column 7, :line 8690, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8692, :column 3, :line 8692, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8692, :column 11, :line 8692, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8692, :column 2, :line 8692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8692, :column 3, :line 8692, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8692, :column 11, :line 8692, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8690, :column 7, :line 8690, :file "cljs/core.cljs"} remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4556, :column 10, :line 4556, :file "cljs/core.cljs"} PersistentQueueSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4556, :column 10, :line 4556, :file "cljs/core.cljs"} PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 63, :end-line 4556, :column 29, :line 4556, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 44, :end-line 6235, :column 26, :line 6235, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6235, :column 27, :line 6235, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6235, :column 31, :line 6235, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6235, :column 35, :line 6235, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6235, :column 40, :line 6235, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6235, :column 8, :line 6235, :file "cljs/core.cljs"} balance-right-del ^{:arglists (^{:end-column 44, :end-line 6235, :column 26, :line 6235, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6235, :column 27, :line 6235, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6235, :column 31, :line 6235, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6235, :column 35, :line 6235, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6235, :column 40, :line 6235, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6235, :column 8, :line 6235, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6235, :column 27, :line 6235, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6235, :column 31, :line 6235, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6235, :column 35, :line 6235, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6235, :column 40, :line 6235, :file "cljs/core.cljs"} del]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6235, :column 26, :line 6235, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6235, :column 27, :line 6235, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6235, :column 31, :line 6235, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6235, :column 35, :line 6235, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6235, :column 40, :line 6235, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6235, :column 8, :line 6235, :file "cljs/core.cljs"} balance-right-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1707, :column 5, :line 1707, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1708, :column 7, :line 1708, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1709, :column 9, :line 1709, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1709, :column 11, :line 1709, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1704, :column 8, :line 1704, :file "cljs/core.cljs"} number} / ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1707, :column 5, :line 1707, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1708, :column 7, :line 1708, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1709, :column 9, :line 1709, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1709, :column 11, :line 1709, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1704, :column 8, :line 1704, :file "cljs/core.cljs"} number} {:arglists (^number [^{:end-column 7, :end-line 1707, :column 5, :line 1707, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1708, :column 7, :line 1708, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1709, :column 11, :line 1709, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1707, :column 5, :line 1707, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1708, :column 7, :line 1708, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1709, :column 9, :line 1709, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1709, :column 11, :line 1709, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1704, :column 8, :line 1704, :file "cljs/core.cljs"} number} /, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5273, :column 15, :line 5273, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5273, :column 16, :line 5273, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5273, :column 21, :line 5273, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5273, :column 8, :line 5273, :file "cljs/core.cljs"} bitpos ^{:arglists (^{:end-column 27, :end-line 5273, :column 15, :line 5273, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5273, :column 16, :line 5273, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5273, :column 21, :line 5273, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5273, :column 8, :line 5273, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 5273, :column 16, :line 5273, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5273, :column 21, :line 5273, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5273, :column 15, :line 5273, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5273, :column 16, :line 5273, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5273, :column 21, :line 5273, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5273, :column 8, :line 5273, :file "cljs/core.cljs"} bitpos, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1944, :column 3, :line 1944, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1944, :column 4, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1944, :column 6, :line 1944, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1942, :column 7, :line 1942, :file "cljs/core.cljs"} bit-or ^{:arglists (^{:end-column 8, :end-line 1944, :column 3, :line 1944, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1944, :column 4, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1944, :column 6, :line 1944, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1942, :column 7, :line 1942, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1944, :column 4, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1944, :column 6, :line 1944, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1944, :column 3, :line 1944, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1944, :column 4, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1944, :column 6, :line 1944, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1942, :column 7, :line 1942, :file "cljs/core.cljs"} bit-or, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 443, :column 23, :line 443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 443, :column 24, :line 443, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 443, :column 27, :line 443, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 443, :column 8, :line 443, :file "cljs/core.cljs"} number, :end-column 23, :end-line 443, :column 15, :line 443, :file "cljs/core.cljs"} m3-fmix ^{:arglists (^{:end-column 31, :end-line 443, :column 23, :line 443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 443, :column 24, :line 443, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 443, :column 27, :line 443, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 443, :column 8, :line 443, :file "cljs/core.cljs"} number, :end-column 23, :end-line 443, :column 15, :line 443, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 443, :column 24, :line 443, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 443, :column 27, :line 443, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 443, :column 23, :line 443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 443, :column 24, :line 443, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 443, :column 27, :line 443, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 443, :column 8, :line 443, :file "cljs/core.cljs"} number, :end-column 23, :end-line 443, :column 15, :line 443, :file "cljs/core.cljs"} m3-fmix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 4164, :column 14, :line 4164, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4164, :column 15, :line 4164, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4164, :column 17, :line 4164, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4164, :column 7, :line 4164, :file "cljs/core.cljs"} vector ^{:arglists (^{:end-column 22, :end-line 4164, :column 14, :line 4164, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4164, :column 15, :line 4164, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4164, :column 17, :line 4164, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4164, :column 7, :line 4164, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 22, :end-line 4164, :column 17, :line 4164, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 4164, :column 14, :line 4164, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4164, :column 15, :line 4164, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4164, :column 17, :line 4164, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4164, :column 7, :line 4164, :file "cljs/core.cljs"} vector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 848, :column 10, :line 848, :file "cljs/core.cljs"} hash-coll ^{:arglists (^{:end-column 24, :end-line 2067, :column 18, :line 2067, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2067, :column 19, :line 2067, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 2067, :column 8, :line 2067, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 2067, :column 19, :line 2067, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 2067, :column 18, :line 2067, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2067, :column 19, :line 2067, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 2067, :column 8, :line 2067, :file "cljs/core.cljs"} hash-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 5256, :column 4, :line 5256, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5256, :column 5, :line 5256, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5256, :column 9, :line 5256, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5256, :column 11, :line 5256, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5259, :column 4, :line 5259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5259, :column 5, :line 5259, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5259, :column 9, :line 5259, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5259, :column 11, :line 5259, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5259, :column 13, :line 5259, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5259, :column 15, :line 5259, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5255, :column 8, :line 5255, :file "cljs/core.cljs"} clone-and-set ^{:arglists (^{:end-column 13, :end-line 5256, :column 4, :line 5256, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5256, :column 5, :line 5256, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5256, :column 9, :line 5256, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5256, :column 11, :line 5256, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5259, :column 4, :line 5259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5259, :column 5, :line 5259, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5259, :column 9, :line 5259, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5259, :column 11, :line 5259, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5259, :column 13, :line 5259, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5259, :column 15, :line 5259, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5255, :column 8, :line 5255, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 9, :end-line 5256, :column 5, :line 5256, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5256, :column 9, :line 5256, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5256, :column 11, :line 5256, :file "cljs/core.cljs"} a] ^cljs.core/array [^{:end-column 9, :end-line 5259, :column 5, :line 5259, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5259, :column 9, :line 5259, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5259, :column 11, :line 5259, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5259, :column 13, :line 5259, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5259, :column 15, :line 5259, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 5256, :column 4, :line 5256, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5256, :column 5, :line 5256, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5256, :column 9, :line 5256, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5256, :column 11, :line 5256, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5259, :column 4, :line 5259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5259, :column 5, :line 5259, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5259, :column 9, :line 5259, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5259, :column 11, :line 5259, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5259, :column 13, :line 5259, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5259, :column 15, :line 5259, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5255, :column 8, :line 5255, :file "cljs/core.cljs"} clone-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 36, :end-line 5161, :column 10, :line 5161, :file "cljs/core.cljs"} array->transient-hash-map ^{:arglists (^{:end-column 43, :end-line 5233, :column 34, :line 5233, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5233, :column 35, :line 5233, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5233, :column 39, :line 5233, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 5233, :column 8, :line 5233, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 39, :end-line 5233, :column 35, :line 5233, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5233, :column 39, :line 5233, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5233, :column 34, :line 5233, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5233, :column 35, :line 5233, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5233, :column 39, :line 5233, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 5233, :column 8, :line 5233, :file "cljs/core.cljs"} array->transient-hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1750, :column 4, :line 1750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1750, :column 5, :line 1750, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1751, :column 7, :line 1751, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1752, :column 9, :line 1752, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1752, :column 11, :line 1752, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1747, :column 8, :line 1747, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1747, :column 16, :line 1747, :file "cljs/core.cljs"} >= ^{:arglists (^{:end-column 7, :end-line 1750, :column 4, :line 1750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1750, :column 5, :line 1750, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1751, :column 7, :line 1751, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1752, :column 9, :line 1752, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1752, :column 11, :line 1752, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1747, :column 8, :line 1747, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1747, :column 16, :line 1747, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1750, :column 5, :line 1750, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1751, :column 7, :line 1751, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1752, :column 11, :line 1752, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1750, :column 4, :line 1750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1750, :column 5, :line 1750, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1751, :column 7, :line 1751, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1752, :column 9, :line 1752, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1752, :column 11, :line 1752, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1747, :column 8, :line 1747, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1747, :column 16, :line 1747, :file "cljs/core.cljs"} >=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map])} ->TransientHashSet ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map])} {:arglists (^cljs.core/TransientHashSet [^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map])} ->TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3599, :column 4, :line 3599, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3599, :column 5, :line 3599, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3599, :column 7, :line 3599, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3596, :column 7, :line 3596, :file "cljs/core.cljs"} drop-last ^{:arglists (^{:end-column 7, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3599, :column 4, :line 3599, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3599, :column 5, :line 3599, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3599, :column 7, :line 3599, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3596, :column 7, :line 3596, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} s] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3599, :column 5, :line 3599, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3599, :column 7, :line 3599, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3599, :column 4, :line 3599, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3599, :column 5, :line 3599, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3599, :column 7, :line 3599, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3596, :column 7, :line 3596, :file "cljs/core.cljs"} drop-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i])} ->ArrayIter ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i])} {:arglists (^cljs.core/ArrayIter [^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i])} ->ArrayIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object? ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash])} ->ArrayNodeSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ArrayNodeSeq [^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash])} ->ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 6532, :column 24, :line 6532, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6532, :column 25, :line 6532, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6532, :column 30, :line 6532, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6532, :column 8, :line 6532, :file "cljs/core.cljs"} tree-map-append ^{:arglists (^{:end-column 36, :end-line 6532, :column 24, :line 6532, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6532, :column 25, :line 6532, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6532, :column 30, :line 6532, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6532, :column 8, :line 6532, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6532, :column 25, :line 6532, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6532, :column 30, :line 6532, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 6532, :column 24, :line 6532, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6532, :column 25, :line 6532, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6532, :column 30, :line 6532, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6532, :column 8, :line 6532, :file "cljs/core.cljs"} tree-map-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2874, :column 3, :line 2874, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2874, :column 4, :line 2874, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2872, :column 7, :line 2872, :file "cljs/core.cljs"} not-empty ^{:arglists (^{:end-column 9, :end-line 2874, :column 3, :line 2874, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2874, :column 4, :line 2874, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2872, :column 7, :line 2872, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2874, :column 4, :line 2874, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2874, :column 3, :line 2874, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2874, :column 4, :line 2874, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2872, :column 7, :line 2872, :file "cljs/core.cljs"} not-empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7268, :column 3, :line 7268, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7268, :column 4, :line 7268, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7266, :column 7, :line 7266, :file "cljs/core.cljs"} distinct ^{:arglists (^{:end-column 9, :end-line 7268, :column 3, :line 7268, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7268, :column 4, :line 7268, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7266, :column 7, :line 7266, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 7268, :column 4, :line 7268, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7268, :column 3, :line 7268, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7268, :column 4, :line 7268, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7266, :column 7, :line 7266, :file "cljs/core.cljs"} distinct, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3812, :column 4, :line 3812, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3812, :column 5, :line 3812, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3812, :column 7, :line 3812, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3814, :column 7, :line 3814, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3814, :column 12, :line 3814, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3820, :column 4, :line 3820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3820, :column 5, :line 3820, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3820, :column 7, :line 3820, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3820, :column 12, :line 3820, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3820, :column 16, :line 3820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3806, :column 7, :line 3806, :file "cljs/core.cljs"} partition ^{:arglists (^{:end-column 12, :end-line 3812, :column 4, :line 3812, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3812, :column 5, :line 3812, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3812, :column 7, :line 3812, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3814, :column 7, :line 3814, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3814, :column 12, :line 3814, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3820, :column 4, :line 3820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3820, :column 5, :line 3820, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3820, :column 7, :line 3820, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3820, :column 12, :line 3820, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3820, :column 16, :line 3820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3806, :column 7, :line 3806, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3812, :column 5, :line 3812, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3812, :column 7, :line 3812, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3814, :column 7, :line 3814, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3814, :column 12, :line 3814, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3820, :column 5, :line 3820, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3820, :column 7, :line 3820, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3820, :column 12, :line 3820, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3820, :column 16, :line 3820, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3812, :column 4, :line 3812, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3812, :column 5, :line 3812, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3812, :column 7, :line 3812, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3814, :column 7, :line 3814, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3814, :column 12, :line 3814, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3820, :column 4, :line 3820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3820, :column 5, :line 3820, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3820, :column 7, :line 3820, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3820, :column 12, :line 3820, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3820, :column 16, :line 3820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3806, :column 7, :line 3806, :file "cljs/core.cljs"} partition, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 8498, :column 14, :line 8498, :file "cljs/core.cljs"} IMultiFn ^{:impls #{cljs.core/MultiFn}, :protocol-symbol true, :end-column 23, :end-line 8498, :column 14, :line 8498, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 8498, :column 14, :line 8498, :file "cljs/core.cljs"} IMultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1869, :column 16, :line 1869, :file "cljs/core.cljs"} fix ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1869, :column 16, :line 1869, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} q]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1869, :column 16, :line 1869, :file "cljs/core.cljs"} fix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2169, :column 10, :line 2169, :file "cljs/core.cljs"} EmptyList {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2169, :column 10, :line 2169, :file "cljs/core.cljs"} EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 2169, :column 20, :line 2169, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} IAssociative ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/RedNode}, :protocol-symbol true, :end-column 27, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} IAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1957, :column 3, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1957, :column 6, :line 1957, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1955, :column 7, :line 1955, :file "cljs/core.cljs"} bit-flip ^{:arglists (^{:end-column 8, :end-line 1957, :column 3, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1957, :column 6, :line 1957, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1955, :column 7, :line 1955, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1957, :column 6, :line 1957, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1957, :column 3, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1957, :column 6, :line 1957, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1955, :column 7, :line 1955, :file "cljs/core.cljs"} bit-flip, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2616, :column 4, :line 2616, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2616, :column 5, :line 2616, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2620, :column 4, :line 2620, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2620, :column 5, :line 2620, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2620, :column 10, :line 2620, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2615, :column 7, :line 2615, :file "cljs/core.cljs"} long-array ^{:arglists (^{:end-column 17, :end-line 2616, :column 4, :line 2616, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2616, :column 5, :line 2616, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2620, :column 4, :line 2620, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2620, :column 5, :line 2620, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2620, :column 10, :line 2620, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2615, :column 7, :line 2615, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2616, :column 5, :line 2616, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2620, :column 5, :line 2620, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2620, :column 10, :line 2620, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2616, :column 4, :line 2616, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2616, :column 5, :line 2616, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2620, :column 4, :line 2620, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2620, :column 5, :line 2620, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2620, :column 10, :line 2620, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2615, :column 7, :line 2615, :file "cljs/core.cljs"} long-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 26, :end-line 4843, :column 10, :line 4843, :file "cljs/core.cljs"} EntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 26, :end-line 4843, :column 10, :line 4843, :file "cljs/core.cljs"} EntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 39, :end-line 4843, :column 26, :line 4843, :file "cljs/core.cljs"} [^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 9, :end-line 8388, :column 4, :line 8388, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8388, :column 5, :line 8388, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8389, :column 4, :line 8389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8389, :column 5, :line 8389, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8389, :column 7, :line 8389, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8382, :column 7, :line 8382, :file "cljs/core.cljs"} descendants ^{:arglists (^{:end-column 9, :end-line 8388, :column 4, :line 8388, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8388, :column 5, :line 8388, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8389, :column 4, :line 8389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8389, :column 5, :line 8389, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8389, :column 7, :line 8389, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8382, :column 7, :line 8382, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8388, :column 5, :line 8388, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8389, :column 5, :line 8389, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8389, :column 7, :line 8389, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8388, :column 4, :line 8388, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8388, :column 5, :line 8388, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8389, :column 4, :line 8389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8389, :column 5, :line 8389, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8389, :column 7, :line 8389, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8382, :column 7, :line 8382, :file "cljs/core.cljs"} descendants, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8191, :column 10, :line 8191, :file "cljs/core.cljs"} coll]), :doc "Returns an iterable/seqable/reducible sequence of applications of\n  the transducer to the items in coll. Note that these applications\n  will be performed every time iterator/seq/reduce is called.", :end-column 17, :end-line 8187, :column 7, :line 8187, :file "cljs/core.cljs"} iteration ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8191, :column 10, :line 8191, :file "cljs/core.cljs"} coll]), :doc "Returns an iterable/seqable/reducible sequence of applications of\n  the transducer to the items in coll. Note that these applications\n  will be performed every time iterator/seq/reduce is called.", :end-column 17, :end-line 8187, :column 7, :line 8187, :file "cljs/core.cljs"} {:arglists (^cljs.core/Iteration [^{:end-column 10, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8191, :column 10, :line 8191, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8191, :column 10, :line 8191, :file "cljs/core.cljs"} coll]), :doc "Returns an iterable/seqable/reducible sequence of applications of\n  the transducer to the items in coll. Note that these applications\n  will be performed every time iterator/seq/reduce is called.", :end-column 17, :end-line 8187, :column 7, :line 8187, :file "cljs/core.cljs"} iteration, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 421, :column 22, :line 421, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 421, :column 23, :line 421, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 421, :column 25, :line 421, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 421, :column 10, :line 421, :file "cljs/core.cljs"} number, :end-column 22, :end-line 421, :column 17, :line 421, :file "cljs/core.cljs"} imul ^{:arglists (^{:end-column 27, :end-line 422, :column 22, :line 422, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 422, :column 23, :line 422, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 422, :column 25, :line 422, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 422, :column 10, :line 422, :file "cljs/core.cljs"} number, :end-column 22, :end-line 422, :column 17, :line 422, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 422, :column 23, :line 422, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 422, :column 25, :line 422, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 422, :column 22, :line 422, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 422, :column 23, :line 422, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 422, :column 25, :line 422, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 422, :column 10, :line 422, :file "cljs/core.cljs"} number, :end-column 22, :end-line 422, :column 17, :line 422, :file "cljs/core.cljs"} imul, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value])} ->Delay ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value])} {:arglists (^cljs.core/Delay [^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value])} ->Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 3955, :column 18, :line 3955, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3955, :column 19, :line 3955, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3955, :column 22, :line 3955, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3955, :column 8, :line 3955, :file "cljs/core.cljs"} array-for ^{:arglists (^{:end-column 24, :end-line 3955, :column 18, :line 3955, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3955, :column 19, :line 3955, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3955, :column 22, :line 3955, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3955, :column 8, :line 3955, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3955, :column 19, :line 3955, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3955, :column 22, :line 3955, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 3955, :column 18, :line 3955, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3955, :column 19, :line 3955, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3955, :column 22, :line 3955, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3955, :column 8, :line 3955, :file "cljs/core.cljs"} array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 6951, :column 3, :line 6951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6951, :column 4, :line 6951, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6951, :column 6, :line 6951, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6947, :column 7, :line 6947, :file "cljs/core.cljs"} merge ^{:arglists (^{:end-column 11, :end-line 6951, :column 3, :line 6951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6951, :column 4, :line 6951, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6951, :column 6, :line 6951, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6947, :column 7, :line 6947, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 6951, :column 6, :line 6951, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6951, :column 3, :line 6951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6951, :column 4, :line 6951, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6951, :column 6, :line 6951, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6947, :column 7, :line 6947, :file "cljs/core.cljs"} merge, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} ISeqable ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Iteration cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} ISeqable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1905, :column 3, :line 1905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1905, :column 4, :line 1905, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1905, :column 6, :line 1905, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} js-mod ^{:arglists (^{:end-column 8, :end-line 1905, :column 3, :line 1905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1905, :column 4, :line 1905, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1905, :column 6, :line 1905, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1905, :column 4, :line 1905, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1905, :column 6, :line 1905, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1905, :column 3, :line 1905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1905, :column 4, :line 1905, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1905, :column 6, :line 1905, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} js-mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1451, :column 3, :line 1451, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1451, :column 4, :line 1451, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1449, :column 8, :line 1449, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1449, :column 16, :line 1449, :file "cljs/core.cljs"} integer? ^{:arglists (^{:end-column 6, :end-line 1451, :column 3, :line 1451, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1451, :column 4, :line 1451, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1449, :column 8, :line 1449, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1449, :column 16, :line 1449, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1451, :column 4, :line 1451, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1451, :column 3, :line 1451, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1451, :column 4, :line 1451, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1449, :column 8, :line 1449, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1449, :column 16, :line 1449, :file "cljs/core.cljs"} integer?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1235, :column 10, :line 1235, :file "cljs/core.cljs"} MetaFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1235, :column 10, :line 1235, :file "cljs/core.cljs"} MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 27, :end-line 1235, :column 17, :line 1235, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 12, :end-line 3787, :column 4, :line 3787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3787, :column 5, :line 3787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3787, :column 7, :line 3787, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 5, :line 3790, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3790, :column 7, :line 3790, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3790, :column 10, :line 3790, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3792, :column 4, :line 3792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3792, :column 5, :line 3792, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3792, :column 7, :line 3792, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3792, :column 10, :line 3792, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3792, :column 13, :line 3792, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3794, :column 4, :line 3794, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3794, :column 5, :line 3794, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3794, :column 7, :line 3794, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3794, :column 10, :line 3794, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3794, :column 13, :line 3794, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3794, :column 16, :line 3794, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3794, :column 18, :line 3794, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3781, :column 7, :line 3781, :file "cljs/core.cljs"} mapv ^{:arglists (^{:end-column 12, :end-line 3787, :column 4, :line 3787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3787, :column 5, :line 3787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3787, :column 7, :line 3787, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 5, :line 3790, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3790, :column 7, :line 3790, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3790, :column 10, :line 3790, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3792, :column 4, :line 3792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3792, :column 5, :line 3792, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3792, :column 7, :line 3792, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3792, :column 10, :line 3792, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3792, :column 13, :line 3792, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3794, :column 4, :line 3794, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3794, :column 5, :line 3794, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3794, :column 7, :line 3794, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3794, :column 10, :line 3794, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3794, :column 13, :line 3794, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3794, :column 16, :line 3794, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3794, :column 18, :line 3794, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3781, :column 7, :line 3781, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 7, :end-line 3787, :column 5, :line 3787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3787, :column 7, :line 3787, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 3790, :column 5, :line 3790, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3790, :column 7, :line 3790, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3790, :column 10, :line 3790, :file "cljs/core.cljs"} c2] [^{:end-column 7, :end-line 3792, :column 5, :line 3792, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3792, :column 7, :line 3792, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3792, :column 10, :line 3792, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3792, :column 13, :line 3792, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3794, :column 5, :line 3794, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3794, :column 7, :line 3794, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3794, :column 10, :line 3794, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3794, :column 13, :line 3794, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3794, :column 18, :line 3794, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3787, :column 4, :line 3787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3787, :column 5, :line 3787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3787, :column 7, :line 3787, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 5, :line 3790, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3790, :column 7, :line 3790, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3790, :column 10, :line 3790, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3792, :column 4, :line 3792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3792, :column 5, :line 3792, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3792, :column 7, :line 3792, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3792, :column 10, :line 3792, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3792, :column 13, :line 3792, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3794, :column 4, :line 3794, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3794, :column 5, :line 3794, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3794, :column 7, :line 3794, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3794, :column 10, :line 3794, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3794, :column 13, :line 3794, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3794, :column 16, :line 3794, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3794, :column 18, :line 3794, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3781, :column 7, :line 3781, :file "cljs/core.cljs"} mapv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7357, :column 4, :line 7357, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7357, :column 5, :line 7357, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7357, :column 7, :line 7357, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7359, :column 4, :line 7359, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7359, :column 5, :line 7359, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7359, :column 7, :line 7359, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7359, :column 12, :line 7359, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} partition-all ^{:arglists (^{:end-column 7, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7357, :column 4, :line 7357, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7357, :column 5, :line 7357, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7357, :column 7, :line 7357, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7359, :column 4, :line 7359, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7359, :column 5, :line 7359, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7359, :column 7, :line 7359, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7359, :column 12, :line 7359, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} n] [^{:end-column 7, :end-line 7357, :column 5, :line 7357, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7357, :column 7, :line 7357, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7359, :column 5, :line 7359, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7359, :column 7, :line 7359, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7359, :column 12, :line 7359, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7357, :column 4, :line 7357, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7357, :column 5, :line 7357, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7357, :column 7, :line 7357, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7359, :column 4, :line 7359, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7359, :column 5, :line 7359, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7359, :column 7, :line 7359, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7359, :column 12, :line 7359, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} partition-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7561, :column 4, :line 7561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7561, :column 5, :line 7561, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} partition-by ^{:arglists (^{:end-column 7, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7561, :column 4, :line 7561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7561, :column 5, :line 7561, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7561, :column 5, :line 7561, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7561, :column 4, :line 7561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7561, :column 5, :line 7561, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} partition-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 47, :end-line 4900, :column 38, :line 4900, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4900, :column 39, :line 4900, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4900, :column 43, :line 4900, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4900, :column 45, :line 4900, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4900, :column 8, :line 4900, :file "cljs/core.cljs"} array-map-index-of-identical? ^{:arglists (^{:end-column 47, :end-line 4900, :column 38, :line 4900, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4900, :column 39, :line 4900, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4900, :column 43, :line 4900, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4900, :column 45, :line 4900, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4900, :column 8, :line 4900, :file "cljs/core.cljs"} {:arglists ([^{:end-column 43, :end-line 4900, :column 39, :line 4900, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4900, :column 43, :line 4900, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4900, :column 45, :line 4900, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 47, :end-line 4900, :column 38, :line 4900, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4900, :column 39, :line 4900, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4900, :column 43, :line 4900, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4900, :column 45, :line 4900, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4900, :column 8, :line 4900, :file "cljs/core.cljs"} array-map-index-of-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} ISequential ^{:impls #{cljs.core/Cons cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Iteration cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 26, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} ISequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash])} ->LazySeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/LazySeq [^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash])} ->LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 4662, :column 3, :line 4662, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4662, :column 4, :line 4662, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4662, :column 6, :line 4662, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4659, :column 8, :line 4659, :file "cljs/core.cljs"} equiv-map ^{:arglists (^{:end-column 8, :end-line 4662, :column 3, :line 4662, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4662, :column 4, :line 4662, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4662, :column 6, :line 4662, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4659, :column 8, :line 4659, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 4662, :column 4, :line 4662, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4662, :column 6, :line 4662, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 4662, :column 3, :line 4662, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4662, :column 4, :line 4662, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4662, :column 6, :line 4662, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4659, :column 8, :line 4659, :file "cljs/core.cljs"} equiv-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2656, :column 4, :line 2656, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2656, :column 5, :line 2656, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2660, :column 4, :line 2660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2660, :column 5, :line 2660, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2660, :column 10, :line 2660, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} object-array ^{:arglists (^{:end-column 17, :end-line 2656, :column 4, :line 2656, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2656, :column 5, :line 2656, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2660, :column 4, :line 2660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2660, :column 5, :line 2660, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2660, :column 10, :line 2660, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2656, :column 5, :line 2656, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2660, :column 5, :line 2660, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2660, :column 10, :line 2660, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2656, :column 4, :line 2656, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2656, :column 5, :line 2656, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2660, :column 4, :line 2660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2660, :column 5, :line 2660, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2660, :column 10, :line 2660, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} object-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 76, :column 20, :line 76, :file "cljs/core.cljs"} Keyword {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2312, :column 10, :line 2312, :file "cljs/core.cljs"} Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 47, :end-line 2312, :column 18, :line 2312, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 16, :end-line 8397, :column 4, :line 8397, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8397, :column 5, :line 8397, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8397, :column 9, :line 8397, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8401, :column 4, :line 8401, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8401, :column 5, :line 8401, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8401, :column 7, :line 8401, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8401, :column 11, :line 8401, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8391, :column 7, :line 8391, :file "cljs/core.cljs"} derive ^{:arglists (^{:end-column 16, :end-line 8397, :column 4, :line 8397, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8397, :column 5, :line 8397, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8397, :column 9, :line 8397, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8401, :column 4, :line 8401, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8401, :column 5, :line 8401, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8401, :column 7, :line 8401, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8401, :column 11, :line 8401, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8391, :column 7, :line 8391, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 8397, :column 5, :line 8397, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8397, :column 9, :line 8397, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8401, :column 5, :line 8401, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8401, :column 7, :line 8401, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8401, :column 11, :line 8401, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8397, :column 4, :line 8397, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8397, :column 5, :line 8397, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8397, :column 9, :line 8397, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8401, :column 4, :line 8401, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8401, :column 5, :line 8401, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8401, :column 7, :line 8401, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8401, :column 11, :line 8401, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8391, :column 7, :line 8391, :file "cljs/core.cljs"} derive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 4839, :column 16, :line 4839, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4839, :column 17, :line 4839, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 4839, :column 7, :line 4839, :file "cljs/core.cljs"} iterator ^{:arglists (^{:end-column 22, :end-line 4839, :column 16, :line 4839, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4839, :column 17, :line 4839, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 4839, :column 7, :line 4839, :file "cljs/core.cljs"} {:arglists (^cljs.core/Iterator [^{:end-column 22, :end-line 4839, :column 17, :line 4839, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 4839, :column 16, :line 4839, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4839, :column 17, :line 4839, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 4839, :column 7, :line 4839, :file "cljs/core.cljs"} iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2928, :column 16, :line 2928, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2928, :column 17, :line 2928, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2928, :column 7, :line 2928, :file "cljs/core.cljs"} seq-iter ^{:arglists (^{:end-column 22, :end-line 2928, :column 16, :line 2928, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2928, :column 17, :line 2928, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2928, :column 7, :line 2928, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:end-column 22, :end-line 2928, :column 17, :line 2928, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2928, :column 16, :line 2928, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2928, :column 17, :line 2928, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2928, :column 7, :line 2928, :file "cljs/core.cljs"} seq-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} IChunkedSeq ^{:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 26, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} IChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 8782, :column 32, :line 8782, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8782, :column 33, :line 8782, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8782, :column 8, :line 8782, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8782, :column 16, :line 8782, :file "cljs/core.cljs"} special-symbol? ^{:arglists (^{:end-column 35, :end-line 8782, :column 32, :line 8782, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8782, :column 33, :line 8782, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8782, :column 8, :line 8782, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8782, :column 16, :line 8782, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 35, :end-line 8782, :column 33, :line 8782, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 8782, :column 32, :line 8782, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8782, :column 33, :line 8782, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8782, :column 8, :line 8782, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8782, :column 16, :line 8782, :file "cljs/core.cljs"} special-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8379, :column 4, :line 8379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8379, :column 5, :line 8379, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8380, :column 4, :line 8380, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8380, :column 5, :line 8380, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8374, :column 7, :line 8374, :file "cljs/core.cljs"} ancestors ^{:arglists (^{:end-column 9, :end-line 8379, :column 4, :line 8379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8379, :column 5, :line 8379, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8380, :column 4, :line 8380, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8380, :column 5, :line 8380, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8374, :column 7, :line 8374, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8379, :column 5, :line 8379, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8380, :column 5, :line 8380, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8379, :column 4, :line 8379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8379, :column 5, :line 8379, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8380, :column 4, :line 8380, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8380, :column 5, :line 8380, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8374, :column 7, :line 8374, :file "cljs/core.cljs"} ancestors, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7393, :column 4, :line 7393, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7393, :column 5, :line 7393, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7393, :column 8, :line 7393, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7393, :column 13, :line 7393, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7399, :column 4, :line 7399, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7399, :column 5, :line 7399, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7399, :column 8, :line 7399, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7399, :column 19, :line 7399, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7399, :column 29, :line 7399, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7399, :column 38, :line 7399, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7389, :column 7, :line 7389, :file "cljs/core.cljs"} subseq ^{:arglists (^{:end-column 17, :end-line 7393, :column 4, :line 7393, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7393, :column 5, :line 7393, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7393, :column 8, :line 7393, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7393, :column 13, :line 7393, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7399, :column 4, :line 7399, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7399, :column 5, :line 7399, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7399, :column 8, :line 7399, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7399, :column 19, :line 7399, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7399, :column 29, :line 7399, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7399, :column 38, :line 7399, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7389, :column 7, :line 7389, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7393, :column 5, :line 7393, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7393, :column 8, :line 7393, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7393, :column 13, :line 7393, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 7399, :column 5, :line 7399, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7399, :column 8, :line 7399, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7399, :column 19, :line 7399, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7399, :column 29, :line 7399, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7399, :column 38, :line 7399, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7393, :column 4, :line 7393, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7393, :column 5, :line 7393, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7393, :column 8, :line 7393, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7393, :column 13, :line 7393, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7399, :column 4, :line 7399, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7399, :column 5, :line 7399, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7399, :column 8, :line 7399, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7399, :column 19, :line 7399, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7399, :column 29, :line 7399, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7399, :column 38, :line 7399, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7389, :column 7, :line 7389, :file "cljs/core.cljs"} subseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} LazyTransformer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3017, :column 10, :line 3017, :file "cljs/core.cljs"} LazyTransformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 81, :end-line 3017, :column 26, :line 3017, :file "cljs/core.cljs"} [^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8088, :column 4, :line 8088, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8089, :column 4, :line 8089, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8089, :column 5, :line 8089, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8084, :column 7, :line 8084, :file "cljs/core.cljs"} gensym ^{:arglists (^{:end-column 6, :end-line 8088, :column 4, :line 8088, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8089, :column 4, :line 8089, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8089, :column 5, :line 8089, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8084, :column 7, :line 8084, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 19, :end-line 8089, :column 5, :line 8089, :file "cljs/core.cljs"} prefix-string]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8088, :column 4, :line 8088, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8089, :column 4, :line 8089, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8089, :column 5, :line 8089, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8084, :column 7, :line 8084, :file "cljs/core.cljs"} gensym, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 255, :column 22, :line 255, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 255, :column 23, :line 255, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 255, :column 5, :line 255, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 255, :column 16, :line 255, :file "cljs/core.cljs"} -next ^{:arglists (^{:end-column 28, :end-line 255, :column 22, :line 255, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 255, :column 23, :line 255, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 255, :column 5, :line 255, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 255, :column 16, :line 255, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 255, :column 23, :line 255, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 255, :column 22, :line 255, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 255, :column 23, :line 255, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 255, :column 5, :line 255, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 255, :column 16, :line 255, :file "cljs/core.cljs"} -next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr])} ->HashCollisionNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/HashCollisionNode [^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr])} ->HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8115, :column 3, :line 8115, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8115, :column 4, :line 8115, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8113, :column 8, :line 8113, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8113, :column 16, :line 8113, :file "cljs/core.cljs"} delay? ^{:arglists (^{:end-column 6, :end-line 8115, :column 3, :line 8115, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8115, :column 4, :line 8115, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8113, :column 8, :line 8113, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8113, :column 16, :line 8113, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 8115, :column 4, :line 8115, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8115, :column 3, :line 8115, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8115, :column 4, :line 8115, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8113, :column 8, :line 8113, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8113, :column 16, :line 8113, :file "cljs/core.cljs"} delay?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5244, :column 10, :line 5244, :file "cljs/core.cljs"} create-inode-seq ^{:arglists (^{:end-column 11, :end-line 5789, :column 4, :line 5789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5789, :column 5, :line 5789, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5791, :column 4, :line 5791, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5791, :column 5, :line 5791, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5791, :column 11, :line 5791, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5791, :column 13, :line 5791, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5788, :column 8, :line 5788, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5789, :column 5, :line 5789, :file "cljs/core.cljs"} nodes] [^{:end-column 11, :end-line 5791, :column 5, :line 5791, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5791, :column 11, :line 5791, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5791, :column 13, :line 5791, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5789, :column 4, :line 5789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5789, :column 5, :line 5789, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5791, :column 4, :line 5791, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5791, :column 5, :line 5791, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5791, :column 11, :line 5791, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5791, :column 13, :line 5791, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5788, :column 8, :line 5788, :file "cljs/core.cljs"} create-inode-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3763, :column 3, :line 3763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3763, :column 4, :line 3763, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3759, :column 7, :line 3759, :file "cljs/core.cljs"} flatten ^{:arglists (^{:end-column 6, :end-line 3763, :column 3, :line 3763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3763, :column 4, :line 3763, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3759, :column 7, :line 3759, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3763, :column 4, :line 3763, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3763, :column 3, :line 3763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3763, :column 4, :line 3763, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3759, :column 7, :line 3759, :file "cljs/core.cljs"} flatten, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 267, :column 17, :line 267, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 267, :column 18, :line 267, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} -dissoc ^{:arglists (^{:end-column 25, :end-line 267, :column 17, :line 267, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 267, :column 18, :line 267, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 267, :column 18, :line 267, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 267, :column 17, :line 267, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 267, :column 18, :line 267, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} -dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1900, :column 15, :line 1900, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1900, :column 16, :line 1900, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} doubles ^{:arglists (^{:end-column 18, :end-line 1900, :column 15, :line 1900, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1900, :column 16, :line 1900, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1900, :column 16, :line 1900, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1900, :column 15, :line 1900, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1900, :column 16, :line 1900, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} doubles, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 261, :column 28, :line 261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 261, :column 29, :line 261, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 261, :column 34, :line 261, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 261, :column 5, :line 261, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 261, :column 13, :line 261, :file "cljs/core.cljs"} -contains-key? ^{:arglists (^{:end-column 36, :end-line 261, :column 28, :line 261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 261, :column 29, :line 261, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 261, :column 34, :line 261, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 261, :column 5, :line 261, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 261, :column 13, :line 261, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 261, :column 29, :line 261, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 261, :column 34, :line 261, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 261, :column 28, :line 261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 261, :column 29, :line 261, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 261, :column 34, :line 261, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 261, :column 5, :line 261, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 261, :column 13, :line 261, :file "cljs/core.cljs"} -contains-key?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8077, :column 3, :line 8077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8077, :column 4, :line 8077, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8077, :column 9, :line 8077, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8073, :column 7, :line 8073, :file "cljs/core.cljs"} remove-watch ^{:arglists (^{:end-column 13, :end-line 8077, :column 3, :line 8077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8077, :column 4, :line 8077, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8077, :column 9, :line 8077, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8073, :column 7, :line 8073, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8077, :column 4, :line 8077, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8077, :column 9, :line 8077, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8077, :column 3, :line 8077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8077, :column 4, :line 8077, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8077, :column 9, :line 8077, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8073, :column 7, :line 8073, :file "cljs/core.cljs"} remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8746, :column 5, :line 8746, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8746, :column 9, :line 8746, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8748, :column 5, :line 8748, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8748, :column 9, :line 8748, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8742, :column 7, :line 8742, :file "cljs/core.cljs"} ex-info ^{:arglists (^{:end-column 13, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8746, :column 5, :line 8746, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8746, :column 9, :line 8746, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8748, :column 5, :line 8748, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8748, :column 9, :line 8748, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8742, :column 7, :line 8742, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 8746, :column 5, :line 8746, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8746, :column 9, :line 8746, :file "cljs/core.cljs"} map] ^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 8748, :column 5, :line 8748, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8748, :column 9, :line 8748, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8746, :column 5, :line 8746, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8746, :column 9, :line 8746, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8748, :column 5, :line 8748, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8748, :column 9, :line 8748, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8742, :column 7, :line 8742, :file "cljs/core.cljs"} ex-info, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1446, :column 21, :line 1446, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1446, :column 22, :line 1446, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1446, :column 8, :line 1446, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1446, :column 16, :line 1446, :file "cljs/core.cljs"} ifn? ^{:arglists (^{:end-column 24, :end-line 1446, :column 21, :line 1446, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1446, :column 22, :line 1446, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1446, :column 8, :line 1446, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1446, :column 16, :line 1446, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 24, :end-line 1446, :column 22, :line 1446, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1446, :column 21, :line 1446, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1446, :column 22, :line 1446, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1446, :column 8, :line 1446, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1446, :column 16, :line 1446, :file "cljs/core.cljs"} ifn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 385, :column 14, :line 385, :file "cljs/core.cljs"} IAtom ^{:impls #{cljs.core/Atom}, :protocol-symbol true, :end-column 20, :end-line 385, :column 14, :line 385, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 385, :column 14, :line 385, :file "cljs/core.cljs"} IAtom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash])} ->PersistentQueue ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentQueue [^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash])} ->PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 343, :column 14, :line 343, :file "cljs/core.cljs"} IWatchable ^{:impls #{cljs.core/Atom}, :protocol-symbol true, :end-column 25, :end-line 343, :column 14, :line 343, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 343, :column 14, :line 343, :file "cljs/core.cljs"} IWatchable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter])} ->Stepper ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter])} {:arglists (^cljs.core/Stepper [^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter])} ->Stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3889, :column 22, :line 3889, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3889, :column 23, :line 3889, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3889, :column 8, :line 3889, :file "cljs/core.cljs"} pv-fresh-node ^{:arglists (^{:end-column 28, :end-line 3889, :column 22, :line 3889, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3889, :column 23, :line 3889, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3889, :column 8, :line 3889, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3889, :column 23, :line 3889, :file "cljs/core.cljs"} edit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3889, :column 22, :line 3889, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3889, :column 23, :line 3889, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3889, :column 8, :line 3889, :file "cljs/core.cljs"} pv-fresh-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 4169, :column 10, :line 4169, :file "cljs/core.cljs"} subvec ^{:arglists (^{:end-column 13, :end-line 4363, :column 4, :line 4363, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4363, :column 5, :line 4363, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4363, :column 7, :line 4363, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4365, :column 4, :line 4365, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4365, :column 5, :line 4365, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4365, :column 7, :line 4365, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4365, :column 13, :line 4365, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 4357, :column 7, :line 4357, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 4363, :column 5, :line 4363, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4363, :column 7, :line 4363, :file "cljs/core.cljs"} start] ^cljs.core/Subvec [^{:end-column 7, :end-line 4365, :column 5, :line 4365, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4365, :column 7, :line 4365, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4365, :column 13, :line 4365, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 4363, :column 4, :line 4363, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4363, :column 5, :line 4363, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4363, :column 7, :line 4363, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4365, :column 4, :line 4365, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4365, :column 5, :line 4365, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4365, :column 7, :line 4365, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4365, :column 13, :line 4365, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 4357, :column 7, :line 4357, :file "cljs/core.cljs"} subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 363, :column 15, :line 363, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 363, :column 16, :line 363, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -pop! ^{:arglists (^{:end-column 22, :end-line 363, :column 15, :line 363, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 363, :column 16, :line 363, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 363, :column 16, :line 363, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 363, :column 15, :line 363, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 363, :column 16, :line 363, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3192, :column 5, :line 3192, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3193, :column 7, :line 3193, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3195, :column 4, :line 3195, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3195, :column 5, :line 3195, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3195, :column 7, :line 3195, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3195, :column 12, :line 3195, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3197, :column 4, :line 3197, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3197, :column 5, :line 3197, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3197, :column 7, :line 3197, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3197, :column 12, :line 3197, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3197, :column 17, :line 3197, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3199, :column 4, :line 3199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3199, :column 5, :line 3199, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3199, :column 7, :line 3199, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3199, :column 12, :line 3199, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3199, :column 17, :line 3199, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3199, :column 22, :line 3199, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3199, :column 24, :line 3199, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3188, :column 7, :line 3188, :file "cljs/core.cljs"} partial ^{:arglists (^{:end-column 7, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3192, :column 5, :line 3192, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3193, :column 7, :line 3193, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3195, :column 4, :line 3195, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3195, :column 5, :line 3195, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3195, :column 7, :line 3195, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3195, :column 12, :line 3195, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3197, :column 4, :line 3197, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3197, :column 5, :line 3197, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3197, :column 7, :line 3197, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3197, :column 12, :line 3197, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3197, :column 17, :line 3197, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3199, :column 4, :line 3199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3199, :column 5, :line 3199, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3199, :column 7, :line 3199, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3199, :column 12, :line 3199, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3199, :column 17, :line 3199, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3199, :column 22, :line 3199, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3199, :column 24, :line 3199, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3188, :column 7, :line 3188, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3192, :column 5, :line 3192, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3193, :column 7, :line 3193, :file "cljs/core.cljs"} arg1] ^function [^{:end-column 7, :end-line 3195, :column 5, :line 3195, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3195, :column 7, :line 3195, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3195, :column 12, :line 3195, :file "cljs/core.cljs"} arg2] ^function [^{:end-column 7, :end-line 3197, :column 5, :line 3197, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3197, :column 7, :line 3197, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3197, :column 12, :line 3197, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3197, :column 17, :line 3197, :file "cljs/core.cljs"} arg3] ^function [^{:end-column 7, :end-line 3199, :column 5, :line 3199, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3199, :column 7, :line 3199, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3199, :column 12, :line 3199, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3199, :column 17, :line 3199, :file "cljs/core.cljs"} arg3 & ^{:end-column 29, :end-line 3199, :column 24, :line 3199, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3192, :column 5, :line 3192, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3193, :column 7, :line 3193, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3195, :column 4, :line 3195, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3195, :column 5, :line 3195, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3195, :column 7, :line 3195, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3195, :column 12, :line 3195, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3197, :column 4, :line 3197, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3197, :column 5, :line 3197, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3197, :column 7, :line 3197, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3197, :column 12, :line 3197, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3197, :column 17, :line 3197, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3199, :column 4, :line 3199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3199, :column 5, :line 3199, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3199, :column 7, :line 3199, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3199, :column 12, :line 3199, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3199, :column 17, :line 3199, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3199, :column 22, :line 3199, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3199, :column 24, :line 3199, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3188, :column 7, :line 3188, :file "cljs/core.cljs"} partial, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1382, :column 8, :line 1382, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1382, :column 16, :line 1382, :file "cljs/core.cljs"} chunked-seq? ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1382, :column 8, :line 1382, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1382, :column 16, :line 1382, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1382, :column 8, :line 1382, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1382, :column 16, :line 1382, :file "cljs/core.cljs"} chunked-seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3653, :column 3, :line 3653, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3653, :column 4, :line 3653, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3653, :column 6, :line 3653, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3651, :column 7, :line 3651, :file "cljs/core.cljs"} replicate ^{:arglists (^{:end-column 8, :end-line 3653, :column 3, :line 3653, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3653, :column 4, :line 3653, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3653, :column 6, :line 3653, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3651, :column 7, :line 3651, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3653, :column 4, :line 3653, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3653, :column 6, :line 3653, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3653, :column 3, :line 3653, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3653, :column 4, :line 3653, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3653, :column 6, :line 3653, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3651, :column 7, :line 3651, :file "cljs/core.cljs"} replicate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4594, :column 10, :line 4594, :file "cljs/core.cljs"} PersistentQueue {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4594, :column 10, :line 4594, :file "cljs/core.cljs"} PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 4594, :column 26, :line 4594, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 9, :end-line 7316, :column 4, :line 7316, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7316, :column 5, :line 7316, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7316, :column 7, :line 7316, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7317, :column 4, :line 7317, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7317, :column 5, :line 7317, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7317, :column 7, :line 7317, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7317, :column 9, :line 7317, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7318, :column 4, :line 7318, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7318, :column 5, :line 7318, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7318, :column 7, :line 7318, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7318, :column 9, :line 7318, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7318, :column 11, :line 7318, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7318, :column 13, :line 7318, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7314, :column 7, :line 7314, :file "cljs/core.cljs"} min-key ^{:arglists (^{:end-column 9, :end-line 7316, :column 4, :line 7316, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7316, :column 5, :line 7316, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7316, :column 7, :line 7316, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7317, :column 4, :line 7317, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7317, :column 5, :line 7317, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7317, :column 7, :line 7317, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7317, :column 9, :line 7317, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7318, :column 4, :line 7318, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7318, :column 5, :line 7318, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7318, :column 7, :line 7318, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7318, :column 9, :line 7318, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7318, :column 11, :line 7318, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7318, :column 13, :line 7318, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7314, :column 7, :line 7314, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7316, :column 5, :line 7316, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7316, :column 7, :line 7316, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7317, :column 5, :line 7317, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7317, :column 7, :line 7317, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7317, :column 9, :line 7317, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7318, :column 5, :line 7318, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7318, :column 7, :line 7318, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7318, :column 9, :line 7318, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 7318, :column 13, :line 7318, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7316, :column 4, :line 7316, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7316, :column 5, :line 7316, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7316, :column 7, :line 7316, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7317, :column 4, :line 7317, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7317, :column 5, :line 7317, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7317, :column 7, :line 7317, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7317, :column 9, :line 7317, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7318, :column 4, :line 7318, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7318, :column 5, :line 7318, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7318, :column 7, :line 7318, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7318, :column 9, :line 7318, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7318, :column 11, :line 7318, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7318, :column 13, :line 7318, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7314, :column 7, :line 7314, :file "cljs/core.cljs"} min-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2087, :column 18, :line 2087, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2087, :column 19, :line 2087, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2087, :column 8, :line 2087, :file "cljs/core.cljs"} hash-iset ^{:arglists (^{:end-column 21, :end-line 2087, :column 18, :line 2087, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2087, :column 19, :line 2087, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2087, :column 8, :line 2087, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 2087, :column 19, :line 2087, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2087, :column 18, :line 2087, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2087, :column 19, :line 2087, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2087, :column 8, :line 2087, :file "cljs/core.cljs"} hash-iset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 768, :column 7, :line 768, :file "cljs/core.cljs"} reduced ^{:arglists (^{:end-column 6, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 768, :column 7, :line 768, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 6, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 768, :column 7, :line 768, :file "cljs/core.cljs"} reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7662, :column 3, :line 7662, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7662, :column 4, :line 7662, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7662, :column 7, :line 7662, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7660, :column 7, :line 7660, :file "cljs/core.cljs"} re-matches ^{:arglists (^{:end-column 9, :end-line 7662, :column 3, :line 7662, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7662, :column 4, :line 7662, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7662, :column 7, :line 7662, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7660, :column 7, :line 7660, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7662, :column 4, :line 7662, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7662, :column 7, :line 7662, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7662, :column 3, :line 7662, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7662, :column 4, :line 7662, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7662, :column 7, :line 7662, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7660, :column 7, :line 7660, :file "cljs/core.cljs"} re-matches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6780, :column 3, :line 6780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6780, :column 4, :line 6780, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6780, :column 6, :line 6780, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6777, :column 7, :line 6777, :file "cljs/core.cljs"} array-map ^{:arglists (^{:end-column 14, :end-line 6780, :column 3, :line 6780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6780, :column 4, :line 6780, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6780, :column 6, :line 6780, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6777, :column 7, :line 6777, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [& ^{:end-column 14, :end-line 6780, :column 6, :line 6780, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6780, :column 3, :line 6780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6780, :column 4, :line 6780, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6780, :column 6, :line 6780, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6777, :column 7, :line 6777, :file "cljs/core.cljs"} array-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 365, :column 14, :line 365, :file "cljs/core.cljs"} ITransientSet ^{:impls #{cljs.core/TransientHashSet}, :protocol-symbol true, :end-column 28, :end-line 365, :column 14, :line 365, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 365, :column 14, :line 365, :file "cljs/core.cljs"} ITransientSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1791, :column 30, :line 1791, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1791, :column 31, :line 1791, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1791, :column 8, :line 1791, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1791, :column 15, :line 1791, :file "cljs/core.cljs"} unchecked-byte ^{:arglists (^{:end-column 33, :end-line 1791, :column 30, :line 1791, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1791, :column 31, :line 1791, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1791, :column 8, :line 1791, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1791, :column 15, :line 1791, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1791, :column 31, :line 1791, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1791, :column 30, :line 1791, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1791, :column 31, :line 1791, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1791, :column 8, :line 1791, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1791, :column 15, :line 1791, :file "cljs/core.cljs"} unchecked-byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 5303, :column 10, :line 5303, :file "cljs/core.cljs"} ArrayNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5516, :column 10, :line 5516, :file "cljs/core.cljs"} ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 5516, :column 20, :line 5516, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash])} ->ChunkedSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash])} ->ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3428, :column 4, :line 3428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3436, :column 4, :line 3436, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3436, :column 5, :line 3436, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3436, :column 8, :line 3436, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3444, :column 4, :line 3444, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3444, :column 5, :line 3444, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3444, :column 8, :line 3444, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3444, :column 11, :line 3444, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3452, :column 4, :line 3452, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3452, :column 5, :line 3452, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3452, :column 8, :line 3452, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3452, :column 11, :line 3452, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3452, :column 14, :line 3452, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3452, :column 16, :line 3452, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3423, :column 7, :line 3423, :file "cljs/core.cljs"} every-pred ^{:arglists (^{:end-column 7, :end-line 3428, :column 4, :line 3428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3436, :column 4, :line 3436, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3436, :column 5, :line 3436, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3436, :column 8, :line 3436, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3444, :column 4, :line 3444, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3444, :column 5, :line 3444, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3444, :column 8, :line 3444, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3444, :column 11, :line 3444, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3452, :column 4, :line 3452, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3452, :column 5, :line 3452, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3452, :column 8, :line 3452, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3452, :column 11, :line 3452, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3452, :column 14, :line 3452, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3452, :column 16, :line 3452, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3423, :column 7, :line 3423, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 3436, :column 5, :line 3436, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3436, :column 8, :line 3436, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 3444, :column 5, :line 3444, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3444, :column 8, :line 3444, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3444, :column 11, :line 3444, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 3452, :column 5, :line 3452, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3452, :column 8, :line 3452, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3452, :column 11, :line 3452, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 3452, :column 16, :line 3452, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3428, :column 4, :line 3428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3436, :column 4, :line 3436, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3436, :column 5, :line 3436, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3436, :column 8, :line 3436, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3444, :column 4, :line 3444, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3444, :column 5, :line 3444, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3444, :column 8, :line 3444, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3444, :column 11, :line 3444, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3452, :column 4, :line 3452, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3452, :column 5, :line 3452, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3452, :column 8, :line 3452, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3452, :column 11, :line 3452, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3452, :column 14, :line 3452, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3452, :column 16, :line 3452, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3423, :column 7, :line 3423, :file "cljs/core.cljs"} every-pred, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 5002, :column 10, :line 5002, :file "cljs/core.cljs"} keys ^{:arglists (^{:end-column 13, :end-line 6872, :column 3, :line 6872, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6872, :column 4, :line 6872, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6870, :column 7, :line 6870, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6872, :column 4, :line 6872, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6872, :column 3, :line 6872, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6872, :column 4, :line 6872, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6870, :column 7, :line 6870, :file "cljs/core.cljs"} keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} {:arglists (^js/Error [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5004, :column 10, :line 5004, :file "cljs/core.cljs"} PersistentArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5004, :column 10, :line 5004, :file "cljs/core.cljs"} PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 5004, :column 29, :line 5004, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 1478, :column 4, :line 1478, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1478, :column 5, :line 1478, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1479, :column 4, :line 1479, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1479, :column 5, :line 1479, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1480, :column 4, :line 1480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1480, :column 5, :line 1480, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1480, :column 7, :line 1480, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1480, :column 9, :line 1480, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1480, :column 11, :line 1480, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1476, :column 8, :line 1476, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1476, :column 16, :line 1476, :file "cljs/core.cljs"} distinct? ^{:arglists (^{:end-column 7, :end-line 1478, :column 4, :line 1478, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1478, :column 5, :line 1478, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1479, :column 4, :line 1479, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1479, :column 5, :line 1479, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1480, :column 4, :line 1480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1480, :column 5, :line 1480, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1480, :column 7, :line 1480, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1480, :column 9, :line 1480, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1480, :column 11, :line 1480, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1476, :column 8, :line 1476, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1476, :column 16, :line 1476, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1478, :column 5, :line 1478, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 1479, :column 5, :line 1479, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} y] ^cljs.core/boolean [^{:end-column 7, :end-line 1480, :column 5, :line 1480, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1480, :column 7, :line 1480, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1480, :column 11, :line 1480, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1478, :column 4, :line 1478, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1478, :column 5, :line 1478, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1479, :column 4, :line 1479, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1479, :column 5, :line 1479, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1480, :column 4, :line 1480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1480, :column 5, :line 1480, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1480, :column 7, :line 1480, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1480, :column 9, :line 1480, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1480, :column 11, :line 1480, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1476, :column 8, :line 1476, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1476, :column 16, :line 1476, :file "cljs/core.cljs"} distinct?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 42, :end-line 4657, :column 1, :line 4657, :file "cljs/core.cljs"} never-equiv ^{:private true, :end-column 42, :end-line 4657, :column 1, :line 4657, :file "cljs/core.cljs"} {:tag cljs.core/NeverEquiv, :op :var, :name ^{:private true, :end-column 42, :end-line 4657, :column 1, :line 4657, :file "cljs/core.cljs"} never-equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2943, :column 10, :line 2943, :file "cljs/core.cljs"} Stepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2943, :column 10, :line 2943, :file "cljs/core.cljs"} Stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 30, :end-line 2943, :column 18, :line 2943, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter], :protocols #{Object}}, ^{:arglists (^{:end-column 34, :end-line 1793, :column 31, :line 1793, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1793, :column 32, :line 1793, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1793, :column 8, :line 1793, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1793, :column 15, :line 1793, :file "cljs/core.cljs"} unchecked-short ^{:arglists (^{:end-column 34, :end-line 1793, :column 31, :line 1793, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1793, :column 32, :line 1793, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1793, :column 8, :line 1793, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1793, :column 15, :line 1793, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1793, :column 32, :line 1793, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1793, :column 31, :line 1793, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1793, :column 32, :line 1793, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1793, :column 8, :line 1793, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1793, :column 15, :line 1793, :file "cljs/core.cljs"} unchecked-short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash])} ->Range ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Range [^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash])} ->Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8703, :column 3, :line 8703, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8703, :column 4, :line 8703, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8701, :column 7, :line 8701, :file "cljs/core.cljs"} methods ^{:arglists (^{:end-column 12, :end-line 8703, :column 3, :line 8703, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8703, :column 4, :line 8703, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8701, :column 7, :line 8701, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8703, :column 4, :line 8703, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8703, :column 3, :line 8703, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8703, :column 4, :line 8703, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8701, :column 7, :line 8701, :file "cljs/core.cljs"} methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3141, :column 3, :line 3141, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3139, :column 8, :line 3139, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3139, :column 16, :line 3139, :file "cljs/core.cljs"} odd? ^{:arglists (^{:end-column 6, :end-line 3141, :column 3, :line 3141, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3139, :column 8, :line 3139, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3139, :column 16, :line 3139, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3141, :column 3, :line 3141, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3139, :column 8, :line 3139, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3139, :column 16, :line 3139, :file "cljs/core.cljs"} odd?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end])} ->ArrayChunk ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end])} {:arglists (^cljs.core/ArrayChunk [^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end])} ->ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 2940, :column 24, :line 2940, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2940, :column 25, :line 2940, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2940, :column 7, :line 2940, :file "cljs/core.cljs"} lazy-transformer ^{:arglists (^{:end-column 33, :end-line 2940, :column 24, :line 2940, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2940, :column 25, :line 2940, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2940, :column 7, :line 2940, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:end-column 33, :end-line 2940, :column 25, :line 2940, :file "cljs/core.cljs"} stepper]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 2940, :column 24, :line 2940, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2940, :column 25, :line 2940, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2940, :column 7, :line 2940, :file "cljs/core.cljs"} lazy-transformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 787, :column 4, :line 787, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 787, :column 5, :line 787, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 787, :column 12, :line 787, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 798, :column 4, :line 798, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 798, :column 5, :line 798, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 798, :column 12, :line 798, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 798, :column 14, :line 798, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 807, :column 5, :line 807, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 807, :column 12, :line 807, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 807, :column 14, :line 807, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 807, :column 18, :line 807, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 784, :column 8, :line 784, :file "cljs/core.cljs"} ci-reduce ^{:arglists (^{:end-column 14, :end-line 787, :column 4, :line 787, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 787, :column 5, :line 787, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 787, :column 12, :line 787, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 798, :column 4, :line 798, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 798, :column 5, :line 798, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 798, :column 12, :line 798, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 798, :column 14, :line 798, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 807, :column 5, :line 807, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 807, :column 12, :line 807, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 807, :column 14, :line 807, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 807, :column 18, :line 807, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 784, :column 8, :line 784, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 787, :column 5, :line 787, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 787, :column 12, :line 787, :file "cljs/core.cljs"} f] [^{:end-column 12, :end-line 798, :column 5, :line 798, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 798, :column 12, :line 798, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 798, :column 14, :line 798, :file "cljs/core.cljs"} val] [^{:end-column 12, :end-line 807, :column 5, :line 807, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 807, :column 12, :line 807, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 807, :column 14, :line 807, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 807, :column 18, :line 807, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 787, :column 4, :line 787, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 787, :column 5, :line 787, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 787, :column 12, :line 787, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 798, :column 4, :line 798, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 798, :column 5, :line 798, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 798, :column 12, :line 798, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 798, :column 14, :line 798, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 807, :column 5, :line 807, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 807, :column 12, :line 807, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 807, :column 14, :line 807, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 807, :column 18, :line 807, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 784, :column 8, :line 784, :file "cljs/core.cljs"} ci-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3 ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 8503, :column 16, :line 8503, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8503, :column 17, :line 8503, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8503, :column 20, :line 8503, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8503, :column 4, :line 8503, :file "cljs/core.cljs"} -get-method ^{:arglists (^{:end-column 33, :end-line 8503, :column 16, :line 8503, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8503, :column 17, :line 8503, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8503, :column 20, :line 8503, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8503, :column 4, :line 8503, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8503, :column 17, :line 8503, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8503, :column 20, :line 8503, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 8503, :column 16, :line 8503, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8503, :column 17, :line 8503, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8503, :column 20, :line 8503, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8503, :column 4, :line 8503, :file "cljs/core.cljs"} -get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7572, :column 3, :line 7572, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7572, :column 4, :line 7572, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} frequencies ^{:arglists (^{:end-column 9, :end-line 7572, :column 3, :line 7572, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7572, :column 4, :line 7572, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 7572, :column 4, :line 7572, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7572, :column 3, :line 7572, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7572, :column 4, :line 7572, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} frequencies, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1367, :column 3, :line 1367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1367, :column 4, :line 1367, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1365, :column 8, :line 1365, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1365, :column 16, :line 1365, :file "cljs/core.cljs"} reduceable? ^{:arglists (^{:end-column 6, :end-line 1367, :column 3, :line 1367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1367, :column 4, :line 1367, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1365, :column 8, :line 1365, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1365, :column 16, :line 1365, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1367, :column 4, :line 1367, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1367, :column 3, :line 1367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1367, :column 4, :line 1367, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1365, :column 8, :line 1365, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1365, :column 16, :line 1365, :file "cljs/core.cljs"} reduceable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 33, :end-line 478, :column 1, :line 478, :file "cljs/core.cljs"} string-hash-cache ^{:end-column 33, :end-line 478, :column 1, :line 478, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 33, :end-line 478, :column 1, :line 478, :file "cljs/core.cljs"} string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7408, :column 8, :line 7408, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7414, :column 8, :line 7414, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7414, :column 19, :line 7414, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7414, :column 29, :line 7414, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7414, :column 38, :line 7414, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} rsubseq ^{:arglists (^{:end-column 17, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7408, :column 8, :line 7408, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7414, :column 8, :line 7414, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7414, :column 19, :line 7414, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7414, :column 29, :line 7414, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7414, :column 38, :line 7414, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7408, :column 8, :line 7408, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7414, :column 8, :line 7414, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7414, :column 19, :line 7414, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7414, :column 29, :line 7414, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7414, :column 38, :line 7414, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7408, :column 8, :line 7408, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7414, :column 8, :line 7414, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7414, :column 19, :line 7414, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7414, :column 29, :line 7414, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7414, :column 38, :line 7414, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} rsubseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 760, :column 3, :line 760, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 760, :column 4, :line 760, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 758, :column 7, :line 758, :file "cljs/core.cljs"} inc ^{:arglists (^{:end-column 6, :end-line 760, :column 3, :line 760, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 760, :column 4, :line 760, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 758, :column 7, :line 758, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 760, :column 4, :line 760, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 760, :column 3, :line 760, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 760, :column 4, :line 760, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 758, :column 7, :line 758, :file "cljs/core.cljs"} inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4709, :column 18, :line 4709, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4709, :column 19, :line 4709, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4709, :column 23, :line 4709, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4709, :column 8, :line 4709, :file "cljs/core.cljs"} obj-clone ^{:arglists (^{:end-column 26, :end-line 4709, :column 18, :line 4709, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4709, :column 19, :line 4709, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4709, :column 23, :line 4709, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4709, :column 8, :line 4709, :file "cljs/core.cljs"} {:arglists (^object [^{:end-column 23, :end-line 4709, :column 19, :line 4709, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4709, :column 23, :line 4709, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4709, :column 18, :line 4709, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4709, :column 19, :line 4709, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4709, :column 23, :line 4709, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4709, :column 8, :line 4709, :file "cljs/core.cljs"} obj-clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 8708, :column 3, :line 8708, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8708, :column 4, :line 8708, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8708, :column 12, :line 8708, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8705, :column 7, :line 8705, :file "cljs/core.cljs"} get-method ^{:arglists (^{:end-column 25, :end-line 8708, :column 3, :line 8708, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8708, :column 4, :line 8708, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8708, :column 12, :line 8708, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8705, :column 7, :line 8705, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8708, :column 4, :line 8708, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8708, :column 12, :line 8708, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 8708, :column 3, :line 8708, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8708, :column 4, :line 8708, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8708, :column 12, :line 8708, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8705, :column 7, :line 8705, :file "cljs/core.cljs"} get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 3933, :column 35, :line 3933, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3933, :column 36, :line 3933, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3933, :column 38, :line 3933, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} vector-index-out-of-bounds ^{:arglists (^{:end-column 42, :end-line 3933, :column 35, :line 3933, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3933, :column 36, :line 3933, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3933, :column 38, :line 3933, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 38, :end-line 3933, :column 36, :line 3933, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3933, :column 38, :line 3933, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 3933, :column 35, :line 3933, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3933, :column 36, :line 3933, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3933, :column 38, :line 3933, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} vector-index-out-of-bounds, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1952, :column 3, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 6, :line 1952, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1950, :column 7, :line 1950, :file "cljs/core.cljs"} bit-clear ^{:arglists (^{:end-column 8, :end-line 1952, :column 3, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 6, :line 1952, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1950, :column 7, :line 1950, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 6, :line 1952, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1952, :column 3, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 6, :line 1952, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1950, :column 7, :line 1950, :file "cljs/core.cljs"} bit-clear, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7419, :column 10, :line 7419, :file "cljs/core.cljs"} Range {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7419, :column 10, :line 7419, :file "cljs/core.cljs"} Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 7419, :column 16, :line 7419, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 10, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3711, :column 5, :line 3711, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3720, :column 4, :line 3720, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3720, :column 5, :line 3720, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3720, :column 10, :line 3720, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3707, :column 7, :line 3707, :file "cljs/core.cljs"} filter ^{:arglists (^{:end-column 10, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3711, :column 5, :line 3711, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3720, :column 4, :line 3720, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3720, :column 5, :line 3720, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3720, :column 10, :line 3720, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3707, :column 7, :line 3707, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3711, :column 5, :line 3711, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3720, :column 5, :line 3720, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3720, :column 10, :line 3720, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3711, :column 5, :line 3711, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3720, :column 4, :line 3720, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3720, :column 5, :line 3720, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3720, :column 10, :line 3720, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3707, :column 7, :line 3707, :file "cljs/core.cljs"} filter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMapSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 49, :end-line 5244, :column 27, :line 5244, :file "cljs/core.cljs"} create-array-node-seq ^{:arglists (^{:end-column 11, :end-line 5849, :column 4, :line 5849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5849, :column 5, :line 5849, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5850, :column 4, :line 5850, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5850, :column 5, :line 5850, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5850, :column 10, :line 5850, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5850, :column 16, :line 5850, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5850, :column 18, :line 5850, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5848, :column 8, :line 5848, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5849, :column 5, :line 5849, :file "cljs/core.cljs"} nodes] [^{:end-column 10, :end-line 5850, :column 5, :line 5850, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5850, :column 10, :line 5850, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5850, :column 16, :line 5850, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5850, :column 18, :line 5850, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5849, :column 4, :line 5849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5849, :column 5, :line 5849, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5850, :column 4, :line 5850, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5850, :column 5, :line 5850, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5850, :column 10, :line 5850, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5850, :column 16, :line 5850, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5850, :column 18, :line 5850, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5848, :column 8, :line 5848, :file "cljs/core.cljs"} create-array-node-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 362, :column 28, :line 362, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} -assoc-n! ^{:arglists (^{:end-column 32, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 362, :column 28, :line 362, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 362, :column 28, :line 362, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 362, :column 28, :line 362, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} -assoc-n!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} IWithMeta ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/t9657 cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 24, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} IWithMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 475, :column 10, :line 475, :file "cljs/core.cljs"} list ^{:arglists (^{:end-column 18, :end-line 2236, :column 12, :line 2236, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2236, :column 13, :line 2236, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2236, :column 15, :line 2236, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2236, :column 7, :line 2236, :file "cljs/core.cljs"} {:arglists (^cljs.core/not-native [& ^{:end-column 18, :end-line 2236, :column 15, :line 2236, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2236, :column 12, :line 2236, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2236, :column 13, :line 2236, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2236, :column 15, :line 2236, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2236, :column 7, :line 2236, :file "cljs/core.cljs"} list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1684, :column 5, :line 1684, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1684, :column 7, :line 1684, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1685, :column 4, :line 1685, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1685, :column 5, :line 1685, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1685, :column 7, :line 1685, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1685, :column 9, :line 1685, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1685, :column 11, :line 1685, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1680, :column 8, :line 1680, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1680, :column 15, :line 1680, :file "cljs/core.cljs"} + ^{:arglists (^{:end-column 6, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1684, :column 5, :line 1684, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1684, :column 7, :line 1684, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1685, :column 4, :line 1685, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1685, :column 5, :line 1685, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1685, :column 7, :line 1685, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1685, :column 9, :line 1685, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1685, :column 11, :line 1685, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1680, :column 8, :line 1680, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1680, :column 15, :line 1680, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1684, :column 5, :line 1684, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1684, :column 7, :line 1684, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1685, :column 5, :line 1685, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1685, :column 7, :line 1685, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1685, :column 11, :line 1685, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1684, :column 5, :line 1684, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1684, :column 7, :line 1684, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1685, :column 4, :line 1685, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1685, :column 5, :line 1685, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1685, :column 7, :line 1685, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1685, :column 9, :line 1685, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1685, :column 11, :line 1685, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1680, :column 8, :line 1680, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1680, :column 15, :line 1680, :file "cljs/core.cljs"} +, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7526, :column 3, :line 7526, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} split-with ^{:arglists (^{:end-column 14, :end-line 7526, :column 3, :line 7526, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 9, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7526, :column 3, :line 7526, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} split-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr])} ->VectorNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr])} ->VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} aset ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 413, :column 31, :line 413, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 413, :column 32, :line 413, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 413, :column 34, :line 413, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 413, :column 8, :line 413, :file "cljs/core.cljs"} number, :end-column 31, :end-line 413, :column 15, :line 413, :file "cljs/core.cljs"} int-rotate-left ^{:arglists (^{:end-column 36, :end-line 413, :column 31, :line 413, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 413, :column 32, :line 413, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 413, :column 34, :line 413, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 413, :column 8, :line 413, :file "cljs/core.cljs"} number, :end-column 31, :end-line 413, :column 15, :line 413, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 34, :end-line 413, :column 32, :line 413, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 413, :column 34, :line 413, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 413, :column 31, :line 413, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 413, :column 32, :line 413, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 413, :column 34, :line 413, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 413, :column 8, :line 413, :file "cljs/core.cljs"} number, :end-column 31, :end-line 413, :column 15, :line 413, :file "cljs/core.cljs"} int-rotate-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2361, :column 4, :line 2361, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2361, :column 5, :line 2361, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2370, :column 4, :line 2370, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2370, :column 5, :line 2370, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2370, :column 8, :line 2370, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2358, :column 7, :line 2358, :file "cljs/core.cljs"} keyword ^{:arglists (^{:end-column 10, :end-line 2361, :column 4, :line 2361, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2361, :column 5, :line 2361, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2370, :column 4, :line 2370, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2370, :column 5, :line 2370, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2370, :column 8, :line 2370, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2358, :column 7, :line 2358, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 2361, :column 5, :line 2361, :file "cljs/core.cljs"} name] ^cljs.core/Keyword [^{:end-column 8, :end-line 2370, :column 5, :line 2370, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2370, :column 8, :line 2370, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2361, :column 4, :line 2361, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2361, :column 5, :line 2361, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2370, :column 4, :line 2370, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2370, :column 5, :line 2370, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2370, :column 8, :line 2370, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2358, :column 7, :line 2358, :file "cljs/core.cljs"} keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash])} ->Cons ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Cons [^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash])} ->Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 6164, :column 28, :line 6164, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6164, :column 29, :line 6164, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6164, :column 34, :line 6164, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6164, :column 45, :line 6164, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6164, :column 8, :line 6164, :file "cljs/core.cljs"} create-tree-map-seq ^{:arglists (^{:end-column 49, :end-line 6164, :column 28, :line 6164, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6164, :column 29, :line 6164, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6164, :column 34, :line 6164, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6164, :column 45, :line 6164, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6164, :column 8, :line 6164, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 34, :end-line 6164, :column 29, :line 6164, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6164, :column 34, :line 6164, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6164, :column 45, :line 6164, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 6164, :column 28, :line 6164, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6164, :column 29, :line 6164, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6164, :column 34, :line 6164, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6164, :column 45, :line 6164, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6164, :column 8, :line 6164, :file "cljs/core.cljs"} create-tree-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 239, :column 14, :line 239, :file "cljs/core.cljs"} ICollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 26, :end-line 239, :column 14, :line 239, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 239, :column 14, :line 239, :file "cljs/core.cljs"} ICollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2998, :column 4, :line 2998, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2998, :column 5, :line 2998, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 2998, :column 11, :line 2998, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3001, :column 4, :line 3001, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3001, :column 5, :line 3001, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3001, :column 11, :line 3001, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3001, :column 17, :line 3001, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} multi-stepper ^{:arglists (^{:end-column 17, :end-line 2998, :column 4, :line 2998, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2998, :column 5, :line 2998, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 2998, :column 11, :line 2998, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3001, :column 4, :line 3001, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3001, :column 5, :line 3001, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3001, :column 11, :line 3001, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3001, :column 17, :line 3001, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 2998, :column 5, :line 2998, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 2998, :column 11, :line 2998, :file "cljs/core.cljs"} iters] ^cljs.core/MultiStepper [^{:end-column 11, :end-line 3001, :column 5, :line 3001, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3001, :column 11, :line 3001, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3001, :column 17, :line 3001, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2998, :column 4, :line 2998, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2998, :column 5, :line 2998, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 2998, :column 11, :line 2998, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3001, :column 4, :line 3001, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3001, :column 5, :line 3001, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3001, :column 11, :line 3001, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3001, :column 17, :line 3001, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} multi-stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1896, :column 13, :line 1896, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1896, :column 14, :line 1896, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1896, :column 7, :line 1896, :file "cljs/core.cljs"} chars ^{:arglists (^{:end-column 16, :end-line 1896, :column 13, :line 1896, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1896, :column 14, :line 1896, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1896, :column 7, :line 1896, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1896, :column 14, :line 1896, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1896, :column 13, :line 1896, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1896, :column 14, :line 1896, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1896, :column 7, :line 1896, :file "cljs/core.cljs"} chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2038, :column 4, :line 2038, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2038, :column 5, :line 2038, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2041, :column 4, :line 2041, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2041, :column 5, :line 2041, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2041, :column 7, :line 2041, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2041, :column 9, :line 2041, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2033, :column 7, :line 2033, :file "cljs/core.cljs"} str ^{:arglists (^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2038, :column 4, :line 2038, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2038, :column 5, :line 2038, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2041, :column 4, :line 2041, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2041, :column 5, :line 2041, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2041, :column 7, :line 2041, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2041, :column 9, :line 2041, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2033, :column 7, :line 2033, :file "cljs/core.cljs"} {:arglists (^string [] [^{:end-column 7, :end-line 2038, :column 5, :line 2038, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 2041, :column 5, :line 2041, :file "cljs/core.cljs"} x & ^{:end-column 12, :end-line 2041, :column 9, :line 2041, :file "cljs/core.cljs"} ys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2038, :column 4, :line 2038, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2038, :column 5, :line 2038, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2041, :column 4, :line 2041, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2041, :column 5, :line 2041, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2041, :column 7, :line 2041, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2041, :column 9, :line 2041, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2033, :column 7, :line 2033, :file "cljs/core.cljs"} str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 663, :column 3, :line 663, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 663, :column 4, :line 663, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 660, :column 8, :line 660, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 660, :column 12, :line 660, :file "cljs/core.cljs"} next ^{:arglists (^{:end-column 9, :end-line 663, :column 3, :line 663, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 663, :column 4, :line 663, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 660, :column 8, :line 660, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 660, :column 12, :line 660, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 663, :column 4, :line 663, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 663, :column 3, :line 663, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 663, :column 4, :line 663, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 660, :column 8, :line 660, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 660, :column 12, :line 660, :file "cljs/core.cljs"} next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} ASeq ^{:impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/List cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 19, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} ASeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 39, :end-line 7823, :column 21, :line 7823, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7823, :column 22, :line 7823, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7823, :column 27, :line 7823, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7823, :column 34, :line 7823, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7823, :column 7, :line 7823, :file "cljs/core.cljs"} pr-seq-writer ^{:arglists (^{:end-column 39, :end-line 7823, :column 21, :line 7823, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7823, :column 22, :line 7823, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7823, :column 27, :line 7823, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7823, :column 34, :line 7823, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7823, :column 7, :line 7823, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 7823, :column 22, :line 7823, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7823, :column 27, :line 7823, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7823, :column 34, :line 7823, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 39, :end-line 7823, :column 21, :line 7823, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7823, :column 22, :line 7823, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7823, :column 27, :line 7823, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7823, :column 34, :line 7823, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7823, :column 7, :line 7823, :file "cljs/core.cljs"} pr-seq-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2910, :column 10, :line 2910, :file "cljs/core.cljs"} SeqIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2910, :column 10, :line 2910, :file "cljs/core.cljs"} SeqIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 50, :end-line 2910, :column 18, :line 2910, :file "cljs/core.cljs"} [^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next], :protocols #{Object}}, ^{:impls #{}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} IFn ^{:impls #{cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/Keyword cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Symbol cljs.core/MetaFn cljs.core/RedNode}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} IFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7657, :column 15, :line 7657, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7657, :column 16, :line 7657, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7657, :column 7, :line 7657, :file "cljs/core.cljs"} regexp? ^{:arglists (^{:end-column 18, :end-line 7657, :column 15, :line 7657, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7657, :column 16, :line 7657, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7657, :column 7, :line 7657, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 18, :end-line 7657, :column 16, :line 7657, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7657, :column 15, :line 7657, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7657, :column 16, :line 7657, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7657, :column 7, :line 7657, :file "cljs/core.cljs"} regexp?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 725, :column 10, :line 725, :file "cljs/core.cljs"} hash-map ^{:arglists (^{:end-column 14, :end-line 6771, :column 3, :line 6771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6771, :column 4, :line 6771, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6771, :column 6, :line 6771, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6768, :column 7, :line 6768, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [& ^{:end-column 14, :end-line 6771, :column 6, :line 6771, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6771, :column 3, :line 6771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6771, :column 4, :line 6771, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6771, :column 6, :line 6771, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6768, :column 7, :line 6768, :file "cljs/core.cljs"} hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8429, :column 4, :line 8429, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8429, :column 5, :line 8429, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8429, :column 9, :line 8429, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8432, :column 5, :line 8432, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8432, :column 11, :line 8432, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8425, :column 7, :line 8425, :file "cljs/core.cljs"} underive ^{:arglists (^{:end-column 16, :end-line 8429, :column 4, :line 8429, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8429, :column 5, :line 8429, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8429, :column 9, :line 8429, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8432, :column 5, :line 8432, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8432, :column 11, :line 8432, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8425, :column 7, :line 8425, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 8429, :column 5, :line 8429, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8429, :column 9, :line 8429, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8432, :column 5, :line 8432, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8432, :column 11, :line 8432, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8429, :column 4, :line 8429, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8429, :column 5, :line 8429, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8429, :column 9, :line 8429, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8432, :column 5, :line 8432, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8432, :column 11, :line 8432, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8425, :column 7, :line 8425, :file "cljs/core.cljs"} underive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1401, :column 10, :line 1401, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1401, :column 12, :line 1401, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1401, :column 15, :line 1401, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1401, :column 17, :line 1401, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1400, :column 8, :line 1400, :file "cljs/core.cljs"} array-copy ^{:arglists (^{:end-column 21, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1401, :column 10, :line 1401, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1401, :column 12, :line 1401, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1401, :column 15, :line 1401, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1401, :column 17, :line 1401, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1400, :column 8, :line 1400, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1401, :column 10, :line 1401, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1401, :column 12, :line 1401, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1401, :column 15, :line 1401, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1401, :column 17, :line 1401, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1401, :column 10, :line 1401, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1401, :column 12, :line 1401, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1401, :column 15, :line 1401, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1401, :column 17, :line 1401, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1400, :column 8, :line 1400, :file "cljs/core.cljs"} array-copy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4687, :column 29, :line 4687, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4687, :column 30, :line 4687, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4687, :column 32, :line 4687, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4687, :column 8, :line 4687, :file "cljs/core.cljs"} obj-map-compare-keys ^{:arglists (^{:end-column 34, :end-line 4687, :column 29, :line 4687, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4687, :column 30, :line 4687, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4687, :column 32, :line 4687, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4687, :column 8, :line 4687, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 4687, :column 30, :line 4687, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4687, :column 32, :line 4687, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4687, :column 29, :line 4687, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4687, :column 30, :line 4687, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4687, :column 32, :line 4687, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4687, :column 8, :line 4687, :file "cljs/core.cljs"} obj-map-compare-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 388, :column 12, :line 388, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 388, :column 13, :line 388, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 388, :column 15, :line 388, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -reset! ^{:arglists (^{:end-column 25, :end-line 388, :column 12, :line 388, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 388, :column 13, :line 388, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 388, :column 15, :line 388, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 388, :column 13, :line 388, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 388, :column 15, :line 388, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 388, :column 12, :line 388, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 388, :column 13, :line 388, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 388, :column 15, :line 388, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -rest ^{:arglists (^{:end-column 21, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2876, :column 16, :line 2876, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2876, :column 7, :line 2876, :file "cljs/core.cljs"} nil-iter ^{:arglists (^{:end-column 18, :end-line 2876, :column 16, :line 2876, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2876, :column 7, :line 2876, :file "cljs/core.cljs"} {:arglists (^cljs.core/t9657 []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2876, :column 16, :line 2876, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2876, :column 7, :line 2876, :file "cljs/core.cljs"} nil-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 3985, :column 31, :line 3985, :file "cljs/core.cljs"} pr-writer ^{:arglists (^{:end-column 20, :end-line 7756, :column 3, :line 7756, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7756, :column 8, :line 7756, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7756, :column 15, :line 7756, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 7752, :column 8, :line 7752, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7756, :column 8, :line 7756, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7756, :column 15, :line 7756, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7756, :column 3, :line 7756, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7756, :column 8, :line 7756, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7756, :column 15, :line 7756, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 7752, :column 8, :line 7752, :file "cljs/core.cljs"} pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1422, :column 3, :line 1422, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1422, :column 4, :line 1422, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} false? ^{:arglists (^{:end-column 6, :end-line 1422, :column 3, :line 1422, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1422, :column 4, :line 1422, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1422, :column 4, :line 1422, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1422, :column 3, :line 1422, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1422, :column 4, :line 1422, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} false?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably* ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1898, :column 12, :line 1898, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1898, :column 13, :line 1898, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1898, :column 7, :line 1898, :file "cljs/core.cljs"} ints ^{:arglists (^{:end-column 15, :end-line 1898, :column 12, :line 1898, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1898, :column 13, :line 1898, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1898, :column 7, :line 1898, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1898, :column 13, :line 1898, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1898, :column 12, :line 1898, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1898, :column 13, :line 1898, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1898, :column 7, :line 1898, :file "cljs/core.cljs"} ints, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3467, :column 4, :line 3467, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3467, :column 5, :line 3467, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3475, :column 4, :line 3475, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3475, :column 5, :line 3475, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3475, :column 8, :line 3475, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3483, :column 4, :line 3483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3483, :column 5, :line 3483, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3483, :column 8, :line 3483, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3483, :column 11, :line 3483, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 5, :line 3491, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3491, :column 8, :line 3491, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3491, :column 11, :line 3491, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3491, :column 14, :line 3491, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3491, :column 16, :line 3491, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3462, :column 7, :line 3462, :file "cljs/core.cljs"} some-fn ^{:arglists (^{:end-column 7, :end-line 3467, :column 4, :line 3467, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3467, :column 5, :line 3467, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3475, :column 4, :line 3475, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3475, :column 5, :line 3475, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3475, :column 8, :line 3475, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3483, :column 4, :line 3483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3483, :column 5, :line 3483, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3483, :column 8, :line 3483, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3483, :column 11, :line 3483, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 5, :line 3491, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3491, :column 8, :line 3491, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3491, :column 11, :line 3491, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3491, :column 14, :line 3491, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3491, :column 16, :line 3491, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3462, :column 7, :line 3462, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3467, :column 5, :line 3467, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 3475, :column 5, :line 3475, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3475, :column 8, :line 3475, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 3483, :column 5, :line 3483, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3483, :column 8, :line 3483, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3483, :column 11, :line 3483, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 3491, :column 5, :line 3491, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3491, :column 8, :line 3491, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3491, :column 11, :line 3491, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 3491, :column 16, :line 3491, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3467, :column 4, :line 3467, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3467, :column 5, :line 3467, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3475, :column 4, :line 3475, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3475, :column 5, :line 3475, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3475, :column 8, :line 3475, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3483, :column 4, :line 3483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3483, :column 5, :line 3483, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3483, :column 8, :line 3483, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3483, :column 11, :line 3483, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 5, :line 3491, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3491, :column 8, :line 3491, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3491, :column 11, :line 3491, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3491, :column 14, :line 3491, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3491, :column 16, :line 3491, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3462, :column 7, :line 3462, :file "cljs/core.cljs"} some-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline* ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 1552, :column 10, :line 1552, :file "cljs/core.cljs"} to-array ^{:arglists (^{:end-column 6, :end-line 2576, :column 3, :line 2576, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2576, :column 4, :line 2576, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2574, :column 7, :line 2574, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 6, :end-line 2576, :column 4, :line 2576, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2576, :column 3, :line 2576, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2576, :column 4, :line 2576, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2574, :column 7, :line 2574, :file "cljs/core.cljs"} to-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 23, :end-line 4250, :column 10, :line 4250, :file "cljs/core.cljs"} build-subvec ^{:arglists (^{:end-column 46, :end-line 4346, :column 21, :line 4346, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4346, :column 22, :line 4346, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4346, :column 27, :line 4346, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4346, :column 29, :line 4346, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4346, :column 35, :line 4346, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4346, :column 39, :line 4346, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 4346, :column 8, :line 4346, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 27, :end-line 4346, :column 22, :line 4346, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4346, :column 27, :line 4346, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4346, :column 29, :line 4346, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4346, :column 35, :line 4346, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4346, :column 39, :line 4346, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 4346, :column 21, :line 4346, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4346, :column 22, :line 4346, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4346, :column 27, :line 4346, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4346, :column 29, :line 4346, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4346, :column 35, :line 4346, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4346, :column 39, :line 4346, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 4346, :column 8, :line 4346, :file "cljs/core.cljs"} build-subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2306, :column 22, :line 2306, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2306, :column 23, :line 2306, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2306, :column 8, :line 2306, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2306, :column 16, :line 2306, :file "cljs/core.cljs"} list? ^{:arglists (^{:end-column 25, :end-line 2306, :column 22, :line 2306, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2306, :column 23, :line 2306, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2306, :column 8, :line 2306, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2306, :column 16, :line 2306, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 25, :end-line 2306, :column 23, :line 2306, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2306, :column 22, :line 2306, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2306, :column 23, :line 2306, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2306, :column 8, :line 2306, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2306, :column 16, :line 2306, :file "cljs/core.cljs"} list?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 6589, :column 24, :line 6589, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6589, :column 25, :line 6589, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6589, :column 30, :line 6589, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6589, :column 35, :line 6589, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6589, :column 37, :line 6589, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6589, :column 8, :line 6589, :file "cljs/core.cljs"} tree-map-remove ^{:arglists (^{:end-column 43, :end-line 6589, :column 24, :line 6589, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6589, :column 25, :line 6589, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6589, :column 30, :line 6589, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6589, :column 35, :line 6589, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6589, :column 37, :line 6589, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6589, :column 8, :line 6589, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6589, :column 25, :line 6589, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6589, :column 30, :line 6589, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6589, :column 35, :line 6589, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6589, :column 37, :line 6589, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 6589, :column 24, :line 6589, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6589, :column 25, :line 6589, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6589, :column 30, :line 6589, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6589, :column 35, :line 6589, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6589, :column 37, :line 6589, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6589, :column 8, :line 6589, :file "cljs/core.cljs"} tree-map-remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5622, :column 10, :line 5622, :file "cljs/core.cljs"} HashCollisionNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5622, :column 10, :line 5622, :file "cljs/core.cljs"} HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 43, :end-line 5625, :column 28, :line 5622, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array? ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8452, :column 3, :line 8452, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8452, :column 4, :line 8452, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8452, :column 6, :line 8452, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8452, :column 8, :line 8452, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8451, :column 8, :line 8451, :file "cljs/core.cljs"} prefers* ^{:arglists (^{:end-column 21, :end-line 8452, :column 3, :line 8452, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8452, :column 4, :line 8452, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8452, :column 6, :line 8452, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8452, :column 8, :line 8452, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8451, :column 8, :line 8451, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8452, :column 4, :line 8452, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8452, :column 6, :line 8452, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8452, :column 8, :line 8452, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8452, :column 3, :line 8452, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8452, :column 4, :line 8452, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8452, :column 6, :line 8452, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8452, :column 8, :line 8452, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8451, :column 8, :line 8451, :file "cljs/core.cljs"} prefers*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 607, :column 13, :line 607, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 607, :column 14, :line 607, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 607, :column 7, :line 607, :file "cljs/core.cljs"} clone ^{:arglists (^{:end-column 20, :end-line 607, :column 13, :line 607, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 607, :column 14, :line 607, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 607, :column 7, :line 607, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} clj [^{:end-column 20, :end-line 607, :column 14, :line 607, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 607, :column 13, :line 607, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 607, :column 14, :line 607, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 607, :column 7, :line 607, :file "cljs/core.cljs"} clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4673, :column 19, :line 4673, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4673, :column 20, :line 4673, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4673, :column 25, :line 4673, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4673, :column 27, :line 4673, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4673, :column 8, :line 4673, :file "cljs/core.cljs"} scan-array ^{:arglists (^{:end-column 33, :end-line 4673, :column 19, :line 4673, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4673, :column 20, :line 4673, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4673, :column 25, :line 4673, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4673, :column 27, :line 4673, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4673, :column 8, :line 4673, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4673, :column 20, :line 4673, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4673, :column 25, :line 4673, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4673, :column 27, :line 4673, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4673, :column 19, :line 4673, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4673, :column 20, :line 4673, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4673, :column 25, :line 4673, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4673, :column 27, :line 4673, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4673, :column 8, :line 4673, :file "cljs/core.cljs"} scan-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1962, :column 3, :line 1962, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1962, :column 4, :line 1962, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1960, :column 7, :line 1960, :file "cljs/core.cljs"} bit-not ^{:arglists (^{:end-column 6, :end-line 1962, :column 3, :line 1962, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1962, :column 4, :line 1962, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1960, :column 7, :line 1960, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1962, :column 4, :line 1962, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1962, :column 3, :line 1962, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1962, :column 4, :line 1962, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1960, :column 7, :line 1960, :file "cljs/core.cljs"} bit-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7744, :column 3, :line 7744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7744, :column 4, :line 7744, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7743, :column 17, :line 7743, :file "cljs/core.cljs"} quote-string ^{:arglists (^{:end-column 6, :end-line 7744, :column 3, :line 7744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7744, :column 4, :line 7744, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7743, :column 17, :line 7743, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7744, :column 4, :line 7744, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7744, :column 3, :line 7744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7744, :column 4, :line 7744, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7743, :column 17, :line 7743, :file "cljs/core.cljs"} quote-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1777, :column 20, :line 1777, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1777, :column 21, :line 1777, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1777, :column 8, :line 1777, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1777, :column 15, :line 1777, :file "cljs/core.cljs"} byte ^{:arglists (^{:end-column 23, :end-line 1777, :column 20, :line 1777, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1777, :column 21, :line 1777, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1777, :column 8, :line 1777, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1777, :column 15, :line 1777, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1777, :column 21, :line 1777, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1777, :column 20, :line 1777, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1777, :column 21, :line 1777, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1777, :column 8, :line 1777, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1777, :column 15, :line 1777, :file "cljs/core.cljs"} byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1766, :column 4, :line 1766, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1766, :column 5, :line 1766, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1766, :column 7, :line 1766, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1767, :column 5, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1767, :column 7, :line 1767, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1767, :column 9, :line 1767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1767, :column 11, :line 1767, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1763, :column 8, :line 1763, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1763, :column 15, :line 1763, :file "cljs/core.cljs"} max ^{:arglists (^{:end-column 7, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1766, :column 4, :line 1766, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1766, :column 5, :line 1766, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1766, :column 7, :line 1766, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1767, :column 5, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1767, :column 7, :line 1767, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1767, :column 9, :line 1767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1767, :column 11, :line 1767, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1763, :column 8, :line 1763, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1763, :column 15, :line 1763, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1766, :column 5, :line 1766, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1766, :column 7, :line 1766, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1767, :column 5, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1767, :column 7, :line 1767, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1767, :column 11, :line 1767, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1766, :column 4, :line 1766, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1766, :column 5, :line 1766, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1766, :column 7, :line 1766, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1767, :column 5, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1767, :column 7, :line 1767, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1767, :column 9, :line 1767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1767, :column 11, :line 1767, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1763, :column 8, :line 1763, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1763, :column 15, :line 1763, :file "cljs/core.cljs"} max, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 368, :column 14, :line 368, :file "cljs/core.cljs"} IComparable ^{:impls #{cljs.core/Keyword cljs.core/Subvec cljs.core/PersistentVector cljs.core/Symbol}, :protocol-symbol true, :end-column 26, :end-line 368, :column 14, :line 368, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 368, :column 14, :line 368, :file "cljs/core.cljs"} IComparable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2001, :column 5, :line 2001, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2002, :column 5, :line 2002, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2002, :column 7, :line 2002, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2003, :column 4, :line 2003, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2003, :column 5, :line 2003, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2003, :column 9, :line 2003, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2003, :column 11, :line 2003, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1997, :column 8, :line 1997, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1997, :column 16, :line 1997, :file "cljs/core.cljs"} == ^{:arglists (^{:end-column 7, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2001, :column 5, :line 2001, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2002, :column 5, :line 2002, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2002, :column 7, :line 2002, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2003, :column 4, :line 2003, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2003, :column 5, :line 2003, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2003, :column 9, :line 2003, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2003, :column 11, :line 2003, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1997, :column 8, :line 1997, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1997, :column 16, :line 1997, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 2001, :column 5, :line 2001, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 2002, :column 5, :line 2002, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2002, :column 7, :line 2002, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 2003, :column 5, :line 2003, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2003, :column 11, :line 2003, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2001, :column 5, :line 2001, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2002, :column 5, :line 2002, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2002, :column 7, :line 2002, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2003, :column 4, :line 2003, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2003, :column 5, :line 2003, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2003, :column 9, :line 2003, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2003, :column 11, :line 2003, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1997, :column 8, :line 1997, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1997, :column 16, :line 1997, :file "cljs/core.cljs"} ==, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8371, :column 4, :line 8371, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8371, :column 5, :line 8371, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8372, :column 4, :line 8372, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8372, :column 5, :line 8372, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8372, :column 7, :line 8372, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8366, :column 7, :line 8366, :file "cljs/core.cljs"} parents ^{:arglists (^{:end-column 9, :end-line 8371, :column 4, :line 8371, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8371, :column 5, :line 8371, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8372, :column 4, :line 8372, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8372, :column 5, :line 8372, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8372, :column 7, :line 8372, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8366, :column 7, :line 8366, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8371, :column 5, :line 8371, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8372, :column 5, :line 8372, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8372, :column 7, :line 8372, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8371, :column 4, :line 8371, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8371, :column 5, :line 8371, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8372, :column 4, :line 8372, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8372, :column 5, :line 8372, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8372, :column 7, :line 8372, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8366, :column 7, :line 8366, :file "cljs/core.cljs"} parents, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1057, :column 3, :line 1057, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1054, :column 7, :line 1054, :file "cljs/core.cljs"} count ^{:arglists (^{:end-column 9, :end-line 1057, :column 3, :line 1057, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1054, :column 7, :line 1054, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1057, :column 3, :line 1057, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1054, :column 7, :line 1054, :file "cljs/core.cljs"} count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 366, :column 19, :line 366, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 366, :column 20, :line 366, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 366, :column 26, :line 366, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 366, :column 9, :line 366, :file "cljs/core.cljs"} -disjoin! ^{:arglists (^{:end-column 28, :end-line 366, :column 19, :line 366, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 366, :column 20, :line 366, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 366, :column 26, :line 366, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 366, :column 9, :line 366, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 366, :column 20, :line 366, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 366, :column 26, :line 366, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 366, :column 19, :line 366, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 366, :column 20, :line 366, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 366, :column 26, :line 366, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 366, :column 9, :line 366, :file "cljs/core.cljs"} -disjoin!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val])} ->TransientHashMap ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val])} {:arglists (^cljs.core/TransientHashMap [^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val])} ->TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 2437, :column 10, :line 2437, :file "cljs/core.cljs"} ArrayChunk {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2456, :column 10, :line 2456, :file "cljs/core.cljs"} ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 34, :end-line 2456, :column 21, :line 2456, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end], :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}}, ^{:arglists (^{:end-column 26, :end-line 6808, :column 4, :line 6808, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6808, :column 5, :line 6808, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6808, :column 16, :line 6808, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6808, :column 18, :line 6808, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} sorted-map-by ^{:arglists (^{:end-column 26, :end-line 6808, :column 4, :line 6808, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6808, :column 5, :line 6808, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6808, :column 16, :line 6808, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6808, :column 18, :line 6808, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 16, :end-line 6808, :column 5, :line 6808, :file "cljs/core.cljs"} comparator & ^{:end-column 26, :end-line 6808, :column 18, :line 6808, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 6808, :column 4, :line 6808, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6808, :column 5, :line 6808, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6808, :column 16, :line 6808, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6808, :column 18, :line 6808, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} sorted-map-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 172, :column 10, :line 172, :file "cljs/core.cljs"} apply ^{:arglists (^{:end-column 12, :end-line 2803, :column 4, :line 2803, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2803, :column 5, :line 2803, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2803, :column 7, :line 2803, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2811, :column 4, :line 2811, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2811, :column 5, :line 2811, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2811, :column 7, :line 2811, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2811, :column 9, :line 2811, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2820, :column 5, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2820, :column 7, :line 2820, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2820, :column 9, :line 2820, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2820, :column 11, :line 2820, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2829, :column 4, :line 2829, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2829, :column 5, :line 2829, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2829, :column 7, :line 2829, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2829, :column 9, :line 2829, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2829, :column 11, :line 2829, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2829, :column 13, :line 2829, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2838, :column 9, :line 2838, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2838, :column 11, :line 2838, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2838, :column 13, :line 2838, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2838, :column 15, :line 2838, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2838, :column 17, :line 2838, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2803, :column 5, :line 2803, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2803, :column 7, :line 2803, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2811, :column 5, :line 2811, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2811, :column 7, :line 2811, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2811, :column 9, :line 2811, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2820, :column 5, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2820, :column 7, :line 2820, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2820, :column 9, :line 2820, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2820, :column 11, :line 2820, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2829, :column 5, :line 2829, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2829, :column 7, :line 2829, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2829, :column 9, :line 2829, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2829, :column 11, :line 2829, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2829, :column 13, :line 2829, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2838, :column 9, :line 2838, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2838, :column 11, :line 2838, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2838, :column 13, :line 2838, :file "cljs/core.cljs"} d & ^{:end-column 22, :end-line 2838, :column 17, :line 2838, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2803, :column 4, :line 2803, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2803, :column 5, :line 2803, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2803, :column 7, :line 2803, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2811, :column 4, :line 2811, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2811, :column 5, :line 2811, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2811, :column 7, :line 2811, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2811, :column 9, :line 2811, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2820, :column 5, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2820, :column 7, :line 2820, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2820, :column 9, :line 2820, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2820, :column 11, :line 2820, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2829, :column 4, :line 2829, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2829, :column 5, :line 2829, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2829, :column 7, :line 2829, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2829, :column 9, :line 2829, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2829, :column 11, :line 2829, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2829, :column 13, :line 2829, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2838, :column 9, :line 2838, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2838, :column 11, :line 2838, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2838, :column 13, :line 2838, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2838, :column 15, :line 2838, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2838, :column 17, :line 2838, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} apply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 8338, :column 29, :line 8338, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8338, :column 8, :line 8338, :file "cljs/core.cljs"} get-global-hierarchy ^{:arglists (^{:end-column 31, :end-line 8338, :column 29, :line 8338, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8338, :column 8, :line 8338, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 8338, :column 29, :line 8338, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8338, :column 8, :line 8338, :file "cljs/core.cljs"} get-global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 493, :column 32, :line 493, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 493, :column 33, :line 493, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} add-to-string-hash-cache ^{:arglists (^{:end-column 35, :end-line 493, :column 32, :line 493, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 493, :column 33, :line 493, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 35, :end-line 493, :column 33, :line 493, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 493, :column 32, :line 493, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 493, :column 33, :line 493, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} add-to-string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 8205, :column 10, :line 8205, :file "cljs/core.cljs"} clj->js ^{:arglists (^{:end-column 7, :end-line 8221, :column 4, :line 8221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8221, :column 5, :line 8221, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 8217, :column 7, :line 8217, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8221, :column 5, :line 8221, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8221, :column 4, :line 8221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8221, :column 5, :line 8221, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 8217, :column 7, :line 8217, :file "cljs/core.cljs"} clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 4943, :column 10, :line 4943, :file "cljs/core.cljs"} TransientArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5163, :column 10, :line 5163, :file "cljs/core.cljs"} TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 5165, :column 28, :line 5163, :file "cljs/core.cljs"} [^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr], :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail])} ->TransientVector ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail])} {:arglists (^cljs.core/TransientVector [^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail])} ->TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 378, :column 14, :line 378, :file "cljs/core.cljs"} IChunkedNext ^{:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 27, :end-line 378, :column 14, :line 378, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 378, :column 14, :line 378, :file "cljs/core.cljs"} IChunkedNext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3683, :column 3, :line 3683, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3683, :column 8, :line 3683, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3681, :column 7, :line 3681, :file "cljs/core.cljs"} interpose ^{:arglists (^{:end-column 13, :end-line 3683, :column 3, :line 3683, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3683, :column 8, :line 3683, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3681, :column 7, :line 3681, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3683, :column 8, :line 3683, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3683, :column 3, :line 3683, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3683, :column 8, :line 3683, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3681, :column 7, :line 3681, :file "cljs/core.cljs"} interpose, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash])} ->BlackNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/BlackNode [^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash])} ->BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 762, :column 10, :line 762, :file "cljs/core.cljs"} deref ^{:declared true, :end-column 79, :end-line 5244, :column 73, :line 5244, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 79, :end-line 5244, :column 73, :line 5244, :file "cljs/core.cljs"} deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 3892, :column 16, :line 3892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3892, :column 17, :line 3892, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3892, :column 22, :line 3892, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3892, :column 8, :line 3892, :file "cljs/core.cljs"} pv-aget ^{:arglists (^{:end-column 26, :end-line 3892, :column 16, :line 3892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3892, :column 17, :line 3892, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3892, :column 22, :line 3892, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3892, :column 8, :line 3892, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3892, :column 17, :line 3892, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3892, :column 22, :line 3892, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 3892, :column 16, :line 3892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3892, :column 17, :line 3892, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3892, :column 22, :line 3892, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3892, :column 8, :line 3892, :file "cljs/core.cljs"} pv-aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 1208, :column 4, :line 1208, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1208, :column 5, :line 1208, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1208, :column 10, :line 1208, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1208, :column 12, :line 1208, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1212, :column 4, :line 1212, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1212, :column 5, :line 1212, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1212, :column 10, :line 1212, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1212, :column 12, :line 1212, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1212, :column 14, :line 1212, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1203, :column 7, :line 1203, :file "cljs/core.cljs"} assoc ^{:arglists (^{:end-column 14, :end-line 1208, :column 4, :line 1208, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1208, :column 5, :line 1208, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1208, :column 10, :line 1208, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1208, :column 12, :line 1208, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1212, :column 4, :line 1212, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1212, :column 5, :line 1212, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1212, :column 10, :line 1212, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1212, :column 12, :line 1212, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1212, :column 14, :line 1212, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1203, :column 7, :line 1203, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1208, :column 5, :line 1208, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1208, :column 10, :line 1208, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1208, :column 12, :line 1208, :file "cljs/core.cljs"} v] [^{:end-column 10, :end-line 1212, :column 5, :line 1212, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1212, :column 10, :line 1212, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1212, :column 12, :line 1212, :file "cljs/core.cljs"} v & ^{:end-column 20, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 1208, :column 4, :line 1208, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1208, :column 5, :line 1208, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1208, :column 10, :line 1208, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1208, :column 12, :line 1208, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1212, :column 4, :line 1212, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1212, :column 5, :line 1212, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1212, :column 10, :line 1212, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1212, :column 12, :line 1212, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1212, :column 14, :line 1212, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1203, :column 7, :line 1203, :file "cljs/core.cljs"} assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2729, :column 7, :line 2729, :file "cljs/core.cljs"} transient ^{:arglists (^{:end-column 9, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2729, :column 7, :line 2729, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2729, :column 7, :line 2729, :file "cljs/core.cljs"} transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 274, :column 18, :line 274, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 274, :column 19, :line 274, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 274, :column 24, :line 274, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} -disjoin ^{:arglists (^{:end-column 26, :end-line 274, :column 18, :line 274, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 274, :column 19, :line 274, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 274, :column 24, :line 274, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 274, :column 19, :line 274, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 274, :column 24, :line 274, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 274, :column 18, :line 274, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 274, :column 19, :line 274, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 274, :column 24, :line 274, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} -disjoin, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2550, :column 18, :line 2550, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2550, :column 19, :line 2550, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2550, :column 25, :line 2550, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} chunk-cons ^{:arglists (^{:end-column 30, :end-line 2550, :column 18, :line 2550, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2550, :column 19, :line 2550, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2550, :column 25, :line 2550, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2550, :column 19, :line 2550, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2550, :column 25, :line 2550, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2550, :column 18, :line 2550, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2550, :column 19, :line 2550, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2550, :column 25, :line 2550, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} chunk-cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2895, :column 10, :line 2895, :file "cljs/core.cljs"} ArrayIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2895, :column 10, :line 2895, :file "cljs/core.cljs"} ArrayIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 37, :end-line 2895, :column 20, :line 2895, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 9, :end-line 8778, :column 3, :line 8778, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8778, :column 4, :line 8778, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8776, :column 7, :line 8776, :file "cljs/core.cljs"} comparator ^{:arglists (^{:end-column 9, :end-line 8778, :column 3, :line 8778, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8778, :column 4, :line 8778, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8776, :column 7, :line 8776, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 8778, :column 4, :line 8778, :file "cljs/core.cljs"} pred]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8778, :column 3, :line 8778, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8778, :column 4, :line 8778, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8776, :column 7, :line 8776, :file "cljs/core.cljs"} comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6796, :column 7, :line 6796, :file "cljs/core.cljs"} sorted-map ^{:arglists (^{:end-column 15, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6796, :column 7, :line 6796, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 15, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6796, :column 7, :line 6796, :file "cljs/core.cljs"} sorted-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3614, :column 4, :line 3614, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3614, :column 5, :line 3614, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3627, :column 10, :line 3627, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3610, :column 7, :line 3610, :file "cljs/core.cljs"} drop-while ^{:arglists (^{:end-column 10, :end-line 3614, :column 4, :line 3614, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3614, :column 5, :line 3614, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3627, :column 10, :line 3627, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3610, :column 7, :line 3610, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3614, :column 5, :line 3614, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3627, :column 10, :line 3627, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3614, :column 4, :line 3614, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3614, :column 5, :line 3614, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3627, :column 10, :line 3627, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3610, :column 7, :line 3610, :file "cljs/core.cljs"} drop-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IWriter ^{:impls #{cljs.core/StringBufferWriter}, :protocol-symbol true, :end-column 22, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6815, :column 10, :line 6815, :file "cljs/core.cljs"} KeySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6815, :column 10, :line 6815, :file "cljs/core.cljs"} KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6815, :column 17, :line 6815, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8126, :column 3, :line 8126, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8126, :column 4, :line 8126, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8124, :column 8, :line 8124, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8124, :column 16, :line 8124, :file "cljs/core.cljs"} realized? ^{:arglists (^{:end-column 6, :end-line 8126, :column 3, :line 8126, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8126, :column 4, :line 8126, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8124, :column 8, :line 8124, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8124, :column 16, :line 8124, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 8126, :column 4, :line 8126, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8126, :column 3, :line 8126, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8126, :column 4, :line 8126, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8124, :column 8, :line 8124, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8124, :column 16, :line 8124, :file "cljs/core.cljs"} realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4878, :column 36, :line 4878, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4878, :column 37, :line 4878, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4878, :column 41, :line 4878, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4878, :column 43, :line 4878, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4878, :column 8, :line 4878, :file "cljs/core.cljs"} array-map-index-of-keyword? ^{:arglists (^{:end-column 45, :end-line 4878, :column 36, :line 4878, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4878, :column 37, :line 4878, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4878, :column 41, :line 4878, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4878, :column 43, :line 4878, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4878, :column 8, :line 4878, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4878, :column 37, :line 4878, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4878, :column 41, :line 4878, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4878, :column 43, :line 4878, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4878, :column 36, :line 4878, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4878, :column 37, :line 4878, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4878, :column 41, :line 4878, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4878, :column 43, :line 4878, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4878, :column 8, :line 4878, :file "cljs/core.cljs"} array-map-index-of-keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn* ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 10, :end-line 25, :column 8, :line 25, :file "cljs/core.cljs"} _]), :tag function, :op :var, :name ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 32, :end-line 475, :column 24, :line 475, :file "cljs/core.cljs"} compare ^{:arglists (^{:end-column 8, :end-line 1507, :column 3, :line 1507, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1507, :column 6, :line 1507, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1502, :column 8, :line 1502, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1502, :column 15, :line 1502, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1507, :column 6, :line 1507, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1507, :column 3, :line 1507, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1507, :column 6, :line 1507, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1502, :column 8, :line 1502, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1502, :column 15, :line 1502, :file "cljs/core.cljs"} compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3148, :column 3, :line 3148, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3148, :column 4, :line 3148, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3145, :column 8, :line 3145, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3145, :column 16, :line 3145, :file "cljs/core.cljs"} complement ^{:arglists (^{:end-column 6, :end-line 3148, :column 3, :line 3148, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3148, :column 4, :line 3148, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3145, :column 8, :line 3145, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3145, :column 16, :line 3145, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3148, :column 4, :line 3148, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3148, :column 3, :line 3148, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3148, :column 4, :line 3148, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3145, :column 8, :line 3145, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3145, :column 16, :line 3145, :file "cljs/core.cljs"} complement, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 41, :end-line 1418, :column 1, :line 1418, :file "cljs/core.cljs"} lookup-sentinel ^{:private true, :end-column 41, :end-line 1418, :column 1, :line 1418, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 41, :end-line 1418, :column 1, :line 1418, :file "cljs/core.cljs"} lookup-sentinel, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 356, :column 17, :line 356, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 356, :column 18, :line 356, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 356, :column 24, :line 356, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 356, :column 28, :line 356, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 356, :column 9, :line 356, :file "cljs/core.cljs"} -assoc! ^{:arglists (^{:end-column 32, :end-line 356, :column 17, :line 356, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 356, :column 18, :line 356, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 356, :column 24, :line 356, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 356, :column 28, :line 356, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 356, :column 9, :line 356, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 356, :column 18, :line 356, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 356, :column 24, :line 356, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 356, :column 28, :line 356, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 356, :column 17, :line 356, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 356, :column 18, :line 356, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 356, :column 24, :line 356, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 356, :column 28, :line 356, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 356, :column 9, :line 356, :file "cljs/core.cljs"} -assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup* ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll])} ->Iteration ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll])} {:arglists (^cljs.core/Iteration [^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll])} ->Iteration, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2892, :column 19, :line 2892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2892, :column 20, :line 2892, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2892, :column 7, :line 2892, :file "cljs/core.cljs"} string-iter ^{:arglists (^{:end-column 22, :end-line 2892, :column 19, :line 2892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2892, :column 20, :line 2892, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2892, :column 7, :line 2892, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 22, :end-line 2892, :column 20, :line 2892, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2892, :column 19, :line 2892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2892, :column 20, :line 2892, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2892, :column 7, :line 2892, :file "cljs/core.cljs"} string-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8202, :column 13, :line 8202, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8202, :column 14, :line 8202, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8202, :column 4, :line 8202, :file "cljs/core.cljs"} -key->js ^{:arglists (^{:end-column 16, :end-line 8202, :column 13, :line 8202, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8202, :column 14, :line 8202, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8202, :column 4, :line 8202, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8202, :column 14, :line 8202, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8202, :column 13, :line 8202, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8202, :column 14, :line 8202, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8202, :column 4, :line 8202, :file "cljs/core.cljs"} -key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 283, :column 14, :line 283, :file "cljs/core.cljs"} IDeref ^{:impls #{cljs.core/Reduced cljs.core/Delay cljs.core/Atom}, :protocol-symbol true, :end-column 21, :end-line 283, :column 14, :line 283, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 283, :column 14, :line 283, :file "cljs/core.cljs"} IDeref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1497, :column 3, :line 1497, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1497, :column 4, :line 1497, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1494, :column 8, :line 1494, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1494, :column 12, :line 1494, :file "cljs/core.cljs"} sequence ^{:arglists (^{:end-column 10, :end-line 3096, :column 4, :line 3096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3096, :column 5, :line 3096, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3100, :column 4, :line 3100, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3100, :column 5, :line 3100, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3100, :column 11, :line 3100, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3102, :column 4, :line 3102, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3102, :column 5, :line 3102, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3102, :column 11, :line 3102, :file "cljs/core.cljs"} coll ^{:end-column 18, :end-line 3102, :column 16, :line 3102, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3102, :column 18, :line 3102, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 16, :end-line 3087, :column 7, :line 3087, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 3096, :column 5, :line 3096, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 3100, :column 5, :line 3100, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3100, :column 11, :line 3100, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 3102, :column 5, :line 3102, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3102, :column 11, :line 3102, :file "cljs/core.cljs"} coll & ^{:end-column 24, :end-line 3102, :column 18, :line 3102, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3096, :column 4, :line 3096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3096, :column 5, :line 3096, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3100, :column 4, :line 3100, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3100, :column 5, :line 3100, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3100, :column 11, :line 3100, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3102, :column 4, :line 3102, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3102, :column 5, :line 3102, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3102, :column 11, :line 3102, :file "cljs/core.cljs"} coll ^{:end-column 18, :end-line 3102, :column 16, :line 3102, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3102, :column 18, :line 3102, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 16, :end-line 3087, :column 7, :line 3087, :file "cljs/core.cljs"} sequence, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3157, :column 3, :line 3157, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3157, :column 4, :line 3157, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3155, :column 7, :line 3155, :file "cljs/core.cljs"} constantly ^{:arglists (^{:end-column 6, :end-line 3157, :column 3, :line 3157, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3157, :column 4, :line 3157, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3155, :column 7, :line 3155, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3157, :column 4, :line 3157, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3157, :column 3, :line 3157, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3157, :column 4, :line 3157, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3155, :column 7, :line 3155, :file "cljs/core.cljs"} constantly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 53, :end-line 3985, :column 41, :line 3985, :file "cljs/core.cljs"} chunked-seq ^{:arglists (^{:end-column 15, :end-line 4245, :column 4, :line 4245, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4245, :column 5, :line 4245, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4245, :column 9, :line 4245, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4245, :column 11, :line 4245, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4246, :column 4, :line 4246, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4246, :column 5, :line 4246, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4246, :column 9, :line 4246, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4246, :column 14, :line 4246, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4246, :column 16, :line 4246, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4247, :column 4, :line 4247, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4247, :column 5, :line 4247, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4247, :column 9, :line 4247, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4247, :column 14, :line 4247, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4247, :column 16, :line 4247, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4247, :column 20, :line 4247, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4245, :column 5, :line 4245, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4245, :column 9, :line 4245, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4245, :column 11, :line 4245, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4246, :column 5, :line 4246, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4246, :column 9, :line 4246, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4246, :column 14, :line 4246, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4246, :column 16, :line 4246, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4247, :column 5, :line 4247, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4247, :column 9, :line 4247, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4247, :column 14, :line 4247, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4247, :column 16, :line 4247, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4247, :column 20, :line 4247, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 4245, :column 4, :line 4245, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4245, :column 5, :line 4245, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4245, :column 9, :line 4245, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4245, :column 11, :line 4245, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4246, :column 4, :line 4246, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4246, :column 5, :line 4246, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4246, :column 9, :line 4246, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4246, :column 14, :line 4246, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4246, :column 16, :line 4246, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4247, :column 4, :line 4247, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4247, :column 5, :line 4247, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4247, :column 9, :line 4247, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4247, :column 14, :line 4247, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4247, :column 16, :line 4247, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4247, :column 20, :line 4247, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} chunked-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} ISorted ^{:impls #{cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 22, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} ISorted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} make-array ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^array [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} make-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1897, :column 14, :line 1897, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1897, :column 15, :line 1897, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1897, :column 7, :line 1897, :file "cljs/core.cljs"} shorts ^{:arglists (^{:end-column 17, :end-line 1897, :column 14, :line 1897, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1897, :column 15, :line 1897, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1897, :column 7, :line 1897, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1897, :column 15, :line 1897, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1897, :column 14, :line 1897, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1897, :column 15, :line 1897, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1897, :column 7, :line 1897, :file "cljs/core.cljs"} shorts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if* ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta])} ->RSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/RSeq [^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta])} ->RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print! ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} {:arglists (^function []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -flush ^{:arglists (^{:end-column 19, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 1657, :column 19, :line 1657, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1657, :column 20, :line 1657, :file "cljs/core.cljs"} f]), :private true, :end-column 19, :end-line 1657, :column 8, :line 1657, :file "cljs/core.cljs"} completing ^{:arglists (^{:end-column 22, :end-line 1657, :column 19, :line 1657, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1657, :column 20, :line 1657, :file "cljs/core.cljs"} f]), :private true, :end-column 19, :end-line 1657, :column 8, :line 1657, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 22, :end-line 1657, :column 20, :line 1657, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 1657, :column 19, :line 1657, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1657, :column 20, :line 1657, :file "cljs/core.cljs"} f]), :private true, :end-column 19, :end-line 1657, :column 8, :line 1657, :file "cljs/core.cljs"} completing, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 1847, :column 28, :line 1847, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1847, :column 29, :line 1847, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} unchecked-negate-int ^{:arglists (^{:end-column 31, :end-line 1847, :column 28, :line 1847, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1847, :column 29, :line 1847, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 31, :end-line 1847, :column 29, :line 1847, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1847, :column 28, :line 1847, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1847, :column 29, :line 1847, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} unchecked-negate-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash])} ->PersistentVector ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentVector [^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash])} ->PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 725, :column 24, :line 725, :file "cljs/core.cljs"} equiv-sequential ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 2055, :column 8, :line 2055, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 2055, :column 8, :line 2055, :file "cljs/core.cljs"} equiv-sequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 718, :column 3, :line 718, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 718, :column 4, :line 718, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 712, :column 8, :line 712, :file "cljs/core.cljs"} number, :end-column 35, :end-line 712, :column 15, :line 712, :file "cljs/core.cljs"} hash-unordered-coll ^{:arglists (^{:end-column 9, :end-line 718, :column 3, :line 718, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 718, :column 4, :line 718, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 712, :column 8, :line 712, :file "cljs/core.cljs"} number, :end-column 35, :end-line 712, :column 15, :line 712, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 718, :column 4, :line 718, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 718, :column 3, :line 718, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 718, :column 4, :line 718, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 712, :column 8, :line 712, :file "cljs/core.cljs"} number, :end-column 35, :end-line 712, :column 15, :line 712, :file "cljs/core.cljs"} hash-unordered-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3648, :column 4, :line 3648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3648, :column 5, :line 3648, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3649, :column 4, :line 3649, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3649, :column 5, :line 3649, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3649, :column 7, :line 3649, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3646, :column 7, :line 3646, :file "cljs/core.cljs"} repeat ^{:arglists (^{:end-column 7, :end-line 3648, :column 4, :line 3648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3648, :column 5, :line 3648, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3649, :column 4, :line 3649, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3649, :column 5, :line 3649, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3649, :column 7, :line 3649, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3646, :column 7, :line 3646, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3648, :column 5, :line 3648, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3649, :column 5, :line 3649, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3649, :column 7, :line 3649, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3648, :column 4, :line 3648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3648, :column 5, :line 3648, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3649, :column 4, :line 3649, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3649, :column 5, :line 3649, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3649, :column 7, :line 3649, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3646, :column 7, :line 3646, :file "cljs/core.cljs"} repeat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1824, :column 21, :line 1824, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1824, :column 22, :line 1824, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1824, :column 7, :line 1824, :file "cljs/core.cljs"} unchecked-inc ^{:arglists (^{:end-column 24, :end-line 1824, :column 21, :line 1824, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1824, :column 22, :line 1824, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1824, :column 7, :line 1824, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1824, :column 22, :line 1824, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1824, :column 21, :line 1824, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1824, :column 22, :line 1824, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1824, :column 7, :line 1824, :file "cljs/core.cljs"} unchecked-inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2025, :column 3, :line 2025, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2025, :column 4, :line 2025, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2025, :column 9, :line 2025, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2023, :column 7, :line 2023, :file "cljs/core.cljs"} nthnext ^{:arglists (^{:end-column 11, :end-line 2025, :column 3, :line 2025, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2025, :column 4, :line 2025, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2025, :column 9, :line 2025, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2023, :column 7, :line 2023, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 2025, :column 4, :line 2025, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2025, :column 9, :line 2025, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2025, :column 3, :line 2025, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2025, :column 4, :line 2025, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2025, :column 9, :line 2025, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2023, :column 7, :line 2023, :file "cljs/core.cljs"} nthnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8130, :column 3, :line 8130, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8130, :column 4, :line 8130, :file "cljs/core.cljs"} f1]), :private true, :end-column 27, :end-line 8129, :column 8, :line 8129, :file "cljs/core.cljs"} preserving-reduced ^{:arglists (^{:end-column 7, :end-line 8130, :column 3, :line 8130, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8130, :column 4, :line 8130, :file "cljs/core.cljs"} f1]), :private true, :end-column 27, :end-line 8129, :column 8, :line 8129, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 8130, :column 4, :line 8130, :file "cljs/core.cljs"} f1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8130, :column 3, :line 8130, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8130, :column 4, :line 8130, :file "cljs/core.cljs"} f1]), :private true, :end-column 27, :end-line 8129, :column 8, :line 8129, :file "cljs/core.cljs"} preserving-reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3384, :column 3, :line 3384, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3384, :column 4, :line 3384, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} get-validator ^{:arglists (^{:end-column 9, :end-line 3384, :column 3, :line 3384, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3384, :column 4, :line 3384, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3384, :column 4, :line 3384, :file "cljs/core.cljs"} iref]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3384, :column 3, :line 3384, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3384, :column 4, :line 3384, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} get-validator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2883, :column 10, :line 2883, :file "cljs/core.cljs"} StringIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2883, :column 10, :line 2883, :file "cljs/core.cljs"} StringIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 36, :end-line 2883, :column 21, :line 2883, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number? ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 352, :column 16, :line 352, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 352, :column 23, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} -conj! ^{:arglists (^{:end-column 27, :end-line 352, :column 16, :line 352, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 352, :column 23, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 352, :column 23, :line 352, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 352, :column 16, :line 352, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 352, :column 23, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} -conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([meta9658])} ->t9657 ^{:file "cljs/core.cljs", :arglists ([meta9658])} {:arglists (^cljs.core/t9657 [meta9658]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([meta9658])} ->t9657, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta])} ->PersistentArrayMapSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/PersistentArrayMapSeq [^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta])} ->PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2567, :column 18, :line 2567, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2567, :column 19, :line 2567, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2567, :column 7, :line 2567, :file "cljs/core.cljs"} chunk-next ^{:arglists (^{:end-column 21, :end-line 2567, :column 18, :line 2567, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2567, :column 19, :line 2567, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2567, :column 7, :line 2567, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2567, :column 19, :line 2567, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2567, :column 18, :line 2567, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2567, :column 19, :line 2567, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2567, :column 7, :line 2567, :file "cljs/core.cljs"} chunk-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7321, :column 10, :line 7321, :file "cljs/core.cljs"} ArrayList {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7321, :column 10, :line 7321, :file "cljs/core.cljs"} ArrayList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 7321, :column 20, :line 7321, :file "cljs/core.cljs"} [^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 11, :end-line 7891, :column 3, :line 7891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7891, :column 4, :line 7891, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7891, :column 6, :line 7891, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7889, :column 7, :line 7889, :file "cljs/core.cljs"} print-str ^{:arglists (^{:end-column 11, :end-line 7891, :column 3, :line 7891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7891, :column 4, :line 7891, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7891, :column 6, :line 7891, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7889, :column 7, :line 7889, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7891, :column 6, :line 7891, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7891, :column 3, :line 7891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7891, :column 4, :line 7891, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7891, :column 6, :line 7891, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7889, :column 7, :line 7889, :file "cljs/core.cljs"} print-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3128, :column 8, :line 3128, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3128, :column 16, :line 3128, :file "cljs/core.cljs"} not-any? ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3128, :column 8, :line 3128, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3128, :column 16, :line 3128, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3128, :column 8, :line 3128, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3128, :column 16, :line 3128, :file "cljs/core.cljs"} not-any?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 47, :column 10, :line 47, :file "cljs/core.cljs"} into-array ^{:arglists (^{:end-column 10, :end-line 196, :column 4, :line 196, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 198, :column 4, :line 198, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 195, :column 8, :line 195, :file "cljs/core.cljs"} array, :end-column 25, :end-line 195, :column 14, :line 195, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 196, :column 4, :line 196, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 198, :column 4, :line 198, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 195, :column 8, :line 195, :file "cljs/core.cljs"} array, :end-column 25, :end-line 195, :column 14, :line 195, :file "cljs/core.cljs"} into-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 305, :column 10, :line 305, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 305, :column 11, :line 305, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 305, :column 4, :line 305, :file "cljs/core.cljs"} -hash ^{:arglists (^{:end-column 13, :end-line 305, :column 10, :line 305, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 305, :column 11, :line 305, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 305, :column 4, :line 305, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 305, :column 11, :line 305, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 305, :column 10, :line 305, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 305, :column 11, :line 305, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 305, :column 4, :line 305, :file "cljs/core.cljs"} -hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 359, :column 18, :line 359, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 359, :column 19, :line 359, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 359, :column 25, :line 359, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} -dissoc! ^{:arglists (^{:end-column 29, :end-line 359, :column 18, :line 359, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 359, :column 19, :line 359, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 359, :column 25, :line 359, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 359, :column 19, :line 359, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 359, :column 25, :line 359, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 359, :column 18, :line 359, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 359, :column 19, :line 359, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 359, :column 25, :line 359, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} -dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val])} ->Reduced ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val])} {:arglists (^cljs.core/Reduced [^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val])} ->Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2453, :column 20, :line 2453, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2453, :column 21, :line 2453, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2453, :column 7, :line 2453, :file "cljs/core.cljs"} chunk-buffer ^{:arglists (^{:end-column 30, :end-line 2453, :column 20, :line 2453, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2453, :column 21, :line 2453, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2453, :column 7, :line 2453, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:end-column 30, :end-line 2453, :column 21, :line 2453, :file "cljs/core.cljs"} capacity]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2453, :column 20, :line 2453, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2453, :column 21, :line 2453, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2453, :column 7, :line 2453, :file "cljs/core.cljs"} chunk-buffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1438, :column 8, :line 1438, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1438, :column 16, :line 1438, :file "cljs/core.cljs"} seqable? ^{:arglists (^{:end-column 6, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1438, :column 8, :line 1438, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1438, :column 16, :line 1438, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1438, :column 8, :line 1438, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1438, :column 16, :line 1438, :file "cljs/core.cljs"} seqable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 8174, :column 10, :line 8174, :file "cljs/core.cljs"} Iteration {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 8174, :column 10, :line 8174, :file "cljs/core.cljs"} Iteration, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 32, :end-line 8174, :column 20, :line 8174, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll], :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 27, :end-line 538, :column 24, :line 538, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 538, :column 25, :line 538, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 538, :column 8, :line 538, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 538, :column 16, :line 538, :file "cljs/core.cljs"} symbol? ^{:arglists (^{:end-column 27, :end-line 538, :column 24, :line 538, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 538, :column 25, :line 538, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 538, :column 8, :line 538, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 538, :column 16, :line 538, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 538, :column 25, :line 538, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 538, :column 24, :line 538, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 538, :column 25, :line 538, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 538, :column 8, :line 538, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 538, :column 16, :line 538, :file "cljs/core.cljs"} symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 459, :column 39, :line 459, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 459, :column 40, :line 459, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 459, :column 8, :line 459, :file "cljs/core.cljs"} number, :end-column 39, :end-line 459, :column 15, :line 459, :file "cljs/core.cljs"} m3-hash-unencoded-chars ^{:arglists (^{:end-column 43, :end-line 459, :column 39, :line 459, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 459, :column 40, :line 459, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 459, :column 8, :line 459, :file "cljs/core.cljs"} number, :end-column 39, :end-line 459, :column 15, :line 459, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 43, :end-line 459, :column 40, :line 459, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 459, :column 39, :line 459, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 459, :column 40, :line 459, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 459, :column 8, :line 459, :file "cljs/core.cljs"} number, :end-column 39, :end-line 459, :column 15, :line 459, :file "cljs/core.cljs"} m3-hash-unencoded-chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1792, :column 30, :line 1792, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1792, :column 31, :line 1792, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1792, :column 8, :line 1792, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1792, :column 15, :line 1792, :file "cljs/core.cljs"} unchecked-char ^{:arglists (^{:end-column 33, :end-line 1792, :column 30, :line 1792, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1792, :column 31, :line 1792, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1792, :column 8, :line 1792, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1792, :column 15, :line 1792, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1792, :column 31, :line 1792, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1792, :column 30, :line 1792, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1792, :column 31, :line 1792, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1792, :column 8, :line 1792, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1792, :column 15, :line 1792, :file "cljs/core.cljs"} unchecked-char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4650, :column 10, :line 4650, :file "cljs/core.cljs"} NeverEquiv {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4650, :column 10, :line 4650, :file "cljs/core.cljs"} NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 4650, :column 21, :line 4650, :file "cljs/core.cljs"} [], :protocols #{Object cljs.core/IEquiv}}, ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} s] [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} t] [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1341, :column 3, :line 1341, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1341, :column 4, :line 1341, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1339, :column 8, :line 1339, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1339, :column 16, :line 1339, :file "cljs/core.cljs"} coll? ^{:arglists (^{:end-column 6, :end-line 1341, :column 3, :line 1341, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1341, :column 4, :line 1341, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1339, :column 8, :line 1339, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1339, :column 16, :line 1339, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1341, :column 4, :line 1341, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1341, :column 3, :line 1341, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1341, :column 4, :line 1341, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1339, :column 8, :line 1339, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1339, :column 16, :line 1339, :file "cljs/core.cljs"} coll?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3834, :column 4, :line 3834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3834, :column 5, :line 3834, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3834, :column 7, :line 3834, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3836, :column 4, :line 3836, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3836, :column 5, :line 3836, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3836, :column 7, :line 3836, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3836, :column 10, :line 3836, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3828, :column 7, :line 3828, :file "cljs/core.cljs"} get-in ^{:arglists (^{:end-column 10, :end-line 3834, :column 4, :line 3834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3834, :column 5, :line 3834, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3834, :column 7, :line 3834, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3836, :column 4, :line 3836, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3836, :column 5, :line 3836, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3836, :column 7, :line 3836, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3836, :column 10, :line 3836, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3828, :column 7, :line 3828, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3834, :column 5, :line 3834, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3834, :column 7, :line 3834, :file "cljs/core.cljs"} ks] [^{:end-column 7, :end-line 3836, :column 5, :line 3836, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3836, :column 7, :line 3836, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3836, :column 10, :line 3836, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3834, :column 4, :line 3834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3834, :column 5, :line 3834, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3834, :column 7, :line 3834, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3836, :column 4, :line 3836, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3836, :column 5, :line 3836, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3836, :column 7, :line 3836, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3836, :column 10, :line 3836, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3828, :column 7, :line 3828, :file "cljs/core.cljs"} get-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1007, :column 3, :line 1007, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1005, :column 7, :line 1005, :file "cljs/core.cljs"} fnext ^{:arglists (^{:end-column 9, :end-line 1007, :column 3, :line 1007, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1005, :column 7, :line 1005, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1007, :column 3, :line 1007, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1005, :column 7, :line 1005, :file "cljs/core.cljs"} fnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} IList ^{:impls #{cljs.core/Cons cljs.core/EmptyList cljs.core/List}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} IList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 35, :end-line 848, :column 30, :line 848, :file "cljs/core.cljs"} List {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2110, :column 10, :line 2110, :file "cljs/core.cljs"} List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 2110, :column 15, :line 2110, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -val ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1895, :column 13, :line 1895, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1895, :column 14, :line 1895, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1895, :column 7, :line 1895, :file "cljs/core.cljs"} bytes ^{:arglists (^{:end-column 16, :end-line 1895, :column 13, :line 1895, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1895, :column 14, :line 1895, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1895, :column 7, :line 1895, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1895, :column 14, :line 1895, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1895, :column 13, :line 1895, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1895, :column 14, :line 1895, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1895, :column 7, :line 1895, :file "cljs/core.cljs"} bytes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash])} ->ObjMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ObjMap [^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash])} ->ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 546, :column 24, :line 546, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 546, :column 25, :line 546, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 546, :column 27, :line 546, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 546, :column 8, :line 546, :file "cljs/core.cljs"} compare-symbols ^{:arglists (^{:end-column 29, :end-line 546, :column 24, :line 546, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 546, :column 25, :line 546, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 546, :column 27, :line 546, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 546, :column 8, :line 546, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 546, :column 25, :line 546, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 546, :column 27, :line 546, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 546, :column 24, :line 546, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 546, :column 25, :line 546, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 546, :column 27, :line 546, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 546, :column 8, :line 546, :file "cljs/core.cljs"} compare-symbols, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 308, :column 5, :line 308, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 308, :column 16, :line 308, :file "cljs/core.cljs"} -seq ^{:arglists (^{:end-column 24, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 308, :column 5, :line 308, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 308, :column 16, :line 308, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 308, :column 5, :line 308, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 308, :column 16, :line 308, :file "cljs/core.cljs"} -seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}}, :aliases {^{:end-column 38, :end-line 10, :column 30, :line 10, :file "cljs/core.cljs"} gstring ^{:end-column 26, :end-line 10, :column 14, :line 10, :file "cljs/core.cljs"} goog.string, ^{:end-column 38, :end-line 11, :column 30, :line 11, :file "cljs/core.cljs"} gobject ^{:end-column 26, :end-line 11, :column 14, :line 11, :file "cljs/core.cljs"} goog.object, ^{:end-column 36, :end-line 12, :column 29, :line 12, :file "cljs/core.cljs"} garray ^{:end-column 25, :end-line 12, :column 14, :line 12, :file "cljs/core.cljs"} goog.array}, :macro-mappings {unsafe-bit-and #=(var cljs.core/unsafe-bit-and), unchecked-remainder-int #=(var cljs.core/unchecked-remainder-int), when-first #=(var cljs.core/when-first), cond->> #=(var cljs.core/cond->>), bit-set #=(var cljs.core/bit-set), import-macros #=(var cljs.core/import-macros), while #=(var cljs.core/while), satisfies? #=(var cljs.core/satisfies?), unchecked-subtract-int #=(var cljs.core/unchecked-subtract-int), bit-shift-right #=(var cljs.core/bit-shift-right), aget #=(var cljs.core/aget), specify #=(var cljs.core/specify), caching-hash #=(var cljs.core/caching-hash), bit-shift-left #=(var cljs.core/bit-shift-left), coercive-not #=(var cljs.core/coercive-not), dec #=(var cljs.core/dec), < #=(var cljs.core/<), this-as #=(var cljs.core/this-as), .. #=(var cljs.core/..), delay #=(var cljs.core/delay), unchecked-negate #=(var cljs.core/unchecked-negate), simple-benchmark #=(var cljs.core/simple-benchmark), unchecked-inc-int #=(var cljs.core/unchecked-inc-int), bit-shift-right-zero-fill #=(var cljs.core/bit-shift-right-zero-fill), implements? #=(var cljs.core/implements?), pos? #=(var cljs.core/pos?), specify! #=(var cljs.core/specify!), if-not #=(var cljs.core/if-not), alength #=(var cljs.core/alength), bit-xor #=(var cljs.core/bit-xor), doseq #=(var cljs.core/doseq), unsigned-bit-shift-right #=(var cljs.core/unsigned-bit-shift-right), neg? #=(var cljs.core/neg?), unchecked-float #=(var cljs.core/unchecked-float), undefined? #=(var cljs.core/undefined?), deftype #=(var cljs.core/deftype), mask #=(var cljs.core/mask), when-let #=(var cljs.core/when-let), divide #=(var cljs.core/divide), coercive-boolean #=(var cljs.core/coercive-boolean), <= #=(var cljs.core/<=), * #=(var cljs.core/*), min #=(var cljs.core/min), lazy-seq #=(var cljs.core/lazy-seq), js-delete #=(var cljs.core/js-delete), truth_ #=(var cljs.core/truth_), defcurried #=(var cljs.core/defcurried), let #=(var cljs.core/let), -> #=(var cljs.core/->), coercive-not= #=(var cljs.core/coercive-not=), doto #=(var cljs.core/doto), areduce #=(var cljs.core/areduce), double #=(var cljs.core/double), bit-and-not #=(var cljs.core/bit-and-not), unchecked-add-int #=(var cljs.core/unchecked-add-int), fn #=(var cljs.core/fn), short #=(var cljs.core/short), js-this #=(var cljs.core/js-this), unchecked-double #=(var cljs.core/unchecked-double), string? #=(var cljs.core/string?), js-arguments #=(var cljs.core/js-arguments), unchecked-multiply-int #=(var cljs.core/unchecked-multiply-int), as-> #=(var cljs.core/as->), when-not #=(var cljs.core/when-not), when #=(var cljs.core/when), int #=(var cljs.core/int), > #=(var cljs.core/>), keyword? #=(var cljs.core/keyword?), unchecked-multiply #=(var cljs.core/unchecked-multiply), gen-apply-to #=(var cljs.core/gen-apply-to), some->> #=(var cljs.core/some->>), unchecked-dec #=(var cljs.core/unchecked-dec), defn #=(var cljs.core/defn), float #=(var cljs.core/float), amap #=(var cljs.core/amap), declare #=(var cljs.core/declare), - #=(var cljs.core/-), hash-set #=(var cljs.core/hash-set), or #=(var cljs.core/or), assert-args #=(var cljs.core/assert-args), extend-type #=(var cljs.core/extend-type), bit-test #=(var cljs.core/bit-test), defmethod #=(var cljs.core/defmethod), time #=(var cljs.core/time), zero? #=(var cljs.core/zero?), unchecked-dec-int #=(var cljs.core/unchecked-dec-int), memfn #=(var cljs.core/memfn), js-obj #=(var cljs.core/js-obj), nil? #=(var cljs.core/nil?), extend-protocol #=(var cljs.core/extend-protocol), cond-> #=(var cljs.core/cond->), dotimes #=(var cljs.core/dotimes), bit-and #=(var cljs.core/bit-and), reify #=(var cljs.core/reify), instance? #=(var cljs.core/instance?), defonce #=(var cljs.core/defonce), unchecked-add #=(var cljs.core/unchecked-add), rfn #=(var cljs.core/rfn), identical? #=(var cljs.core/identical?), unchecked-divide-int #=(var cljs.core/unchecked-divide-int), defn- #=(var cljs.core/defn-), defprotocol #=(var cljs.core/defprotocol), unchecked-subtract #=(var cljs.core/unchecked-subtract), assert #=(var cljs.core/assert), true? #=(var cljs.core/true?), array #=(var cljs.core/array), letfn #=(var cljs.core/letfn), / #=(var cljs.core//), bitpos #=(var cljs.core/bitpos), bit-or #=(var cljs.core/bit-or), vector #=(var cljs.core/vector), >= #=(var cljs.core/>=), loop #=(var cljs.core/loop), bit-flip #=(var cljs.core/bit-flip), js-mod #=(var cljs.core/js-mod), with-out-str #=(var cljs.core/with-out-str), condp #=(var cljs.core/condp), cond #=(var cljs.core/cond), some-> #=(var cljs.core/some->), for #=(var cljs.core/for), binding #=(var cljs.core/binding), array-map #=(var cljs.core/array-map), unchecked-byte #=(var cljs.core/unchecked-byte), unchecked-short #=(var cljs.core/unchecked-short), inc #=(var cljs.core/inc), with-redefs #=(var cljs.core/with-redefs), bit-clear #=(var cljs.core/bit-clear), list #=(var cljs.core/list), + #=(var cljs.core/+), aset #=(var cljs.core/aset), defmulti #=(var cljs.core/defmulti), str #=(var cljs.core/str), coercive-= #=(var cljs.core/coercive-=), hash-map #=(var cljs.core/hash-map), if-let #=(var cljs.core/if-let), false? #=(var cljs.core/false?), case #=(var cljs.core/case), array? #=(var cljs.core/array?), exists? #=(var cljs.core/exists?), bit-not #=(var cljs.core/bit-not), byte #=(var cljs.core/byte), max #=(var cljs.core/max), == #=(var cljs.core/==), lazy-cat #=(var cljs.core/lazy-cat), comment #=(var cljs.core/comment), defrecord #=(var cljs.core/defrecord), make-array #=(var cljs.core/make-array), unchecked-negate-int #=(var cljs.core/unchecked-negate-int), unchecked-inc #=(var cljs.core/unchecked-inc), and #=(var cljs.core/and), number? #=(var cljs.core/number?), symbol? #=(var cljs.core/symbol?), unchecked-char #=(var cljs.core/unchecked-char), ->> #=(var cljs.core/->>)}, :macro-aliases {}}, cljs.user {:ns cljs.user, :mappings {^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash])} ->PersistentHashSet ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentHashSet [^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash])} ->PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause])} ->ExceptionInfo ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause])} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause])} ->ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8246, :column 4, :line 8246, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8246, :column 5, :line 8246, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8247, :column 5, :line 8247, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8247, :column 7, :line 8247, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8247, :column 9, :line 8247, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8241, :column 7, :line 8241, :file "cljs/core.cljs"} js->clj ^{:arglists (^{:end-column 7, :end-line 8246, :column 4, :line 8246, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8246, :column 5, :line 8246, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8247, :column 5, :line 8247, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8247, :column 7, :line 8247, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8247, :column 9, :line 8247, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8241, :column 7, :line 8241, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8246, :column 5, :line 8246, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 8247, :column 5, :line 8247, :file "cljs/core.cljs"} x & ^{:end-column 14, :end-line 8247, :column 9, :line 8247, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8246, :column 4, :line 8246, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8246, :column 5, :line 8246, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8247, :column 5, :line 8247, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8247, :column 7, :line 8247, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8247, :column 9, :line 8247, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8241, :column 7, :line 8241, :file "cljs/core.cljs"} js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1573, :column 11, :line 1573, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1575, :column 16, :line 1575, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1568, :column 7, :line 1568, :file "cljs/core.cljs"} sort-by ^{:arglists (^{:end-column 16, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1573, :column 11, :line 1573, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1575, :column 16, :line 1575, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1568, :column 7, :line 1568, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1573, :column 11, :line 1573, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1575, :column 16, :line 1575, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1573, :column 4, :line 1573, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1573, :column 5, :line 1573, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1573, :column 11, :line 1573, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1575, :column 4, :line 1575, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1575, :column 5, :line 1575, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1575, :column 11, :line 1575, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1575, :column 16, :line 1575, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1568, :column 7, :line 1568, :file "cljs/core.cljs"} sort-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 36, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} ITransientAssociative ^{:impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :protocol-symbol true, :end-column 36, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 36, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} ITransientAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 2096, :column 15, :line 2096, :file "cljs/core.cljs"} chunk-first ^{:arglists (^{:end-column 22, :end-line 2561, :column 19, :line 2561, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2561, :column 20, :line 2561, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2561, :column 7, :line 2561, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 2561, :column 20, :line 2561, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2561, :column 19, :line 2561, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2561, :column 20, :line 2561, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2561, :column 7, :line 2561, :file "cljs/core.cljs"} chunk-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 452, :column 27, :line 452, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 452, :column 28, :line 452, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 27, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} m3-hash-int ^{:arglists (^{:end-column 31, :end-line 452, :column 27, :line 452, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 452, :column 28, :line 452, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 27, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 452, :column 28, :line 452, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 452, :column 27, :line 452, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 452, :column 28, :line 452, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 27, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} m3-hash-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2956, :column 15, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2956, :column 22, :line 2956, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} stepper ^{:arglists (^{:end-column 27, :end-line 2956, :column 15, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2956, :column 22, :line 2956, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2956, :column 22, :line 2956, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2956, :column 15, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2956, :column 22, :line 2956, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 403, :column 3, :line 403, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 403, :column 5, :line 403, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 403, :column 16, :line 403, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 400, :column 7, :line 400, :file "cljs/core.cljs"} pr-str* ^{:arglists (^{:end-column 20, :end-line 403, :column 3, :line 403, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 403, :column 5, :line 403, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 403, :column 16, :line 403, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 400, :column 7, :line 400, :file "cljs/core.cljs"} {:arglists ([^{:tag ^{:end-column 16, :end-line 403, :column 5, :line 403, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 403, :column 16, :line 403, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 403, :column 3, :line 403, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 403, :column 5, :line 403, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 403, :column 16, :line 403, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 400, :column 7, :line 400, :file "cljs/core.cljs"} pr-str*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3751, :column 4, :line 3751, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3751, :column 5, :line 3751, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3751, :column 13, :line 3751, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3751, :column 22, :line 3751, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3744, :column 7, :line 3744, :file "cljs/core.cljs"} tree-seq ^{:arglists (^{:end-column 27, :end-line 3751, :column 4, :line 3751, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3751, :column 5, :line 3751, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3751, :column 13, :line 3751, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3751, :column 22, :line 3751, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3744, :column 7, :line 3744, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 13, :end-line 3751, :column 5, :line 3751, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3751, :column 13, :line 3751, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3751, :column 22, :line 3751, :file "cljs/core.cljs"} root]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3751, :column 4, :line 3751, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3751, :column 5, :line 3751, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3751, :column 13, :line 3751, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3751, :column 22, :line 3751, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3744, :column 7, :line 3744, :file "cljs/core.cljs"} tree-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 1852, :column 31, :line 1852, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1852, :column 32, :line 1852, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1852, :column 34, :line 1852, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} unchecked-remainder-int ^{:arglists (^{:end-column 36, :end-line 1852, :column 31, :line 1852, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1852, :column 32, :line 1852, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1852, :column 34, :line 1852, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1852, :column 32, :line 1852, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1852, :column 34, :line 1852, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 1852, :column 31, :line 1852, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1852, :column 32, :line 1852, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1852, :column 34, :line 1852, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} unchecked-remainder-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 617, :column 3, :line 617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 617, :column 4, :line 617, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 613, :column 8, :line 613, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 613, :column 12, :line 613, :file "cljs/core.cljs"} seq ^{:arglists (^{:end-column 9, :end-line 617, :column 3, :line 617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 617, :column 4, :line 617, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 613, :column 8, :line 613, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 613, :column 12, :line 613, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 617, :column 4, :line 617, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 617, :column 3, :line 617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 617, :column 4, :line 617, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 613, :column 8, :line 613, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 613, :column 12, :line 613, :file "cljs/core.cljs"} seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 193, :column 10, :line 193, :file "cljs/core.cljs"} reduce ^{:arglists (^{:end-column 12, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1612, :column 7, :line 1612, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1628, :column 5, :line 1628, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1628, :column 7, :line 1628, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1628, :column 11, :line 1628, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1612, :column 7, :line 1612, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1628, :column 5, :line 1628, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1628, :column 7, :line 1628, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1628, :column 11, :line 1628, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1612, :column 7, :line 1612, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1628, :column 5, :line 1628, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1628, :column 7, :line 1628, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1628, :column 11, :line 1628, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1602, :column 7, :line 1602, :file "cljs/core.cljs"} reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 18, :end-line 2907, :column 1, :line 2907, :file "cljs/core.cljs"} INIT ^{:end-column 18, :end-line 2907, :column 1, :line 2907, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 18, :end-line 2907, :column 1, :line 2907, :file "cljs/core.cljs"} INIT, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1463, :column 3, :line 1463, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1463, :column 4, :line 1463, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1463, :column 9, :line 1463, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1457, :column 8, :line 1457, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1457, :column 16, :line 1457, :file "cljs/core.cljs"} contains? ^{:arglists (^{:end-column 11, :end-line 1463, :column 3, :line 1463, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1463, :column 4, :line 1463, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1463, :column 9, :line 1463, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1457, :column 8, :line 1457, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1457, :column 16, :line 1457, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 1463, :column 4, :line 1463, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1463, :column 9, :line 1463, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1463, :column 3, :line 1463, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1463, :column 4, :line 1463, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1463, :column 9, :line 1463, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1457, :column 8, :line 1457, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1457, :column 16, :line 1457, :file "cljs/core.cljs"} contains?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3108, :column 3, :line 3108, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3108, :column 9, :line 3108, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3105, :column 8, :line 3105, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3105, :column 16, :line 3105, :file "cljs/core.cljs"} every? ^{:arglists (^{:end-column 14, :end-line 3108, :column 3, :line 3108, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3108, :column 9, :line 3108, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3105, :column 8, :line 3105, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3105, :column 16, :line 3105, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3108, :column 9, :line 3108, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3108, :column 3, :line 3108, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3108, :column 9, :line 3108, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3105, :column 8, :line 3105, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3105, :column 16, :line 3105, :file "cljs/core.cljs"} every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3392, :column 4, :line 3392, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3392, :column 5, :line 3392, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3404, :column 4, :line 3404, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3404, :column 5, :line 3404, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3404, :column 7, :line 3404, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3387, :column 7, :line 3387, :file "cljs/core.cljs"} keep-indexed ^{:arglists (^{:end-column 7, :end-line 3392, :column 4, :line 3392, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3392, :column 5, :line 3392, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3404, :column 4, :line 3404, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3404, :column 5, :line 3404, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3404, :column 7, :line 3404, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3387, :column 7, :line 3387, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3392, :column 5, :line 3392, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3404, :column 5, :line 3404, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3404, :column 7, :line 3404, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3392, :column 4, :line 3392, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3392, :column 5, :line 3392, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3404, :column 4, :line 3404, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3404, :column 5, :line 3404, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3404, :column 7, :line 3404, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3387, :column 7, :line 3387, :file "cljs/core.cljs"} keep-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash])} ->PersistentQueueSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentQueueSeq [^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash])} ->PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2050, :column 5, :line 2050, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2050, :column 7, :line 2050, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2051, :column 4, :line 2051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2051, :column 5, :line 2051, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2051, :column 7, :line 2051, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2051, :column 13, :line 2051, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} subs ^{:arglists (^{:end-column 13, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2050, :column 5, :line 2050, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2050, :column 7, :line 2050, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2051, :column 4, :line 2051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2051, :column 5, :line 2051, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2051, :column 7, :line 2051, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2051, :column 13, :line 2051, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2050, :column 5, :line 2050, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2050, :column 7, :line 2050, :file "cljs/core.cljs"} start] [^{:end-column 7, :end-line 2051, :column 5, :line 2051, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2051, :column 7, :line 2051, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2051, :column 13, :line 2051, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2050, :column 5, :line 2050, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2050, :column 7, :line 2050, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2051, :column 4, :line 2051, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2051, :column 5, :line 2051, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2051, :column 7, :line 2051, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2051, :column 13, :line 2051, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} subs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7218, :column 3, :line 7218, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7218, :column 4, :line 7218, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7216, :column 7, :line 7216, :file "cljs/core.cljs"} set ^{:arglists (^{:end-column 9, :end-line 7218, :column 3, :line 7218, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7218, :column 4, :line 7218, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7216, :column 7, :line 7216, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7218, :column 4, :line 7218, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7218, :column 3, :line 7218, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7218, :column 4, :line 7218, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7216, :column 7, :line 7216, :file "cljs/core.cljs"} set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1525, :column 4, :line 1525, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1525, :column 5, :line 1525, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1532, :column 8, :line 1532, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1532, :column 15, :line 1532, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1523, :column 17, :line 1523, :file "cljs/core.cljs"} compare-indexed ^{:arglists (^{:end-column 11, :end-line 1525, :column 4, :line 1525, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1525, :column 5, :line 1525, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1532, :column 8, :line 1532, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1532, :column 15, :line 1532, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1523, :column 17, :line 1523, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1525, :column 5, :line 1525, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} ys] ^^{:end-column 15, :end-line 1502, :column 8, :line 1502, :file "cljs/core.cljs"} number [^{:end-column 8, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1532, :column 8, :line 1532, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1532, :column 15, :line 1532, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1525, :column 4, :line 1525, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1525, :column 5, :line 1525, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1532, :column 4, :line 1532, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1532, :column 5, :line 1532, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1532, :column 8, :line 1532, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1532, :column 11, :line 1532, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1532, :column 15, :line 1532, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1523, :column 17, :line 1523, :file "cljs/core.cljs"} compare-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3604, :column 3, :line 3604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3604, :column 6, :line 3604, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} take-last ^{:arglists (^{:end-column 11, :end-line 3604, :column 3, :line 3604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3604, :column 6, :line 3604, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 6, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3604, :column 6, :line 3604, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3604, :column 3, :line 3604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3604, :column 6, :line 3604, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} take-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 605, :column 29, :line 605, :file "cljs/core.cljs"} IndexedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 858, :column 10, :line 858, :file "cljs/core.cljs"} IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 28, :end-line 858, :column 21, :line 858, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i], :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 8, :end-line 1966, :column 3, :line 1966, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1966, :column 4, :line 1966, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1966, :column 6, :line 1966, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1964, :column 7, :line 1964, :file "cljs/core.cljs"} bit-set ^{:arglists (^{:end-column 8, :end-line 1966, :column 3, :line 1966, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1966, :column 4, :line 1966, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1966, :column 6, :line 1966, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1964, :column 7, :line 1964, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1966, :column 4, :line 1966, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1966, :column 6, :line 1966, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1966, :column 3, :line 1966, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1966, :column 4, :line 1966, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1966, :column 6, :line 1966, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1964, :column 7, :line 1964, :file "cljs/core.cljs"} bit-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 32, :end-line 479, :column 1, :line 479, :file "cljs/core.cljs"} string-hash-cache-count ^{:end-column 32, :end-line 479, :column 1, :line 479, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 32, :end-line 479, :column 1, :line 479, :file "cljs/core.cljs"} string-hash-cache-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 6513, :column 21, :line 6513, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6513, :column 22, :line 6513, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6513, :column 27, :line 6513, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6513, :column 32, :line 6513, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6513, :column 34, :line 6513, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6513, :column 36, :line 6513, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6513, :column 8, :line 6513, :file "cljs/core.cljs"} tree-map-add ^{:arglists (^{:end-column 42, :end-line 6513, :column 21, :line 6513, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6513, :column 22, :line 6513, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6513, :column 27, :line 6513, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6513, :column 32, :line 6513, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6513, :column 34, :line 6513, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6513, :column 36, :line 6513, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6513, :column 8, :line 6513, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6513, :column 22, :line 6513, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6513, :column 27, :line 6513, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6513, :column 32, :line 6513, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6513, :column 34, :line 6513, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6513, :column 36, :line 6513, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 6513, :column 21, :line 6513, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6513, :column 22, :line 6513, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6513, :column 27, :line 6513, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6513, :column 32, :line 6513, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6513, :column 34, :line 6513, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6513, :column 36, :line 6513, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6513, :column 8, :line 6513, :file "cljs/core.cljs"} tree-map-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 293, :column 20, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 21, :line 293, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 293, :column 23, :line 293, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -with-meta ^{:arglists (^{:end-column 28, :end-line 293, :column 20, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 21, :line 293, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 293, :column 23, :line 293, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 293, :column 21, :line 293, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 293, :column 23, :line 293, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 293, :column 20, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 21, :line 293, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 293, :column 23, :line 293, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 57, :end-line 8447, :column 3, :line 8447, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8447, :column 17, :line 8447, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8447, :column 30, :line 8447, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8447, :column 47, :line 8447, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8446, :column 8, :line 8446, :file "cljs/core.cljs"} reset-cache ^{:arglists (^{:end-column 57, :end-line 8447, :column 3, :line 8447, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8447, :column 17, :line 8447, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8447, :column 30, :line 8447, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8447, :column 47, :line 8447, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8446, :column 8, :line 8446, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8447, :column 17, :line 8447, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8447, :column 30, :line 8447, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8447, :column 47, :line 8447, :file "cljs/core.cljs"} hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 57, :end-line 8447, :column 3, :line 8447, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8447, :column 17, :line 8447, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8447, :column 30, :line 8447, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8447, :column 47, :line 8447, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8446, :column 8, :line 8446, :file "cljs/core.cljs"} reset-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7280, :column 15, :line 7280, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7280, :column 16, :line 7280, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7280, :column 7, :line 7280, :file "cljs/core.cljs"} butlast ^{:arglists (^{:end-column 18, :end-line 7280, :column 15, :line 7280, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7280, :column 16, :line 7280, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7280, :column 7, :line 7280, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 18, :end-line 7280, :column 16, :line 7280, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7280, :column 15, :line 7280, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7280, :column 16, :line 7280, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7280, :column 7, :line 7280, :file "cljs/core.cljs"} butlast, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 3901, :column 17, :line 3901, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3901, :column 18, :line 3901, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3901, :column 8, :line 3901, :file "cljs/core.cljs"} tail-off ^{:arglists (^{:end-column 21, :end-line 3901, :column 17, :line 3901, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3901, :column 18, :line 3901, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3901, :column 8, :line 3901, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 3901, :column 18, :line 3901, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 3901, :column 17, :line 3901, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3901, :column 18, :line 3901, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3901, :column 8, :line 3901, :file "cljs/core.cljs"} tail-off, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} unchecked-subtract-int ^{:arglists (^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} unchecked-subtract-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7508, :column 4, :line 7508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7508, :column 5, :line 7508, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7519, :column 4, :line 7519, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7519, :column 5, :line 7519, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7505, :column 7, :line 7505, :file "cljs/core.cljs"} take-nth ^{:arglists (^{:end-column 7, :end-line 7508, :column 4, :line 7508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7508, :column 5, :line 7508, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7519, :column 4, :line 7519, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7519, :column 5, :line 7519, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7505, :column 7, :line 7505, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7508, :column 5, :line 7508, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7519, :column 5, :line 7519, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7508, :column 4, :line 7508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7508, :column 5, :line 7508, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7519, :column 4, :line 7519, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7519, :column 5, :line 7519, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7519, :column 7, :line 7519, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7505, :column 7, :line 7505, :file "cljs/core.cljs"} take-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 639, :column 3, :line 639, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 639, :column 4, :line 639, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 636, :column 7, :line 636, :file "cljs/core.cljs"} first ^{:arglists (^{:end-column 9, :end-line 639, :column 3, :line 639, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 639, :column 4, :line 639, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 636, :column 7, :line 636, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 639, :column 4, :line 639, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 639, :column 3, :line 639, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 639, :column 4, :line 639, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 636, :column 7, :line 636, :file "cljs/core.cljs"} first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies? ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1433, :column 3, :line 1433, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1433, :column 4, :line 1433, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1431, :column 8, :line 1431, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1431, :column 16, :line 1431, :file "cljs/core.cljs"} seq? ^{:arglists (^{:end-column 6, :end-line 1433, :column 3, :line 1433, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1433, :column 4, :line 1433, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1431, :column 8, :line 1431, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1431, :column 16, :line 1431, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1433, :column 4, :line 1433, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1433, :column 3, :line 1433, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1433, :column 4, :line 1433, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1431, :column 8, :line 1431, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1431, :column 16, :line 1431, :file "cljs/core.cljs"} seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 38, :end-line 8336, :column 1, :line 8336, :file "cljs/core.cljs"} -global-hierarchy ^{:private true, :end-column 38, :end-line 8336, :column 1, :line 8336, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:private true, :end-column 38, :end-line 8336, :column 1, :line 8336, :file "cljs/core.cljs"} -global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8716, :column 10, :line 8716, :file "cljs/core.cljs"} UUID {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8716, :column 10, :line 8716, :file "cljs/core.cljs"} UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 21, :end-line 8716, :column 15, :line 8716, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 45, :end-line 324, :column 26, :line 324, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 324, :column 32, :line 324, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 324, :column 34, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq-from ^{:arglists (^{:end-column 45, :end-line 324, :column 26, :line 324, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 324, :column 32, :line 324, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 324, :column 34, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 324, :column 32, :line 324, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 324, :column 34, :line 324, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 324, :column 26, :line 324, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 324, :column 32, :line 324, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 324, :column 34, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq-from, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7903, :column 3, :line 7903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7903, :column 4, :line 7903, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7903, :column 6, :line 7903, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} println-str ^{:arglists (^{:end-column 11, :end-line 7903, :column 3, :line 7903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7903, :column 4, :line 7903, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7903, :column 6, :line 7903, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7903, :column 6, :line 7903, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7903, :column 3, :line 7903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7903, :column 4, :line 7903, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7903, :column 6, :line 7903, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} println-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1076, :column 5, :line 1076, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1076, :column 10, :line 1076, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1085, :column 4, :line 1085, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1085, :column 5, :line 1085, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1085, :column 10, :line 1085, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1085, :column 12, :line 1085, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1075, :column 8, :line 1075, :file "cljs/core.cljs"} linear-traversal-nth ^{:arglists (^{:end-column 12, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1076, :column 5, :line 1076, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1076, :column 10, :line 1076, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1085, :column 4, :line 1085, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1085, :column 5, :line 1085, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1085, :column 10, :line 1085, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1085, :column 12, :line 1085, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1075, :column 8, :line 1075, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1076, :column 5, :line 1076, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1076, :column 10, :line 1076, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 1085, :column 5, :line 1085, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1085, :column 10, :line 1085, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1085, :column 12, :line 1085, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1076, :column 5, :line 1076, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1076, :column 10, :line 1076, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1085, :column 4, :line 1085, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1085, :column 5, :line 1085, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1085, :column 10, :line 1085, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1085, :column 12, :line 1085, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1075, :column 8, :line 1075, :file "cljs/core.cljs"} linear-traversal-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3665, :column 6, :line 3665, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3662, :column 7, :line 3662, :file "cljs/core.cljs"} iterate ^{:arglists (^{:end-column 8, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3665, :column 6, :line 3665, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3662, :column 7, :line 3662, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3665, :column 6, :line 3665, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3665, :column 6, :line 3665, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3662, :column 7, :line 3662, :file "cljs/core.cljs"} iterate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 237, :column 12, :line 237, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 237, :column 4, :line 237, :file "cljs/core.cljs"} -empty ^{:arglists (^{:end-column 17, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 237, :column 12, :line 237, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 237, :column 4, :line 237, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 237, :column 12, :line 237, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 237, :column 12, :line 237, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 237, :column 4, :line 237, :file "cljs/core.cljs"} -empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7859, :column 15, :line 7859, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7859, :column 16, :line 7859, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7859, :column 7, :line 7859, :file "cljs/core.cljs"} newline ^{:arglists (^{:end-column 21, :end-line 7859, :column 15, :line 7859, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7859, :column 16, :line 7859, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7859, :column 7, :line 7859, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 21, :end-line 7859, :column 16, :line 7859, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7859, :column 15, :line 7859, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7859, :column 16, :line 7859, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7859, :column 7, :line 7859, :file "cljs/core.cljs"} newline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} ILookup ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/TransientHashMap cljs.core/PersistentVector cljs.core/TransientArrayMap cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} ILookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 376, :column 18, :line 376, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-rest ^{:arglists (^{:end-column 24, :end-line 376, :column 18, :line 376, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 376, :column 18, :line 376, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 7722, :column 17, :line 7722, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7722, :column 18, :line 7722, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7722, :column 25, :line 7722, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7722, :column 27, :line 7722, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7722, :column 7, :line 7722, :file "cljs/core.cljs"} write-all ^{:arglists (^{:end-column 30, :end-line 7722, :column 17, :line 7722, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7722, :column 18, :line 7722, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7722, :column 25, :line 7722, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7722, :column 27, :line 7722, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7722, :column 7, :line 7722, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 7722, :column 18, :line 7722, :file "cljs/core.cljs"} writer & ^{:end-column 30, :end-line 7722, :column 27, :line 7722, :file "cljs/core.cljs"} ss]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 7722, :column 17, :line 7722, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7722, :column 18, :line 7722, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7722, :column 25, :line 7722, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7722, :column 27, :line 7722, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7722, :column 7, :line 7722, :file "cljs/core.cljs"} write-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1232, :column 20, :line 1232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1232, :column 21, :line 1232, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1232, :column 8, :line 1232, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} fn? ^{:arglists (^{:end-column 23, :end-line 1232, :column 20, :line 1232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1232, :column 21, :line 1232, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1232, :column 8, :line 1232, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1233, :column 8, :line 1233, :file "cljs/core.cljs"} boolean [^{:end-column 23, :end-line 1232, :column 21, :line 1232, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1232, :column 20, :line 1232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1232, :column 21, :line 1232, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1232, :column 8, :line 1232, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} fn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 51, :end-line 8502, :column 19, :line 8502, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8502, :column 20, :line 8502, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8502, :column 23, :line 8502, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8502, :column 36, :line 8502, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8502, :column 4, :line 8502, :file "cljs/core.cljs"} -prefer-method ^{:arglists (^{:end-column 51, :end-line 8502, :column 19, :line 8502, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8502, :column 20, :line 8502, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8502, :column 23, :line 8502, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8502, :column 36, :line 8502, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8502, :column 4, :line 8502, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 8502, :column 20, :line 8502, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8502, :column 23, :line 8502, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8502, :column 36, :line 8502, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 51, :end-line 8502, :column 19, :line 8502, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8502, :column 20, :line 8502, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8502, :column 23, :line 8502, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8502, :column 36, :line 8502, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8502, :column 4, :line 8502, :file "cljs/core.cljs"} -prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 263, :column 16, :line 263, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 263, :column 22, :line 263, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 263, :column 24, :line 263, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} -assoc ^{:arglists (^{:end-column 26, :end-line 263, :column 16, :line 263, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 263, :column 22, :line 263, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 263, :column 24, :line 263, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 263, :column 22, :line 263, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 263, :column 24, :line 263, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 263, :column 16, :line 263, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 263, :column 17, :line 263, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 263, :column 22, :line 263, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 263, :column 24, :line 263, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 263, :column 5, :line 263, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 263, :column 9, :line 263, :file "cljs/core.cljs"} -assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7648, :column 4, :line 7648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7648, :column 5, :line 7648, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7651, :column 7, :line 7651, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7641, :column 7, :line 7641, :file "cljs/core.cljs"} doall ^{:arglists (^{:end-column 10, :end-line 7648, :column 4, :line 7648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7648, :column 5, :line 7648, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7651, :column 7, :line 7651, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7641, :column 7, :line 7641, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 7648, :column 5, :line 7648, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7651, :column 7, :line 7651, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7648, :column 4, :line 7648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7648, :column 5, :line 7648, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7651, :column 7, :line 7651, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7641, :column 7, :line 7641, :file "cljs/core.cljs"} doall, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 2343, :column 35, :line 2343, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2343, :column 36, :line 2343, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2343, :column 38, :line 2343, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2343, :column 8, :line 2343, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2343, :column 16, :line 2343, :file "cljs/core.cljs"} keyword-identical? ^{:arglists (^{:end-column 40, :end-line 2343, :column 35, :line 2343, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2343, :column 36, :line 2343, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2343, :column 38, :line 2343, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2343, :column 8, :line 2343, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2343, :column 16, :line 2343, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 38, :end-line 2343, :column 36, :line 2343, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2343, :column 38, :line 2343, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 2343, :column 35, :line 2343, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2343, :column 36, :line 2343, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2343, :column 38, :line 2343, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2343, :column 8, :line 2343, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2343, :column 16, :line 2343, :file "cljs/core.cljs"} keyword-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 3895, :column 16, :line 3895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3895, :column 17, :line 3895, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3895, :column 22, :line 3895, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3895, :column 26, :line 3895, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3895, :column 8, :line 3895, :file "cljs/core.cljs"} pv-aset ^{:arglists (^{:end-column 30, :end-line 3895, :column 16, :line 3895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3895, :column 17, :line 3895, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3895, :column 22, :line 3895, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3895, :column 26, :line 3895, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3895, :column 8, :line 3895, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3895, :column 17, :line 3895, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3895, :column 22, :line 3895, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3895, :column 26, :line 3895, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 3895, :column 16, :line 3895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3895, :column 17, :line 3895, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3895, :column 22, :line 3895, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3895, :column 26, :line 3895, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3895, :column 8, :line 3895, :file "cljs/core.cljs"} pv-aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8712, :column 3, :line 8712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8712, :column 4, :line 8712, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8710, :column 7, :line 8710, :file "cljs/core.cljs"} prefers ^{:arglists (^{:end-column 12, :end-line 8712, :column 3, :line 8712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8712, :column 4, :line 8712, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8710, :column 7, :line 8710, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8712, :column 4, :line 8712, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8712, :column 3, :line 8712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8712, :column 4, :line 8712, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8710, :column 7, :line 8710, :file "cljs/core.cljs"} prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8239, :column 13, :line 8239, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8239, :column 14, :line 8239, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8239, :column 16, :line 8239, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8239, :column 4, :line 8239, :file "cljs/core.cljs"} -js->clj ^{:arglists (^{:end-column 24, :end-line 8239, :column 13, :line 8239, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8239, :column 14, :line 8239, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8239, :column 16, :line 8239, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8239, :column 4, :line 8239, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8239, :column 14, :line 8239, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8239, :column 16, :line 8239, :file "cljs/core.cljs"} options]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8239, :column 13, :line 8239, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8239, :column 14, :line 8239, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8239, :column 16, :line 8239, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8239, :column 4, :line 8239, :file "cljs/core.cljs"} -js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2373, :column 10, :line 2373, :file "cljs/core.cljs"} LazySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2373, :column 10, :line 2373, :file "cljs/core.cljs"} LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 2373, :column 18, :line 2373, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8152, :column 4, :line 8152, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8164, :column 4, :line 8164, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8164, :column 5, :line 8164, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8149, :column 7, :line 8149, :file "cljs/core.cljs"} dedupe ^{:arglists (^{:end-column 6, :end-line 8152, :column 4, :line 8152, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8164, :column 4, :line 8164, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8164, :column 5, :line 8164, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8149, :column 7, :line 8149, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 10, :end-line 8164, :column 5, :line 8164, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8152, :column 4, :line 8152, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8164, :column 4, :line 8164, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8164, :column 5, :line 8164, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8149, :column 7, :line 8149, :file "cljs/core.cljs"} dedupe, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4407, :column 37, :line 4407, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4407, :column 38, :line 4407, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4407, :column 41, :line 4407, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4407, :column 8, :line 4407, :file "cljs/core.cljs"} unchecked-editable-array-for ^{:arglists (^{:end-column 43, :end-line 4407, :column 37, :line 4407, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4407, :column 38, :line 4407, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4407, :column 41, :line 4407, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4407, :column 8, :line 4407, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4407, :column 38, :line 4407, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4407, :column 41, :line 4407, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4407, :column 37, :line 4407, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4407, :column 38, :line 4407, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4407, :column 41, :line 4407, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4407, :column 8, :line 4407, :file "cljs/core.cljs"} unchecked-editable-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3887, :column 10, :line 3887, :file "cljs/core.cljs"} VectorNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3887, :column 10, :line 3887, :file "cljs/core.cljs"} VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 3887, :column 21, :line 3887, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr], :protocols #{}}, ^{:arglists (^{:end-column 10, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1221, :column 5, :line 1221, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1222, :column 4, :line 1222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1222, :column 5, :line 1222, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1222, :column 10, :line 1222, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1225, :column 4, :line 1225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1225, :column 5, :line 1225, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1225, :column 10, :line 1225, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1225, :column 12, :line 1225, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1225, :column 14, :line 1225, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1218, :column 7, :line 1218, :file "cljs/core.cljs"} dissoc ^{:arglists (^{:end-column 10, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1221, :column 5, :line 1221, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1222, :column 4, :line 1222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1222, :column 5, :line 1222, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1222, :column 10, :line 1222, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1225, :column 4, :line 1225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1225, :column 5, :line 1225, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1225, :column 10, :line 1225, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1225, :column 12, :line 1225, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1225, :column 14, :line 1225, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1218, :column 7, :line 1218, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1221, :column 5, :line 1221, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1222, :column 5, :line 1222, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1222, :column 10, :line 1222, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1225, :column 5, :line 1225, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1225, :column 10, :line 1225, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1225, :column 14, :line 1225, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1221, :column 4, :line 1221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1221, :column 5, :line 1221, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1222, :column 4, :line 1222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1222, :column 5, :line 1222, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1222, :column 10, :line 1222, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1225, :column 4, :line 1225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1225, :column 5, :line 1225, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1225, :column 10, :line 1225, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1225, :column 12, :line 1225, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1225, :column 14, :line 1225, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1218, :column 7, :line 1218, :file "cljs/core.cljs"} dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3321, :column 4, :line 3321, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 3322, :column 4, :line 3322, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3322, :column 5, :line 3322, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 3322, :column 7, :line 3322, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 3322, :column 9, :line 3322, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 3322, :column 16, :line 3322, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3322, :column 17, :line 3322, :file "cljs/core.cljs"} meta ^{:end-column 32, :end-line 3322, :column 22, :line 3322, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 12, :end-line 3307, :column 7, :line 3307, :file "cljs/core.cljs"} atom ^{:declared true, :end-column 73, :end-line 5244, :column 68, :line 5244, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 73, :end-line 5244, :column 68, :line 5244, :file "cljs/core.cljs"} atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1980, :column 3, :line 1980, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1980, :column 4, :line 1980, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1980, :column 6, :line 1980, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1978, :column 7, :line 1978, :file "cljs/core.cljs"} bit-shift-right ^{:arglists (^{:end-column 8, :end-line 1980, :column 3, :line 1980, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1980, :column 4, :line 1980, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1980, :column 6, :line 1980, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1978, :column 7, :line 1978, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1980, :column 4, :line 1980, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1980, :column 6, :line 1980, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1980, :column 3, :line 1980, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1980, :column 4, :line 1980, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1980, :column 6, :line 1980, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 1978, :column 7, :line 1978, :file "cljs/core.cljs"} bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version* ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} {:tag string, :op :var, :name ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s])} ->SetEntriesIterator ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s])} {:arglists (^cljs.core/SetEntriesIterator [^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s])} ->SetEntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 251, :column 11, :line 251, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 251, :column 12, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 251, :column 4, :line 251, :file "cljs/core.cljs"} -first ^{:arglists (^{:end-column 17, :end-line 251, :column 11, :line 251, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 251, :column 12, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 251, :column 4, :line 251, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 251, :column 12, :line 251, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 251, :column 11, :line 251, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 251, :column 12, :line 251, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 251, :column 4, :line 251, :file "cljs/core.cljs"} -first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1307, :column 3, :line 1307, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1307, :column 4, :line 1307, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1304, :column 7, :line 1304, :file "cljs/core.cljs"} peek ^{:arglists (^{:end-column 9, :end-line 1307, :column 3, :line 1307, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1307, :column 4, :line 1307, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1304, :column 7, :line 1304, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1307, :column 4, :line 1307, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1307, :column 3, :line 1307, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1307, :column 4, :line 1307, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1304, :column 7, :line 1304, :file "cljs/core.cljs"} peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} IKVReduce ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/PersistentTreeMap}, :protocol-symbol true, :end-column 24, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} IKVReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} aget ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6113, :column 10, :line 6113, :file "cljs/core.cljs"} PersistentTreeMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6113, :column 10, :line 6113, :file "cljs/core.cljs"} PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 84, :end-line 6113, :column 31, :line 6113, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 21, :end-line 329, :column 11, :line 329, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 329, :column 12, :line 329, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 329, :column 19, :line 329, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 329, :column 4, :line 329, :file "cljs/core.cljs"} -write ^{:arglists (^{:end-column 21, :end-line 329, :column 11, :line 329, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 329, :column 12, :line 329, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 329, :column 19, :line 329, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 329, :column 4, :line 329, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 329, :column 12, :line 329, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 329, :column 19, :line 329, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 329, :column 11, :line 329, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 329, :column 12, :line 329, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 329, :column 19, :line 329, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 329, :column 4, :line 329, :file "cljs/core.cljs"} -write, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2931, :column 12, :line 2931, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2931, :column 13, :line 2931, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2931, :column 7, :line 2931, :file "cljs/core.cljs"} iter ^{:arglists (^{:end-column 18, :end-line 2931, :column 12, :line 2931, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2931, :column 13, :line 2931, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2931, :column 7, :line 2931, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 2931, :column 13, :line 2931, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2931, :column 12, :line 2931, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2931, :column 13, :line 2931, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2931, :column 7, :line 2931, :file "cljs/core.cljs"} iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7384, :column 7, :line 7384, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7384, :column 12, :line 7384, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} mk-bound-fn ^{:arglists (^{:end-column 16, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7384, :column 7, :line 7384, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7384, :column 12, :line 7384, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7384, :column 7, :line 7384, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7384, :column 12, :line 7384, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7384, :column 3, :line 7384, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7384, :column 4, :line 7384, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7384, :column 7, :line 7384, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7384, :column 12, :line 7384, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} mk-bound-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} last ^{:arglists (^{:end-column 6, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7879, :column 4, :line 7879, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7879, :column 6, :line 7879, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7874, :column 7, :line 7874, :file "cljs/core.cljs"} pr ^{:arglists (^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7879, :column 4, :line 7879, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7879, :column 6, :line 7879, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7874, :column 7, :line 7874, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7879, :column 6, :line 7879, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7879, :column 3, :line 7879, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7879, :column 4, :line 7879, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7879, :column 6, :line 7879, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7874, :column 7, :line 7874, :file "cljs/core.cljs"} pr, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 58, :end-line 6106, :column 26, :line 6106, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6106, :column 27, :line 6106, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6106, :column 32, :line 6106, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6106, :column 39, :line 6106, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6106, :column 47, :line 6106, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6106, :column 8, :line 6106, :file "cljs/core.cljs"} tree-map-seq-push ^{:arglists (^{:end-column 58, :end-line 6106, :column 26, :line 6106, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6106, :column 27, :line 6106, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6106, :column 32, :line 6106, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6106, :column 39, :line 6106, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6106, :column 47, :line 6106, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6106, :column 8, :line 6106, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 6106, :column 27, :line 6106, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6106, :column 32, :line 6106, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6106, :column 39, :line 6106, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6106, :column 47, :line 6106, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 58, :end-line 6106, :column 26, :line 6106, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6106, :column 27, :line 6106, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6106, :column 32, :line 6106, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6106, :column 39, :line 6106, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6106, :column 47, :line 6106, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6106, :column 8, :line 6106, :file "cljs/core.cljs"} tree-map-seq-push, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2353, :column 3, :line 2353, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2353, :column 4, :line 2353, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2351, :column 7, :line 2351, :file "cljs/core.cljs"} namespace ^{:arglists (^{:end-column 6, :end-line 2353, :column 3, :line 2353, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2353, :column 4, :line 2353, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2351, :column 7, :line 2351, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string [^{:end-column 6, :end-line 2353, :column 4, :line 2353, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2353, :column 3, :line 2353, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2353, :column 4, :line 2353, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2351, :column 7, :line 2351, :file "cljs/core.cljs"} namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6786, :column 3, :line 6786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6786, :column 4, :line 6786, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6786, :column 6, :line 6786, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6783, :column 7, :line 6783, :file "cljs/core.cljs"} obj-map ^{:arglists (^{:end-column 14, :end-line 6786, :column 3, :line 6786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6786, :column 4, :line 6786, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6786, :column 6, :line 6786, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6783, :column 7, :line 6783, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 14, :end-line 6786, :column 6, :line 6786, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6786, :column 3, :line 6786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6786, :column 4, :line 6786, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6786, :column 6, :line 6786, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6783, :column 7, :line 6783, :file "cljs/core.cljs"} obj-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 764, :column 10, :line 764, :file "cljs/core.cljs"} Reduced {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 764, :column 10, :line 764, :file "cljs/core.cljs"} Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 764, :column 18, :line 764, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val], :protocols #{cljs.core/IDeref}}, ^{:arglists (^{:end-column 23, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 240, :column 16, :line 240, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 240, :column 9, :line 240, :file "cljs/core.cljs"} -conj ^{:arglists (^{:end-column 23, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 240, :column 16, :line 240, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 240, :column 9, :line 240, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 240, :column 16, :line 240, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 240, :column 16, :line 240, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 240, :column 9, :line 240, :file "cljs/core.cljs"} -conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5738, :column 10, :line 5738, :file "cljs/core.cljs"} NodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5738, :column 10, :line 5738, :file "cljs/core.cljs"} NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 5738, :column 18, :line 5738, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:declared true, :end-column 24, :end-line 475, :column 22, :line 475, :file "cljs/core.cljs"} = ^{:arglists (^{:end-column 7, :end-line 674, :column 4, :line 674, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 674, :column 5, :line 674, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 675, :column 4, :line 675, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 675, :column 5, :line 675, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 675, :column 7, :line 675, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 680, :column 4, :line 680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 680, :column 5, :line 680, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 680, :column 7, :line 680, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 680, :column 9, :line 680, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 680, :column 11, :line 680, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 669, :column 8, :line 669, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 669, :column 16, :line 669, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 674, :column 5, :line 674, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 675, :column 5, :line 675, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 675, :column 7, :line 675, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 680, :column 5, :line 680, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 680, :column 7, :line 680, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 680, :column 11, :line 680, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 674, :column 4, :line 674, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 674, :column 5, :line 674, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 675, :column 4, :line 675, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 675, :column 5, :line 675, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 675, :column 7, :line 675, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 680, :column 4, :line 680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 680, :column 5, :line 680, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 680, :column 7, :line 680, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 680, :column 9, :line 680, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 680, :column 11, :line 680, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 669, :column 8, :line 669, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 669, :column 16, :line 669, :file "cljs/core.cljs"} =, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 358, :column 14, :line 358, :file "cljs/core.cljs"} ITransientMap ^{:impls #{cljs.core/TransientHashMap cljs.core/TransientArrayMap}, :protocol-symbol true, :end-column 28, :end-line 358, :column 14, :line 358, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 358, :column 14, :line 358, :file "cljs/core.cljs"} ITransientMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 3917, :column 18, :line 3917, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3917, :column 19, :line 3917, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3917, :column 22, :line 3917, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3917, :column 28, :line 3917, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3917, :column 35, :line 3917, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3917, :column 8, :line 3917, :file "cljs/core.cljs"} push-tail ^{:arglists (^{:end-column 44, :end-line 3917, :column 18, :line 3917, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3917, :column 19, :line 3917, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3917, :column 22, :line 3917, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3917, :column 28, :line 3917, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3917, :column 35, :line 3917, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3917, :column 8, :line 3917, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 22, :end-line 3917, :column 19, :line 3917, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3917, :column 22, :line 3917, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3917, :column 28, :line 3917, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3917, :column 35, :line 3917, :file "cljs/core.cljs"} tailnode]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 3917, :column 18, :line 3917, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3917, :column 19, :line 3917, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3917, :column 22, :line 3917, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3917, :column 28, :line 3917, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3917, :column 35, :line 3917, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3917, :column 8, :line 3917, :file "cljs/core.cljs"} push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3552, :column 4, :line 3552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3552, :column 5, :line 3552, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3567, :column 4, :line 3567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3567, :column 5, :line 3567, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3567, :column 7, :line 3567, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} take ^{:arglists (^{:end-column 7, :end-line 3552, :column 4, :line 3552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3552, :column 5, :line 3552, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3567, :column 4, :line 3567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3567, :column 5, :line 3567, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3567, :column 7, :line 3567, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3552, :column 5, :line 3552, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3567, :column 5, :line 3567, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3567, :column 7, :line 3567, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3552, :column 4, :line 3552, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3552, :column 5, :line 3552, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3567, :column 4, :line 3567, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3567, :column 5, :line 3567, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3567, :column 7, :line 3567, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3548, :column 7, :line 3548, :file "cljs/core.cljs"} take, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1376, :column 8, :line 1376, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1376, :column 16, :line 1376, :file "cljs/core.cljs"} vector? ^{:arglists (^{:end-column 6, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1376, :column 8, :line 1376, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1376, :column 16, :line 1376, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1376, :column 8, :line 1376, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1376, :column 16, :line 1376, :file "cljs/core.cljs"} vector?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 46, :end-line 5270, :column 34, :line 5270, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5270, :column 35, :line 5270, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5270, :column 42, :line 5270, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5270, :column 8, :line 5270, :file "cljs/core.cljs"} bitmap-indexed-node-index ^{:arglists (^{:end-column 46, :end-line 5270, :column 34, :line 5270, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5270, :column 35, :line 5270, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5270, :column 42, :line 5270, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5270, :column 8, :line 5270, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 42, :end-line 5270, :column 35, :line 5270, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5270, :column 42, :line 5270, :file "cljs/core.cljs"} bit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 5270, :column 34, :line 5270, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5270, :column 35, :line 5270, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5270, :column 42, :line 5270, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5270, :column 8, :line 5270, :file "cljs/core.cljs"} bitmap-indexed-node-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1443, :column 24, :line 1443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1443, :column 25, :line 1443, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1443, :column 8, :line 1443, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1443, :column 16, :line 1443, :file "cljs/core.cljs"} boolean ^{:arglists (^{:end-column 27, :end-line 1443, :column 24, :line 1443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1443, :column 25, :line 1443, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1443, :column 8, :line 1443, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1443, :column 16, :line 1443, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 27, :end-line 1443, :column 25, :line 1443, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1443, :column 24, :line 1443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1443, :column 25, :line 1443, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1443, :column 8, :line 1443, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1443, :column 16, :line 1443, :file "cljs/core.cljs"} boolean, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 371, :column 14, :line 371, :file "cljs/core.cljs"} IChunk ^{:impls #{cljs.core/ArrayChunk}, :protocol-symbol true, :end-column 21, :end-line 371, :column 14, :line 371, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 371, :column 14, :line 371, :file "cljs/core.cljs"} IChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1976, :column 3, :line 1976, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1976, :column 4, :line 1976, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1976, :column 6, :line 1976, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1974, :column 7, :line 1974, :file "cljs/core.cljs"} bit-shift-left ^{:arglists (^{:end-column 8, :end-line 1976, :column 3, :line 1976, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1976, :column 4, :line 1976, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1976, :column 6, :line 1976, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1974, :column 7, :line 1974, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1976, :column 4, :line 1976, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1976, :column 6, :line 1976, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1976, :column 3, :line 1976, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1976, :column 4, :line 1976, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1976, :column 6, :line 1976, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1974, :column 7, :line 1974, :file "cljs/core.cljs"} bit-shift-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1932, :column 3, :line 1932, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 1930, :column 7, :line 1930, :file "cljs/core.cljs"} rand-int ^{:arglists (^{:end-column 6, :end-line 8312, :column 3, :line 8312, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8312, :column 4, :line 8312, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 8310, :column 7, :line 8310, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8312, :column 4, :line 8312, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8312, :column 3, :line 8312, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8312, :column 4, :line 8312, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 8310, :column 7, :line 8310, :file "cljs/core.cljs"} rand-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} aclone ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} aclone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 6167, :column 18, :line 6167, :file "cljs/core.cljs"} BlackNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6270, :column 10, :line 6270, :file "cljs/core.cljs"} BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 57, :end-line 6270, :column 20, :line 6270, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 16, :end-line 2558, :column 13, :line 2558, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2558, :column 14, :line 2558, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2558, :column 7, :line 2558, :file "cljs/core.cljs"} chunk ^{:arglists (^{:end-column 16, :end-line 2558, :column 13, :line 2558, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2558, :column 14, :line 2558, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2558, :column 7, :line 2558, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2558, :column 14, :line 2558, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 2558, :column 13, :line 2558, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2558, :column 14, :line 2558, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2558, :column 7, :line 2558, :file "cljs/core.cljs"} chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1761, :column 3, :line 1761, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1761, :column 4, :line 1761, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1759, :column 7, :line 1759, :file "cljs/core.cljs"} dec ^{:arglists (^{:end-column 6, :end-line 1761, :column 3, :line 1761, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1761, :column 4, :line 1761, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1759, :column 7, :line 1759, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1761, :column 4, :line 1761, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1761, :column 3, :line 1761, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1761, :column 4, :line 1761, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1759, :column 7, :line 1759, :file "cljs/core.cljs"} dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 2053, :column 10, :line 2053, :file "cljs/core.cljs"} map ^{:arglists (^{:end-column 7, :end-line 3508, :column 4, :line 3508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3508, :column 5, :line 3508, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3517, :column 4, :line 3517, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3517, :column 5, :line 3517, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3517, :column 7, :line 3517, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3528, :column 4, :line 3528, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3528, :column 5, :line 3528, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3528, :column 7, :line 3528, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3528, :column 10, :line 3528, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3534, :column 4, :line 3534, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3534, :column 5, :line 3534, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3534, :column 7, :line 3534, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3534, :column 10, :line 3534, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3534, :column 13, :line 3534, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3540, :column 4, :line 3540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3540, :column 5, :line 3540, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3540, :column 7, :line 3540, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3540, :column 10, :line 3540, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3540, :column 13, :line 3540, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3540, :column 16, :line 3540, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3540, :column 18, :line 3540, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 11, :end-line 3501, :column 7, :line 3501, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3508, :column 5, :line 3508, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3517, :column 5, :line 3517, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3517, :column 7, :line 3517, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3528, :column 5, :line 3528, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3528, :column 7, :line 3528, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3528, :column 10, :line 3528, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3534, :column 5, :line 3534, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3534, :column 7, :line 3534, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3534, :column 10, :line 3534, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3534, :column 13, :line 3534, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3540, :column 5, :line 3540, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3540, :column 7, :line 3540, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3540, :column 10, :line 3540, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3540, :column 13, :line 3540, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3540, :column 18, :line 3540, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3508, :column 4, :line 3508, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3508, :column 5, :line 3508, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3517, :column 4, :line 3517, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3517, :column 5, :line 3517, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3517, :column 7, :line 3517, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3528, :column 4, :line 3528, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3528, :column 5, :line 3528, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3528, :column 7, :line 3528, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3528, :column 10, :line 3528, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3534, :column 4, :line 3534, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3534, :column 5, :line 3534, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3534, :column 7, :line 3534, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3534, :column 10, :line 3534, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3534, :column 13, :line 3534, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3540, :column 4, :line 3540, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3540, :column 5, :line 3540, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3540, :column 7, :line 3540, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3540, :column 10, :line 3540, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3540, :column 13, :line 3540, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3540, :column 16, :line 3540, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3540, :column 18, :line 3540, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 11, :end-line 3501, :column 7, :line 3501, :file "cljs/core.cljs"} map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7598, :column 5, :line 7598, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7605, :column 4, :line 7605, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7605, :column 5, :line 7605, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7605, :column 7, :line 7605, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7612, :column 4, :line 7612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7612, :column 5, :line 7612, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7612, :column 9, :line 7612, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7619, :column 9, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7619, :column 13, :line 7619, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7592, :column 7, :line 7592, :file "cljs/core.cljs"} juxt ^{:arglists (^{:end-column 7, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7598, :column 5, :line 7598, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7605, :column 4, :line 7605, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7605, :column 5, :line 7605, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7605, :column 7, :line 7605, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7612, :column 4, :line 7612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7612, :column 5, :line 7612, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7612, :column 9, :line 7612, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7619, :column 9, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7619, :column 13, :line 7619, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7592, :column 7, :line 7592, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7598, :column 5, :line 7598, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 7605, :column 5, :line 7605, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7605, :column 7, :line 7605, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 7612, :column 5, :line 7612, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7612, :column 9, :line 7612, :file "cljs/core.cljs"} h] ^function [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7619, :column 9, :line 7619, :file "cljs/core.cljs"} h & ^{:end-column 16, :end-line 7619, :column 13, :line 7619, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7598, :column 5, :line 7598, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7605, :column 4, :line 7605, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7605, :column 5, :line 7605, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7605, :column 7, :line 7605, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7612, :column 4, :line 7612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7612, :column 5, :line 7612, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7612, :column 7, :line 7612, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7612, :column 9, :line 7612, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7619, :column 7, :line 7619, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7619, :column 9, :line 7619, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7619, :column 11, :line 7619, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7619, :column 13, :line 7619, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7592, :column 7, :line 7592, :file "cljs/core.cljs"} juxt, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1714, :column 5, :line 1714, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1716, :column 7, :line 1716, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1716, :column 9, :line 1716, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1716, :column 11, :line 1716, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1711, :column 8, :line 1711, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1711, :column 16, :line 1711, :file "cljs/core.cljs"} < ^{:arglists (^{:end-column 7, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1714, :column 5, :line 1714, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1716, :column 7, :line 1716, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1716, :column 9, :line 1716, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1716, :column 11, :line 1716, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1711, :column 8, :line 1711, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1711, :column 16, :line 1711, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1714, :column 5, :line 1714, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1716, :column 7, :line 1716, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1716, :column 11, :line 1716, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1714, :column 4, :line 1714, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1714, :column 5, :line 1714, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1716, :column 7, :line 1716, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1716, :column 9, :line 1716, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1716, :column 11, :line 1716, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1711, :column 8, :line 1711, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1711, :column 16, :line 1711, :file "cljs/core.cljs"} <, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5287, :column 24, :line 5287, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5287, :column 25, :line 5287, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5287, :column 29, :line 5287, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5287, :column 31, :line 5287, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5287, :column 8, :line 5287, :file "cljs/core.cljs"} inode-kv-reduce ^{:arglists (^{:end-column 36, :end-line 5287, :column 24, :line 5287, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5287, :column 25, :line 5287, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5287, :column 29, :line 5287, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5287, :column 31, :line 5287, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5287, :column 8, :line 5287, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 5287, :column 25, :line 5287, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5287, :column 29, :line 5287, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5287, :column 31, :line 5287, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5287, :column 24, :line 5287, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5287, :column 25, :line 5287, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5287, :column 29, :line 5287, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5287, :column 31, :line 5287, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5287, :column 8, :line 5287, :file "cljs/core.cljs"} inode-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4695, :column 26, :line 4695, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4695, :column 27, :line 4695, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4695, :column 29, :line 4695, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4695, :column 31, :line 4695, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4695, :column 8, :line 4695, :file "cljs/core.cljs"} obj-map->hash-map ^{:arglists (^{:end-column 33, :end-line 4695, :column 26, :line 4695, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4695, :column 27, :line 4695, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4695, :column 29, :line 4695, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4695, :column 31, :line 4695, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4695, :column 8, :line 4695, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 4695, :column 27, :line 4695, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4695, :column 29, :line 4695, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4695, :column 31, :line 4695, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4695, :column 26, :line 4695, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4695, :column 27, :line 4695, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4695, :column 29, :line 4695, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4695, :column 31, :line 4695, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4695, :column 8, :line 4695, :file "cljs/core.cljs"} obj-map->hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 650, :column 3, :line 650, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 650, :column 4, :line 650, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 647, :column 8, :line 647, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 647, :column 12, :line 647, :file "cljs/core.cljs"} rest ^{:arglists (^{:end-column 9, :end-line 650, :column 3, :line 650, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 650, :column 4, :line 650, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 647, :column 8, :line 647, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 647, :column 12, :line 647, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 650, :column 4, :line 650, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 650, :column 3, :line 650, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 650, :column 4, :line 650, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 647, :column 8, :line 647, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 647, :column 12, :line 647, :file "cljs/core.cljs"} rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8755, :column 3, :line 8755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8755, :column 4, :line 8755, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8751, :column 7, :line 8751, :file "cljs/core.cljs"} ex-data ^{:arglists (^{:end-column 7, :end-line 8755, :column 3, :line 8755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8755, :column 4, :line 8755, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8751, :column 7, :line 8751, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8755, :column 4, :line 8755, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8755, :column 3, :line 8755, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8755, :column 4, :line 8755, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8751, :column 7, :line 8751, :file "cljs/core.cljs"} ex-data, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 4945, :column 10, :line 4945, :file "cljs/core.cljs"} PersistentArrayMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 4945, :column 10, :line 4945, :file "cljs/core.cljs"} PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 4945, :column 32, :line 4945, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 22, :end-line 372, :column 16, :line 372, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 372, :column 17, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} -drop-first ^{:arglists (^{:end-column 22, :end-line 372, :column 16, :line 372, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 372, :column 17, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 372, :column 17, :line 372, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 372, :column 16, :line 372, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 372, :column 17, :line 372, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 372, :column 4, :line 372, :file "cljs/core.cljs"} -drop-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8352, :column 4, :line 8352, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8352, :column 5, :line 8352, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8352, :column 11, :line 8352, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8353, :column 4, :line 8353, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8353, :column 5, :line 8353, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8353, :column 7, :line 8353, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8353, :column 13, :line 8353, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8346, :column 8, :line 8346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8346, :column 16, :line 8346, :file "cljs/core.cljs"} isa? ^{:arglists (^{:end-column 18, :end-line 8352, :column 4, :line 8352, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8352, :column 5, :line 8352, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8352, :column 11, :line 8352, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8353, :column 4, :line 8353, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8353, :column 5, :line 8353, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8353, :column 7, :line 8353, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8353, :column 13, :line 8353, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8346, :column 8, :line 8346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8346, :column 16, :line 8346, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8352, :column 5, :line 8352, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8352, :column 11, :line 8352, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8353, :column 5, :line 8353, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8353, :column 7, :line 8353, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8353, :column 13, :line 8353, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8352, :column 4, :line 8352, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8352, :column 5, :line 8352, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8352, :column 11, :line 8352, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8353, :column 4, :line 8353, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8353, :column 5, :line 8353, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8353, :column 7, :line 8353, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8353, :column 13, :line 8353, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8346, :column 8, :line 8346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8346, :column 16, :line 8346, :file "cljs/core.cljs"} isa?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 231, :column 16, :line 231, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 231, :column 9, :line 231, :file "cljs/core.cljs"} -clone ^{:arglists (^{:end-column 23, :end-line 231, :column 16, :line 231, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 231, :column 9, :line 231, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 231, :column 16, :line 231, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 231, :column 9, :line 231, :file "cljs/core.cljs"} -clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([])} ->NeverEquiv ^{:file "cljs/core.cljs", :arglists ([])} {:arglists (^cljs.core/NeverEquiv []), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([])} ->NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7688, :column 3, :line 7688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7686, :column 7, :line 7686, :file "cljs/core.cljs"} re-seq ^{:arglists (^{:end-column 9, :end-line 7688, :column 3, :line 7688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7686, :column 7, :line 7686, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7688, :column 3, :line 7688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7688, :column 4, :line 7688, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7686, :column 7, :line 7686, :file "cljs/core.cljs"} re-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 8334, :column 3, :line 8334, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8332, :column 7, :line 8332, :file "cljs/core.cljs"} make-hierarchy ^{:arglists (^{:end-column 5, :end-line 8334, :column 3, :line 8334, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8332, :column 7, :line 8332, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 8334, :column 3, :line 8334, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8332, :column 7, :line 8332, :file "cljs/core.cljs"} make-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 475, :column 15, :line 475, :file "cljs/core.cljs"} Symbol {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 558, :column 10, :line 558, :file "cljs/core.cljs"} Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 558, :column 17, :line 558, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 48, :end-line 4381, :column 21, :line 4381, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4381, :column 22, :line 4381, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4381, :column 25, :line 4381, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4381, :column 31, :line 4381, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4381, :column 38, :line 4381, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4381, :column 8, :line 4381, :file "cljs/core.cljs"} tv-push-tail ^{:arglists (^{:end-column 48, :end-line 4381, :column 21, :line 4381, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4381, :column 22, :line 4381, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4381, :column 25, :line 4381, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4381, :column 31, :line 4381, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4381, :column 38, :line 4381, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4381, :column 8, :line 4381, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4381, :column 22, :line 4381, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4381, :column 25, :line 4381, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4381, :column 31, :line 4381, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4381, :column 38, :line 4381, :file "cljs/core.cljs"} tail-node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 48, :end-line 4381, :column 21, :line 4381, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4381, :column 22, :line 4381, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4381, :column 25, :line 4381, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4381, :column 31, :line 4381, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4381, :column 38, :line 4381, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4381, :column 8, :line 4381, :file "cljs/core.cljs"} tv-push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 296, :column 12, :line 296, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 296, :column 13, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 296, :column 18, :line 296, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 296, :column 21, :line 296, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 296, :column 22, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 296, :column 27, :line 296, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 296, :column 29, :line 296, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 296, :column 4, :line 296, :file "cljs/core.cljs"} -reduce ^{:arglists (^{:end-column 20, :end-line 296, :column 12, :line 296, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 296, :column 13, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 296, :column 18, :line 296, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 296, :column 21, :line 296, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 296, :column 22, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 296, :column 27, :line 296, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 296, :column 29, :line 296, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 296, :column 4, :line 296, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 296, :column 13, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 296, :column 18, :line 296, :file "cljs/core.cljs"} f] [^{:end-column 27, :end-line 296, :column 22, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 296, :column 27, :line 296, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 296, :column 29, :line 296, :file "cljs/core.cljs"} start]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 296, :column 12, :line 296, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 296, :column 13, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 296, :column 18, :line 296, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 296, :column 21, :line 296, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 296, :column 22, :line 296, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 296, :column 27, :line 296, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 296, :column 29, :line 296, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 296, :column 4, :line 296, :file "cljs/core.cljs"} -reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 234, :column 20, :line 234, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} number, :end-column 19, :end-line 234, :column 12, :line 234, :file "cljs/core.cljs"} -count ^{:arglists (^{:end-column 25, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 234, :column 20, :line 234, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} number, :end-column 19, :end-line 234, :column 12, :line 234, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 234, :column 20, :line 234, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 234, :column 20, :line 234, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} number, :end-column 19, :end-line 234, :column 12, :line 234, :file "cljs/core.cljs"} -count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3248, :column 4, :line 3248, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3248, :column 5, :line 3248, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} keep ^{:arglists (^{:end-column 7, :end-line 3248, :column 4, :line 3248, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3248, :column 5, :line 3248, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3248, :column 5, :line 3248, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3248, :column 4, :line 3248, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3248, :column 5, :line 3248, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3258, :column 5, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3258, :column 7, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3244, :column 7, :line 3244, :file "cljs/core.cljs"} keep, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1781, :column 3, :line 1781, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1781, :column 4, :line 1781, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1779, :column 7, :line 1779, :file "cljs/core.cljs"} char ^{:arglists (^{:end-column 6, :end-line 1781, :column 3, :line 1781, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1781, :column 4, :line 1781, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1779, :column 7, :line 1779, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1781, :column 4, :line 1781, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1781, :column 3, :line 1781, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1781, :column 4, :line 1781, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1779, :column 7, :line 1779, :file "cljs/core.cljs"} char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3702, :column 4, :line 3702, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3702, :column 5, :line 3702, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3702, :column 7, :line 3702, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3704, :column 4, :line 3704, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3704, :column 5, :line 3704, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3704, :column 7, :line 3704, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3704, :column 12, :line 3704, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3704, :column 14, :line 3704, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3699, :column 7, :line 3699, :file "cljs/core.cljs"} mapcat ^{:arglists (^{:end-column 12, :end-line 3702, :column 4, :line 3702, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3702, :column 5, :line 3702, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3702, :column 7, :line 3702, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3704, :column 4, :line 3704, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3704, :column 5, :line 3704, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3704, :column 7, :line 3704, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3704, :column 12, :line 3704, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3704, :column 14, :line 3704, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3699, :column 7, :line 3699, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3702, :column 5, :line 3702, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3702, :column 7, :line 3702, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3704, :column 5, :line 3704, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3704, :column 7, :line 3704, :file "cljs/core.cljs"} coll & ^{:end-column 20, :end-line 3704, :column 14, :line 3704, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3702, :column 4, :line 3702, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3702, :column 5, :line 3702, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3702, :column 7, :line 3702, :file "cljs/core.cljs"} coll] ^{:end-column 20, :end-line 3704, :column 4, :line 3704, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3704, :column 5, :line 3704, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3704, :column 7, :line 3704, :file "cljs/core.cljs"} coll ^{:end-column 14, :end-line 3704, :column 12, :line 3704, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3704, :column 14, :line 3704, :file "cljs/core.cljs"} colls]), :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.", :end-column 14, :end-line 3699, :column 7, :line 3699, :file "cljs/core.cljs"} mapcat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1891, :column 3, :line 1891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1889, :column 7, :line 1889, :file "cljs/core.cljs"} unchecked-long ^{:arglists (^{:end-column 6, :end-line 1891, :column 3, :line 1891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1889, :column 7, :line 1889, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1891, :column 3, :line 1891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1889, :column 7, :line 1889, :file "cljs/core.cljs"} unchecked-long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 16, :end-line 433, :column 1, :line 433, :file "cljs/core.cljs"} m3-seed ^{:end-column 16, :end-line 433, :column 1, :line 433, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 16, :end-line 433, :column 1, :line 433, :file "cljs/core.cljs"} m3-seed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some? ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1844, :column 24, :line 1844, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1844, :column 25, :line 1844, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} unchecked-negate ^{:arglists (^{:end-column 27, :end-line 1844, :column 24, :line 1844, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1844, :column 25, :line 1844, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1844, :column 25, :line 1844, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1844, :column 24, :line 1844, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1844, :column 25, :line 1844, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} unchecked-negate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2231, :column 3, :line 2231, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2231, :column 4, :line 2231, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2229, :column 7, :line 2229, :file "cljs/core.cljs"} reverse ^{:arglists (^{:end-column 9, :end-line 2231, :column 3, :line 2231, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2231, :column 4, :line 2231, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2229, :column 7, :line 2229, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2231, :column 4, :line 2231, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2231, :column 3, :line 2231, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2231, :column 4, :line 2231, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2229, :column 7, :line 2229, :file "cljs/core.cljs"} reverse, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7500, :column 4, :line 7500, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7501, :column 4, :line 7501, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7501, :column 5, :line 7501, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7502, :column 4, :line 7502, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7502, :column 5, :line 7502, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7502, :column 11, :line 7502, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7503, :column 5, :line 7503, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7503, :column 11, :line 7503, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7503, :column 15, :line 7503, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7496, :column 7, :line 7496, :file "cljs/core.cljs"} range ^{:arglists (^{:end-column 6, :end-line 7500, :column 4, :line 7500, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7501, :column 4, :line 7501, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7501, :column 5, :line 7501, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7502, :column 4, :line 7502, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7502, :column 5, :line 7502, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7502, :column 11, :line 7502, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7503, :column 5, :line 7503, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7503, :column 11, :line 7503, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7503, :column 15, :line 7503, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7496, :column 7, :line 7496, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 9, :end-line 7501, :column 5, :line 7501, :file "cljs/core.cljs"} end] [^{:end-column 11, :end-line 7502, :column 5, :line 7502, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7502, :column 11, :line 7502, :file "cljs/core.cljs"} end] ^cljs.core/Range [^{:end-column 11, :end-line 7503, :column 5, :line 7503, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7503, :column 11, :line 7503, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7503, :column 15, :line 7503, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7500, :column 4, :line 7500, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7501, :column 4, :line 7501, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7501, :column 5, :line 7501, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7502, :column 4, :line 7502, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7502, :column 5, :line 7502, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7502, :column 11, :line 7502, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7503, :column 5, :line 7503, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7503, :column 11, :line 7503, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7503, :column 15, :line 7503, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7496, :column 7, :line 7496, :file "cljs/core.cljs"} range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1992, :column 3, :line 1992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1992, :column 4, :line 1992, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} bit-count ^{:arglists (^{:end-column 6, :end-line 1992, :column 3, :line 1992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1992, :column 4, :line 1992, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1992, :column 4, :line 1992, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1992, :column 3, :line 1992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1992, :column 4, :line 1992, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} bit-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 68, :end-line 5244, :column 56, :line 5244, :file "cljs/core.cljs"} create-node ^{:arglists (^{:end-column 40, :end-line 5721, :column 4, :line 5721, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5721, :column 5, :line 5721, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5721, :column 11, :line 5721, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5721, :column 16, :line 5721, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5721, :column 30, :line 5721, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5721, :column 35, :line 5721, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5729, :column 4, :line 5729, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5729, :column 5, :line 5729, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5729, :column 10, :line 5729, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5729, :column 16, :line 5729, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5729, :column 21, :line 5729, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5729, :column 26, :line 5729, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5729, :column 35, :line 5729, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5729, :column 40, :line 5729, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5720, :column 8, :line 5720, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5721, :column 5, :line 5721, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5721, :column 11, :line 5721, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5721, :column 16, :line 5721, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5721, :column 30, :line 5721, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5721, :column 35, :line 5721, :file "cljs/core.cljs"} val2] [^{:end-column 10, :end-line 5729, :column 5, :line 5729, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5729, :column 10, :line 5729, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5729, :column 16, :line 5729, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5729, :column 21, :line 5729, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5729, :column 26, :line 5729, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5729, :column 35, :line 5729, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5729, :column 40, :line 5729, :file "cljs/core.cljs"} val2]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5721, :column 4, :line 5721, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5721, :column 5, :line 5721, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5721, :column 11, :line 5721, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5721, :column 16, :line 5721, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5721, :column 30, :line 5721, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5721, :column 35, :line 5721, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5729, :column 4, :line 5729, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5729, :column 5, :line 5729, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5729, :column 10, :line 5729, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5729, :column 16, :line 5729, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5729, :column 21, :line 5729, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5729, :column 26, :line 5729, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5729, :column 35, :line 5729, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5729, :column 40, :line 5729, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5720, :column 8, :line 5720, :file "cljs/core.cljs"} create-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1558, :column 4, :line 1558, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1558, :column 5, :line 1558, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1560, :column 4, :line 1560, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1560, :column 5, :line 1560, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1560, :column 10, :line 1560, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1554, :column 7, :line 1554, :file "cljs/core.cljs"} sort ^{:arglists (^{:end-column 10, :end-line 1558, :column 4, :line 1558, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1558, :column 5, :line 1558, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1560, :column 4, :line 1560, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1560, :column 5, :line 1560, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1560, :column 10, :line 1560, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1554, :column 7, :line 1554, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1558, :column 5, :line 1558, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1560, :column 5, :line 1560, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1560, :column 10, :line 1560, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1558, :column 4, :line 1558, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1558, :column 5, :line 1558, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1560, :column 4, :line 1560, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1560, :column 5, :line 1560, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1560, :column 10, :line 1560, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1554, :column 7, :line 1554, :file "cljs/core.cljs"} sort, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta])} ->MetaFn ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/MetaFn [^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta])} ->MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1827, :column 25, :line 1827, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1827, :column 26, :line 1827, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} unchecked-inc-int ^{:arglists (^{:end-column 28, :end-line 1827, :column 25, :line 1827, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1827, :column 26, :line 1827, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1827, :column 26, :line 1827, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1827, :column 25, :line 1827, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1827, :column 26, :line 1827, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} unchecked-inc-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 369, :column 21, :line 369, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 369, :column 22, :line 369, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 369, :column 24, :line 369, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 369, :column 5, :line 369, :file "cljs/core.cljs"} number, :end-column 21, :end-line 369, :column 12, :line 369, :file "cljs/core.cljs"} -compare ^{:arglists (^{:end-column 26, :end-line 369, :column 21, :line 369, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 369, :column 22, :line 369, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 369, :column 24, :line 369, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 369, :column 5, :line 369, :file "cljs/core.cljs"} number, :end-column 21, :end-line 369, :column 12, :line 369, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 369, :column 22, :line 369, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 369, :column 24, :line 369, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 369, :column 21, :line 369, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 369, :column 22, :line 369, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 369, :column 24, :line 369, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 369, :column 5, :line 369, :file "cljs/core.cljs"} number, :end-column 21, :end-line 369, :column 12, :line 369, :file "cljs/core.cljs"} -compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3230, :column 3, :line 3230, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3230, :column 4, :line 3230, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3230, :column 6, :line 3230, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} map-indexed ^{:arglists (^{:end-column 11, :end-line 3230, :column 3, :line 3230, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3230, :column 4, :line 3230, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3230, :column 6, :line 3230, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3230, :column 4, :line 3230, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3230, :column 6, :line 3230, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3230, :column 3, :line 3230, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3230, :column 4, :line 3230, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3230, :column 6, :line 3230, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} map-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 7329, :column 18, :line 7329, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7329, :column 7, :line 7329, :file "cljs/core.cljs"} array-list ^{:arglists (^{:end-column 20, :end-line 7329, :column 18, :line 7329, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7329, :column 7, :line 7329, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList []), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7329, :column 18, :line 7329, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7329, :column 7, :line 7329, :file "cljs/core.cljs"} array-list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8318, :column 3, :line 8318, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8318, :column 4, :line 8318, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} rand-nth ^{:arglists (^{:end-column 9, :end-line 8318, :column 3, :line 8318, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8318, :column 4, :line 8318, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8318, :column 4, :line 8318, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8318, :column 3, :line 8318, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8318, :column 4, :line 8318, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} rand-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3164, :column 4, :line 3164, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3166, :column 4, :line 3166, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3166, :column 5, :line 3166, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3166, :column 7, :line 3166, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3173, :column 9, :line 3173, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3180, :column 8, :line 3180, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3180, :column 11, :line 3180, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3180, :column 14, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3159, :column 7, :line 3159, :file "cljs/core.cljs"} comp ^{:arglists (^{:end-column 6, :end-line 3164, :column 4, :line 3164, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3166, :column 4, :line 3166, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3166, :column 5, :line 3166, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3166, :column 7, :line 3166, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3173, :column 9, :line 3173, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3180, :column 8, :line 3180, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3180, :column 11, :line 3180, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3180, :column 14, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3159, :column 7, :line 3159, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 3166, :column 5, :line 3166, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3166, :column 7, :line 3166, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3173, :column 9, :line 3173, :file "cljs/core.cljs"} h] ^function [^{:end-column 8, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3180, :column 8, :line 3180, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3180, :column 11, :line 3180, :file "cljs/core.cljs"} f3 & ^{:end-column 19, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3164, :column 4, :line 3164, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3166, :column 4, :line 3166, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3166, :column 5, :line 3166, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3166, :column 7, :line 3166, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3173, :column 4, :line 3173, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3173, :column 5, :line 3173, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3173, :column 7, :line 3173, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3173, :column 9, :line 3173, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3180, :column 4, :line 3180, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3180, :column 5, :line 3180, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3180, :column 8, :line 3180, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3180, :column 11, :line 3180, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3180, :column 14, :line 3180, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3180, :column 16, :line 3180, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3159, :column 7, :line 3159, :file "cljs/core.cljs"} comp, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2483, :column 4, :line 2483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2483, :column 5, :line 2483, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2483, :column 9, :line 2483, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2485, :column 4, :line 2485, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2485, :column 5, :line 2485, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2485, :column 9, :line 2485, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2485, :column 13, :line 2485, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2480, :column 7, :line 2480, :file "cljs/core.cljs"} array-chunk ^{:arglists (^{:end-column 9, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2483, :column 4, :line 2483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2483, :column 5, :line 2483, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2483, :column 9, :line 2483, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2485, :column 4, :line 2485, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2485, :column 5, :line 2485, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2485, :column 9, :line 2485, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2485, :column 13, :line 2485, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2480, :column 7, :line 2480, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} arr] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2483, :column 5, :line 2483, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2483, :column 9, :line 2483, :file "cljs/core.cljs"} off] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2485, :column 5, :line 2485, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2485, :column 9, :line 2485, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2485, :column 13, :line 2485, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2481, :column 4, :line 2481, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2481, :column 5, :line 2481, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2483, :column 4, :line 2483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2483, :column 5, :line 2483, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2483, :column 9, :line 2483, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2485, :column 4, :line 2485, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2485, :column 5, :line 2485, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2485, :column 9, :line 2485, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2485, :column 13, :line 2485, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2480, :column 7, :line 2480, :file "cljs/core.cljs"} array-chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1984, :column 3, :line 1984, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1984, :column 4, :line 1984, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1984, :column 6, :line 1984, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1982, :column 7, :line 1982, :file "cljs/core.cljs"} bit-shift-right-zero-fill ^{:arglists (^{:end-column 8, :end-line 1984, :column 3, :line 1984, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1984, :column 4, :line 1984, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1984, :column 6, :line 1984, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1982, :column 7, :line 1982, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1984, :column 4, :line 1984, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1984, :column 6, :line 1984, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1984, :column 3, :line 1984, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1984, :column 4, :line 1984, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1984, :column 6, :line 1984, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 1982, :column 7, :line 1982, :file "cljs/core.cljs"} bit-shift-right-zero-fill, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 24, :line 349, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} -as-transient ^{:arglists (^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 24, :line 349, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 349, :column 24, :line 349, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 349, :column 23, :line 349, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 349, :column 24, :line 349, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 349, :column 9, :line 349, :file "cljs/core.cljs"} -as-transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7634, :column 5, :line 7634, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7628, :column 7, :line 7628, :file "cljs/core.cljs"} dorun ^{:arglists (^{:end-column 10, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7634, :column 5, :line 7634, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7628, :column 7, :line 7628, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 10, :end-line 7634, :column 5, :line 7634, :file "cljs/core.cljs"} coll] ^clj-nil [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7634, :column 4, :line 7634, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7634, :column 5, :line 7634, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7628, :column 7, :line 7628, :file "cljs/core.cljs"} dorun, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 3985, :column 10, :line 3985, :file "cljs/core.cljs"} pr-sequential-writer ^{:arglists (^{:end-column 70, :end-line 7703, :column 28, :line 7703, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7703, :column 29, :line 7703, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7703, :column 36, :line 7703, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7703, :column 46, :line 7703, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7703, :column 52, :line 7703, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7703, :column 56, :line 7703, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7703, :column 60, :line 7703, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7703, :column 65, :line 7703, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 7703, :column 7, :line 7703, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 7703, :column 29, :line 7703, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7703, :column 36, :line 7703, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7703, :column 46, :line 7703, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7703, :column 52, :line 7703, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7703, :column 56, :line 7703, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7703, :column 60, :line 7703, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7703, :column 65, :line 7703, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 70, :end-line 7703, :column 28, :line 7703, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7703, :column 29, :line 7703, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7703, :column 36, :line 7703, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7703, :column 46, :line 7703, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7703, :column 52, :line 7703, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7703, :column 56, :line 7703, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7703, :column 60, :line 7703, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7703, :column 65, :line 7703, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 7703, :column 7, :line 7703, :file "cljs/core.cljs"} pr-sequential-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 37, :end-line 1048, :column 31, :line 1048, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1048, :column 32, :line 1048, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1048, :column 8, :line 1048, :file "cljs/core.cljs"} accumulating-seq-count ^{:arglists (^{:end-column 37, :end-line 1048, :column 31, :line 1048, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1048, :column 32, :line 1048, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1048, :column 8, :line 1048, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 37, :end-line 1048, :column 32, :line 1048, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 37, :end-line 1048, :column 31, :line 1048, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1048, :column 32, :line 1048, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1048, :column 8, :line 1048, :file "cljs/core.cljs"} accumulating-seq-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} IIndexed ^{:impls #{cljs.core/TransientVector cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/Range cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} IIndexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1323, :column 10, :line 1323, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1326, :column 4, :line 1326, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1326, :column 5, :line 1326, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1326, :column 10, :line 1326, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1326, :column 12, :line 1326, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1326, :column 14, :line 1326, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1319, :column 7, :line 1319, :file "cljs/core.cljs"} disj ^{:arglists (^{:end-column 10, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1323, :column 10, :line 1323, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1326, :column 4, :line 1326, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1326, :column 5, :line 1326, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1326, :column 10, :line 1326, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1326, :column 12, :line 1326, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1326, :column 14, :line 1326, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1319, :column 7, :line 1319, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1323, :column 10, :line 1323, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1326, :column 5, :line 1326, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1326, :column 10, :line 1326, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1326, :column 14, :line 1326, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1322, :column 4, :line 1322, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1322, :column 5, :line 1322, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1323, :column 4, :line 1323, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1323, :column 5, :line 1323, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1323, :column 10, :line 1323, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1326, :column 4, :line 1326, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1326, :column 5, :line 1326, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1326, :column 10, :line 1326, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1326, :column 12, :line 1326, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1326, :column 14, :line 1326, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1319, :column 7, :line 1319, :file "cljs/core.cljs"} disj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 332, :column 14, :line 332, :file "cljs/core.cljs"} IPrintWithWriter ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/Iteration cljs.core/LazyTransformer cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 31, :end-line 332, :column 14, :line 332, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 332, :column 14, :line 332, :file "cljs/core.cljs"} IPrintWithWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid])} ->UUID ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid])} {:arglists (^cljs.core/UUID [^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 8716, :column 16, :line 8716, :file "cljs/core.cljs"} uuid])} ->UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 280, :column 14, :line 280, :file "cljs/core.cljs"} IVector ^{:impls #{cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 280, :column 14, :line 280, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 280, :column 14, :line 280, :file "cljs/core.cljs"} IVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2 ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 4852, :column 24, :line 4852, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4852, :column 25, :line 4852, :file "cljs/core.cljs"} coll]), :end-column 24, :end-line 4852, :column 7, :line 4852, :file "cljs/core.cljs"} entries-iterator ^{:arglists (^{:end-column 30, :end-line 4852, :column 24, :line 4852, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4852, :column 25, :line 4852, :file "cljs/core.cljs"} coll]), :end-column 24, :end-line 4852, :column 7, :line 4852, :file "cljs/core.cljs"} {:arglists (^cljs.core/EntriesIterator [^{:end-column 30, :end-line 4852, :column 25, :line 4852, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 4852, :column 24, :line 4852, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4852, :column 25, :line 4852, :file "cljs/core.cljs"} coll]), :end-column 24, :end-line 4852, :column 7, :line 4852, :file "cljs/core.cljs"} entries-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3898, :column 22, :line 3898, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3898, :column 23, :line 3898, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3898, :column 8, :line 3898, :file "cljs/core.cljs"} pv-clone-node ^{:arglists (^{:end-column 28, :end-line 3898, :column 22, :line 3898, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3898, :column 23, :line 3898, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3898, :column 8, :line 3898, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3898, :column 23, :line 3898, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3898, :column 22, :line 3898, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3898, :column 23, :line 3898, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3898, :column 8, :line 3898, :file "cljs/core.cljs"} pv-clone-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 25, :end-line 848, :column 20, :line 848, :file "cljs/core.cljs"} cons ^{:arglists (^{:end-column 11, :end-line 2300, :column 3, :line 2300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2300, :column 4, :line 2300, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2300, :column 6, :line 2300, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2298, :column 7, :line 2298, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 2300, :column 4, :line 2300, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2300, :column 6, :line 2300, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2300, :column 3, :line 2300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2300, :column 4, :line 2300, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2300, :column 6, :line 2300, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2298, :column 7, :line 2298, :file "cljs/core.cljs"} cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7119, :column 10, :line 7119, :file "cljs/core.cljs"} PersistentTreeSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7119, :column 10, :line 7119, :file "cljs/core.cljs"} PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7119, :column 28, :line 7119, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 17, :end-line 1899, :column 14, :line 1899, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1899, :column 15, :line 1899, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} floats ^{:arglists (^{:end-column 17, :end-line 1899, :column 14, :line 1899, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1899, :column 15, :line 1899, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1899, :column 15, :line 1899, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1899, :column 14, :line 1899, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1899, :column 15, :line 1899, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} floats, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 60, :end-line 3984, :column 44, :line 3984, :file "cljs/core.cljs"} TransientVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4423, :column 10, :line 4423, :file "cljs/core.cljs"} TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4426, :column 26, :line 4423, :file "cljs/core.cljs"} [^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail], :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 2012, :column 3, :line 2012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2012, :column 4, :line 2012, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2010, :column 8, :line 2010, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2010, :column 16, :line 2010, :file "cljs/core.cljs"} pos? ^{:arglists (^{:end-column 6, :end-line 2012, :column 3, :line 2012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2012, :column 4, :line 2012, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2010, :column 8, :line 2010, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2010, :column 16, :line 2010, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2012, :column 4, :line 2012, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2012, :column 3, :line 2012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2012, :column 4, :line 2012, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2010, :column 8, :line 2010, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2010, :column 16, :line 2010, :file "cljs/core.cljs"} pos?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3208, :column 7, :line 3208, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3214, :column 4, :line 3214, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3214, :column 5, :line 3214, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3214, :column 9, :line 3214, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3219, :column 4, :line 3219, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3219, :column 5, :line 3219, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3219, :column 7, :line 3219, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3219, :column 9, :line 3219, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3219, :column 11, :line 3219, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3202, :column 7, :line 3202, :file "cljs/core.cljs"} fnil ^{:arglists (^{:end-column 9, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3208, :column 7, :line 3208, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3214, :column 4, :line 3214, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3214, :column 5, :line 3214, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3214, :column 9, :line 3214, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3219, :column 4, :line 3219, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3219, :column 5, :line 3219, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3219, :column 7, :line 3219, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3219, :column 9, :line 3219, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3219, :column 11, :line 3219, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3202, :column 7, :line 3202, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3208, :column 7, :line 3208, :file "cljs/core.cljs"} x] ^function [^{:end-column 7, :end-line 3214, :column 5, :line 3214, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3214, :column 9, :line 3214, :file "cljs/core.cljs"} y] ^function [^{:end-column 7, :end-line 3219, :column 5, :line 3219, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3219, :column 7, :line 3219, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3219, :column 9, :line 3219, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3219, :column 11, :line 3219, :file "cljs/core.cljs"} z]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3208, :column 7, :line 3208, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3214, :column 4, :line 3214, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3214, :column 5, :line 3214, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3214, :column 7, :line 3214, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3214, :column 9, :line 3214, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3219, :column 4, :line 3219, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3219, :column 5, :line 3219, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3219, :column 7, :line 3219, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3219, :column 9, :line 3219, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3219, :column 11, :line 3219, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3202, :column 7, :line 3202, :file "cljs/core.cljs"} fnil, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 6960, :column 3, :line 6960, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6960, :column 4, :line 6960, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6960, :column 6, :line 6960, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6960, :column 8, :line 6960, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6955, :column 7, :line 6955, :file "cljs/core.cljs"} merge-with ^{:arglists (^{:end-column 13, :end-line 6960, :column 3, :line 6960, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6960, :column 4, :line 6960, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6960, :column 6, :line 6960, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6960, :column 8, :line 6960, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6955, :column 7, :line 6955, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 6960, :column 4, :line 6960, :file "cljs/core.cljs"} f & ^{:end-column 13, :end-line 6960, :column 8, :line 6960, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6960, :column 3, :line 6960, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6960, :column 4, :line 6960, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 6960, :column 6, :line 6960, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6960, :column 8, :line 6960, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 6955, :column 7, :line 6955, :file "cljs/core.cljs"} merge-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1359, :column 3, :line 1359, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1359, :column 4, :line 1359, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1357, :column 8, :line 1357, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1357, :column 16, :line 1357, :file "cljs/core.cljs"} sequential? ^{:arglists (^{:end-column 6, :end-line 1359, :column 3, :line 1359, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1359, :column 4, :line 1359, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1357, :column 8, :line 1357, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1357, :column 16, :line 1357, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1359, :column 4, :line 1359, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1359, :column 3, :line 1359, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1359, :column 4, :line 1359, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1357, :column 8, :line 1357, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1357, :column 16, :line 1357, :file "cljs/core.cljs"} sequential?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6611, :column 25, :line 6611, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6611, :column 26, :line 6611, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6611, :column 31, :line 6611, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6611, :column 36, :line 6611, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6611, :column 38, :line 6611, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6611, :column 8, :line 6611, :file "cljs/core.cljs"} tree-map-replace ^{:arglists (^{:end-column 40, :end-line 6611, :column 25, :line 6611, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6611, :column 26, :line 6611, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6611, :column 31, :line 6611, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6611, :column 36, :line 6611, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6611, :column 38, :line 6611, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6611, :column 8, :line 6611, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6611, :column 26, :line 6611, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6611, :column 31, :line 6611, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6611, :column 36, :line 6611, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6611, :column 38, :line 6611, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6611, :column 25, :line 6611, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6611, :column 26, :line 6611, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6611, :column 31, :line 6611, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6611, :column 36, :line 6611, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6611, :column 38, :line 6611, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6611, :column 8, :line 6611, :file "cljs/core.cljs"} tree-map-replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 440, :column 25, :line 440, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 440, :column 26, :line 440, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 440, :column 29, :line 440, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 440, :column 8, :line 440, :file "cljs/core.cljs"} number, :end-column 25, :end-line 440, :column 15, :line 440, :file "cljs/core.cljs"} m3-mix-H1 ^{:arglists (^{:end-column 32, :end-line 440, :column 25, :line 440, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 440, :column 26, :line 440, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 440, :column 29, :line 440, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 440, :column 8, :line 440, :file "cljs/core.cljs"} number, :end-column 25, :end-line 440, :column 15, :line 440, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 29, :end-line 440, :column 26, :line 440, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 440, :column 29, :line 440, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 440, :column 25, :line 440, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 440, :column 26, :line 440, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 440, :column 29, :line 440, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 440, :column 8, :line 440, :file "cljs/core.cljs"} number, :end-column 25, :end-line 440, :column 15, :line 440, :file "cljs/core.cljs"} m3-mix-H1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr])} ->TransientArrayMap ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/TransientArrayMap [^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr])} ->TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 29, :end-line 605, :column 20, :line 605, :file "cljs/core.cljs"} prim-seq ^{:arglists (^{:end-column 10, :end-line 923, :column 4, :line 923, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 923, :column 5, :line 923, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 925, :column 4, :line 925, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 925, :column 5, :line 925, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 925, :column 10, :line 925, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 922, :column 7, :line 922, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 923, :column 5, :line 923, :file "cljs/core.cljs"} prim] [^{:end-column 10, :end-line 925, :column 5, :line 925, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 925, :column 10, :line 925, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 923, :column 4, :line 923, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 923, :column 5, :line 923, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 925, :column 4, :line 925, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 925, :column 5, :line 925, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 925, :column 10, :line 925, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 922, :column 7, :line 922, :file "cljs/core.cljs"} prim-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level* ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1597, :column 3, :line 1597, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1595, :column 7, :line 1595, :file "cljs/core.cljs"} shuffle ^{:arglists (^{:end-column 9, :end-line 1597, :column 3, :line 1597, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1595, :column 7, :line 1595, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1597, :column 3, :line 1597, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1597, :column 4, :line 1597, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1595, :column 7, :line 1595, :file "cljs/core.cljs"} shuffle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 33, :end-line 1380, :column 22, :line 1380, :file "cljs/core.cljs"} ChunkedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4171, :column 10, :line 4171, :file "cljs/core.cljs"} ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 59, :end-line 4171, :column 21, :line 4171, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 23, :end-line 2309, :column 20, :line 2309, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2309, :column 21, :line 2309, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2309, :column 7, :line 2309, :file "cljs/core.cljs"} hash-keyword ^{:arglists (^{:end-column 23, :end-line 2309, :column 20, :line 2309, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2309, :column 21, :line 2309, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2309, :column 7, :line 2309, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 2309, :column 21, :line 2309, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2309, :column 20, :line 2309, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2309, :column 21, :line 2309, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2309, :column 7, :line 2309, :file "cljs/core.cljs"} hash-keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1470, :column 9, :line 1470, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1468, :column 7, :line 1468, :file "cljs/core.cljs"} find ^{:arglists (^{:end-column 11, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1470, :column 9, :line 1470, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1468, :column 7, :line 1468, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1470, :column 9, :line 1470, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1470, :column 9, :line 1470, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1468, :column 7, :line 1468, :file "cljs/core.cljs"} find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} alength ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} alength, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1936, :column 3, :line 1936, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1936, :column 4, :line 1936, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1936, :column 6, :line 1936, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} bit-xor ^{:arglists (^{:end-column 8, :end-line 1936, :column 3, :line 1936, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1936, :column 4, :line 1936, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1936, :column 6, :line 1936, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1936, :column 4, :line 1936, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1936, :column 6, :line 1936, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1936, :column 3, :line 1936, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1936, :column 4, :line 1936, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1936, :column 6, :line 1936, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} bit-xor, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i])} ->IndexedSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i])} {:arglists (^cljs.core/IndexedSeq [^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 858, :column 22, :line 858, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 858, :column 26, :line 858, :file "cljs/core.cljs"} i])} ->IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4719, :column 10, :line 4719, :file "cljs/core.cljs"} ObjMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4719, :column 10, :line 4719, :file "cljs/core.cljs"} ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4719, :column 17, :line 4719, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1988, :column 3, :line 1988, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1988, :column 4, :line 1988, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1988, :column 6, :line 1988, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} unsigned-bit-shift-right ^{:arglists (^{:end-column 8, :end-line 1988, :column 3, :line 1988, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1988, :column 4, :line 1988, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1988, :column 6, :line 1988, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1988, :column 4, :line 1988, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1988, :column 6, :line 1988, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1988, :column 3, :line 1988, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1988, :column 4, :line 1988, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1988, :column 6, :line 1988, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} unsigned-bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2019, :column 3, :line 2019, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2017, :column 8, :line 2017, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2017, :column 16, :line 2017, :file "cljs/core.cljs"} neg? ^{:arglists (^{:end-column 6, :end-line 2019, :column 3, :line 2019, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2017, :column 8, :line 2017, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2017, :column 16, :line 2017, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2019, :column 3, :line 2019, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2017, :column 8, :line 2017, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2017, :column 16, :line 2017, :file "cljs/core.cljs"} neg?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2251, :column 10, :line 2251, :file "cljs/core.cljs"} Cons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2251, :column 10, :line 2251, :file "cljs/core.cljs"} Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 49, :end-line 2251, :column 15, :line 2251, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 36, :end-line 8501, :column 19, :line 8501, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8501, :column 20, :line 8501, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8501, :column 23, :line 8501, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} -remove-method ^{:arglists (^{:end-column 36, :end-line 8501, :column 19, :line 8501, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8501, :column 20, :line 8501, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8501, :column 23, :line 8501, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 8501, :column 20, :line 8501, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8501, :column 23, :line 8501, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 8501, :column 19, :line 8501, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8501, :column 20, :line 8501, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8501, :column 23, :line 8501, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} -remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i])} ->StringIter ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i])} {:arglists (^cljs.core/StringIter [^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i])} ->StringIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash])} ->List ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/List [^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash])} ->List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 437, :column 26, :line 437, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 437, :column 8, :line 437, :file "cljs/core.cljs"} number, :end-column 25, :end-line 437, :column 15, :line 437, :file "cljs/core.cljs"} m3-mix-K1 ^{:arglists (^{:end-column 29, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 437, :column 26, :line 437, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 437, :column 8, :line 437, :file "cljs/core.cljs"} number, :end-column 25, :end-line 437, :column 15, :line 437, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 29, :end-line 437, :column 26, :line 437, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 437, :column 26, :line 437, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 437, :column 8, :line 437, :file "cljs/core.cljs"} number, :end-column 25, :end-line 437, :column 15, :line 437, :file "cljs/core.cljs"} m3-mix-K1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1794, :column 31, :line 1794, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1794, :column 32, :line 1794, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1794, :column 8, :line 1794, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1794, :column 15, :line 1794, :file "cljs/core.cljs"} unchecked-float ^{:arglists (^{:end-column 34, :end-line 1794, :column 31, :line 1794, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1794, :column 32, :line 1794, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1794, :column 8, :line 1794, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1794, :column 15, :line 1794, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1794, :column 32, :line 1794, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1794, :column 31, :line 1794, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1794, :column 32, :line 1794, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1794, :column 8, :line 1794, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1794, :column 15, :line 1794, :file "cljs/core.cljs"} unchecked-float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 1428, :column 27, :line 1428, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1428, :column 28, :line 1428, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1428, :column 16, :line 1428, :file "cljs/core.cljs"} undefined? ^{:arglists (^{:end-column 30, :end-line 1428, :column 27, :line 1428, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1428, :column 28, :line 1428, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1428, :column 16, :line 1428, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 30, :end-line 1428, :column 28, :line 1428, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 1428, :column 27, :line 1428, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1428, :column 28, :line 1428, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1428, :column 16, :line 1428, :file "cljs/core.cljs"} undefined?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 289, :column 14, :line 289, :file "cljs/core.cljs"} IMeta ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/t9657 cljs.core/PersistentHashSet ^{:end-column 23, :end-line 747, :column 14, :line 747, :file "cljs/core.cljs"} function cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 20, :end-line 289, :column 14, :line 289, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 289, :column 14, :line 289, :file "cljs/core.cljs"} IMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 775, :column 3, :line 775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 775, :column 4, :line 775, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 773, :column 8, :line 773, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 773, :column 16, :line 773, :file "cljs/core.cljs"} reduced? ^{:arglists (^{:end-column 6, :end-line 775, :column 3, :line 775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 775, :column 4, :line 775, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 773, :column 8, :line 773, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 773, :column 16, :line 773, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 775, :column 4, :line 775, :file "cljs/core.cljs"} r]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 775, :column 3, :line 775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 775, :column 4, :line 775, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 773, :column 8, :line 773, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 773, :column 16, :line 773, :file "cljs/core.cljs"} reduced?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to ^{:file "cljs/core.cljs", :arglists ([f argc args])} {:arglists ([f argc args]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2785, :column 11, :line 2785, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2787, :column 11, :line 2787, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2787, :column 15, :line 2787, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} disj! ^{:arglists (^{:end-column 15, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2785, :column 11, :line 2785, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2787, :column 11, :line 2787, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2787, :column 15, :line 2787, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2785, :column 11, :line 2785, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2787, :column 11, :line 2787, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2785, :column 4, :line 2785, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2785, :column 5, :line 2785, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2785, :column 11, :line 2785, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2787, :column 4, :line 2787, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2787, :column 5, :line 2787, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2787, :column 11, :line 2787, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2787, :column 15, :line 2787, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2787, :column 17, :line 2787, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} disj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 258, :column 12, :line 258, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 258, :column 13, :line 258, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 258, :column 21, :line 258, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 258, :column 23, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -lookup ^{:arglists (^{:end-column 17, :end-line 258, :column 12, :line 258, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 258, :column 13, :line 258, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 258, :column 21, :line 258, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 258, :column 23, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 258, :column 13, :line 258, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} k] [^{:end-column 21, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 258, :column 21, :line 258, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 258, :column 23, :line 258, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 258, :column 12, :line 258, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 258, :column 13, :line 258, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 258, :column 21, :line 258, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 258, :column 23, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -lookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 230, :column 14, :line 230, :file "cljs/core.cljs"} ICloneable ^{:impls #{cljs.core/PersistentHashMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Range}, :protocol-symbol true, :end-column 25, :end-line 230, :column 14, :line 230, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 230, :column 14, :line 230, :file "cljs/core.cljs"} ICloneable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 8238, :column 14, :line 8238, :file "cljs/core.cljs"} IEncodeClojure ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 8238, :column 14, :line 8238, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 29, :end-line 8238, :column 14, :line 8238, :file "cljs/core.cljs"} IEncodeClojure, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1894, :column 17, :line 1894, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} booleans ^{:arglists (^{:end-column 19, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1894, :column 17, :line 1894, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 1894, :column 17, :line 1894, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1894, :column 17, :line 1894, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} booleans, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 4889, :column 35, :line 4889, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4889, :column 36, :line 4889, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4889, :column 40, :line 4889, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4889, :column 42, :line 4889, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4889, :column 8, :line 4889, :file "cljs/core.cljs"} array-map-index-of-symbol? ^{:arglists (^{:end-column 44, :end-line 4889, :column 35, :line 4889, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4889, :column 36, :line 4889, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4889, :column 40, :line 4889, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4889, :column 42, :line 4889, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4889, :column 8, :line 4889, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 4889, :column 36, :line 4889, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4889, :column 40, :line 4889, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4889, :column 42, :line 4889, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 4889, :column 35, :line 4889, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4889, :column 36, :line 4889, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4889, :column 40, :line 4889, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4889, :column 42, :line 4889, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4889, :column 8, :line 4889, :file "cljs/core.cljs"} array-map-index-of-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr])} ->ArrayList ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/ArrayList [^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr])} ->ArrayList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 848, :column 25, :line 848, :file "cljs/core.cljs"} RSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 937, :column 10, :line 937, :file "cljs/core.cljs"} RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 937, :column 15, :line 937, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 5252, :column 13, :line 5252, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5252, :column 14, :line 5252, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5252, :column 19, :line 5252, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5252, :column 8, :line 5252, :file "cljs/core.cljs"} mask ^{:arglists (^{:end-column 25, :end-line 5252, :column 13, :line 5252, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5252, :column 14, :line 5252, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5252, :column 19, :line 5252, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5252, :column 8, :line 5252, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 19, :end-line 5252, :column 14, :line 5252, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5252, :column 19, :line 5252, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 5252, :column 13, :line 5252, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5252, :column 14, :line 5252, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5252, :column 19, :line 5252, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5252, :column 8, :line 5252, :file "cljs/core.cljs"} mask, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2596, :column 4, :line 2596, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2596, :column 5, :line 2596, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2600, :column 4, :line 2600, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2600, :column 5, :line 2600, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2600, :column 10, :line 2600, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} int-array ^{:arglists (^{:end-column 17, :end-line 2596, :column 4, :line 2596, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2596, :column 5, :line 2596, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2600, :column 4, :line 2600, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2600, :column 5, :line 2600, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2600, :column 10, :line 2600, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2596, :column 5, :line 2596, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2600, :column 5, :line 2600, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2600, :column 10, :line 2600, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2596, :column 4, :line 2596, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2596, :column 5, :line 2596, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2600, :column 4, :line 2600, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2600, :column 5, :line 2600, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2600, :column 10, :line 2600, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} int-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 88, :end-line 8474, :column 3, :line 8474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8474, :column 9, :line 8474, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8474, :column 22, :line 8474, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8474, :column 32, :line 8474, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8474, :column 45, :line 8474, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8474, :column 58, :line 8474, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8474, :column 71, :line 8474, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8473, :column 8, :line 8473, :file "cljs/core.cljs"} find-and-cache-best-method ^{:arglists (^{:end-column 88, :end-line 8474, :column 3, :line 8474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8474, :column 9, :line 8474, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8474, :column 22, :line 8474, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8474, :column 32, :line 8474, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8474, :column 45, :line 8474, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8474, :column 58, :line 8474, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8474, :column 71, :line 8474, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8473, :column 8, :line 8473, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8474, :column 9, :line 8474, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8474, :column 22, :line 8474, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8474, :column 32, :line 8474, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8474, :column 45, :line 8474, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8474, :column 58, :line 8474, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8474, :column 71, :line 8474, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 88, :end-line 8474, :column 3, :line 8474, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8474, :column 9, :line 8474, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8474, :column 22, :line 8474, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8474, :column 32, :line 8474, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8474, :column 45, :line 8474, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8474, :column 58, :line 8474, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8474, :column 71, :line 8474, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8473, :column 8, :line 8473, :file "cljs/core.cljs"} find-and-cache-best-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1348, :column 3, :line 1348, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1348, :column 4, :line 1348, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1346, :column 8, :line 1346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1346, :column 16, :line 1346, :file "cljs/core.cljs"} set? ^{:arglists (^{:end-column 6, :end-line 1348, :column 3, :line 1348, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1348, :column 4, :line 1348, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1346, :column 8, :line 1346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1346, :column 16, :line 1346, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1348, :column 4, :line 1348, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1348, :column 3, :line 1348, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1348, :column 4, :line 1348, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1346, :column 8, :line 1346, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1346, :column 16, :line 1346, :file "cljs/core.cljs"} set?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}} t9657 {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}} t9657, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields [meta9658], :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}}, ^{:declared true, :end-column 17, :end-line 1702, :column 10, :line 1702, :file "cljs/core.cljs"} divide ^{:declared true, :end-column 17, :end-line 1702, :column 10, :line 1702, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 17, :end-line 1702, :column 10, :line 1702, :file "cljs/core.cljs"} divide, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 338, :column 15, :line 338, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 338, :column 18, :line 338, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 338, :column 25, :line 338, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -pr-writer ^{:arglists (^{:end-column 30, :end-line 338, :column 15, :line 338, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 338, :column 18, :line 338, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 338, :column 25, :line 338, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 338, :column 18, :line 338, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 338, :column 25, :line 338, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 338, :column 15, :line 338, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 338, :column 18, :line 338, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 338, :column 25, :line 338, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7730, :column 13, :line 7730, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7730, :column 7, :line 7730, :file "cljs/core.cljs"} flush ^{:arglists (^{:end-column 15, :end-line 7730, :column 13, :line 7730, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7730, :column 7, :line 7730, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7730, :column 13, :line 7730, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7730, :column 7, :line 7730, :file "cljs/core.cljs"} flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 7210, :column 28, :line 7210, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7210, :column 29, :line 7210, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7210, :column 7, :line 7210, :file "cljs/core.cljs"} set-from-indexed-seq ^{:arglists (^{:end-column 34, :end-line 7210, :column 28, :line 7210, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7210, :column 29, :line 7210, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7210, :column 7, :line 7210, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 34, :end-line 7210, :column 29, :line 7210, :file "cljs/core.cljs"} iseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 7210, :column 28, :line 7210, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7210, :column 29, :line 7210, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7210, :column 7, :line 7210, :file "cljs/core.cljs"} set-from-indexed-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7368, :column 4, :line 7368, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7368, :column 5, :line 7368, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7377, :column 5, :line 7377, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7377, :column 10, :line 7377, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7364, :column 7, :line 7364, :file "cljs/core.cljs"} take-while ^{:arglists (^{:end-column 10, :end-line 7368, :column 4, :line 7368, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7368, :column 5, :line 7368, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7377, :column 5, :line 7377, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7377, :column 10, :line 7377, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7364, :column 7, :line 7364, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 7368, :column 5, :line 7368, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 7377, :column 5, :line 7377, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7377, :column 10, :line 7377, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7368, :column 4, :line 7368, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7368, :column 5, :line 7368, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7377, :column 4, :line 7377, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7377, :column 5, :line 7377, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7377, :column 10, :line 7377, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7364, :column 7, :line 7364, :file "cljs/core.cljs"} take-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2852, :column 4, :line 2852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2852, :column 5, :line 2852, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2852, :column 9, :line 2852, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2854, :column 4, :line 2854, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2854, :column 5, :line 2854, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2854, :column 9, :line 2854, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2854, :column 11, :line 2854, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2856, :column 4, :line 2856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2856, :column 5, :line 2856, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2856, :column 9, :line 2856, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2856, :column 11, :line 2856, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2856, :column 13, :line 2856, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2858, :column 4, :line 2858, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2858, :column 5, :line 2858, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2858, :column 9, :line 2858, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2858, :column 11, :line 2858, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2858, :column 13, :line 2858, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2858, :column 15, :line 2858, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2860, :column 4, :line 2860, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2860, :column 5, :line 2860, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2860, :column 9, :line 2860, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2860, :column 11, :line 2860, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2860, :column 13, :line 2860, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2860, :column 15, :line 2860, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2860, :column 17, :line 2860, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2862, :column 4, :line 2862, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2862, :column 5, :line 2862, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2862, :column 9, :line 2862, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2862, :column 11, :line 2862, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2862, :column 13, :line 2862, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2862, :column 15, :line 2862, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2862, :column 17, :line 2862, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2862, :column 19, :line 2862, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2862, :column 21, :line 2862, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2849, :column 7, :line 2849, :file "cljs/core.cljs"} vary-meta ^{:arglists (^{:end-column 11, :end-line 2852, :column 4, :line 2852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2852, :column 5, :line 2852, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2852, :column 9, :line 2852, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2854, :column 4, :line 2854, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2854, :column 5, :line 2854, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2854, :column 9, :line 2854, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2854, :column 11, :line 2854, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2856, :column 4, :line 2856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2856, :column 5, :line 2856, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2856, :column 9, :line 2856, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2856, :column 11, :line 2856, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2856, :column 13, :line 2856, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2858, :column 4, :line 2858, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2858, :column 5, :line 2858, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2858, :column 9, :line 2858, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2858, :column 11, :line 2858, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2858, :column 13, :line 2858, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2858, :column 15, :line 2858, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2860, :column 4, :line 2860, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2860, :column 5, :line 2860, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2860, :column 9, :line 2860, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2860, :column 11, :line 2860, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2860, :column 13, :line 2860, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2860, :column 15, :line 2860, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2860, :column 17, :line 2860, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2862, :column 4, :line 2862, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2862, :column 5, :line 2862, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2862, :column 9, :line 2862, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2862, :column 11, :line 2862, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2862, :column 13, :line 2862, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2862, :column 15, :line 2862, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2862, :column 17, :line 2862, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2862, :column 19, :line 2862, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2862, :column 21, :line 2862, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2849, :column 7, :line 2849, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2852, :column 5, :line 2852, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2852, :column 9, :line 2852, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 2854, :column 5, :line 2854, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2854, :column 9, :line 2854, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2854, :column 11, :line 2854, :file "cljs/core.cljs"} a] [^{:end-column 9, :end-line 2856, :column 5, :line 2856, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2856, :column 9, :line 2856, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2856, :column 11, :line 2856, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2856, :column 13, :line 2856, :file "cljs/core.cljs"} b] [^{:end-column 9, :end-line 2858, :column 5, :line 2858, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2858, :column 9, :line 2858, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2858, :column 11, :line 2858, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2858, :column 13, :line 2858, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2858, :column 15, :line 2858, :file "cljs/core.cljs"} c] [^{:end-column 9, :end-line 2860, :column 5, :line 2860, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2860, :column 9, :line 2860, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2860, :column 11, :line 2860, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2860, :column 13, :line 2860, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2860, :column 15, :line 2860, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2860, :column 17, :line 2860, :file "cljs/core.cljs"} d] [^{:end-column 9, :end-line 2862, :column 5, :line 2862, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2862, :column 9, :line 2862, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2862, :column 11, :line 2862, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2862, :column 13, :line 2862, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2862, :column 15, :line 2862, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2862, :column 17, :line 2862, :file "cljs/core.cljs"} d & ^{:end-column 26, :end-line 2862, :column 21, :line 2862, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2852, :column 4, :line 2852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2852, :column 5, :line 2852, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2852, :column 9, :line 2852, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2854, :column 4, :line 2854, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2854, :column 5, :line 2854, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2854, :column 9, :line 2854, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2854, :column 11, :line 2854, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2856, :column 4, :line 2856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2856, :column 5, :line 2856, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2856, :column 9, :line 2856, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2856, :column 11, :line 2856, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2856, :column 13, :line 2856, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2858, :column 4, :line 2858, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2858, :column 5, :line 2858, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2858, :column 9, :line 2858, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2858, :column 11, :line 2858, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2858, :column 13, :line 2858, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2858, :column 15, :line 2858, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2860, :column 4, :line 2860, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2860, :column 5, :line 2860, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2860, :column 9, :line 2860, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2860, :column 11, :line 2860, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2860, :column 13, :line 2860, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2860, :column 15, :line 2860, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2860, :column 17, :line 2860, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2862, :column 4, :line 2862, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2862, :column 5, :line 2862, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2862, :column 9, :line 2862, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2862, :column 11, :line 2862, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2862, :column 13, :line 2862, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2862, :column 15, :line 2862, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2862, :column 17, :line 2862, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2862, :column 19, :line 2862, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2862, :column 21, :line 2862, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2849, :column 7, :line 2849, :file "cljs/core.cljs"} vary-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 254, :column 14, :line 254, :file "cljs/core.cljs"} INext ^{:impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range}, :protocol-symbol true, :end-column 20, :end-line 254, :column 14, :line 254, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 254, :column 14, :line 254, :file "cljs/core.cljs"} INext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_ ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 19, :end-line 2908, :column 1, :line 2908, :file "cljs/core.cljs"} START ^{:end-column 19, :end-line 2908, :column 1, :line 2908, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 19, :end-line 2908, :column 1, :line 2908, :file "cljs/core.cljs"} START, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 233, :column 14, :line 233, :file "cljs/core.cljs"} ICounted ^{:impls #{nil cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/TransientHashMap cljs.core/ChunkBuffer cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/TransientArrayMap cljs.core/RSeq cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/ArrayChunk cljs.core/PersistentTreeSet cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 233, :column 14, :line 233, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 233, :column 14, :line 233, :file "cljs/core.cljs"} ICounted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} IMapEntry ^{:impls #{cljs.core/BlackNode cljs.core/PersistentVector cljs.core/RedNode}, :protocol-symbol true, :end-column 24, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} IMapEntry, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1726, :column 4, :line 1726, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1726, :column 5, :line 1726, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1727, :column 4, :line 1727, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1727, :column 5, :line 1727, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1727, :column 7, :line 1727, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1728, :column 5, :line 1728, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1728, :column 7, :line 1728, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1728, :column 9, :line 1728, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1728, :column 11, :line 1728, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1723, :column 8, :line 1723, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} <= ^{:arglists (^{:end-column 7, :end-line 1726, :column 4, :line 1726, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1726, :column 5, :line 1726, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1727, :column 4, :line 1727, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1727, :column 5, :line 1727, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1727, :column 7, :line 1727, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1728, :column 5, :line 1728, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1728, :column 7, :line 1728, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1728, :column 9, :line 1728, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1728, :column 11, :line 1728, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1723, :column 8, :line 1723, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1726, :column 5, :line 1726, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1727, :column 5, :line 1727, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1727, :column 7, :line 1727, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1728, :column 5, :line 1728, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1728, :column 7, :line 1728, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1728, :column 11, :line 1728, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1726, :column 4, :line 1726, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1726, :column 5, :line 1726, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1727, :column 4, :line 1727, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1727, :column 5, :line 1727, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1727, :column 7, :line 1727, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1728, :column 4, :line 1728, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1728, :column 5, :line 1728, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1728, :column 7, :line 1728, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1728, :column 9, :line 1728, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1728, :column 11, :line 1728, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1723, :column 8, :line 1723, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1723, :column 16, :line 1723, :file "cljs/core.cljs"} <=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2744, :column 4, :line 2744, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2746, :column 4, :line 2746, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2746, :column 5, :line 2746, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2746, :column 11, :line 2746, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2748, :column 11, :line 2748, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2748, :column 15, :line 2748, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2748, :column 17, :line 2748, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2741, :column 7, :line 2741, :file "cljs/core.cljs"} conj! ^{:arglists (^{:end-column 6, :end-line 2744, :column 4, :line 2744, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2746, :column 4, :line 2746, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2746, :column 5, :line 2746, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2746, :column 11, :line 2746, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2748, :column 11, :line 2748, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2748, :column 15, :line 2748, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2748, :column 17, :line 2748, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2741, :column 7, :line 2741, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [] [^{:end-column 10, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} coll] ^^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2746, :column 5, :line 2746, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2746, :column 11, :line 2746, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2748, :column 11, :line 2748, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2748, :column 17, :line 2748, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2744, :column 4, :line 2744, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2746, :column 4, :line 2746, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2746, :column 5, :line 2746, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2746, :column 11, :line 2746, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2748, :column 11, :line 2748, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2748, :column 15, :line 2748, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2748, :column 17, :line 2748, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2741, :column 7, :line 2741, :file "cljs/core.cljs"} conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 278, :column 14, :line 278, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 278, :column 15, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 278, :column 5, :line 278, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 278, :column 9, :line 278, :file "cljs/core.cljs"} -pop ^{:arglists (^{:end-column 20, :end-line 278, :column 14, :line 278, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 278, :column 15, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 278, :column 5, :line 278, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 278, :column 9, :line 278, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 278, :column 15, :line 278, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 278, :column 14, :line 278, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 278, :column 15, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 278, :column 5, :line 278, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 278, :column 9, :line 278, :file "cljs/core.cljs"} -pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3660, :column 4, :line 3660, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3660, :column 5, :line 3660, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3660, :column 7, :line 3660, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} repeatedly ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3660, :column 4, :line 3660, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3660, :column 5, :line 3660, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3660, :column 7, :line 3660, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3660, :column 5, :line 3660, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3660, :column 7, :line 3660, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3660, :column 4, :line 3660, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3660, :column 5, :line 3660, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3660, :column 7, :line 3660, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} repeatedly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7297, :column 3, :line 7297, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7297, :column 4, :line 7297, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7297, :column 9, :line 7297, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7295, :column 7, :line 7295, :file "cljs/core.cljs"} zipmap ^{:arglists (^{:end-column 14, :end-line 7297, :column 3, :line 7297, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7297, :column 4, :line 7297, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7297, :column 9, :line 7297, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7295, :column 7, :line 7295, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 7297, :column 4, :line 7297, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7297, :column 9, :line 7297, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7297, :column 3, :line 7297, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7297, :column 4, :line 7297, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7297, :column 9, :line 7297, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7295, :column 7, :line 7295, :file "cljs/core.cljs"} zipmap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} IStack ^{:impls #{cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/Subvec cljs.core/PersistentVector cljs.core/List cljs.core/RedNode}, :protocol-symbol true, :end-column 21, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 276, :column 14, :line 276, :file "cljs/core.cljs"} IStack, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 346, :column 18, :line 346, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 346, :column 19, :line 346, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 346, :column 24, :line 346, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -remove-watch ^{:arglists (^{:end-column 28, :end-line 346, :column 18, :line 346, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 346, :column 19, :line 346, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 346, :column 24, :line 346, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 346, :column 19, :line 346, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 346, :column 24, :line 346, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 346, :column 18, :line 346, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 346, :column 19, :line 346, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 346, :column 24, :line 346, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3740, :column 4, :line 3740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3740, :column 5, :line 3740, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3741, :column 4, :line 3741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3741, :column 5, :line 3741, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3741, :column 10, :line 3741, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} remove ^{:arglists (^{:end-column 10, :end-line 3740, :column 4, :line 3740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3740, :column 5, :line 3740, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3741, :column 4, :line 3741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3741, :column 5, :line 3741, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3741, :column 10, :line 3741, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3740, :column 5, :line 3740, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3741, :column 5, :line 3741, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3741, :column 10, :line 3741, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3740, :column 4, :line 3740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3740, :column 5, :line 3740, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3741, :column 4, :line 3741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3741, :column 5, :line 3741, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3741, :column 10, :line 3741, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr])} ->BitmapIndexedNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/BitmapIndexedNode [^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr])} ->BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1698, :column 4, :line 1698, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1698, :column 5, :line 1698, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1700, :column 4, :line 1700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1700, :column 5, :line 1700, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1700, :column 7, :line 1700, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1700, :column 9, :line 1700, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1700, :column 11, :line 1700, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1695, :column 8, :line 1695, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1695, :column 15, :line 1695, :file "cljs/core.cljs"} * ^{:arglists (^{:end-column 6, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1698, :column 4, :line 1698, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1698, :column 5, :line 1698, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1700, :column 4, :line 1700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1700, :column 5, :line 1700, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1700, :column 7, :line 1700, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1700, :column 9, :line 1700, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1700, :column 11, :line 1700, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1695, :column 8, :line 1695, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1695, :column 15, :line 1695, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1698, :column 5, :line 1698, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1700, :column 5, :line 1700, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1700, :column 7, :line 1700, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1700, :column 11, :line 1700, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1698, :column 4, :line 1698, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1698, :column 5, :line 1698, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1700, :column 4, :line 1700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1700, :column 5, :line 1700, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1700, :column 7, :line 1700, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1700, :column 9, :line 1700, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1700, :column 11, :line 1700, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1695, :column 8, :line 1695, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1695, :column 15, :line 1695, :file "cljs/core.cljs"} *, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7697, :column 3, :line 7697, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7697, :column 4, :line 7697, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7695, :column 7, :line 7695, :file "cljs/core.cljs"} re-pattern ^{:arglists (^{:end-column 6, :end-line 7697, :column 3, :line 7697, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7697, :column 4, :line 7697, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7695, :column 7, :line 7695, :file "cljs/core.cljs"} {:arglists (^js/RegExp [^{:end-column 6, :end-line 7697, :column 4, :line 7697, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7697, :column 3, :line 7697, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7697, :column 4, :line 7697, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7695, :column 7, :line 7695, :file "cljs/core.cljs"} re-pattern, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1772, :column 4, :line 1772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1772, :column 5, :line 1772, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1773, :column 4, :line 1773, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1773, :column 5, :line 1773, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1774, :column 5, :line 1774, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1774, :column 7, :line 1774, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1774, :column 9, :line 1774, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1774, :column 11, :line 1774, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1770, :column 8, :line 1770, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1770, :column 15, :line 1770, :file "cljs/core.cljs"} min ^{:arglists (^{:end-column 7, :end-line 1772, :column 4, :line 1772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1772, :column 5, :line 1772, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1773, :column 4, :line 1773, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1773, :column 5, :line 1773, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1774, :column 5, :line 1774, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1774, :column 7, :line 1774, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1774, :column 9, :line 1774, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1774, :column 11, :line 1774, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1770, :column 8, :line 1770, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1770, :column 15, :line 1770, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1772, :column 5, :line 1772, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1773, :column 5, :line 1773, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1774, :column 5, :line 1774, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1774, :column 7, :line 1774, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1774, :column 11, :line 1774, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1772, :column 4, :line 1772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1772, :column 5, :line 1772, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1773, :column 4, :line 1773, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1773, :column 5, :line 1773, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1773, :column 7, :line 1773, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1774, :column 5, :line 1774, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1774, :column 7, :line 1774, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1774, :column 9, :line 1774, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1774, :column 11, :line 1774, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1770, :column 8, :line 1770, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1770, :column 15, :line 1770, :file "cljs/core.cljs"} min, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 4870, :column 32, :line 4870, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4870, :column 33, :line 4870, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4870, :column 37, :line 4870, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4870, :column 39, :line 4870, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4870, :column 8, :line 4870, :file "cljs/core.cljs"} array-map-index-of-nil? ^{:arglists (^{:end-column 41, :end-line 4870, :column 32, :line 4870, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4870, :column 33, :line 4870, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4870, :column 37, :line 4870, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4870, :column 39, :line 4870, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4870, :column 8, :line 4870, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4870, :column 33, :line 4870, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4870, :column 37, :line 4870, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4870, :column 39, :line 4870, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 4870, :column 32, :line 4870, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4870, :column 33, :line 4870, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4870, :column 37, :line 4870, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4870, :column 39, :line 4870, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4870, :column 8, :line 4870, :file "cljs/core.cljs"} array-map-index-of-nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 353, :column 22, :line 353, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -persistent! ^{:arglists (^{:end-column 29, :end-line 353, :column 22, :line 353, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 353, :column 22, :line 353, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 246, :column 9, :line 246, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 246, :column 10, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 246, :column 15, :line 246, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 246, :column 18, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 246, :column 24, :line 246, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 246, :column 26, :line 246, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 246, :column 4, :line 246, :file "cljs/core.cljs"} -nth ^{:arglists (^{:end-column 17, :end-line 246, :column 9, :line 246, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 246, :column 10, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 246, :column 15, :line 246, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 246, :column 18, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 246, :column 24, :line 246, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 246, :column 26, :line 246, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 246, :column 4, :line 246, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 246, :column 10, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 246, :column 15, :line 246, :file "cljs/core.cljs"} n] [^{:end-column 24, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 246, :column 24, :line 246, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 246, :column 26, :line 246, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 246, :column 9, :line 246, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 246, :column 10, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 246, :column 15, :line 246, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 246, :column 18, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 246, :column 24, :line 246, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 246, :column 26, :line 246, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 246, :column 4, :line 246, :file "cljs/core.cljs"} -nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2779, :column 3, :line 2779, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2779, :column 4, :line 2779, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2776, :column 7, :line 2776, :file "cljs/core.cljs"} pop! ^{:arglists (^{:end-column 10, :end-line 2779, :column 3, :line 2779, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2779, :column 4, :line 2779, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2776, :column 7, :line 2776, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2779, :column 4, :line 2779, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2779, :column 3, :line 2779, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2779, :column 4, :line 2779, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2776, :column 7, :line 2776, :file "cljs/core.cljs"} pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2555, :column 20, :line 2555, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2555, :column 21, :line 2555, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2555, :column 23, :line 2555, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} chunk-append ^{:arglists (^{:end-column 25, :end-line 2555, :column 20, :line 2555, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2555, :column 21, :line 2555, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2555, :column 23, :line 2555, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 2555, :column 21, :line 2555, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2555, :column 23, :line 2555, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2555, :column 20, :line 2555, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2555, :column 21, :line 2555, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2555, :column 23, :line 2555, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2555, :column 7, :line 2555, :file "cljs/core.cljs"} chunk-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7871, :column 3, :line 7871, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7871, :column 4, :line 7871, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7871, :column 6, :line 7871, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7869, :column 7, :line 7869, :file "cljs/core.cljs"} prn-str ^{:arglists (^{:end-column 11, :end-line 7871, :column 3, :line 7871, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7871, :column 4, :line 7871, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7871, :column 6, :line 7871, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7869, :column 7, :line 7869, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7871, :column 6, :line 7871, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7871, :column 3, :line 7871, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7871, :column 4, :line 7871, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7871, :column 6, :line 7871, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7869, :column 7, :line 7869, :file "cljs/core.cljs"} prn-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} IReversible ^{:impls #{cljs.core/IndexedSeq cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 26, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} IReversible, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 2223, :column 28, :line 2223, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2223, :column 29, :line 2223, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2223, :column 8, :line 2223, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2223, :column 16, :line 2223, :file "cljs/core.cljs"} reversible? ^{:arglists (^{:end-column 34, :end-line 2223, :column 28, :line 2223, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2223, :column 29, :line 2223, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2223, :column 8, :line 2223, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2223, :column 16, :line 2223, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 34, :end-line 2223, :column 29, :line 2223, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 2223, :column 28, :line 2223, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2223, :column 29, :line 2223, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2223, :column 8, :line 2223, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2223, :column 16, :line 2223, :file "cljs/core.cljs"} reversible?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 341, :column 24, :line 341, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 341, :column 5, :line 341, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 341, :column 13, :line 341, :file "cljs/core.cljs"} -realized? ^{:arglists (^{:end-column 27, :end-line 341, :column 24, :line 341, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 341, :column 5, :line 341, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 341, :column 13, :line 341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 341, :column 24, :line 341, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 341, :column 25, :line 341, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 341, :column 5, :line 341, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 341, :column 13, :line 341, :file "cljs/core.cljs"} -realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 345, :column 15, :line 345, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 345, :column 16, :line 345, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 345, :column 25, :line 345, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -add-watch ^{:arglists (^{:end-column 27, :end-line 345, :column 15, :line 345, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 345, :column 16, :line 345, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 345, :column 25, :line 345, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 345, :column 16, :line 345, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 345, :column 25, :line 345, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 345, :column 15, :line 345, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 345, :column 16, :line 345, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 345, :column 25, :line 345, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 287, :column 24, :line 287, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 287, :column 25, :line 287, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 287, :column 27, :line 287, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 287, :column 32, :line 287, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 287, :column 4, :line 287, :file "cljs/core.cljs"} -deref-with-timeout ^{:arglists (^{:end-column 44, :end-line 287, :column 24, :line 287, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 287, :column 25, :line 287, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 287, :column 27, :line 287, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 287, :column 32, :line 287, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 287, :column 4, :line 287, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 287, :column 25, :line 287, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 287, :column 27, :line 287, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 287, :column 32, :line 287, :file "cljs/core.cljs"} timeout-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 287, :column 24, :line 287, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 287, :column 25, :line 287, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 287, :column 27, :line 287, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 287, :column 32, :line 287, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 287, :column 4, :line 287, :file "cljs/core.cljs"} -deref-with-timeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1032, :column 5, :line 1032, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1033, :column 4, :line 1033, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1033, :column 5, :line 1033, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1033, :column 10, :line 1033, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1037, :column 5, :line 1037, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1037, :column 10, :line 1037, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1037, :column 12, :line 1037, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1037, :column 14, :line 1037, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1027, :column 7, :line 1027, :file "cljs/core.cljs"} conj ^{:arglists (^{:end-column 6, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1032, :column 5, :line 1032, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1033, :column 4, :line 1033, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1033, :column 5, :line 1033, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1033, :column 10, :line 1033, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1037, :column 5, :line 1037, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1037, :column 10, :line 1037, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1037, :column 12, :line 1037, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1037, :column 14, :line 1037, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1027, :column 7, :line 1027, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [] [^{:end-column 10, :end-line 1032, :column 5, :line 1032, :file "cljs/core.cljs"} coll] ^^{:end-column 9, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 1033, :column 5, :line 1033, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1033, :column 10, :line 1033, :file "cljs/core.cljs"} x] [^{:end-column 10, :end-line 1037, :column 5, :line 1037, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1037, :column 10, :line 1037, :file "cljs/core.cljs"} x & ^{:end-column 17, :end-line 1037, :column 14, :line 1037, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1031, :column 4, :line 1031, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1032, :column 5, :line 1032, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1033, :column 4, :line 1033, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1033, :column 5, :line 1033, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1033, :column 10, :line 1033, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1037, :column 5, :line 1037, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1037, :column 10, :line 1037, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1037, :column 12, :line 1037, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1037, :column 14, :line 1037, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1027, :column 7, :line 1027, :file "cljs/core.cljs"} conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 323, :column 21, :line 323, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 323, :column 22, :line 323, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 323, :column 27, :line 323, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 323, :column 5, :line 323, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 323, :column 9, :line 323, :file "cljs/core.cljs"} -sorted-seq ^{:arglists (^{:end-column 38, :end-line 323, :column 21, :line 323, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 323, :column 22, :line 323, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 323, :column 27, :line 323, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 323, :column 5, :line 323, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 323, :column 9, :line 323, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 323, :column 22, :line 323, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 323, :column 27, :line 323, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 323, :column 21, :line 323, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 323, :column 22, :line 323, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 323, :column 27, :line 323, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 323, :column 5, :line 323, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 323, :column 9, :line 323, :file "cljs/core.cljs"} -sorted-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3690, :column 3, :line 3690, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3690, :column 4, :line 3690, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3687, :column 8, :line 3687, :file "cljs/core.cljs"} flatten1 ^{:arglists (^{:end-column 10, :end-line 3690, :column 3, :line 3690, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3690, :column 4, :line 3690, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3687, :column 8, :line 3687, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 10, :end-line 3690, :column 4, :line 3690, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3690, :column 3, :line 3690, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3690, :column 4, :line 3690, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3687, :column 8, :line 3687, :file "cljs/core.cljs"} flatten1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1670, :column 4, :line 1670, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1670, :column 5, :line 1670, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1670, :column 11, :line 1670, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1670, :column 13, :line 1670, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1671, :column 13, :line 1671, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1671, :column 18, :line 1671, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. Returns the result of\n  applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1663, :column 7, :line 1663, :file "cljs/core.cljs"} transduce ^{:arglists (^{:end-column 18, :end-line 1670, :column 4, :line 1670, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1670, :column 5, :line 1670, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1670, :column 11, :line 1670, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1670, :column 13, :line 1670, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1671, :column 13, :line 1671, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1671, :column 18, :line 1671, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. Returns the result of\n  applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1663, :column 7, :line 1663, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1670, :column 5, :line 1670, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1670, :column 11, :line 1670, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1670, :column 13, :line 1670, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1671, :column 13, :line 1671, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1671, :column 18, :line 1671, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1670, :column 4, :line 1670, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1670, :column 5, :line 1670, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1670, :column 11, :line 1670, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1670, :column 13, :line 1670, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1671, :column 13, :line 1671, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1671, :column 18, :line 1671, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. Returns the result of\n  applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1663, :column 7, :line 1663, :file "cljs/core.cljs"} transduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8096, :column 1, :line 8096, :file "cljs/core.cljs"} fixture1 ^{:end-column 17, :end-line 8096, :column 1, :line 8096, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8096, :column 1, :line 8096, :file "cljs/core.cljs"} fixture1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 391, :column 11, :line 391, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 391, :column 12, :line 391, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 391, :column 17, :line 391, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 391, :column 20, :line 391, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 391, :column 22, :line 391, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 391, :column 25, :line 391, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 391, :column 26, :line 391, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 391, :column 28, :line 391, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 391, :column 30, :line 391, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 391, :column 32, :line 391, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 391, :column 35, :line 391, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 391, :column 36, :line 391, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 391, :column 38, :line 391, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 391, :column 40, :line 391, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 391, :column 42, :line 391, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 391, :column 44, :line 391, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -swap! ^{:arglists (^{:end-column 16, :end-line 391, :column 11, :line 391, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 391, :column 12, :line 391, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 391, :column 17, :line 391, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 391, :column 20, :line 391, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 391, :column 22, :line 391, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 391, :column 25, :line 391, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 391, :column 26, :line 391, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 391, :column 28, :line 391, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 391, :column 30, :line 391, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 391, :column 32, :line 391, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 391, :column 35, :line 391, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 391, :column 36, :line 391, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 391, :column 38, :line 391, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 391, :column 40, :line 391, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 391, :column 42, :line 391, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 391, :column 44, :line 391, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 391, :column 12, :line 391, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} f] [^{:end-column 20, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 391, :column 20, :line 391, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 391, :column 22, :line 391, :file "cljs/core.cljs"} a] [^{:end-column 28, :end-line 391, :column 26, :line 391, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 391, :column 28, :line 391, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 391, :column 30, :line 391, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 391, :column 32, :line 391, :file "cljs/core.cljs"} b] [^{:end-column 38, :end-line 391, :column 36, :line 391, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 391, :column 38, :line 391, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 391, :column 40, :line 391, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 391, :column 42, :line 391, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 391, :column 44, :line 391, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 391, :column 11, :line 391, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 391, :column 12, :line 391, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 391, :column 17, :line 391, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 391, :column 20, :line 391, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 391, :column 22, :line 391, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 391, :column 25, :line 391, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 391, :column 26, :line 391, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 391, :column 28, :line 391, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 391, :column 30, :line 391, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 391, :column 32, :line 391, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 391, :column 35, :line 391, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 391, :column 36, :line 391, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 391, :column 38, :line 391, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 391, :column 40, :line 391, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 391, :column 42, :line 391, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 391, :column 44, :line 391, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length* ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 1397, :column 17, :line 1397, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1397, :column 18, :line 1397, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1397, :column 22, :line 1397, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} js-delete ^{:arglists (^{:end-column 26, :end-line 1397, :column 17, :line 1397, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1397, :column 18, :line 1397, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1397, :column 22, :line 1397, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1397, :column 18, :line 1397, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1397, :column 22, :line 1397, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 1397, :column 17, :line 1397, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1397, :column 18, :line 1397, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1397, :column 22, :line 1397, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1397, :column 7, :line 1397, :file "cljs/core.cljs"} js-delete, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_ ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy])} ->MultiFn ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy])} {:arglists (^cljs.core/MultiFn [^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy])} ->MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8207, :column 15, :line 8207, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8207, :column 16, :line 8207, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8207, :column 7, :line 8207, :file "cljs/core.cljs"} key->js ^{:arglists (^{:end-column 18, :end-line 8207, :column 15, :line 8207, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8207, :column 16, :line 8207, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8207, :column 7, :line 8207, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 8207, :column 16, :line 8207, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8207, :column 15, :line 8207, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8207, :column 16, :line 8207, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8207, :column 7, :line 8207, :file "cljs/core.cljs"} key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts])} ->MultiStepper ^{:file "cljs/core.cljs", :arglists ([^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts])} {:arglists (^cljs.core/MultiStepper [^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts])} ->MultiStepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 8200, :column 14, :line 8200, :file "cljs/core.cljs"} IEncodeJS ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 8200, :column 14, :line 8200, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 8200, :column 14, :line 8200, :file "cljs/core.cljs"} IEncodeJS, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3907, :column 17, :line 3907, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3907, :column 18, :line 3907, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3907, :column 23, :line 3907, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3907, :column 29, :line 3907, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3907, :column 8, :line 3907, :file "cljs/core.cljs"} new-path ^{:arglists (^{:end-column 34, :end-line 3907, :column 17, :line 3907, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3907, :column 18, :line 3907, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3907, :column 23, :line 3907, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3907, :column 29, :line 3907, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3907, :column 8, :line 3907, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 3907, :column 18, :line 3907, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3907, :column 23, :line 3907, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3907, :column 29, :line 3907, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3907, :column 17, :line 3907, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3907, :column 18, :line 3907, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3907, :column 23, :line 3907, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3907, :column 29, :line 3907, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3907, :column 8, :line 3907, :file "cljs/core.cljs"} new-path, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 3367, :column 3, :line 3367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3367, :column 4, :line 3367, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3367, :column 6, :line 3367, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3367, :column 13, :line 3367, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3363, :column 7, :line 3363, :file "cljs/core.cljs"} compare-and-set! ^{:arglists (^{:end-column 20, :end-line 3367, :column 3, :line 3367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3367, :column 4, :line 3367, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3367, :column 6, :line 3367, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3367, :column 13, :line 3367, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3363, :column 7, :line 3363, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 3367, :column 4, :line 3367, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3367, :column 6, :line 3367, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3367, :column 13, :line 3367, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 3367, :column 3, :line 3367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3367, :column 4, :line 3367, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3367, :column 6, :line 3367, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3367, :column 13, :line 3367, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3363, :column 7, :line 3363, :file "cljs/core.cljs"} compare-and-set!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 605, :column 10, :line 605, :file "cljs/core.cljs"} array-seq ^{:arglists (^{:end-column 11, :end-line 930, :column 4, :line 930, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 930, :column 5, :line 930, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 932, :column 4, :line 932, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 932, :column 5, :line 932, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 932, :column 11, :line 932, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 929, :column 7, :line 929, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 930, :column 5, :line 930, :file "cljs/core.cljs"} array] [^{:end-column 11, :end-line 932, :column 5, :line 932, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 932, :column 11, :line 932, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 930, :column 4, :line 930, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 930, :column 5, :line 930, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 932, :column 4, :line 932, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 932, :column 5, :line 932, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 932, :column 11, :line 932, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 929, :column 7, :line 929, :file "cljs/core.cljs"} array-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1409, :column 10, :line 1409, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1409, :column 12, :line 1409, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1409, :column 15, :line 1409, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1409, :column 17, :line 1409, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1408, :column 8, :line 1408, :file "cljs/core.cljs"} array-copy-downward ^{:arglists (^{:end-column 21, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1409, :column 10, :line 1409, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1409, :column 12, :line 1409, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1409, :column 15, :line 1409, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1409, :column 17, :line 1409, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1408, :column 8, :line 1408, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1409, :column 10, :line 1409, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1409, :column 12, :line 1409, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1409, :column 15, :line 1409, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1409, :column 17, :line 1409, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1409, :column 10, :line 1409, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1409, :column 12, :line 1409, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1409, :column 15, :line 1409, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1409, :column 17, :line 1409, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1408, :column 8, :line 1408, :file "cljs/core.cljs"} array-copy-downward, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5503, :column 24, :line 5503, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5503, :column 25, :line 5503, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5503, :column 36, :line 5503, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5503, :column 41, :line 5503, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5503, :column 8, :line 5503, :file "cljs/core.cljs"} pack-array-node ^{:arglists (^{:end-column 45, :end-line 5503, :column 24, :line 5503, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5503, :column 25, :line 5503, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5503, :column 36, :line 5503, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5503, :column 41, :line 5503, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5503, :column 8, :line 5503, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 5503, :column 25, :line 5503, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5503, :column 36, :line 5503, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5503, :column 41, :line 5503, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5503, :column 24, :line 5503, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5503, :column 25, :line 5503, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5503, :column 36, :line 5503, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5503, :column 41, :line 5503, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5503, :column 8, :line 5503, :file "cljs/core.cljs"} pack-array-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3669, :column 4, :line 3669, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3669, :column 5, :line 3669, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3669, :column 8, :line 3669, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3675, :column 4, :line 3675, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3675, :column 5, :line 3675, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3675, :column 8, :line 3675, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3675, :column 11, :line 3675, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3675, :column 13, :line 3675, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3667, :column 7, :line 3667, :file "cljs/core.cljs"} interleave ^{:arglists (^{:end-column 11, :end-line 3669, :column 4, :line 3669, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3669, :column 5, :line 3669, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3669, :column 8, :line 3669, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3675, :column 4, :line 3675, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3675, :column 5, :line 3675, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3675, :column 8, :line 3675, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3675, :column 11, :line 3675, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3675, :column 13, :line 3675, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3667, :column 7, :line 3667, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3669, :column 5, :line 3669, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3669, :column 8, :line 3669, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 8, :end-line 3675, :column 5, :line 3675, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3675, :column 8, :line 3675, :file "cljs/core.cljs"} c2 & ^{:end-column 19, :end-line 3675, :column 13, :line 3675, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3669, :column 4, :line 3669, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3669, :column 5, :line 3669, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3669, :column 8, :line 3669, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3675, :column 4, :line 3675, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3675, :column 5, :line 3675, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3675, :column 8, :line 3675, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3675, :column 11, :line 3675, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3675, :column 13, :line 3675, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3667, :column 7, :line 3667, :file "cljs/core.cljs"} interleave, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 7750, :column 10, :line 7750, :file "cljs/core.cljs"} print-map ^{:arglists (^{:end-column 42, :end-line 7913, :column 17, :line 7913, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7913, :column 18, :line 7913, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7913, :column 20, :line 7913, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7913, :column 30, :line 7913, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7913, :column 37, :line 7913, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 7913, :column 7, :line 7913, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 7913, :column 18, :line 7913, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7913, :column 20, :line 7913, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7913, :column 30, :line 7913, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7913, :column 37, :line 7913, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 7913, :column 17, :line 7913, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 7913, :column 18, :line 7913, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 7913, :column 20, :line 7913, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 7913, :column 30, :line 7913, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 7913, :column 37, :line 7913, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 7913, :column 7, :line 7913, :file "cljs/core.cljs"} print-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1371, :column 3, :line 1371, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1371, :column 4, :line 1371, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1369, :column 8, :line 1369, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1369, :column 16, :line 1369, :file "cljs/core.cljs"} map? ^{:arglists (^{:end-column 6, :end-line 1371, :column 3, :line 1371, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1371, :column 4, :line 1371, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1369, :column 8, :line 1369, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1369, :column 16, :line 1369, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1371, :column 4, :line 1371, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1371, :column 3, :line 1371, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1371, :column 4, :line 1371, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1369, :column 8, :line 1369, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1369, :column 16, :line 1369, :file "cljs/core.cljs"} map?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 434, :column 1, :line 434, :file "cljs/core.cljs"} m3-C1 ^{:end-column 23, :end-line 434, :column 1, :line 434, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 434, :column 1, :line 434, :file "cljs/core.cljs"} m3-C1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1161, :column 4, :line 1161, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1161, :column 5, :line 1161, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1161, :column 7, :line 1161, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1179, :column 9, :line 1179, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1159, :column 7, :line 1159, :file "cljs/core.cljs"} get ^{:arglists (^{:end-column 9, :end-line 1161, :column 4, :line 1161, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1161, :column 5, :line 1161, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1161, :column 7, :line 1161, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1179, :column 9, :line 1179, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1159, :column 7, :line 1159, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1161, :column 5, :line 1161, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1161, :column 7, :line 1161, :file "cljs/core.cljs"} k] [^{:end-column 7, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1179, :column 9, :line 1179, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1161, :column 4, :line 1161, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1161, :column 5, :line 1161, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1161, :column 7, :line 1161, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1179, :column 9, :line 1179, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1159, :column 7, :line 1159, :file "cljs/core.cljs"} get, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 3143, :column 16, :line 3143, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 3143, :column 17, :line 3143, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 3143, :column 7, :line 3143, :file "cljs/core.cljs"} identity ^{:arglists (^{:end-column 19, :end-line 3143, :column 16, :line 3143, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 3143, :column 17, :line 3143, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 3143, :column 7, :line 3143, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 3143, :column 17, :line 3143, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 3143, :column 16, :line 3143, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 3143, :column 17, :line 3143, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 3143, :column 7, :line 3143, :file "cljs/core.cljs"} identity, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3770, :column 4, :line 3770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3770, :column 5, :line 3770, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3770, :column 8, :line 3770, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3776, :column 14, :line 3776, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} into ^{:arglists (^{:end-column 13, :end-line 3770, :column 4, :line 3770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3770, :column 5, :line 3770, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3770, :column 8, :line 3770, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3776, :column 14, :line 3776, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3770, :column 5, :line 3770, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3770, :column 8, :line 3770, :file "cljs/core.cljs"} from] [^{:end-column 8, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3776, :column 14, :line 3776, :file "cljs/core.cljs"} from]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3770, :column 4, :line 3770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3770, :column 5, :line 3770, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3770, :column 8, :line 3770, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3776, :column 14, :line 3776, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} into, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1886, :column 3, :line 1886, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1886, :column 4, :line 1886, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} long ^{:arglists (^{:end-column 6, :end-line 1886, :column 3, :line 1886, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1886, :column 4, :line 1886, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1886, :column 4, :line 1886, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1886, :column 3, :line 1886, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1886, :column 4, :line 1886, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1789, :column 22, :line 1789, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1789, :column 23, :line 1789, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1789, :column 8, :line 1789, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1789, :column 15, :line 1789, :file "cljs/core.cljs"} double ^{:arglists (^{:end-column 25, :end-line 1789, :column 22, :line 1789, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1789, :column 23, :line 1789, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1789, :column 8, :line 1789, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1789, :column 15, :line 1789, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 1789, :column 23, :line 1789, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1789, :column 22, :line 1789, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1789, :column 23, :line 1789, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1789, :column 8, :line 1789, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1789, :column 15, :line 1789, :file "cljs/core.cljs"} double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2439, :column 10, :line 2439, :file "cljs/core.cljs"} ChunkBuffer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2439, :column 10, :line 2439, :file "cljs/core.cljs"} ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 2439, :column 22, :line 2439, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end], :protocols #{Object cljs.core/ICounted}}, ^{:arglists (^{:end-column 15, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 270, :column 10, :line 270, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -key ^{:arglists (^{:end-column 15, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 270, :column 10, :line 270, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 270, :column 10, :line 270, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 270, :column 9, :line 270, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 270, :column 10, :line 270, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1002, :column 3, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1000, :column 7, :line 1000, :file "cljs/core.cljs"} nfirst ^{:arglists (^{:end-column 9, :end-line 1002, :column 3, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1000, :column 7, :line 1000, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1002, :column 3, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1000, :column 7, :line 1000, :file "cljs/core.cljs"} nfirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 395, :column 10, :line 395, :file "cljs/core.cljs"} StringBufferWriter {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 395, :column 10, :line 395, :file "cljs/core.cljs"} StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 395, :column 29, :line 395, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb], :protocols #{cljs.core/IWriter}}, ^{:arglists (^{:end-column 6, :end-line 1299, :column 3, :line 1299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1297, :column 7, :line 1297, :file "cljs/core.cljs"} meta ^{:arglists (^{:end-column 6, :end-line 1299, :column 3, :line 1299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1297, :column 7, :line 1297, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1299, :column 3, :line 1299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1297, :column 7, :line 1297, :file "cljs/core.cljs"} meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 44, :end-line 3984, :column 27, :line 3984, :file "cljs/core.cljs"} tv-editable-tail ^{:arglists (^{:end-column 29, :end-line 4376, :column 25, :line 4376, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4376, :column 26, :line 4376, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 4376, :column 8, :line 4376, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 29, :end-line 4376, :column 26, :line 4376, :file "cljs/core.cljs"} tl]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 4376, :column 25, :line 4376, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4376, :column 26, :line 4376, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 4376, :column 8, :line 4376, :file "cljs/core.cljs"} tv-editable-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 299, :column 15, :line 299, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 299, :column 16, :line 299, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 299, :column 21, :line 299, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 299, :column 23, :line 299, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -kv-reduce ^{:arglists (^{:end-column 28, :end-line 299, :column 15, :line 299, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 299, :column 16, :line 299, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 299, :column 21, :line 299, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 299, :column 23, :line 299, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 299, :column 16, :line 299, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 299, :column 21, :line 299, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 299, :column 23, :line 299, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 299, :column 15, :line 299, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 299, :column 16, :line 299, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 299, :column 21, :line 299, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 299, :column 23, :line 299, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} IHash ^{:impls #{cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq ^{:end-column 22, :end-line 752, :column 14, :line 752, :file "cljs/core.cljs"} default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/LazyTransformer cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 20, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} IHash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1948, :column 3, :line 1948, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1948, :column 4, :line 1948, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1948, :column 6, :line 1948, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1946, :column 7, :line 1946, :file "cljs/core.cljs"} bit-and-not ^{:arglists (^{:end-column 8, :end-line 1948, :column 3, :line 1948, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1948, :column 4, :line 1948, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1948, :column 6, :line 1948, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1946, :column 7, :line 1946, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1948, :column 4, :line 1948, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1948, :column 6, :line 1948, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1948, :column 3, :line 1948, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1948, :column 4, :line 1948, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1948, :column 6, :line 1948, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1946, :column 7, :line 1946, :file "cljs/core.cljs"} bit-and-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 326, :column 17, :line 326, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -comparator ^{:arglists (^{:end-column 22, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 326, :column 17, :line 326, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 326, :column 17, :line 326, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 326, :column 17, :line 326, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1809, :column 4, :line 1809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1809, :column 5, :line 1809, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1809, :column 9, :line 1809, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1809, :column 11, :line 1809, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1804, :column 8, :line 1804, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1804, :column 15, :line 1804, :file "cljs/core.cljs"} unchecked-add-int ^{:arglists (^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1809, :column 4, :line 1809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1809, :column 5, :line 1809, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1809, :column 9, :line 1809, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1809, :column 11, :line 1809, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1804, :column 8, :line 1804, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1804, :column 15, :line 1804, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1809, :column 5, :line 1809, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1809, :column 11, :line 1809, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1809, :column 4, :line 1809, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1809, :column 5, :line 1809, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1809, :column 7, :line 1809, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1809, :column 9, :line 1809, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1809, :column 11, :line 1809, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1804, :column 8, :line 1804, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1804, :column 15, :line 1804, :file "cljs/core.cljs"} unchecked-add-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 705, :column 3, :line 705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 705, :column 4, :line 705, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 701, :column 8, :line 701, :file "cljs/core.cljs"} number, :end-column 33, :end-line 701, :column 15, :line 701, :file "cljs/core.cljs"} hash-ordered-coll ^{:arglists (^{:end-column 9, :end-line 705, :column 3, :line 705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 705, :column 4, :line 705, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 701, :column 8, :line 701, :file "cljs/core.cljs"} number, :end-column 33, :end-line 701, :column 15, :line 701, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 705, :column 4, :line 705, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 705, :column 3, :line 705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 705, :column 4, :line 705, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 701, :column 8, :line 701, :file "cljs/core.cljs"} number, :end-column 33, :end-line 701, :column 15, :line 701, :file "cljs/core.cljs"} hash-ordered-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2103, :column 3, :line 2103, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2103, :column 4, :line 2103, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2103, :column 8, :line 2103, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2098, :column 8, :line 2098, :file "cljs/core.cljs"} extend-object! ^{:arglists (^{:end-column 15, :end-line 2103, :column 3, :line 2103, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2103, :column 4, :line 2103, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2103, :column 8, :line 2103, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2098, :column 8, :line 2098, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2103, :column 4, :line 2103, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2103, :column 8, :line 2103, :file "cljs/core.cljs"} fn-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2103, :column 3, :line 2103, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2103, :column 4, :line 2103, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2103, :column 8, :line 2103, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2098, :column 8, :line 2098, :file "cljs/core.cljs"} extend-object!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s])} ->EntriesIterator ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s])} {:arglists (^cljs.core/EntriesIterator [^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s])} ->EntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 3960, :column 17, :line 3960, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3960, :column 18, :line 3960, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3960, :column 21, :line 3960, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3960, :column 27, :line 3960, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3960, :column 32, :line 3960, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3960, :column 34, :line 3960, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3960, :column 8, :line 3960, :file "cljs/core.cljs"} do-assoc ^{:arglists (^{:end-column 38, :end-line 3960, :column 17, :line 3960, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3960, :column 18, :line 3960, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3960, :column 21, :line 3960, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3960, :column 27, :line 3960, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3960, :column 32, :line 3960, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3960, :column 34, :line 3960, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3960, :column 8, :line 3960, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 21, :end-line 3960, :column 18, :line 3960, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3960, :column 21, :line 3960, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3960, :column 27, :line 3960, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3960, :column 32, :line 3960, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3960, :column 34, :line 3960, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 3960, :column 17, :line 3960, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3960, :column 18, :line 3960, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3960, :column 21, :line 3960, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3960, :column 27, :line 3960, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3960, :column 32, :line 3960, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3960, :column 34, :line 3960, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3960, :column 8, :line 3960, :file "cljs/core.cljs"} do-assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8046, :column 3, :line 8046, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8046, :column 4, :line 8046, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8046, :column 9, :line 8046, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8044, :column 7, :line 8044, :file "cljs/core.cljs"} reset-meta! ^{:arglists (^{:end-column 11, :end-line 8046, :column 3, :line 8046, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8046, :column 4, :line 8046, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8046, :column 9, :line 8046, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8044, :column 7, :line 8044, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8046, :column 4, :line 8046, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8046, :column 9, :line 8046, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8046, :column 3, :line 8046, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8046, :column 4, :line 8046, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8046, :column 9, :line 8046, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8044, :column 7, :line 8044, :file "cljs/core.cljs"} reset-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta])} ->KeySeq ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/KeySeq [^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta])} ->KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} IEquiv ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/Keyword cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq ^{:end-column 21, :end-line 741, :column 14, :line 741, :file "cljs/core.cljs"} number ^{:end-column 22, :end-line 1023, :column 14, :line 1023, :file "cljs/core.cljs"} default cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/Atom cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/NeverEquiv Date cljs.core/LazyTransformer cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 21, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} IEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6254, :column 27, :line 6254, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6254, :column 28, :line 6254, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6254, :column 33, :line 6254, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6254, :column 35, :line 6254, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6254, :column 8, :line 6254, :file "cljs/core.cljs"} tree-map-kv-reduce ^{:arglists (^{:end-column 40, :end-line 6254, :column 27, :line 6254, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6254, :column 28, :line 6254, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6254, :column 33, :line 6254, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6254, :column 35, :line 6254, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6254, :column 8, :line 6254, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 6254, :column 28, :line 6254, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6254, :column 33, :line 6254, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6254, :column 35, :line 6254, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6254, :column 27, :line 6254, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6254, :column 28, :line 6254, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6254, :column 33, :line 6254, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6254, :column 35, :line 6254, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6254, :column 8, :line 6254, :file "cljs/core.cljs"} tree-map-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3637, :column 3, :line 3637, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3637, :column 4, :line 3637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} cycle ^{:arglists (^{:end-column 9, :end-line 3637, :column 3, :line 3637, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3637, :column 4, :line 3637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3637, :column 4, :line 3637, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3637, :column 3, :line 3637, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3637, :column 4, :line 3637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} cycle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 284, :column 10, :line 284, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 284, :column 11, :line 284, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 284, :column 3, :line 284, :file "cljs/core.cljs"} -deref ^{:arglists (^{:end-column 13, :end-line 284, :column 10, :line 284, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 284, :column 11, :line 284, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 284, :column 3, :line 284, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 284, :column 11, :line 284, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 284, :column 10, :line 284, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 284, :column 11, :line 284, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 284, :column 3, :line 284, :file "cljs/core.cljs"} -deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1336, :column 3, :line 1336, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1336, :column 4, :line 1336, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1333, :column 8, :line 1333, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1333, :column 16, :line 1333, :file "cljs/core.cljs"} empty? ^{:arglists (^{:end-column 9, :end-line 1336, :column 3, :line 1336, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1336, :column 4, :line 1336, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1333, :column 8, :line 1333, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1333, :column 16, :line 1333, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 1336, :column 4, :line 1336, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1336, :column 3, :line 1336, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1336, :column 4, :line 1336, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1333, :column 8, :line 1333, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1333, :column 16, :line 1333, :file "cljs/core.cljs"} empty?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1787, :column 21, :line 1787, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1787, :column 22, :line 1787, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} short ^{:arglists (^{:end-column 24, :end-line 1787, :column 21, :line 1787, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1787, :column 22, :line 1787, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1787, :column 22, :line 1787, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1787, :column 21, :line 1787, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1787, :column 22, :line 1787, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8201, :column 13, :line 8201, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8201, :column 14, :line 8201, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8201, :column 4, :line 8201, :file "cljs/core.cljs"} -clj->js ^{:arglists (^{:end-column 16, :end-line 8201, :column 13, :line 8201, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8201, :column 14, :line 8201, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8201, :column 4, :line 8201, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8201, :column 14, :line 8201, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8201, :column 13, :line 8201, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8201, :column 14, :line 8201, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8201, :column 4, :line 8201, :file "cljs/core.cljs"} -clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 375, :column 20, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} -chunked-first ^{:arglists (^{:end-column 25, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 375, :column 20, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 375, :column 20, :line 375, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 375, :column 19, :line 375, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 375, :column 20, :line 375, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 375, :column 4, :line 375, :file "cljs/core.cljs"} -chunked-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3800, :column 3, :line 3800, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3800, :column 4, :line 3800, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3800, :column 9, :line 3800, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3797, :column 7, :line 3797, :file "cljs/core.cljs"} filterv ^{:arglists (^{:end-column 14, :end-line 3800, :column 3, :line 3800, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3800, :column 4, :line 3800, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3800, :column 9, :line 3800, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3797, :column 7, :line 3797, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 3800, :column 4, :line 3800, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3800, :column 9, :line 3800, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3800, :column 3, :line 3800, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3800, :column 4, :line 3800, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3800, :column 9, :line 3800, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3797, :column 7, :line 3797, :file "cljs/core.cljs"} filterv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 3984, :column 10, :line 3984, :file "cljs/core.cljs"} tv-editable-root ^{:arglists (^{:end-column 31, :end-line 4373, :column 25, :line 4373, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4373, :column 26, :line 4373, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 4373, :column 8, :line 4373, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 31, :end-line 4373, :column 26, :line 4373, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 4373, :column 25, :line 4373, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4373, :column 26, :line 4373, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 4373, :column 8, :line 4373, :file "cljs/core.cljs"} tv-editable-root, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 508, :column 12, :line 508, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 508, :column 13, :line 508, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} hash ^{:arglists (^{:end-column 15, :end-line 508, :column 12, :line 508, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 508, :column 13, :line 508, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 508, :column 13, :line 508, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 508, :column 12, :line 508, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 508, :column 13, :line 508, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1915, :column 3, :line 1915, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1915, :column 4, :line 1915, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1915, :column 6, :line 1915, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} quot ^{:arglists (^{:end-column 8, :end-line 1915, :column 3, :line 1915, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1915, :column 4, :line 1915, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1915, :column 6, :line 1915, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1915, :column 4, :line 1915, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1915, :column 6, :line 1915, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1915, :column 3, :line 1915, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1915, :column 4, :line 1915, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1915, :column 6, :line 1915, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} quot, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1795, :column 32, :line 1795, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1795, :column 33, :line 1795, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} unchecked-double ^{:arglists (^{:end-column 35, :end-line 1795, :column 32, :line 1795, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1795, :column 33, :line 1795, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 1795, :column 33, :line 1795, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1795, :column 32, :line 1795, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1795, :column 33, :line 1795, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} unchecked-double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash])} ->ChunkedCons ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ChunkedCons [^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash])} ->ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} ITransientVector ^{:impls #{cljs.core/TransientVector}, :protocol-symbol true, :end-column 31, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 31, :end-line 361, :column 14, :line 361, :file "cljs/core.cljs"} ITransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 2075, :column 10, :line 2075, :file "cljs/core.cljs"} key ^{:arglists (^{:end-column 14, :end-line 6878, :column 3, :line 6878, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6878, :column 4, :line 6878, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6876, :column 7, :line 6876, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6878, :column 4, :line 6878, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6878, :column 3, :line 6878, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6878, :column 4, :line 6878, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6876, :column 7, :line 6876, :file "cljs/core.cljs"} key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1901, :column 13, :line 1901, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1901, :column 14, :line 1901, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} longs ^{:arglists (^{:end-column 16, :end-line 1901, :column 13, :line 1901, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1901, :column 14, :line 1901, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1901, :column 14, :line 1901, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1901, :column 13, :line 1901, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1901, :column 14, :line 1901, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} longs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2867, :column 4, :line 2867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2867, :column 5, :line 2867, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2868, :column 4, :line 2868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2868, :column 5, :line 2868, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2868, :column 7, :line 2868, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2869, :column 4, :line 2869, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2869, :column 5, :line 2869, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2869, :column 7, :line 2869, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2869, :column 9, :line 2869, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2869, :column 11, :line 2869, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2865, :column 8, :line 2865, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2865, :column 16, :line 2865, :file "cljs/core.cljs"} not= ^{:arglists (^{:end-column 7, :end-line 2867, :column 4, :line 2867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2867, :column 5, :line 2867, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2868, :column 4, :line 2868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2868, :column 5, :line 2868, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2868, :column 7, :line 2868, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2869, :column 4, :line 2869, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2869, :column 5, :line 2869, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2869, :column 7, :line 2869, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2869, :column 9, :line 2869, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2869, :column 11, :line 2869, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2865, :column 8, :line 2865, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2865, :column 16, :line 2865, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 2867, :column 5, :line 2867, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 2868, :column 5, :line 2868, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2868, :column 7, :line 2868, :file "cljs/core.cljs"} y] ^cljs.core/boolean [^{:end-column 7, :end-line 2869, :column 5, :line 2869, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2869, :column 7, :line 2869, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2869, :column 11, :line 2869, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2867, :column 4, :line 2867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2867, :column 5, :line 2867, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2868, :column 4, :line 2868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2868, :column 5, :line 2868, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2868, :column 7, :line 2868, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2869, :column 4, :line 2869, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2869, :column 5, :line 2869, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2869, :column 7, :line 2869, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2869, :column 9, :line 2869, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2869, :column 11, :line 2869, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2865, :column 8, :line 2865, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2865, :column 16, :line 2865, :file "cljs/core.cljs"} not=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string? ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8101, :column 10, :line 8101, :file "cljs/core.cljs"} Delay {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8101, :column 10, :line 8101, :file "cljs/core.cljs"} Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 8101, :column 16, :line 8101, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value], :protocols #{cljs.core/IPending cljs.core/IDeref}}, ^{:arglists (^{:end-column 14, :end-line 7839, :column 3, :line 7839, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7839, :column 4, :line 7839, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7839, :column 9, :line 7839, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7836, :column 7, :line 7836, :file "cljs/core.cljs"} pr-str-with-opts ^{:arglists (^{:end-column 14, :end-line 7839, :column 3, :line 7839, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7839, :column 4, :line 7839, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7839, :column 9, :line 7839, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7836, :column 7, :line 7836, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7839, :column 4, :line 7839, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7839, :column 9, :line 7839, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7839, :column 3, :line 7839, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7839, :column 4, :line 7839, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7839, :column 9, :line 7839, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7836, :column 7, :line 7836, :file "cljs/core.cljs"} pr-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 435, :column 1, :line 435, :file "cljs/core.cljs"} m3-C2 ^{:end-column 23, :end-line 435, :column 1, :line 435, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 435, :column 1, :line 435, :file "cljs/core.cljs"} m3-C2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta])} ->Symbol ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/Symbol [^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 558, :column 18, :line 558, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 558, :column 21, :line 558, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 558, :column 26, :line 558, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 558, :column 40, :line 558, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 558, :column 46, :line 558, :file "cljs/core.cljs"} _meta])} ->Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline* ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1839, :column 4, :line 1839, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1840, :column 4, :line 1840, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1840, :column 5, :line 1840, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1841, :column 4, :line 1841, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1841, :column 5, :line 1841, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1841, :column 7, :line 1841, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1842, :column 7, :line 1842, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1842, :column 9, :line 1842, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1842, :column 11, :line 1842, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1837, :column 15, :line 1837, :file "cljs/core.cljs"} unchecked-multiply-int ^{:arglists (^{:end-column 6, :end-line 1839, :column 4, :line 1839, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1840, :column 4, :line 1840, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1840, :column 5, :line 1840, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1841, :column 4, :line 1841, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1841, :column 5, :line 1841, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1841, :column 7, :line 1841, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1842, :column 7, :line 1842, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1842, :column 9, :line 1842, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1842, :column 11, :line 1842, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1837, :column 15, :line 1837, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1840, :column 5, :line 1840, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1841, :column 5, :line 1841, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1841, :column 7, :line 1841, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1842, :column 7, :line 1842, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1842, :column 11, :line 1842, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1839, :column 4, :line 1839, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1840, :column 4, :line 1840, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1840, :column 5, :line 1840, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1841, :column 4, :line 1841, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1841, :column 5, :line 1841, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1841, :column 7, :line 1841, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1842, :column 7, :line 1842, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1842, :column 9, :line 1842, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1842, :column 11, :line 1842, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1837, :column 8, :line 1837, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1837, :column 15, :line 1837, :file "cljs/core.cljs"} unchecked-multiply-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 38, :end-line 2096, :column 27, :line 2096, :file "cljs/core.cljs"} chunk-rest ^{:arglists (^{:end-column 21, :end-line 2564, :column 18, :line 2564, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2564, :column 19, :line 2564, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2564, :column 7, :line 2564, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2564, :column 19, :line 2564, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2564, :column 18, :line 2564, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2564, :column 19, :line 2564, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2564, :column 7, :line 2564, :file "cljs/core.cljs"} chunk-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8687, :column 2, :line 8687, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8687, :column 3, :line 8687, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8685, :column 7, :line 8685, :file "cljs/core.cljs"} remove-all-methods ^{:arglists (^{:end-column 11, :end-line 8687, :column 2, :line 8687, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8687, :column 3, :line 8687, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8685, :column 7, :line 8685, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8687, :column 3, :line 8687, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8687, :column 2, :line 8687, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8687, :column 3, :line 8687, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8685, :column 7, :line 8685, :file "cljs/core.cljs"} remove-all-methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8296, :column 4, :line 8296, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8296, :column 5, :line 8296, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8301, :column 4, :line 8301, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8301, :column 5, :line 8301, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8301, :column 7, :line 8301, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8301, :column 9, :line 8301, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} trampoline ^{:arglists (^{:end-column 7, :end-line 8296, :column 4, :line 8296, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8296, :column 5, :line 8296, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8301, :column 4, :line 8301, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8301, :column 5, :line 8301, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8301, :column 7, :line 8301, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8301, :column 9, :line 8301, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8296, :column 5, :line 8296, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 8301, :column 5, :line 8301, :file "cljs/core.cljs"} f & ^{:end-column 14, :end-line 8301, :column 9, :line 8301, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8296, :column 4, :line 8296, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8296, :column 5, :line 8296, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8301, :column 4, :line 8301, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8301, :column 5, :line 8301, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8301, :column 7, :line 8301, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8301, :column 9, :line 8301, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} trampoline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1 ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1593, :column 10, :line 1593, :file "cljs/core.cljs"} vec ^{:arglists (^{:end-column 17, :end-line 4158, :column 11, :line 4158, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4158, :column 12, :line 4158, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 4158, :column 7, :line 4158, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 17, :end-line 4158, :column 12, :line 4158, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 4158, :column 11, :line 4158, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4158, :column 12, :line 4158, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 4158, :column 7, :line 4158, :file "cljs/core.cljs"} vec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta* ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 344, :column 20, :line 344, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 344, :column 21, :line 344, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 344, :column 26, :line 344, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 344, :column 33, :line 344, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 344, :column 4, :line 344, :file "cljs/core.cljs"} -notify-watches ^{:arglists (^{:end-column 40, :end-line 344, :column 20, :line 344, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 344, :column 21, :line 344, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 344, :column 26, :line 344, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 344, :column 33, :line 344, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 344, :column 4, :line 344, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 344, :column 21, :line 344, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 344, :column 26, :line 344, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 344, :column 33, :line 344, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 344, :column 20, :line 344, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 344, :column 21, :line 344, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 344, :column 26, :line 344, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 344, :column 33, :line 344, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 344, :column 4, :line 344, :file "cljs/core.cljs"} -notify-watches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8510, :column 10, :line 8510, :file "cljs/core.cljs"} MultiFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8510, :column 10, :line 8510, :file "cljs/core.cljs"} MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 75, :end-line 8511, :column 18, :line 8510, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 8510, :column 19, :line 8510, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8510, :column 24, :line 8510, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8510, :column 36, :line 8510, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8510, :column 57, :line 8510, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8511, :column 19, :line 8511, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8511, :column 32, :line 8511, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8511, :column 45, :line 8511, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8511, :column 58, :line 8511, :file "cljs/core.cljs"} cached-hierarchy], :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 4830, :column 10, :line 4830, :file "cljs/core.cljs"} Iterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 4830, :column 10, :line 4830, :file "cljs/core.cljs"} Iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 32, :end-line 4830, :column 19, :line 4830, :file "cljs/core.cljs"} [^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 6, :end-line 1876, :column 3, :line 1876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1876, :column 4, :line 1876, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} int ^{:arglists (^{:end-column 6, :end-line 1876, :column 3, :line 1876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1876, :column 4, :line 1876, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1876, :column 4, :line 1876, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1876, :column 3, :line 1876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1876, :column 4, :line 1876, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1874, :column 7, :line 1874, :file "cljs/core.cljs"} int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta])} ->ValSeq ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/ValSeq [^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta])} ->ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1927, :column 4, :line 1927, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1928, :column 4, :line 1928, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1928, :column 5, :line 1928, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).", :tag ^{:end-column 15, :end-line 1925, :column 8, :line 1925, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} rand ^{:arglists (^{:end-column 6, :end-line 8307, :column 4, :line 8307, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8308, :column 4, :line 8308, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8308, :column 5, :line 8308, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 8304, :column 7, :line 8304, :file "cljs/core.cljs"} {:arglists ([] ^number [^{:end-column 7, :end-line 8308, :column 5, :line 8308, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8307, :column 4, :line 8307, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8308, :column 4, :line 8308, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8308, :column 5, :line 8308, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 8304, :column 7, :line 8304, :file "cljs/core.cljs"} rand, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 992, :column 3, :line 992, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 992, :column 4, :line 992, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 990, :column 7, :line 990, :file "cljs/core.cljs"} second ^{:arglists (^{:end-column 9, :end-line 992, :column 3, :line 992, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 992, :column 4, :line 992, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 990, :column 7, :line 990, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 992, :column 4, :line 992, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 992, :column 3, :line 992, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 992, :column 4, :line 992, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 990, :column 7, :line 990, :file "cljs/core.cljs"} second, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 34, :end-line 348, :column 14, :line 348, :file "cljs/core.cljs"} IEditableCollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/PersistentHashSet}, :protocol-symbol true, :end-column 34, :end-line 348, :column 14, :line 348, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 34, :end-line 348, :column 14, :line 348, :file "cljs/core.cljs"} IEditableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 528, :column 20, :line 528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 528, :column 21, :line 528, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 528, :column 26, :line 528, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 528, :column 7, :line 528, :file "cljs/core.cljs"} hash-combine ^{:arglists (^{:end-column 31, :end-line 528, :column 20, :line 528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 528, :column 21, :line 528, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 528, :column 26, :line 528, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 528, :column 7, :line 528, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 528, :column 21, :line 528, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 528, :column 26, :line 528, :file "cljs/core.cljs"} hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 528, :column 20, :line 528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 528, :column 21, :line 528, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 528, :column 26, :line 528, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 528, :column 7, :line 528, :file "cljs/core.cljs"} hash-combine, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1738, :column 5, :line 1738, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1740, :column 9, :line 1740, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1740, :column 11, :line 1740, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1735, :column 8, :line 1735, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1735, :column 16, :line 1735, :file "cljs/core.cljs"} > ^{:arglists (^{:end-column 7, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1738, :column 5, :line 1738, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1740, :column 9, :line 1740, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1740, :column 11, :line 1740, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1735, :column 8, :line 1735, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1735, :column 16, :line 1735, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1738, :column 5, :line 1738, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1740, :column 11, :line 1740, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1738, :column 4, :line 1738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1738, :column 5, :line 1738, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1740, :column 9, :line 1740, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1740, :column 11, :line 1740, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1735, :column 8, :line 1735, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1735, :column 16, :line 1735, :file "cljs/core.cljs"} >, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 382, :column 18, :line 382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 382, :column 19, :line 382, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 382, :column 5, :line 382, :file "cljs/core.cljs"} string, :end-column 18, :end-line 382, :column 12, :line 382, :file "cljs/core.cljs"} -name ^{:arglists (^{:end-column 21, :end-line 382, :column 18, :line 382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 382, :column 19, :line 382, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 382, :column 5, :line 382, :file "cljs/core.cljs"} string, :end-column 18, :end-line 382, :column 12, :line 382, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 382, :column 19, :line 382, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 382, :column 18, :line 382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 382, :column 19, :line 382, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 382, :column 5, :line 382, :file "cljs/core.cljs"} string, :end-column 18, :end-line 382, :column 12, :line 382, :file "cljs/core.cljs"} -name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7254, :column 4, :line 7254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7254, :column 5, :line 7254, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7256, :column 10, :line 7256, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7249, :column 7, :line 7249, :file "cljs/core.cljs"} replace ^{:arglists (^{:end-column 10, :end-line 7254, :column 4, :line 7254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7254, :column 5, :line 7254, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7256, :column 10, :line 7256, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7249, :column 7, :line 7249, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 7254, :column 5, :line 7254, :file "cljs/core.cljs"} smap] [^{:end-column 10, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7256, :column 10, :line 7256, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7254, :column 4, :line 7254, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7254, :column 5, :line 7254, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7256, :column 4, :line 7256, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7256, :column 5, :line 7256, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7256, :column 10, :line 7256, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7249, :column 7, :line 7249, :file "cljs/core.cljs"} replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash])} ->Subvec ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Subvec [^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash])} ->Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1355, :column 3, :line 1355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1355, :column 4, :line 1355, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} associative? ^{:arglists (^{:end-column 6, :end-line 1355, :column 3, :line 1355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1355, :column 4, :line 1355, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1355, :column 4, :line 1355, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1355, :column 3, :line 1355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1355, :column 4, :line 1355, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} associative?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1879, :column 7, :line 1879, :file "cljs/core.cljs"} unchecked-int ^{:arglists (^{:end-column 6, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1879, :column 7, :line 1879, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1881, :column 3, :line 1881, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1881, :column 4, :line 1881, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1879, :column 7, :line 1879, :file "cljs/core.cljs"} unchecked-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 1392, :column 15, :line 1392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1392, :column 16, :line 1392, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1392, :column 7, :line 1392, :file "cljs/core.cljs"} js-keys ^{:arglists (^{:end-column 20, :end-line 1392, :column 15, :line 1392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1392, :column 16, :line 1392, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1392, :column 7, :line 1392, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 20, :end-line 1392, :column 16, :line 1392, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 1392, :column 15, :line 1392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1392, :column 16, :line 1392, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1392, :column 7, :line 1392, :file "cljs/core.cljs"} js-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 2340, :column 25, :line 2340, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2340, :column 26, :line 2340, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2340, :column 8, :line 2340, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2340, :column 16, :line 2340, :file "cljs/core.cljs"} keyword? ^{:arglists (^{:end-column 28, :end-line 2340, :column 25, :line 2340, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2340, :column 26, :line 2340, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2340, :column 8, :line 2340, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2340, :column 16, :line 2340, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 28, :end-line 2340, :column 26, :line 2340, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 2340, :column 25, :line 2340, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2340, :column 26, :line 2340, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2340, :column 8, :line 2340, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2340, :column 16, :line 2340, :file "cljs/core.cljs"} keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2904, :column 18, :line 2904, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2904, :column 19, :line 2904, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} array-iter ^{:arglists (^{:end-column 21, :end-line 2904, :column 18, :line 2904, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2904, :column 19, :line 2904, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 21, :end-line 2904, :column 19, :line 2904, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2904, :column 18, :line 2904, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2904, :column 19, :line 2904, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} array-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8119, :column 3, :line 8119, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8119, :column 4, :line 8119, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8117, :column 7, :line 8117, :file "cljs/core.cljs"} force ^{:arglists (^{:end-column 6, :end-line 8119, :column 3, :line 8119, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8119, :column 4, :line 8119, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8117, :column 7, :line 8117, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8119, :column 4, :line 8119, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8119, :column 3, :line 8119, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8119, :column 4, :line 8119, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8117, :column 7, :line 8117, :file "cljs/core.cljs"} force, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8325, :column 3, :line 8325, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8325, :column 4, :line 8325, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8325, :column 6, :line 8325, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8321, :column 7, :line 8321, :file "cljs/core.cljs"} group-by ^{:arglists (^{:end-column 11, :end-line 8325, :column 3, :line 8325, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8325, :column 4, :line 8325, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8325, :column 6, :line 8325, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8321, :column 7, :line 8321, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8325, :column 4, :line 8325, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8325, :column 6, :line 8325, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8325, :column 3, :line 8325, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8325, :column 4, :line 8325, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8325, :column 6, :line 8325, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8321, :column 7, :line 8321, :file "cljs/core.cljs"} group-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 320, :column 15, :line 320, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} -rseq ^{:arglists (^{:end-column 21, :end-line 320, :column 15, :line 320, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 320, :column 15, :line 320, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 320, :column 9, :line 320, :file "cljs/core.cljs"} -rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7908, :column 3, :line 7908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7908, :column 4, :line 7908, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7908, :column 6, :line 7908, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7906, :column 7, :line 7906, :file "cljs/core.cljs"} prn ^{:arglists (^{:end-column 11, :end-line 7908, :column 3, :line 7908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7908, :column 4, :line 7908, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7908, :column 6, :line 7908, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7906, :column 7, :line 7906, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7908, :column 6, :line 7908, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7908, :column 3, :line 7908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7908, :column 4, :line 7908, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7908, :column 6, :line 7908, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 7906, :column 7, :line 7906, :file "cljs/core.cljs"} prn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 4393, :column 20, :line 4393, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4393, :column 21, :line 4393, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4393, :column 24, :line 4393, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4393, :column 30, :line 4393, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4393, :column 8, :line 4393, :file "cljs/core.cljs"} tv-pop-tail ^{:arglists (^{:end-column 35, :end-line 4393, :column 20, :line 4393, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4393, :column 21, :line 4393, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4393, :column 24, :line 4393, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4393, :column 30, :line 4393, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4393, :column 8, :line 4393, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 4393, :column 21, :line 4393, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4393, :column 24, :line 4393, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4393, :column 30, :line 4393, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4393, :column 20, :line 4393, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4393, :column 21, :line 4393, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4393, :column 24, :line 4393, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4393, :column 30, :line 4393, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4393, :column 8, :line 4393, :file "cljs/core.cljs"} tv-pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches])} ->Atom ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches])} {:arglists (^cljs.core/Atom [^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches])} ->Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 1201, :column 10, :line 1201, :file "cljs/core.cljs"} PersistentHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5864, :column 10, :line 5864, :file "cljs/core.cljs"} PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 86, :end-line 5864, :column 28, :line 5864, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1835, :column 5, :line 1835, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1835, :column 7, :line 1835, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1835, :column 9, :line 1835, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1835, :column 11, :line 1835, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1830, :column 8, :line 1830, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1830, :column 15, :line 1830, :file "cljs/core.cljs"} unchecked-multiply ^{:arglists (^{:end-column 6, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1835, :column 5, :line 1835, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1835, :column 7, :line 1835, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1835, :column 9, :line 1835, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1835, :column 11, :line 1835, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1830, :column 8, :line 1830, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1830, :column 15, :line 1830, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1835, :column 5, :line 1835, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1835, :column 7, :line 1835, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1835, :column 11, :line 1835, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1835, :column 4, :line 1835, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1835, :column 5, :line 1835, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1835, :column 7, :line 1835, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1835, :column 9, :line 1835, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1835, :column 11, :line 1835, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1830, :column 8, :line 1830, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1830, :column 15, :line 1830, :file "cljs/core.cljs"} unchecked-multiply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5805, :column 10, :line 5805, :file "cljs/core.cljs"} ArrayNodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5805, :column 10, :line 5805, :file "cljs/core.cljs"} ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 5805, :column 23, :line 5805, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 3135, :column 4, :line 3135, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3135, :column 5, :line 3135, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3133, :column 8, :line 3133, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3133, :column 16, :line 3133, :file "cljs/core.cljs"} even? ^{:arglists (^{:end-column 7, :end-line 3135, :column 4, :line 3135, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3135, :column 5, :line 3135, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3133, :column 8, :line 3133, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3133, :column 16, :line 3133, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 3135, :column 5, :line 3135, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3135, :column 4, :line 3135, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3135, :column 5, :line 3135, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3133, :column 8, :line 3133, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3133, :column 16, :line 3133, :file "cljs/core.cljs"} even?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1811, :column 21, :line 1811, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1811, :column 22, :line 1811, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1811, :column 7, :line 1811, :file "cljs/core.cljs"} unchecked-dec ^{:arglists (^{:end-column 24, :end-line 1811, :column 21, :line 1811, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1811, :column 22, :line 1811, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1811, :column 7, :line 1811, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1811, :column 22, :line 1811, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1811, :column 21, :line 1811, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1811, :column 22, :line 1811, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1811, :column 7, :line 1811, :file "cljs/core.cljs"} unchecked-dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 52, :end-line 5613, :column 39, :line 5613, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5613, :column 40, :line 5613, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5613, :column 44, :line 5613, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5613, :column 48, :line 5613, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5613, :column 8, :line 5613, :file "cljs/core.cljs"} hash-collision-node-find-index ^{:arglists (^{:end-column 52, :end-line 5613, :column 39, :line 5613, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5613, :column 40, :line 5613, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5613, :column 44, :line 5613, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5613, :column 48, :line 5613, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5613, :column 8, :line 5613, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 44, :end-line 5613, :column 40, :line 5613, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5613, :column 44, :line 5613, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5613, :column 48, :line 5613, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 52, :end-line 5613, :column 39, :line 5613, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5613, :column 40, :line 5613, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5613, :column 44, :line 5613, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5613, :column 48, :line 5613, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5613, :column 8, :line 5613, :file "cljs/core.cljs"} hash-collision-node-find-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4998, :column 32, :line 4998, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4998, :column 33, :line 4998, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4998, :column 37, :line 4998, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4998, :column 39, :line 4998, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4998, :column 7, :line 4998, :file "cljs/core.cljs"} persistent-array-map-seq ^{:arglists (^{:end-column 45, :end-line 4998, :column 32, :line 4998, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4998, :column 33, :line 4998, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4998, :column 37, :line 4998, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4998, :column 39, :line 4998, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4998, :column 7, :line 4998, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4998, :column 33, :line 4998, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4998, :column 37, :line 4998, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4998, :column 39, :line 4998, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4998, :column 32, :line 4998, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4998, :column 33, :line 4998, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4998, :column 37, :line 4998, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4998, :column 39, :line 4998, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 4998, :column 7, :line 4998, :file "cljs/core.cljs"} persistent-array-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 2972, :column 10, :line 2972, :file "cljs/core.cljs"} MultiStepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 2972, :column 10, :line 2972, :file "cljs/core.cljs"} MultiStepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 2972, :column 23, :line 2972, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2972, :column 24, :line 2972, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 2972, :column 30, :line 2972, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 2972, :column 36, :line 2972, :file "cljs/core.cljs"} nexts], :protocols #{Object}}, ^{:arglists (^{:end-column 17, :end-line 2636, :column 4, :line 2636, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2636, :column 5, :line 2636, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2640, :column 4, :line 2640, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2640, :column 5, :line 2640, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2640, :column 10, :line 2640, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2635, :column 7, :line 2635, :file "cljs/core.cljs"} double-array ^{:arglists (^{:end-column 17, :end-line 2636, :column 4, :line 2636, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2636, :column 5, :line 2636, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2640, :column 4, :line 2640, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2640, :column 5, :line 2640, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2640, :column 10, :line 2640, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2635, :column 7, :line 2635, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2636, :column 5, :line 2636, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2640, :column 5, :line 2640, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2640, :column 10, :line 2640, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2636, :column 4, :line 2636, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2636, :column 5, :line 2636, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2640, :column 4, :line 2640, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2640, :column 5, :line 2640, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2640, :column 10, :line 2640, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2635, :column 7, :line 2635, :file "cljs/core.cljs"} double-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta])} ->EmptyList ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/EmptyList [^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta])} ->EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 935, :column 20, :line 935, :file "cljs/core.cljs"} seq-reduce ^{:arglists (^{:end-column 12, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1580, :column 7, :line 1580, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1584, :column 5, :line 1584, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1584, :column 7, :line 1584, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1584, :column 11, :line 1584, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1579, :column 8, :line 1579, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1580, :column 7, :line 1580, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1584, :column 5, :line 1584, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1584, :column 7, :line 1584, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1584, :column 11, :line 1584, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1580, :column 7, :line 1580, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1584, :column 5, :line 1584, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1584, :column 7, :line 1584, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1584, :column 11, :line 1584, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1579, :column 8, :line 1579, :file "cljs/core.cljs"} seq-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2684, :column 3, :line 2684, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} spread ^{:arglists (^{:end-column 12, :end-line 2684, :column 3, :line 2684, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} arglist]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2684, :column 3, :line 2684, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} spread, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6169, :column 21, :line 6169, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6169, :column 22, :line 6169, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6169, :column 26, :line 6169, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6169, :column 30, :line 6169, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6169, :column 34, :line 6169, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6169, :column 8, :line 6169, :file "cljs/core.cljs"} balance-left ^{:arglists (^{:end-column 40, :end-line 6169, :column 21, :line 6169, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6169, :column 22, :line 6169, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6169, :column 26, :line 6169, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6169, :column 30, :line 6169, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6169, :column 34, :line 6169, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6169, :column 8, :line 6169, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 6169, :column 22, :line 6169, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6169, :column 26, :line 6169, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6169, :column 30, :line 6169, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6169, :column 34, :line 6169, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6169, :column 21, :line 6169, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6169, :column 22, :line 6169, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6169, :column 26, :line 6169, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6169, :column 30, :line 6169, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6169, :column 34, :line 6169, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6169, :column 8, :line 6169, :file "cljs/core.cljs"} balance-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 2226, :column 17, :line 2226, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2226, :column 18, :line 2226, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2226, :column 8, :line 2226, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2226, :column 12, :line 2226, :file "cljs/core.cljs"} rseq ^{:arglists (^{:end-column 23, :end-line 2226, :column 17, :line 2226, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2226, :column 18, :line 2226, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2226, :column 8, :line 2226, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2226, :column 12, :line 2226, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj [^{:end-column 23, :end-line 2226, :column 18, :line 2226, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2226, :column 17, :line 2226, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2226, :column 18, :line 2226, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2226, :column 8, :line 2226, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2226, :column 12, :line 2226, :file "cljs/core.cljs"} rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8772, :column 3, :line 8772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8772, :column 4, :line 8772, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8767, :column 7, :line 8767, :file "cljs/core.cljs"} ex-cause ^{:arglists (^{:end-column 7, :end-line 8772, :column 3, :line 8772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8772, :column 4, :line 8772, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8767, :column 7, :line 8767, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8772, :column 4, :line 8772, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8772, :column 3, :line 8772, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8772, :column 4, :line 8772, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8767, :column 7, :line 8767, :file "cljs/core.cljs"} ex-cause, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 387, :column 14, :line 387, :file "cljs/core.cljs"} IReset ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 387, :column 14, :line 387, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 387, :column 14, :line 387, :file "cljs/core.cljs"} IReset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 236, :column 14, :line 236, :file "cljs/core.cljs"} IEmptyableCollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 35, :end-line 236, :column 14, :line 236, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 236, :column 14, :line 236, :file "cljs/core.cljs"} IEmptyableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4916, :column 27, :line 4916, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4916, :column 28, :line 4916, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4916, :column 30, :line 4916, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4916, :column 8, :line 4916, :file "cljs/core.cljs"} array-map-index-of ^{:arglists (^{:end-column 32, :end-line 4916, :column 27, :line 4916, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4916, :column 28, :line 4916, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4916, :column 30, :line 4916, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4916, :column 8, :line 4916, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 4916, :column 28, :line 4916, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4916, :column 30, :line 4916, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4916, :column 27, :line 4916, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4916, :column 28, :line 4916, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4916, :column 30, :line 4916, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4916, :column 8, :line 4916, :file "cljs/core.cljs"} array-map-index-of, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8763, :column 3, :line 8763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8763, :column 4, :line 8763, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8759, :column 7, :line 8759, :file "cljs/core.cljs"} ex-message ^{:arglists (^{:end-column 7, :end-line 8763, :column 3, :line 8763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8763, :column 4, :line 8763, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8759, :column 7, :line 8759, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8763, :column 4, :line 8763, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8763, :column 3, :line 8763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8763, :column 4, :line 8763, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8759, :column 7, :line 8759, :file "cljs/core.cljs"} ex-message, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7726, :column 20, :line 7726, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7726, :column 21, :line 7726, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7726, :column 7, :line 7726, :file "cljs/core.cljs"} string-print ^{:arglists (^{:end-column 23, :end-line 7726, :column 20, :line 7726, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7726, :column 21, :line 7726, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7726, :column 7, :line 7726, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 23, :end-line 7726, :column 21, :line 7726, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7726, :column 20, :line 7726, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7726, :column 21, :line 7726, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7726, :column 7, :line 7726, :file "cljs/core.cljs"} string-print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1788, :column 21, :line 1788, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1788, :column 22, :line 1788, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} float ^{:arglists (^{:end-column 24, :end-line 1788, :column 21, :line 1788, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1788, :column 22, :line 1788, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1788, :column 22, :line 1788, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1788, :column 21, :line 1788, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1788, :column 22, :line 1788, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8097, :column 1, :line 8097, :file "cljs/core.cljs"} fixture2 ^{:end-column 17, :end-line 8097, :column 1, :line 8097, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8097, :column 1, :line 8097, :file "cljs/core.cljs"} fixture2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} IRecord ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} IRecord, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 3324, :column 10, :line 3324, :file "cljs/core.cljs"} pr-str ^{:arglists (^{:end-column 11, :end-line 7866, :column 3, :line 7866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7866, :column 4, :line 7866, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7866, :column 6, :line 7866, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7864, :column 7, :line 7864, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7866, :column 6, :line 7866, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7866, :column 3, :line 7866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7866, :column 4, :line 7866, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7866, :column 6, :line 7866, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7864, :column 7, :line 7864, :file "cljs/core.cljs"} pr-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 3936, :column 32, :line 3936, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3936, :column 33, :line 3936, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3936, :column 8, :line 3936, :file "cljs/core.cljs"} first-array-for-longvec ^{:arglists (^{:end-column 36, :end-line 3936, :column 32, :line 3936, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3936, :column 33, :line 3936, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3936, :column 8, :line 3936, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 3936, :column 33, :line 3936, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 3936, :column 32, :line 3936, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3936, :column 33, :line 3936, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3936, :column 8, :line 3936, :file "cljs/core.cljs"} first-array-for-longvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2694, :column 4, :line 2694, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2694, :column 5, :line 2694, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2695, :column 4, :line 2695, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2695, :column 5, :line 2695, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2695, :column 7, :line 2695, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2703, :column 4, :line 2703, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2703, :column 5, :line 2703, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2703, :column 7, :line 2703, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2703, :column 9, :line 2703, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2703, :column 11, :line 2703, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} concat ^{:arglists (^{:end-column 6, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2694, :column 4, :line 2694, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2694, :column 5, :line 2694, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2695, :column 4, :line 2695, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2695, :column 5, :line 2695, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2695, :column 7, :line 2695, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2703, :column 4, :line 2703, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2703, :column 5, :line 2703, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2703, :column 7, :line 2703, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2703, :column 9, :line 2703, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2703, :column 11, :line 2703, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2694, :column 5, :line 2694, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2695, :column 5, :line 2695, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2695, :column 7, :line 2695, :file "cljs/core.cljs"} y] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2703, :column 5, :line 2703, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2703, :column 7, :line 2703, :file "cljs/core.cljs"} y & ^{:end-column 14, :end-line 2703, :column 11, :line 2703, :file "cljs/core.cljs"} zs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2693, :column 4, :line 2693, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2694, :column 4, :line 2694, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2694, :column 5, :line 2694, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2695, :column 4, :line 2695, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2695, :column 5, :line 2695, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2695, :column 7, :line 2695, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2703, :column 4, :line 2703, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2703, :column 5, :line 2703, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2703, :column 7, :line 2703, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2703, :column 9, :line 2703, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2703, :column 11, :line 2703, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2691, :column 7, :line 2691, :file "cljs/core.cljs"} concat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 8504, :column 13, :line 8504, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8504, :column 14, :line 8504, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8504, :column 4, :line 8504, :file "cljs/core.cljs"} -methods ^{:arglists (^{:end-column 17, :end-line 8504, :column 13, :line 8504, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8504, :column 14, :line 8504, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8504, :column 4, :line 8504, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8504, :column 14, :line 8504, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8504, :column 13, :line 8504, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8504, :column 14, :line 8504, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8504, :column 4, :line 8504, :file "cljs/core.cljs"} -methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 286, :column 14, :line 286, :file "cljs/core.cljs"} IDerefWithTimeout ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 286, :column 14, :line 286, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 32, :end-line 286, :column 14, :line 286, :file "cljs/core.cljs"} IDerefWithTimeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 593, :column 4, :line 593, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 593, :column 5, :line 593, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 597, :column 8, :line 597, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 592, :column 7, :line 592, :file "cljs/core.cljs"} symbol ^{:arglists (^{:end-column 10, :end-line 593, :column 4, :line 593, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 593, :column 5, :line 593, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 597, :column 8, :line 597, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 592, :column 7, :line 592, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 593, :column 5, :line 593, :file "cljs/core.cljs"} name] ^cljs.core/Symbol [^{:end-column 8, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 597, :column 8, :line 597, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 593, :column 4, :line 593, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 593, :column 5, :line 593, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 597, :column 8, :line 597, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 592, :column 7, :line 592, :file "cljs/core.cljs"} symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2587, :column 3, :line 2587, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2584, :column 7, :line 2584, :file "cljs/core.cljs"} to-array-2d ^{:arglists (^{:end-column 9, :end-line 2587, :column 3, :line 2587, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2584, :column 7, :line 2584, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 9, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2587, :column 3, :line 2587, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2587, :column 4, :line 2587, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2584, :column 7, :line 2584, :file "cljs/core.cljs"} to-array-2d, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4252, :column 10, :line 4252, :file "cljs/core.cljs"} Subvec {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4252, :column 10, :line 4252, :file "cljs/core.cljs"} Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 4252, :column 17, :line 4252, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4252, :column 18, :line 4252, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4252, :column 23, :line 4252, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4252, :column 25, :line 4252, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4252, :column 31, :line 4252, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4252, :column 45, :line 4252, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8736, :column 10, :line 8736, :file "cljs/core.cljs"} ExceptionInfo {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8736, :column 10, :line 8736, :file "cljs/core.cljs"} ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 44, :end-line 8736, :column 24, :line 8736, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8736, :column 25, :line 8736, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8736, :column 33, :line 8736, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8736, :column 38, :line 8736, :file "cljs/core.cljs"} cause], :protocols #{}}, ^{:declared true, :end-column 14, :end-line 1850, :column 10, :line 1850, :file "cljs/core.cljs"} mod ^{:arglists (^{:end-column 8, :end-line 1910, :column 3, :line 1910, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1910, :column 4, :line 1910, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1910, :column 6, :line 1910, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1908, :column 7, :line 1908, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1910, :column 4, :line 1910, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1910, :column 6, :line 1910, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1910, :column 3, :line 1910, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1910, :column 4, :line 1910, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1910, :column 6, :line 1910, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1908, :column 7, :line 1908, :file "cljs/core.cljs"} mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 273, :column 14, :line 273, :file "cljs/core.cljs"} ISet ^{:impls #{cljs.core/PersistentHashSet cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 19, :end-line 273, :column 14, :line 273, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 273, :column 14, :line 273, :file "cljs/core.cljs"} ISet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1315, :column 3, :line 1315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1315, :column 4, :line 1315, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} pop ^{:arglists (^{:end-column 9, :end-line 1315, :column 3, :line 1315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1315, :column 4, :line 1315, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1315, :column 4, :line 1315, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1315, :column 3, :line 1315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1315, :column 4, :line 1315, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1311, :column 7, :line 1311, :file "cljs/core.cljs"} pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} IPending ^{:impls #{cljs.core/Delay}, :protocol-symbol true, :end-column 23, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} IPending, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 325, :column 15, :line 325, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 325, :column 16, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 325, :column 21, :line 325, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} -entry-key ^{:arglists (^{:end-column 27, :end-line 325, :column 15, :line 325, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 325, :column 16, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 325, :column 21, :line 325, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 325, :column 16, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 325, :column 21, :line 325, :file "cljs/core.cljs"} entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 325, :column 15, :line 325, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 325, :column 16, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 325, :column 21, :line 325, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 325, :column 4, :line 325, :file "cljs/core.cljs"} -entry-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 3970, :column 17, :line 3970, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3970, :column 18, :line 3970, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3970, :column 21, :line 3970, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3970, :column 27, :line 3970, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3970, :column 8, :line 3970, :file "cljs/core.cljs"} pop-tail ^{:arglists (^{:end-column 32, :end-line 3970, :column 17, :line 3970, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3970, :column 18, :line 3970, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3970, :column 21, :line 3970, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3970, :column 27, :line 3970, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3970, :column 8, :line 3970, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 3970, :column 18, :line 3970, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3970, :column 21, :line 3970, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3970, :column 27, :line 3970, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 3970, :column 17, :line 3970, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3970, :column 18, :line 3970, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3970, :column 21, :line 3970, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3970, :column 27, :line 3970, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3970, :column 8, :line 3970, :file "cljs/core.cljs"} pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2768, :column 4, :line 2768, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2768, :column 5, :line 2768, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2768, :column 11, :line 2768, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2770, :column 15, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2770, :column 17, :line 2770, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2766, :column 7, :line 2766, :file "cljs/core.cljs"} dissoc! ^{:arglists (^{:end-column 15, :end-line 2768, :column 4, :line 2768, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2768, :column 5, :line 2768, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2768, :column 11, :line 2768, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2770, :column 15, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2770, :column 17, :line 2770, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2766, :column 7, :line 2766, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2768, :column 5, :line 2768, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2768, :column 11, :line 2768, :file "cljs/core.cljs"} key] ^^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} key & ^{:end-column 20, :end-line 2770, :column 17, :line 2770, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2768, :column 4, :line 2768, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2768, :column 5, :line 2768, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2768, :column 11, :line 2768, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2770, :column 4, :line 2770, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2770, :column 5, :line 2770, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2770, :column 11, :line 2770, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2770, :column 15, :line 2770, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2770, :column 17, :line 2770, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2766, :column 7, :line 2766, :file "cljs/core.cljs"} dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7581, :column 4, :line 7581, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7581, :column 5, :line 7581, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7581, :column 7, :line 7581, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7586, :column 4, :line 7586, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7586, :column 5, :line 7586, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7586, :column 7, :line 7586, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7586, :column 12, :line 7586, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} reductions ^{:arglists (^{:end-column 12, :end-line 7581, :column 4, :line 7581, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7581, :column 5, :line 7581, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7581, :column 7, :line 7581, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7586, :column 4, :line 7586, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7586, :column 5, :line 7586, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7586, :column 7, :line 7586, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7586, :column 12, :line 7586, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 7581, :column 5, :line 7581, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7581, :column 7, :line 7581, :file "cljs/core.cljs"} coll] ^cljs.core/Cons [^{:end-column 7, :end-line 7586, :column 5, :line 7586, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7586, :column 7, :line 7586, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7586, :column 12, :line 7586, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7581, :column 4, :line 7581, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7581, :column 5, :line 7581, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7581, :column 7, :line 7581, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7586, :column 4, :line 7586, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7586, :column 5, :line 7586, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7586, :column 7, :line 7586, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7586, :column 12, :line 7586, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} reductions, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 856, :column 3, :line 856, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 856, :column 4, :line 856, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 854, :column 8, :line 854, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 854, :column 16, :line 854, :file "cljs/core.cljs"} indexed? ^{:arglists (^{:end-column 6, :end-line 856, :column 3, :line 856, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 856, :column 4, :line 856, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 854, :column 8, :line 854, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 854, :column 16, :line 854, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 856, :column 4, :line 856, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 856, :column 3, :line 856, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 856, :column 4, :line 856, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 854, :column 8, :line 854, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 854, :column 16, :line 854, :file "cljs/core.cljs"} indexed?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1691, :column 4, :line 1691, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1691, :column 5, :line 1691, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1692, :column 4, :line 1692, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1692, :column 5, :line 1692, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1692, :column 7, :line 1692, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1693, :column 4, :line 1693, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1693, :column 5, :line 1693, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1693, :column 7, :line 1693, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1693, :column 9, :line 1693, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1693, :column 11, :line 1693, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1688, :column 8, :line 1688, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1688, :column 15, :line 1688, :file "cljs/core.cljs"} - ^{:arglists (^{:end-column 7, :end-line 1691, :column 4, :line 1691, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1691, :column 5, :line 1691, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1692, :column 4, :line 1692, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1692, :column 5, :line 1692, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1692, :column 7, :line 1692, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1693, :column 4, :line 1693, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1693, :column 5, :line 1693, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1693, :column 7, :line 1693, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1693, :column 9, :line 1693, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1693, :column 11, :line 1693, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1688, :column 8, :line 1688, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1688, :column 15, :line 1688, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1691, :column 5, :line 1691, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1692, :column 5, :line 1692, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1692, :column 7, :line 1692, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1693, :column 5, :line 1693, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1693, :column 7, :line 1693, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1693, :column 11, :line 1693, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1691, :column 4, :line 1691, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1691, :column 5, :line 1691, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1692, :column 4, :line 1692, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1692, :column 5, :line 1692, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1692, :column 7, :line 1692, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1693, :column 4, :line 1693, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1693, :column 5, :line 1693, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1693, :column 7, :line 1693, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1693, :column 9, :line 1693, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1693, :column 11, :line 1693, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1688, :column 8, :line 1688, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1688, :column 15, :line 1688, :file "cljs/core.cljs"} -, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 302, :column 20, :line 302, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 302, :column 21, :line 302, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 302, :column 13, :line 302, :file "cljs/core.cljs"} -equiv ^{:arglists (^{:end-column 29, :end-line 302, :column 20, :line 302, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 302, :column 21, :line 302, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 302, :column 13, :line 302, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 302, :column 21, :line 302, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 302, :column 20, :line 302, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 302, :column 21, :line 302, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 302, :column 13, :line 302, :file "cljs/core.cljs"} -equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr])} ->ArrayNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/ArrayNode [^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr])} ->ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2758, :column 4, :line 2758, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2758, :column 5, :line 2758, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2758, :column 11, :line 2758, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2758, :column 15, :line 2758, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2760, :column 4, :line 2760, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2760, :column 5, :line 2760, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2760, :column 11, :line 2760, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2760, :column 15, :line 2760, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2760, :column 19, :line 2760, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2760, :column 21, :line 2760, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2754, :column 7, :line 2754, :file "cljs/core.cljs"} assoc! ^{:arglists (^{:end-column 19, :end-line 2758, :column 4, :line 2758, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2758, :column 5, :line 2758, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2758, :column 11, :line 2758, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2758, :column 15, :line 2758, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2760, :column 4, :line 2760, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2760, :column 5, :line 2760, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2760, :column 11, :line 2760, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2760, :column 15, :line 2760, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2760, :column 19, :line 2760, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2760, :column 21, :line 2760, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2754, :column 7, :line 2754, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2758, :column 5, :line 2758, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2758, :column 11, :line 2758, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2758, :column 15, :line 2758, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2760, :column 5, :line 2760, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2760, :column 11, :line 2760, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2760, :column 15, :line 2760, :file "cljs/core.cljs"} val & ^{:end-column 25, :end-line 2760, :column 21, :line 2760, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2758, :column 4, :line 2758, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2758, :column 5, :line 2758, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2758, :column 11, :line 2758, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2758, :column 15, :line 2758, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2760, :column 4, :line 2760, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2760, :column 5, :line 2760, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2760, :column 11, :line 2760, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2760, :column 15, :line 2760, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2760, :column 19, :line 2760, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2760, :column 21, :line 2760, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2754, :column 7, :line 2754, :file "cljs/core.cljs"} assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7234, :column 4, :line 7234, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7235, :column 4, :line 7235, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7235, :column 5, :line 7235, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7235, :column 7, :line 7235, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7233, :column 7, :line 7233, :file "cljs/core.cljs"} hash-set ^{:arglists (^{:end-column 6, :end-line 7234, :column 4, :line 7234, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7235, :column 4, :line 7235, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7235, :column 5, :line 7235, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7235, :column 7, :line 7235, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7233, :column 7, :line 7233, :file "cljs/core.cljs"} {:arglists (^cljs.core/ISet [] [& ^{:end-column 12, :end-line 7235, :column 7, :line 7235, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7234, :column 4, :line 7234, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7235, :column 4, :line 7235, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7235, :column 5, :line 7235, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7235, :column 7, :line 7235, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7233, :column 7, :line 7233, :file "cljs/core.cljs"} hash-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1652, :column 4, :line 1652, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1652, :column 5, :line 1652, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1652, :column 7, :line 1652, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1652, :column 12, :line 1652, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} reduce-kv ^{:arglists (^{:end-column 17, :end-line 1652, :column 4, :line 1652, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1652, :column 5, :line 1652, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1652, :column 7, :line 1652, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1652, :column 12, :line 1652, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1652, :column 5, :line 1652, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1652, :column 7, :line 1652, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1652, :column 12, :line 1652, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1652, :column 4, :line 1652, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1652, :column 5, :line 1652, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1652, :column 7, :line 1652, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1652, :column 12, :line 1652, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1645, :column 7, :line 1645, :file "cljs/core.cljs"} reduce-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 3329, :column 3, :line 3329, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3329, :column 4, :line 3329, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 3329, :column 6, :line 3329, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 14, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} reset! ^{:declared true, :end-column 56, :end-line 5244, :column 49, :line 5244, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 56, :end-line 5244, :column 49, :line 5244, :file "cljs/core.cljs"} reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 2053, :column 14, :line 2053, :file "cljs/core.cljs"} name ^{:arglists (^{:end-column 6, :end-line 7288, :column 3, :line 7288, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7288, :column 4, :line 7288, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 7286, :column 7, :line 7286, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7288, :column 4, :line 7288, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7288, :column 3, :line 7288, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7288, :column 4, :line 7288, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 7286, :column 7, :line 7286, :file "cljs/core.cljs"} name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash])} ->RedNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/RedNode [^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash])} ->RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3944, :column 28, :line 3944, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3944, :column 29, :line 3944, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3944, :column 32, :line 3944, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3944, :column 8, :line 3944, :file "cljs/core.cljs"} unchecked-array-for ^{:arglists (^{:end-column 34, :end-line 3944, :column 28, :line 3944, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3944, :column 29, :line 3944, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3944, :column 32, :line 3944, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3944, :column 8, :line 3944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 3944, :column 29, :line 3944, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3944, :column 32, :line 3944, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3944, :column 28, :line 3944, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3944, :column 29, :line 3944, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3944, :column 32, :line 3944, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3944, :column 8, :line 3944, :file "cljs/core.cljs"} unchecked-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} Fn ^{:impls #{^{:end-column 23, :end-line 747, :column 14, :line 747, :file "cljs/core.cljs"} function cljs.core/MetaFn}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} Fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 997, :column 3, :line 997, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 997, :column 4, :line 997, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 995, :column 7, :line 995, :file "cljs/core.cljs"} ffirst ^{:arglists (^{:end-column 9, :end-line 997, :column 3, :line 997, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 997, :column 4, :line 997, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 995, :column 7, :line 995, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 997, :column 4, :line 997, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 997, :column 3, :line 997, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 997, :column 4, :line 997, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 995, :column 7, :line 995, :file "cljs/core.cljs"} ffirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7239, :column 4, :line 7239, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7239, :column 5, :line 7239, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7239, :column 7, :line 7239, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7237, :column 7, :line 7237, :file "cljs/core.cljs"} sorted-set ^{:arglists (^{:end-column 12, :end-line 7239, :column 4, :line 7239, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7239, :column 5, :line 7239, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7239, :column 7, :line 7239, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7237, :column 7, :line 7237, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 12, :end-line 7239, :column 7, :line 7239, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7239, :column 4, :line 7239, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7239, :column 5, :line 7239, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7239, :column 7, :line 7239, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7237, :column 7, :line 7237, :file "cljs/core.cljs"} sorted-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7856, :column 3, :line 7856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7856, :column 4, :line 7856, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7856, :column 9, :line 7856, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7853, :column 8, :line 7853, :file "cljs/core.cljs"} pr-with-opts ^{:arglists (^{:end-column 14, :end-line 7856, :column 3, :line 7856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7856, :column 4, :line 7856, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7856, :column 9, :line 7856, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7853, :column 8, :line 7853, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7856, :column 4, :line 7856, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7856, :column 9, :line 7856, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7856, :column 3, :line 7856, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7856, :column 4, :line 7856, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7856, :column 9, :line 7856, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7853, :column 8, :line 7853, :file "cljs/core.cljs"} pr-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6620, :column 10, :line 6620, :file "cljs/core.cljs"} PersistentTreeMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6620, :column 10, :line 6620, :file "cljs/core.cljs"} PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 6620, :column 28, :line 6620, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 6620, :column 29, :line 6620, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6620, :column 34, :line 6620, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6620, :column 39, :line 6620, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6620, :column 43, :line 6620, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6620, :column 58, :line 6620, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 818, :column 4, :line 818, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 818, :column 5, :line 818, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 818, :column 9, :line 818, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 829, :column 4, :line 829, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 829, :column 5, :line 829, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 829, :column 9, :line 829, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 829, :column 11, :line 829, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 838, :column 4, :line 838, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 838, :column 5, :line 838, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 838, :column 9, :line 838, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 838, :column 11, :line 838, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 838, :column 15, :line 838, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 817, :column 8, :line 817, :file "cljs/core.cljs"} array-reduce ^{:arglists (^{:end-column 11, :end-line 818, :column 4, :line 818, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 818, :column 5, :line 818, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 818, :column 9, :line 818, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 829, :column 4, :line 829, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 829, :column 5, :line 829, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 829, :column 9, :line 829, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 829, :column 11, :line 829, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 838, :column 4, :line 838, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 838, :column 5, :line 838, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 838, :column 9, :line 838, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 838, :column 11, :line 838, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 838, :column 15, :line 838, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 817, :column 8, :line 817, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 818, :column 5, :line 818, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 818, :column 9, :line 818, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 829, :column 5, :line 829, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 829, :column 9, :line 829, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 829, :column 11, :line 829, :file "cljs/core.cljs"} val] [^{:end-column 9, :end-line 838, :column 5, :line 838, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 838, :column 9, :line 838, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 838, :column 11, :line 838, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 838, :column 15, :line 838, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 818, :column 4, :line 818, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 818, :column 5, :line 818, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 818, :column 9, :line 818, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 829, :column 4, :line 829, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 829, :column 5, :line 829, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 829, :column 9, :line 829, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 829, :column 11, :line 829, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 838, :column 4, :line 838, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 838, :column 5, :line 838, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 838, :column 9, :line 838, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 838, :column 11, :line 838, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 838, :column 15, :line 838, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 817, :column 8, :line 817, :file "cljs/core.cljs"} array-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 850, :column 8, :line 850, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 850, :column 16, :line 850, :file "cljs/core.cljs"} counted? ^{:arglists (^{:end-column 6, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 850, :column 8, :line 850, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 850, :column 16, :line 850, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 852, :column 3, :line 852, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 852, :column 4, :line 852, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 850, :column 8, :line 850, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 850, :column 16, :line 850, :file "cljs/core.cljs"} counted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8140, :column 4, :line 8140, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8140, :column 5, :line 8140, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 8147, :column 4, :line 8147, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8147, :column 5, :line 8147, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} coll]), :doc "maps f over coll and concatenates the results.  Thus function f\n  should return a collection.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 8136, :column 7, :line 8136, :file "cljs/core.cljs"} flatmap ^{:arglists (^{:end-column 7, :end-line 8140, :column 4, :line 8140, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8140, :column 5, :line 8140, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 8147, :column 4, :line 8147, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8147, :column 5, :line 8147, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} coll]), :doc "maps f over coll and concatenates the results.  Thus function f\n  should return a collection.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 8136, :column 7, :line 8136, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 8140, :column 5, :line 8140, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 8147, :column 5, :line 8147, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8140, :column 4, :line 8140, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8140, :column 5, :line 8140, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 8147, :column 4, :line 8147, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8147, :column 5, :line 8147, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} coll]), :doc "maps f over coll and concatenates the results.  Thus function f\n  should return a collection.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 8136, :column 7, :line 8136, :file "cljs/core.cljs"} flatmap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7896, :column 3, :line 7896, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7896, :column 4, :line 7896, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7896, :column 6, :line 7896, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7894, :column 7, :line 7894, :file "cljs/core.cljs"} println ^{:arglists (^{:end-column 11, :end-line 7896, :column 3, :line 7896, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7896, :column 4, :line 7896, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7896, :column 6, :line 7896, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7894, :column 7, :line 7894, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 7896, :column 6, :line 7896, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7896, :column 3, :line 7896, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7896, :column 4, :line 7896, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7896, :column 6, :line 7896, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 7894, :column 7, :line 7894, :file "cljs/core.cljs"} println, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3853, :column 3, :line 3853, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3853, :column 4, :line 3853, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3853, :column 6, :line 3853, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3853, :column 7, :line 3853, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3853, :column 9, :line 3853, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3853, :column 11, :line 3853, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3853, :column 15, :line 3853, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3849, :column 7, :line 3849, :file "cljs/core.cljs"} assoc-in ^{:arglists (^{:end-column 17, :end-line 3853, :column 3, :line 3853, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3853, :column 4, :line 3853, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3853, :column 6, :line 3853, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3853, :column 7, :line 3853, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3853, :column 9, :line 3853, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3853, :column 11, :line 3853, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3853, :column 15, :line 3853, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3849, :column 7, :line 3849, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3853, :column 4, :line 3853, :file "cljs/core.cljs"} m p__10006 ^{:end-column 17, :end-line 3853, :column 15, :line 3853, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3853, :column 3, :line 3853, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3853, :column 4, :line 3853, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3853, :column 6, :line 3853, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3853, :column 7, :line 3853, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3853, :column 9, :line 3853, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3853, :column 11, :line 3853, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3853, :column 15, :line 3853, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3849, :column 7, :line 3849, :file "cljs/core.cljs"} assoc-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6989, :column 10, :line 6989, :file "cljs/core.cljs"} PersistentHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 6989, :column 10, :line 6989, :file "cljs/core.cljs"} PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 6989, :column 28, :line 6989, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6989, :column 29, :line 6989, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6989, :column 34, :line 6989, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 6989, :column 53, :line 6989, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1971, :column 3, :line 1971, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1971, :column 4, :line 1971, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1971, :column 6, :line 1971, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1969, :column 7, :line 1969, :file "cljs/core.cljs"} bit-test ^{:arglists (^{:end-column 8, :end-line 1971, :column 3, :line 1971, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1971, :column 4, :line 1971, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1971, :column 6, :line 1971, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1969, :column 7, :line 1969, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1971, :column 4, :line 1971, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1971, :column 6, :line 1971, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1971, :column 3, :line 1971, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1971, :column 4, :line 1971, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1971, :column 6, :line 1971, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1969, :column 7, :line 1969, :file "cljs/core.cljs"} bit-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5231, :column 10, :line 5231, :file "cljs/core.cljs"} TransientHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6001, :column 10, :line 6001, :file "cljs/core.cljs"} TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 6005, :column 27, :line 6001, :file "cljs/core.cljs"} [^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val], :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash])} ->PersistentHashMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentHashMap [^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5864, :column 29, :line 5864, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5864, :column 34, :line 5864, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5864, :column 38, :line 5864, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5864, :column 44, :line 5864, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5864, :column 52, :line 5864, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5864, :column 61, :line 5864, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5864, :column 79, :line 5864, :file "cljs/core.cljs"} __hash])} ->PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} ISwap ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} ISwap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 1380, :column 10, :line 1380, :file "cljs/core.cljs"} ChunkedCons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2488, :column 10, :line 2488, :file "cljs/core.cljs"} ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 2488, :column 22, :line 2488, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2488, :column 23, :line 2488, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2488, :column 29, :line 2488, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2488, :column 34, :line 2488, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2488, :column 49, :line 2488, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8278, :column 3, :line 8278, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8278, :column 4, :line 8278, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8273, :column 7, :line 8273, :file "cljs/core.cljs"} memoize ^{:arglists (^{:end-column 6, :end-line 8278, :column 3, :line 8278, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8278, :column 4, :line 8278, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8273, :column 7, :line 8273, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 8278, :column 4, :line 8278, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8278, :column 3, :line 8278, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8278, :column 4, :line 8278, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8273, :column 7, :line 8273, :file "cljs/core.cljs"} memoize, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8041, :column 3, :line 8041, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8041, :column 4, :line 8041, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8041, :column 9, :line 8041, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8041, :column 11, :line 8041, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8041, :column 13, :line 8041, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8035, :column 7, :line 8035, :file "cljs/core.cljs"} alter-meta! ^{:arglists (^{:end-column 18, :end-line 8041, :column 3, :line 8041, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8041, :column 4, :line 8041, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8041, :column 9, :line 8041, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8041, :column 11, :line 8041, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8041, :column 13, :line 8041, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8035, :column 7, :line 8035, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8041, :column 4, :line 8041, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8041, :column 9, :line 8041, :file "cljs/core.cljs"} f & ^{:end-column 18, :end-line 8041, :column 13, :line 8041, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8041, :column 3, :line 8041, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8041, :column 4, :line 8041, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8041, :column 9, :line 8041, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8041, :column 11, :line 8041, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8041, :column 13, :line 8041, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8035, :column 7, :line 8035, :file "cljs/core.cljs"} alter-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb])} ->StringBufferWriter ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb])} {:arglists (^cljs.core/StringBufferWriter [^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 395, :column 30, :line 395, :file "cljs/core.cljs"} sb])} ->StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2014, :column 22, :line 2014, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2014, :column 23, :line 2014, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2014, :column 8, :line 2014, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2014, :column 16, :line 2014, :file "cljs/core.cljs"} zero? ^{:arglists (^{:end-column 25, :end-line 2014, :column 22, :line 2014, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2014, :column 23, :line 2014, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2014, :column 8, :line 2014, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2014, :column 16, :line 2014, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 2014, :column 23, :line 2014, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2014, :column 22, :line 2014, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2014, :column 23, :line 2014, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2014, :column 8, :line 2014, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2014, :column 16, :line 2014, :file "cljs/core.cljs"} zero?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4368, :column 27, :line 4368, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4368, :column 28, :line 4368, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4368, :column 33, :line 4368, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4368, :column 8, :line 4368, :file "cljs/core.cljs"} tv-ensure-editable ^{:arglists (^{:end-column 38, :end-line 4368, :column 27, :line 4368, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4368, :column 28, :line 4368, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4368, :column 33, :line 4368, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4368, :column 8, :line 4368, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 4368, :column 28, :line 4368, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4368, :column 33, :line 4368, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4368, :column 27, :line 4368, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4368, :column 28, :line 4368, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4368, :column 33, :line 4368, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4368, :column 8, :line 4368, :file "cljs/core.cljs"} tv-ensure-editable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn* ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 281, :column 18, :line 281, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 281, :column 19, :line 281, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 281, :column 24, :line 281, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 281, :column 26, :line 281, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 281, :column 5, :line 281, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 281, :column 9, :line 281, :file "cljs/core.cljs"} -assoc-n ^{:arglists (^{:end-column 30, :end-line 281, :column 18, :line 281, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 281, :column 19, :line 281, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 281, :column 24, :line 281, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 281, :column 26, :line 281, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 281, :column 5, :line 281, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 281, :column 9, :line 281, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 281, :column 19, :line 281, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 281, :column 24, :line 281, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 281, :column 26, :line 281, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 281, :column 18, :line 281, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 281, :column 19, :line 281, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 281, :column 24, :line 281, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 281, :column 26, :line 281, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 281, :column 5, :line 281, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 281, :column 9, :line 281, :file "cljs/core.cljs"} -assoc-n, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1814, :column 25, :line 1814, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1814, :column 26, :line 1814, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1814, :column 7, :line 1814, :file "cljs/core.cljs"} unchecked-dec-int ^{:arglists (^{:end-column 28, :end-line 1814, :column 25, :line 1814, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1814, :column 26, :line 1814, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1814, :column 7, :line 1814, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1814, :column 26, :line 1814, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1814, :column 25, :line 1814, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1814, :column 26, :line 1814, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1814, :column 7, :line 1814, :file "cljs/core.cljs"} unchecked-dec-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2077, :column 18, :line 2077, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2077, :column 19, :line 2077, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2077, :column 8, :line 2077, :file "cljs/core.cljs"} hash-imap ^{:arglists (^{:end-column 21, :end-line 2077, :column 18, :line 2077, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2077, :column 19, :line 2077, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2077, :column 8, :line 2077, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 2077, :column 19, :line 2077, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2077, :column 18, :line 2077, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2077, :column 19, :line 2077, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2077, :column 8, :line 2077, :file "cljs/core.cljs"} hash-imap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8470, :column 3, :line 8470, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8470, :column 4, :line 8470, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8470, :column 6, :line 8470, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8470, :column 8, :line 8470, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8469, :column 8, :line 8469, :file "cljs/core.cljs"} dominates ^{:arglists (^{:end-column 21, :end-line 8470, :column 3, :line 8470, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8470, :column 4, :line 8470, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8470, :column 6, :line 8470, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8470, :column 8, :line 8470, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8469, :column 8, :line 8469, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8470, :column 4, :line 8470, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8470, :column 6, :line 8470, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8470, :column 8, :line 8470, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8470, :column 3, :line 8470, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8470, :column 4, :line 8470, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8470, :column 6, :line 8470, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8470, :column 8, :line 8470, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8469, :column 8, :line 8469, :file "cljs/core.cljs"} dominates, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2734, :column 7, :line 2734, :file "cljs/core.cljs"} persistent! ^{:arglists (^{:end-column 10, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2734, :column 7, :line 2734, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2738, :column 3, :line 2738, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2738, :column 4, :line 2738, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2734, :column 7, :line 2734, :file "cljs/core.cljs"} persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn! ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} nnext ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} nnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5242, :column 10, :line 5242, :file "cljs/core.cljs"} Box {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5242, :column 10, :line 5242, :file "cljs/core.cljs"} Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 29, :end-line 5242, :column 14, :line 5242, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val], :protocols #{}}, StringBuffer {:op :js-var, :ns goog.string, :name StringBuffer}, ^{:arglists (^{:end-column 40, :end-line 6194, :column 22, :line 6194, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6194, :column 23, :line 6194, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6194, :column 27, :line 6194, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6194, :column 31, :line 6194, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6194, :column 36, :line 6194, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6194, :column 8, :line 6194, :file "cljs/core.cljs"} balance-right ^{:arglists (^{:end-column 40, :end-line 6194, :column 22, :line 6194, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6194, :column 23, :line 6194, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6194, :column 27, :line 6194, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6194, :column 31, :line 6194, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6194, :column 36, :line 6194, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6194, :column 8, :line 6194, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6194, :column 23, :line 6194, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6194, :column 27, :line 6194, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6194, :column 31, :line 6194, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6194, :column 36, :line 6194, :file "cljs/core.cljs"} ins]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6194, :column 22, :line 6194, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6194, :column 23, :line 6194, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6194, :column 27, :line 6194, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6194, :column 31, :line 6194, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6194, :column 36, :line 6194, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6194, :column 8, :line 6194, :file "cljs/core.cljs"} balance-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 8507, :column 30, :line 8507, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8507, :column 31, :line 8507, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8507, :column 36, :line 8507, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8507, :column 8, :line 8507, :file "cljs/core.cljs"} throw-no-method-error ^{:arglists (^{:end-column 49, :end-line 8507, :column 30, :line 8507, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8507, :column 31, :line 8507, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8507, :column 36, :line 8507, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8507, :column 8, :line 8507, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 36, :end-line 8507, :column 31, :line 8507, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8507, :column 36, :line 8507, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 8507, :column 30, :line 8507, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8507, :column 31, :line 8507, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8507, :column 36, :line 8507, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8507, :column 8, :line 8507, :file "cljs/core.cljs"} throw-no-method-error, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8070, :column 3, :line 8070, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8070, :column 4, :line 8070, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8070, :column 9, :line 8070, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8070, :column 13, :line 8070, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8049, :column 7, :line 8049, :file "cljs/core.cljs"} add-watch ^{:arglists (^{:end-column 15, :end-line 8070, :column 3, :line 8070, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8070, :column 4, :line 8070, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8070, :column 9, :line 8070, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8070, :column 13, :line 8070, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8049, :column 7, :line 8049, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8070, :column 4, :line 8070, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8070, :column 9, :line 8070, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8070, :column 13, :line 8070, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8070, :column 3, :line 8070, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8070, :column 4, :line 8070, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8070, :column 9, :line 8070, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8070, :column 13, :line 8070, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8049, :column 7, :line 8049, :file "cljs/core.cljs"} add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3117, :column 3, :line 3117, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3117, :column 4, :line 3117, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3117, :column 9, :line 3117, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3114, :column 8, :line 3114, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3114, :column 16, :line 3114, :file "cljs/core.cljs"} not-every? ^{:arglists (^{:end-column 14, :end-line 3117, :column 3, :line 3117, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3117, :column 4, :line 3117, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3117, :column 9, :line 3117, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3114, :column 8, :line 3114, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3114, :column 16, :line 3114, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 3117, :column 4, :line 3117, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3117, :column 9, :line 3117, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3117, :column 3, :line 3117, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3117, :column 4, :line 3117, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3117, :column 9, :line 3117, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3114, :column 8, :line 3114, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3114, :column 16, :line 3114, :file "cljs/core.cljs"} not-every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1921, :column 3, :line 1921, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1921, :column 4, :line 1921, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1921, :column 6, :line 1921, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} rem ^{:arglists (^{:end-column 8, :end-line 1921, :column 3, :line 1921, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1921, :column 4, :line 1921, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1921, :column 6, :line 1921, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1921, :column 4, :line 1921, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1921, :column 6, :line 1921, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1921, :column 3, :line 1921, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1921, :column 4, :line 1921, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1921, :column 6, :line 1921, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} rem, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s])} ->Iterator ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s])} {:arglists (^cljs.core/Iterator [^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 32, :end-line 4830, :column 30, :line 4830, :file "cljs/core.cljs"} s])} ->Iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 7829, :column 24, :line 7829, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7829, :column 25, :line 7829, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7829, :column 30, :line 7829, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7829, :column 8, :line 7829, :file "cljs/core.cljs"} pr-sb-with-opts ^{:arglists (^{:end-column 35, :end-line 7829, :column 24, :line 7829, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7829, :column 25, :line 7829, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7829, :column 30, :line 7829, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7829, :column 8, :line 7829, :file "cljs/core.cljs"} {:arglists (^goog.string/StringBuffer [^{:end-column 30, :end-line 7829, :column 25, :line 7829, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7829, :column 30, :line 7829, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 7829, :column 24, :line 7829, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7829, :column 25, :line 7829, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7829, :column 30, :line 7829, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7829, :column 8, :line 7829, :file "cljs/core.cljs"} pr-sb-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4856, :column 10, :line 4856, :file "cljs/core.cljs"} SetEntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4856, :column 10, :line 4856, :file "cljs/core.cljs"} SetEntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4856, :column 29, :line 4856, :file "cljs/core.cljs"} [^{:mutable true, :end-column 42, :end-line 4856, :column 40, :line 4856, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5305, :column 10, :line 5305, :file "cljs/core.cljs"} BitmapIndexedNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5305, :column 10, :line 5305, :file "cljs/core.cljs"} BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 5305, :column 28, :line 5305, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5305, :column 29, :line 5305, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5305, :column 44, :line 5305, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5305, :column 61, :line 5305, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash])} ->NodeSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/NodeSeq [^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 5738, :column 19, :line 5738, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5738, :column 24, :line 5738, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5738, :column 30, :line 5738, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5738, :column 32, :line 5738, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5738, :column 44, :line 5738, :file "cljs/core.cljs"} __hash])} ->NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3124, :column 3, :line 3124, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3124, :column 4, :line 3124, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3124, :column 9, :line 3124, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3119, :column 7, :line 3119, :file "cljs/core.cljs"} some ^{:arglists (^{:end-column 14, :end-line 3124, :column 3, :line 3124, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3124, :column 4, :line 3124, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3124, :column 9, :line 3124, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3119, :column 7, :line 3119, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3124, :column 4, :line 3124, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3124, :column 9, :line 3124, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3124, :column 3, :line 3124, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3124, :column 4, :line 3124, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3124, :column 9, :line 3124, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3119, :column 7, :line 3119, :file "cljs/core.cljs"} some, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 381, :column 14, :line 381, :file "cljs/core.cljs"} INamed ^{:impls #{cljs.core/Keyword cljs.core/Symbol}, :protocol-symbol true, :end-column 21, :end-line 381, :column 14, :line 381, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 381, :column 14, :line 381, :file "cljs/core.cljs"} INamed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val])} ->Box ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val])} {:arglists (^cljs.core/Box [^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 5242, :column 25, :line 5242, :file "cljs/core.cljs"} val])} ->Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} IReduce ^{:impls #{cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ArrayChunk cljs.core/Iteration cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 22, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} IReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3576, :column 4, :line 3576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3576, :column 5, :line 3576, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3588, :column 4, :line 3588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3588, :column 5, :line 3588, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3588, :column 7, :line 3588, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3573, :column 7, :line 3573, :file "cljs/core.cljs"} drop ^{:arglists (^{:end-column 7, :end-line 3576, :column 4, :line 3576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3576, :column 5, :line 3576, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3588, :column 4, :line 3588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3588, :column 5, :line 3588, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3588, :column 7, :line 3588, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3573, :column 7, :line 3573, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3576, :column 5, :line 3576, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3588, :column 5, :line 3588, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3588, :column 7, :line 3588, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3576, :column 4, :line 3576, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3576, :column 5, :line 3576, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3588, :column 4, :line 3588, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3588, :column 5, :line 3588, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3588, :column 7, :line 3588, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3573, :column 7, :line 3573, :file "cljs/core.cljs"} drop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1389, :column 4, :line 1389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1389, :column 5, :line 1389, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1389, :column 7, :line 1389, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1386, :column 7, :line 1386, :file "cljs/core.cljs"} js-obj ^{:arglists (^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1389, :column 4, :line 1389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1389, :column 5, :line 1389, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1389, :column 7, :line 1389, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1386, :column 7, :line 1386, :file "cljs/core.cljs"} {:arglists (^object [] [& ^{:end-column 15, :end-line 1389, :column 7, :line 1389, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1389, :column 4, :line 1389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1389, :column 5, :line 1389, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1389, :column 7, :line 1389, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1386, :column 7, :line 1386, :file "cljs/core.cljs"} js-obj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} ITransientCollection ^{:impls #{cljs.core/TransientVector cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientHashSet}, :protocol-symbol true, :end-column 35, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 35, :end-line 351, :column 14, :line 351, :file "cljs/core.cljs"} ITransientCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3278, :column 10, :line 3278, :file "cljs/core.cljs"} Atom {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3278, :column 10, :line 3278, :file "cljs/core.cljs"} Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 3278, :column 15, :line 3278, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3278, :column 16, :line 3278, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3278, :column 22, :line 3278, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3278, :column 27, :line 3278, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3278, :column 37, :line 3278, :file "cljs/core.cljs"} watches], :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}}, ^{:arglists (^{:end-column 12, :end-line 1100, :column 4, :line 1100, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1100, :column 5, :line 1100, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1100, :column 10, :line 1100, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1128, :column 4, :line 1128, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1128, :column 5, :line 1128, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1128, :column 10, :line 1128, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1128, :column 12, :line 1128, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1095, :column 7, :line 1095, :file "cljs/core.cljs"} nth ^{:arglists (^{:end-column 12, :end-line 1100, :column 4, :line 1100, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1100, :column 5, :line 1100, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1100, :column 10, :line 1100, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1128, :column 4, :line 1128, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1128, :column 5, :line 1128, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1128, :column 10, :line 1128, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1128, :column 12, :line 1128, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1095, :column 7, :line 1095, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1100, :column 5, :line 1100, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1100, :column 10, :line 1100, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 1128, :column 5, :line 1128, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1128, :column 10, :line 1128, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1128, :column 12, :line 1128, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1100, :column 4, :line 1100, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1100, :column 5, :line 1100, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1100, :column 10, :line 1100, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1128, :column 4, :line 1128, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1128, :column 5, :line 1128, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1128, :column 10, :line 1128, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1128, :column 12, :line 1128, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1095, :column 7, :line 1095, :file "cljs/core.cljs"} nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1363, :column 3, :line 1363, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1363, :column 4, :line 1363, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1361, :column 8, :line 1361, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1361, :column 16, :line 1361, :file "cljs/core.cljs"} sorted? ^{:arglists (^{:end-column 6, :end-line 1363, :column 3, :line 1363, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1363, :column 4, :line 1363, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1361, :column 8, :line 1361, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1361, :column 16, :line 1361, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1363, :column 4, :line 1363, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1363, :column 3, :line 1363, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1363, :column 4, :line 1363, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1361, :column 8, :line 1361, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1361, :column 16, :line 1361, :file "cljs/core.cljs"} sorted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil? ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3643, :column 3, :line 3643, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3643, :column 4, :line 3643, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3643, :column 6, :line 3643, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} split-at ^{:arglists (^{:end-column 11, :end-line 3643, :column 3, :line 3643, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3643, :column 4, :line 3643, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3643, :column 6, :line 3643, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 6, :end-line 3643, :column 4, :line 3643, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3643, :column 6, :line 3643, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3643, :column 3, :line 3643, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3643, :column 4, :line 3643, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3643, :column 6, :line 3643, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} split-at, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 6987, :column 10, :line 6987, :file "cljs/core.cljs"} TransientHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7082, :column 10, :line 7082, :file "cljs/core.cljs"} TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 7082, :column 27, :line 7082, :file "cljs/core.cljs"} [^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map], :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, ^{:arglists (^{:end-column 35, :end-line 4931, :column 28, :line 4931, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4931, :column 29, :line 4931, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4931, :column 31, :line 4931, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4931, :column 33, :line 4931, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4931, :column 8, :line 4931, :file "cljs/core.cljs"} array-map-extend-kv ^{:arglists (^{:end-column 35, :end-line 4931, :column 28, :line 4931, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4931, :column 29, :line 4931, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4931, :column 31, :line 4931, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4931, :column 33, :line 4931, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4931, :column 8, :line 4931, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 31, :end-line 4931, :column 29, :line 4931, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4931, :column 31, :line 4931, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4931, :column 33, :line 4931, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4931, :column 28, :line 4931, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4931, :column 29, :line 4931, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 4931, :column 31, :line 4931, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 4931, :column 33, :line 4931, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 4931, :column 8, :line 4931, :file "cljs/core.cljs"} array-map-extend-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7846, :column 3, :line 7846, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7846, :column 4, :line 7846, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7846, :column 9, :line 7846, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} prn-str-with-opts ^{:arglists (^{:end-column 14, :end-line 7846, :column 3, :line 7846, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7846, :column 4, :line 7846, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7846, :column 9, :line 7846, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7846, :column 4, :line 7846, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7846, :column 9, :line 7846, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7846, :column 3, :line 7846, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7846, :column 4, :line 7846, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7846, :column 9, :line 7846, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} prn-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 8169, :column 4, :line 8169, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8169, :column 5, :line 8169, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8171, :column 4, :line 8171, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8171, :column 5, :line 8171, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8171, :column 10, :line 8171, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8166, :column 7, :line 8166, :file "cljs/core.cljs"} random-sample ^{:arglists (^{:end-column 10, :end-line 8169, :column 4, :line 8169, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8169, :column 5, :line 8169, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8171, :column 4, :line 8171, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8171, :column 5, :line 8171, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8171, :column 10, :line 8171, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8166, :column 7, :line 8166, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 8169, :column 5, :line 8169, :file "cljs/core.cljs"} prob] ^cljs.core/LazySeq [^{:end-column 10, :end-line 8171, :column 5, :line 8171, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8171, :column 10, :line 8171, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 8169, :column 4, :line 8169, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8169, :column 5, :line 8169, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8171, :column 4, :line 8171, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8171, :column 5, :line 8171, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8171, :column 10, :line 8171, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8166, :column 7, :line 8166, :file "cljs/core.cljs"} random-sample, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6973, :column 3, :line 6973, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6973, :column 4, :line 6973, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6973, :column 8, :line 6973, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6971, :column 7, :line 6971, :file "cljs/core.cljs"} select-keys ^{:arglists (^{:end-column 15, :end-line 6973, :column 3, :line 6973, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6973, :column 4, :line 6973, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6973, :column 8, :line 6973, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6971, :column 7, :line 6971, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap [^{:end-column 8, :end-line 6973, :column 4, :line 6973, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6973, :column 8, :line 6973, :file "cljs/core.cljs"} keyseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6973, :column 3, :line 6973, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 6973, :column 4, :line 6973, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 6973, :column 8, :line 6973, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 6971, :column 7, :line 6971, :file "cljs/core.cljs"} select-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} bit-and ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} bit-and, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2675, :column 22, :line 2675, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2675, :column 23, :line 2675, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2675, :column 25, :line 2675, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2675, :column 8, :line 2675, :file "cljs/core.cljs"} bounded-count ^{:arglists (^{:end-column 27, :end-line 2675, :column 22, :line 2675, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2675, :column 23, :line 2675, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2675, :column 25, :line 2675, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2675, :column 8, :line 2675, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2675, :column 23, :line 2675, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2675, :column 25, :line 2675, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2675, :column 22, :line 2675, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2675, :column 23, :line 2675, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2675, :column 25, :line 2675, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2675, :column 8, :line 2675, :file "cljs/core.cljs"} bounded-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 25, :end-line 8082, :column 1, :line 8082, :file "cljs/core.cljs"} gensym_counter ^{:end-column 25, :end-line 8082, :column 1, :line 8082, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 25, :end-line 8082, :column 1, :line 8082, :file "cljs/core.cljs"} gensym_counter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2719, :column 4, :line 2719, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2719, :column 5, :line 2719, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2720, :column 4, :line 2720, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2720, :column 5, :line 2720, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2721, :column 7, :line 2721, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2722, :column 7, :line 2722, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2722, :column 9, :line 2722, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2722, :column 11, :line 2722, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2723, :column 9, :line 2723, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2723, :column 11, :line 2723, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2723, :column 13, :line 2723, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2723, :column 15, :line 2723, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2716, :column 7, :line 2716, :file "cljs/core.cljs"} list* ^{:arglists (^{:end-column 10, :end-line 2719, :column 4, :line 2719, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2719, :column 5, :line 2719, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2720, :column 4, :line 2720, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2720, :column 5, :line 2720, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2721, :column 7, :line 2721, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2722, :column 7, :line 2722, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2722, :column 9, :line 2722, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2722, :column 11, :line 2722, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2723, :column 9, :line 2723, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2723, :column 11, :line 2723, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2723, :column 13, :line 2723, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2723, :column 15, :line 2723, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2716, :column 7, :line 2716, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 10, :end-line 2719, :column 5, :line 2719, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2720, :column 5, :line 2720, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2721, :column 7, :line 2721, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2722, :column 7, :line 2722, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2722, :column 9, :line 2722, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2722, :column 11, :line 2722, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2723, :column 9, :line 2723, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2723, :column 11, :line 2723, :file "cljs/core.cljs"} d & ^{:end-column 20, :end-line 2723, :column 15, :line 2723, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2719, :column 4, :line 2719, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2719, :column 5, :line 2719, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2720, :column 4, :line 2720, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2720, :column 5, :line 2720, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2721, :column 7, :line 2721, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2721, :column 9, :line 2721, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2722, :column 7, :line 2722, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2722, :column 9, :line 2722, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2722, :column 11, :line 2722, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2723, :column 9, :line 2723, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2723, :column 11, :line 2723, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2723, :column 13, :line 2723, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2723, :column 15, :line 2723, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2716, :column 7, :line 2716, :file "cljs/core.cljs"} list*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash])} ->Keyword ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash])} {:arglists (^cljs.core/Keyword [^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash])} ->Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3864, :column 4, :line 3864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3864, :column 5, :line 3864, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3864, :column 7, :line 3864, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3864, :column 8, :line 3864, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3864, :column 10, :line 3864, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3864, :column 12, :line 3864, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3864, :column 16, :line 3864, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3868, :column 8, :line 3868, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3868, :column 12, :line 3868, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3868, :column 16, :line 3868, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3868, :column 18, :line 3868, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3872, :column 4, :line 3872, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3872, :column 5, :line 3872, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3872, :column 7, :line 3872, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3872, :column 8, :line 3872, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3872, :column 10, :line 3872, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3872, :column 12, :line 3872, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3872, :column 16, :line 3872, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3872, :column 18, :line 3872, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3872, :column 20, :line 3872, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3876, :column 4, :line 3876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3876, :column 5, :line 3876, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3876, :column 7, :line 3876, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3876, :column 8, :line 3876, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3876, :column 10, :line 3876, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3876, :column 12, :line 3876, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3876, :column 16, :line 3876, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3876, :column 18, :line 3876, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3876, :column 20, :line 3876, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3876, :column 22, :line 3876, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3880, :column 4, :line 3880, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3880, :column 5, :line 3880, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3880, :column 7, :line 3880, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3880, :column 8, :line 3880, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3880, :column 10, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3880, :column 12, :line 3880, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3880, :column 16, :line 3880, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3880, :column 18, :line 3880, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3880, :column 20, :line 3880, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3880, :column 22, :line 3880, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3880, :column 24, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3880, :column 26, :line 3880, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3858, :column 7, :line 3858, :file "cljs/core.cljs"} update-in ^{:arglists (^{:end-column 18, :end-line 3864, :column 4, :line 3864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3864, :column 5, :line 3864, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3864, :column 7, :line 3864, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3864, :column 8, :line 3864, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3864, :column 10, :line 3864, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3864, :column 12, :line 3864, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3864, :column 16, :line 3864, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3868, :column 8, :line 3868, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3868, :column 12, :line 3868, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3868, :column 16, :line 3868, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3868, :column 18, :line 3868, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3872, :column 4, :line 3872, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3872, :column 5, :line 3872, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3872, :column 7, :line 3872, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3872, :column 8, :line 3872, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3872, :column 10, :line 3872, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3872, :column 12, :line 3872, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3872, :column 16, :line 3872, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3872, :column 18, :line 3872, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3872, :column 20, :line 3872, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3876, :column 4, :line 3876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3876, :column 5, :line 3876, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3876, :column 7, :line 3876, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3876, :column 8, :line 3876, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3876, :column 10, :line 3876, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3876, :column 12, :line 3876, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3876, :column 16, :line 3876, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3876, :column 18, :line 3876, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3876, :column 20, :line 3876, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3876, :column 22, :line 3876, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3880, :column 4, :line 3880, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3880, :column 5, :line 3880, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3880, :column 7, :line 3880, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3880, :column 8, :line 3880, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3880, :column 10, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3880, :column 12, :line 3880, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3880, :column 16, :line 3880, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3880, :column 18, :line 3880, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3880, :column 20, :line 3880, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3880, :column 22, :line 3880, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3880, :column 24, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3880, :column 26, :line 3880, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3858, :column 7, :line 3858, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3864, :column 5, :line 3864, :file "cljs/core.cljs"} m p__10009 ^{:end-column 18, :end-line 3864, :column 16, :line 3864, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m p__10012 ^{:end-column 18, :end-line 3868, :column 16, :line 3868, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3868, :column 18, :line 3868, :file "cljs/core.cljs"} a] [^{:end-column 7, :end-line 3872, :column 5, :line 3872, :file "cljs/core.cljs"} m p__10015 ^{:end-column 18, :end-line 3872, :column 16, :line 3872, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3872, :column 18, :line 3872, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3872, :column 20, :line 3872, :file "cljs/core.cljs"} b] [^{:end-column 7, :end-line 3876, :column 5, :line 3876, :file "cljs/core.cljs"} m p__10018 ^{:end-column 18, :end-line 3876, :column 16, :line 3876, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3876, :column 18, :line 3876, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3876, :column 20, :line 3876, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3876, :column 22, :line 3876, :file "cljs/core.cljs"} c] [^{:end-column 7, :end-line 3880, :column 5, :line 3880, :file "cljs/core.cljs"} m p__10021 ^{:end-column 18, :end-line 3880, :column 16, :line 3880, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3880, :column 18, :line 3880, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3880, :column 20, :line 3880, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3880, :column 22, :line 3880, :file "cljs/core.cljs"} c & ^{:end-column 31, :end-line 3880, :column 26, :line 3880, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3864, :column 4, :line 3864, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3864, :column 5, :line 3864, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3864, :column 7, :line 3864, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3864, :column 8, :line 3864, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3864, :column 10, :line 3864, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3864, :column 12, :line 3864, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3864, :column 16, :line 3864, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3868, :column 8, :line 3868, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3868, :column 12, :line 3868, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3868, :column 16, :line 3868, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3868, :column 18, :line 3868, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3872, :column 4, :line 3872, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3872, :column 5, :line 3872, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3872, :column 7, :line 3872, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3872, :column 8, :line 3872, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3872, :column 10, :line 3872, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3872, :column 12, :line 3872, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3872, :column 16, :line 3872, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3872, :column 18, :line 3872, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3872, :column 20, :line 3872, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3876, :column 4, :line 3876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3876, :column 5, :line 3876, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3876, :column 7, :line 3876, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3876, :column 8, :line 3876, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3876, :column 10, :line 3876, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3876, :column 12, :line 3876, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3876, :column 16, :line 3876, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3876, :column 18, :line 3876, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3876, :column 20, :line 3876, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3876, :column 22, :line 3876, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3880, :column 4, :line 3880, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3880, :column 5, :line 3880, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3880, :column 7, :line 3880, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3880, :column 8, :line 3880, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3880, :column 10, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3880, :column 12, :line 3880, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3880, :column 16, :line 3880, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3880, :column 18, :line 3880, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3880, :column 20, :line 3880, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3880, :column 22, :line 3880, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3880, :column 24, :line 3880, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3880, :column 26, :line 3880, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3858, :column 7, :line 3858, :file "cljs/core.cljs"} update-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 8698, :column 3, :line 8698, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8698, :column 4, :line 8698, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8698, :column 12, :line 8698, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8698, :column 27, :line 8698, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8695, :column 7, :line 8695, :file "cljs/core.cljs"} prefer-method ^{:arglists (^{:end-column 42, :end-line 8698, :column 3, :line 8698, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8698, :column 4, :line 8698, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8698, :column 12, :line 8698, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8698, :column 27, :line 8698, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8695, :column 7, :line 8695, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8698, :column 4, :line 8698, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8698, :column 12, :line 8698, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8698, :column 27, :line 8698, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8698, :column 3, :line 8698, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8698, :column 4, :line 8698, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8698, :column 12, :line 8698, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8698, :column 27, :line 8698, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8695, :column 7, :line 8695, :file "cljs/core.cljs"} prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 541, :column 20, :line 541, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 541, :column 21, :line 541, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 541, :column 8, :line 541, :file "cljs/core.cljs"} hash-symbol ^{:arglists (^{:end-column 25, :end-line 541, :column 20, :line 541, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 541, :column 21, :line 541, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 541, :column 8, :line 541, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 541, :column 21, :line 541, :file "cljs/core.cljs"} sym]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 541, :column 20, :line 541, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 541, :column 21, :line 541, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 541, :column 8, :line 541, :file "cljs/core.cljs"} hash-symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 5277, :column 4, :line 5277, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5277, :column 5, :line 5277, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5277, :column 11, :line 5277, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5277, :column 16, :line 5277, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5277, :column 18, :line 5277, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5281, :column 4, :line 5281, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5281, :column 5, :line 5281, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5281, :column 11, :line 5281, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5281, :column 16, :line 5281, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5281, :column 18, :line 5281, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5281, :column 20, :line 5281, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5281, :column 22, :line 5281, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5276, :column 8, :line 5276, :file "cljs/core.cljs"} edit-and-set ^{:arglists (^{:end-column 20, :end-line 5277, :column 4, :line 5277, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5277, :column 5, :line 5277, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5277, :column 11, :line 5277, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5277, :column 16, :line 5277, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5277, :column 18, :line 5277, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5281, :column 4, :line 5281, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5281, :column 5, :line 5281, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5281, :column 11, :line 5281, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5281, :column 16, :line 5281, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5281, :column 18, :line 5281, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5281, :column 20, :line 5281, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5281, :column 22, :line 5281, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5276, :column 8, :line 5276, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5277, :column 5, :line 5277, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5277, :column 11, :line 5277, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5277, :column 16, :line 5277, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5277, :column 18, :line 5277, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 5281, :column 5, :line 5281, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5281, :column 11, :line 5281, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5281, :column 16, :line 5281, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5281, :column 18, :line 5281, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5281, :column 20, :line 5281, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5281, :column 22, :line 5281, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 5277, :column 4, :line 5277, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5277, :column 5, :line 5277, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5277, :column 11, :line 5277, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5277, :column 16, :line 5277, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5277, :column 18, :line 5277, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5281, :column 4, :line 5281, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5281, :column 5, :line 5281, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5281, :column 11, :line 5281, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5281, :column 16, :line 5281, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5281, :column 18, :line 5281, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5281, :column 20, :line 5281, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5281, :column 22, :line 5281, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5276, :column 8, :line 5276, :file "cljs/core.cljs"} edit-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash])} ->PersistentArrayMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentArrayMap [^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash])} ->PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 76, :column 10, :line 76, :file "cljs/core.cljs"} instance? ^{:arglists (^{:end-column 31, :end-line 535, :column 26, :line 535, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 535, :column 27, :line 535, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 535, :column 29, :line 535, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 535, :column 8, :line 535, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 535, :column 16, :line 535, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 29, :end-line 535, :column 27, :line 535, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 535, :column 29, :line 535, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 535, :column 26, :line 535, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 535, :column 27, :line 535, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 535, :column 29, :line 535, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 535, :column 8, :line 535, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 535, :column 16, :line 535, :file "cljs/core.cljs"} instance?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 695, :column 3, :line 695, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 695, :column 15, :line 695, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 689, :column 8, :line 689, :file "cljs/core.cljs"} number, :end-column 35, :end-line 689, :column 15, :line 689, :file "cljs/core.cljs"} mix-collection-hash ^{:arglists (^{:end-column 21, :end-line 695, :column 3, :line 695, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 695, :column 15, :line 695, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 689, :column 8, :line 689, :file "cljs/core.cljs"} number, :end-column 35, :end-line 689, :column 15, :line 689, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 15, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 695, :column 15, :line 695, :file "cljs/core.cljs"} count]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 695, :column 3, :line 695, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 695, :column 15, :line 695, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 689, :column 8, :line 689, :file "cljs/core.cljs"} number, :end-column 35, :end-line 689, :column 15, :line 689, :file "cljs/core.cljs"} mix-collection-hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7677, :column 3, :line 7677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7677, :column 4, :line 7677, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7677, :column 7, :line 7677, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7672, :column 7, :line 7672, :file "cljs/core.cljs"} re-find ^{:arglists (^{:end-column 9, :end-line 7677, :column 3, :line 7677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7677, :column 4, :line 7677, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7677, :column 7, :line 7677, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7672, :column 7, :line 7672, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7677, :column 4, :line 7677, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7677, :column 7, :line 7677, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7677, :column 3, :line 7677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7677, :column 4, :line 7677, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7677, :column 7, :line 7677, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7672, :column 7, :line 7672, :file "cljs/core.cljs"} re-find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8197, :column 3, :line 8197, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8197, :column 4, :line 8197, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8197, :column 9, :line 8197, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} run! ^{:arglists (^{:end-column 14, :end-line 8197, :column 3, :line 8197, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8197, :column 4, :line 8197, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8197, :column 9, :line 8197, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8197, :column 4, :line 8197, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8197, :column 9, :line 8197, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8197, :column 3, :line 8197, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8197, :column 4, :line 8197, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8197, :column 9, :line 8197, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} run!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 17, :end-line 7741, :column 1, :line 7733, :file "cljs/core.cljs"} char-escapes ^{:private true, :end-column 17, :end-line 7741, :column 1, :line 7733, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 17, :end-line 7741, :column 1, :line 7733, :file "cljs/core.cljs"} char-escapes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 2075, :column 14, :line 2075, :file "cljs/core.cljs"} val ^{:arglists (^{:end-column 14, :end-line 6944, :column 3, :line 6944, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6944, :column 4, :line 6944, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 6942, :column 7, :line 6942, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6944, :column 4, :line 6944, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6944, :column 3, :line 6944, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6944, :column 4, :line 6944, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 6942, :column 7, :line 6942, :file "cljs/core.cljs"} val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1802, :column 4, :line 1802, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1802, :column 5, :line 1802, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1802, :column 7, :line 1802, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1802, :column 9, :line 1802, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1802, :column 11, :line 1802, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1797, :column 8, :line 1797, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1797, :column 15, :line 1797, :file "cljs/core.cljs"} unchecked-add ^{:arglists (^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1802, :column 4, :line 1802, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1802, :column 5, :line 1802, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1802, :column 7, :line 1802, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1802, :column 9, :line 1802, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1802, :column 11, :line 1802, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1797, :column 8, :line 1797, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1797, :column 15, :line 1797, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1802, :column 5, :line 1802, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1802, :column 7, :line 1802, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1802, :column 11, :line 1802, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1802, :column 4, :line 1802, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1802, :column 5, :line 1802, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1802, :column 7, :line 1802, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1802, :column 9, :line 1802, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1802, :column 11, :line 1802, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1797, :column 8, :line 1797, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1797, :column 15, :line 1797, :file "cljs/core.cljs"} unchecked-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1541, :column 3, :line 1541, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1541, :column 4, :line 1541, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1538, :column 17, :line 1538, :file "cljs/core.cljs"} fn->comparator ^{:arglists (^{:end-column 6, :end-line 1541, :column 3, :line 1541, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1541, :column 4, :line 1541, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1538, :column 17, :line 1538, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 1541, :column 4, :line 1541, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1541, :column 3, :line 1541, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1541, :column 4, :line 1541, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1538, :column 17, :line 1538, :file "cljs/core.cljs"} fn->comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 745, :column 10, :line 745, :file "cljs/core.cljs"} with-meta ^{:arglists (^{:end-column 11, :end-line 1291, :column 3, :line 1291, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1291, :column 4, :line 1291, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1291, :column 6, :line 1291, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1288, :column 7, :line 1288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1291, :column 4, :line 1291, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1291, :column 6, :line 1291, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1291, :column 3, :line 1291, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1291, :column 4, :line 1291, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1291, :column 6, :line 1291, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1288, :column 7, :line 1288, :file "cljs/core.cljs"} with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical? ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 383, :column 23, :line 383, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 383, :column 24, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 23, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -namespace ^{:arglists (^{:end-column 26, :end-line 383, :column 23, :line 383, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 383, :column 24, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 23, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 383, :column 24, :line 383, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 383, :column 23, :line 383, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 383, :column 24, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 23, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1821, :column 4, :line 1821, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1821, :column 5, :line 1821, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1821, :column 7, :line 1821, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1822, :column 4, :line 1822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1822, :column 5, :line 1822, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1822, :column 7, :line 1822, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1822, :column 9, :line 1822, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1822, :column 11, :line 1822, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} unchecked-divide-int ^{:arglists (^{:end-column 7, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1821, :column 4, :line 1821, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1821, :column 5, :line 1821, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1821, :column 7, :line 1821, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1822, :column 4, :line 1822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1822, :column 5, :line 1822, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1822, :column 7, :line 1822, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1822, :column 9, :line 1822, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1822, :column 11, :line 1822, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1821, :column 5, :line 1821, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1821, :column 7, :line 1821, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1822, :column 5, :line 1822, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1822, :column 7, :line 1822, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1822, :column 11, :line 1822, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1821, :column 4, :line 1821, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1821, :column 5, :line 1821, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1821, :column 7, :line 1821, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1822, :column 4, :line 1822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1822, :column 5, :line 1822, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1822, :column 7, :line 1822, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1822, :column 9, :line 1822, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1822, :column 11, :line 1822, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} unchecked-divide-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 8343, :column 31, :line 8343, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8343, :column 32, :line 8343, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8343, :column 34, :line 8343, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8343, :column 36, :line 8343, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8343, :column 8, :line 8343, :file "cljs/core.cljs"} swap-global-hierarchy! ^{:arglists (^{:end-column 41, :end-line 8343, :column 31, :line 8343, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8343, :column 32, :line 8343, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8343, :column 34, :line 8343, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8343, :column 36, :line 8343, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8343, :column 8, :line 8343, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 8343, :column 32, :line 8343, :file "cljs/core.cljs"} f & ^{:end-column 41, :end-line 8343, :column 36, :line 8343, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 8343, :column 31, :line 8343, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8343, :column 32, :line 8343, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8343, :column 34, :line 8343, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8343, :column 36, :line 8343, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8343, :column 8, :line 8343, :file "cljs/core.cljs"} swap-global-hierarchy!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7309, :column 4, :line 7309, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7309, :column 5, :line 7309, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7309, :column 7, :line 7309, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7310, :column 4, :line 7310, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7310, :column 5, :line 7310, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7310, :column 7, :line 7310, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7310, :column 9, :line 7310, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7311, :column 4, :line 7311, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7311, :column 5, :line 7311, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7311, :column 7, :line 7311, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7311, :column 9, :line 7311, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7311, :column 11, :line 7311, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7311, :column 13, :line 7311, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} max-key ^{:arglists (^{:end-column 9, :end-line 7309, :column 4, :line 7309, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7309, :column 5, :line 7309, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7309, :column 7, :line 7309, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7310, :column 4, :line 7310, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7310, :column 5, :line 7310, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7310, :column 7, :line 7310, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7310, :column 9, :line 7310, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7311, :column 4, :line 7311, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7311, :column 5, :line 7311, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7311, :column 7, :line 7311, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7311, :column 9, :line 7311, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7311, :column 11, :line 7311, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7311, :column 13, :line 7311, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7309, :column 5, :line 7309, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7309, :column 7, :line 7309, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7310, :column 5, :line 7310, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7310, :column 7, :line 7310, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7310, :column 9, :line 7310, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7311, :column 5, :line 7311, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7311, :column 7, :line 7311, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7311, :column 9, :line 7311, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 7311, :column 13, :line 7311, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7309, :column 4, :line 7309, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7309, :column 5, :line 7309, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7309, :column 7, :line 7309, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7310, :column 4, :line 7310, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7310, :column 5, :line 7310, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7310, :column 7, :line 7310, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7310, :column 9, :line 7310, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7311, :column 4, :line 7311, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7311, :column 5, :line 7311, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7311, :column 7, :line 7311, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7311, :column 9, :line 7311, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7311, :column 11, :line 7311, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7311, :column 13, :line 7311, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} max-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash])} ->PersistentTreeSet ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeSet [^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 7119, :column 29, :line 7119, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7119, :column 34, :line 7119, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7119, :column 53, :line 7119, :file "cljs/core.cljs"} __hash])} ->PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end])} ->ChunkBuffer ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end])} {:arglists (^cljs.core/ChunkBuffer [^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 37, :end-line 2439, :column 33, :line 2439, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2439, :column 47, :line 2439, :file "cljs/core.cljs"} end])} ->ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 499, :column 19, :line 499, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 499, :column 20, :line 499, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 499, :column 7, :line 499, :file "cljs/core.cljs"} hash-string ^{:arglists (^{:end-column 22, :end-line 499, :column 19, :line 499, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 499, :column 20, :line 499, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 499, :column 7, :line 499, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 499, :column 20, :line 499, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 499, :column 19, :line 499, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 499, :column 20, :line 499, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 499, :column 7, :line 499, :file "cljs/core.cljs"} hash-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6881, :column 10, :line 6881, :file "cljs/core.cljs"} ValSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6881, :column 10, :line 6881, :file "cljs/core.cljs"} ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6881, :column 17, :line 6881, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6881, :column 19, :line 6881, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6881, :column 30, :line 6881, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6881, :column 35, :line 6881, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 17, :end-line 8505, :column 13, :line 8505, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8505, :column 14, :line 8505, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8505, :column 4, :line 8505, :file "cljs/core.cljs"} -prefers ^{:arglists (^{:end-column 17, :end-line 8505, :column 13, :line 8505, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8505, :column 14, :line 8505, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8505, :column 4, :line 8505, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8505, :column 14, :line 8505, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8505, :column 13, :line 8505, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8505, :column 14, :line 8505, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8505, :column 4, :line 8505, :file "cljs/core.cljs"} -prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3379, :column 3, :line 3379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3379, :column 4, :line 3379, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3379, :column 9, :line 3379, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3372, :column 7, :line 3372, :file "cljs/core.cljs"} set-validator! ^{:arglists (^{:end-column 13, :end-line 3379, :column 3, :line 3379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3379, :column 4, :line 3379, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3379, :column 9, :line 3379, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3372, :column 7, :line 3372, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3379, :column 4, :line 3379, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3379, :column 9, :line 3379, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3379, :column 3, :line 3379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3379, :column 4, :line 3379, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3379, :column 9, :line 3379, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3372, :column 7, :line 3372, :file "cljs/core.cljs"} set-validator!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4908, :column 34, :line 4908, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4908, :column 35, :line 4908, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4908, :column 39, :line 4908, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4908, :column 41, :line 4908, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4908, :column 8, :line 4908, :file "cljs/core.cljs"} array-map-index-of-equiv? ^{:arglists (^{:end-column 43, :end-line 4908, :column 34, :line 4908, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4908, :column 35, :line 4908, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4908, :column 39, :line 4908, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4908, :column 41, :line 4908, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4908, :column 8, :line 4908, :file "cljs/core.cljs"} {:arglists ([^{:end-column 39, :end-line 4908, :column 35, :line 4908, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4908, :column 39, :line 4908, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4908, :column 41, :line 4908, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4908, :column 34, :line 4908, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4908, :column 35, :line 4908, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4908, :column 39, :line 4908, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4908, :column 41, :line 4908, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4908, :column 8, :line 4908, :file "cljs/core.cljs"} array-map-index-of-equiv?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 290, :column 22, :line 290, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 290, :column 23, :line 290, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 290, :column 16, :line 290, :file "cljs/core.cljs"} -meta ^{:arglists (^{:end-column 25, :end-line 290, :column 22, :line 290, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 290, :column 23, :line 290, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 290, :column 16, :line 290, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 290, :column 23, :line 290, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 290, :column 22, :line 290, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 290, :column 23, :line 290, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 290, :column 16, :line 290, :file "cljs/core.cljs"} -meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 6167, :column 10, :line 6167, :file "cljs/core.cljs"} RedNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6372, :column 10, :line 6372, :file "cljs/core.cljs"} RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 6372, :column 18, :line 6372, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6372, :column 19, :line 6372, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6372, :column 23, :line 6372, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6372, :column 27, :line 6372, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6372, :column 32, :line 6372, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6372, :column 48, :line 6372, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 40, :end-line 8500, :column 16, :line 8500, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8500, :column 17, :line 8500, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8500, :column 20, :line 8500, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8500, :column 33, :line 8500, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} -add-method ^{:arglists (^{:end-column 40, :end-line 8500, :column 16, :line 8500, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8500, :column 17, :line 8500, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8500, :column 20, :line 8500, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8500, :column 33, :line 8500, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8500, :column 17, :line 8500, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8500, :column 20, :line 8500, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8500, :column 33, :line 8500, :file "cljs/core.cljs"} method]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 8500, :column 16, :line 8500, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8500, :column 17, :line 8500, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8500, :column 20, :line 8500, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8500, :column 33, :line 8500, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} -add-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 6216, :column 25, :line 6216, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6216, :column 26, :line 6216, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6216, :column 30, :line 6216, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6216, :column 34, :line 6216, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6216, :column 38, :line 6216, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6216, :column 8, :line 6216, :file "cljs/core.cljs"} balance-left-del ^{:arglists (^{:end-column 44, :end-line 6216, :column 25, :line 6216, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6216, :column 26, :line 6216, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6216, :column 30, :line 6216, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6216, :column 34, :line 6216, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6216, :column 38, :line 6216, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6216, :column 8, :line 6216, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6216, :column 26, :line 6216, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6216, :column 30, :line 6216, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6216, :column 34, :line 6216, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6216, :column 38, :line 6216, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6216, :column 25, :line 6216, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6216, :column 26, :line 6216, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6216, :column 30, :line 6216, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6216, :column 34, :line 6216, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6216, :column 38, :line 6216, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6216, :column 8, :line 6216, :file "cljs/core.cljs"} balance-left-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3346, :column 4, :line 3346, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3346, :column 5, :line 3346, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3346, :column 7, :line 3346, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3350, :column 4, :line 3350, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3354, :column 4, :line 3354, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3354, :column 5, :line 3354, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3354, :column 9, :line 3354, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3354, :column 11, :line 3354, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3358, :column 4, :line 3358, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3358, :column 5, :line 3358, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3358, :column 7, :line 3358, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3358, :column 9, :line 3358, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3358, :column 11, :line 3358, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3358, :column 13, :line 3358, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3358, :column 15, :line 3358, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3341, :column 7, :line 3341, :file "cljs/core.cljs"} swap! ^{:arglists (^{:end-column 9, :end-line 3346, :column 4, :line 3346, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3346, :column 5, :line 3346, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3346, :column 7, :line 3346, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3350, :column 4, :line 3350, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3354, :column 4, :line 3354, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3354, :column 5, :line 3354, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3354, :column 9, :line 3354, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3354, :column 11, :line 3354, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3358, :column 4, :line 3358, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3358, :column 5, :line 3358, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3358, :column 7, :line 3358, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3358, :column 9, :line 3358, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3358, :column 11, :line 3358, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3358, :column 13, :line 3358, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3358, :column 15, :line 3358, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3341, :column 7, :line 3341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3346, :column 5, :line 3346, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3346, :column 7, :line 3346, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 3354, :column 5, :line 3354, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3354, :column 9, :line 3354, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3354, :column 11, :line 3354, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 3358, :column 5, :line 3358, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3358, :column 7, :line 3358, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3358, :column 9, :line 3358, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3358, :column 11, :line 3358, :file "cljs/core.cljs"} y & ^{:end-column 20, :end-line 3358, :column 15, :line 3358, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3346, :column 4, :line 3346, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3346, :column 5, :line 3346, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3346, :column 7, :line 3346, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3350, :column 4, :line 3350, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3354, :column 4, :line 3354, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3354, :column 5, :line 3354, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3354, :column 9, :line 3354, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3354, :column 11, :line 3354, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3358, :column 4, :line 3358, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3358, :column 5, :line 3358, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3358, :column 7, :line 3358, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3358, :column 9, :line 3358, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3358, :column 11, :line 3358, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3358, :column 13, :line 3358, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3358, :column 15, :line 3358, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3341, :column 7, :line 3341, :file "cljs/core.cljs"} swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 5002, :column 15, :line 5002, :file "cljs/core.cljs"} vals ^{:arglists (^{:end-column 13, :end-line 6938, :column 3, :line 6938, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6938, :column 4, :line 6938, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6936, :column 7, :line 6936, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6938, :column 4, :line 6938, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6938, :column 3, :line 6938, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6938, :column 4, :line 6938, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 6936, :column 7, :line 6936, :file "cljs/core.cljs"} vals, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 379, :column 18, :line 379, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 379, :column 19, :line 379, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 379, :column 4, :line 379, :file "cljs/core.cljs"} -chunked-next ^{:arglists (^{:end-column 24, :end-line 379, :column 18, :line 379, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 379, :column 19, :line 379, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 379, :column 4, :line 379, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 379, :column 19, :line 379, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 379, :column 18, :line 379, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 379, :column 19, :line 379, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 379, :column 4, :line 379, :file "cljs/core.cljs"} -chunked-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4865, :column 28, :line 4865, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4865, :column 29, :line 4865, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4865, :column 7, :line 4865, :file "cljs/core.cljs"} set-entries-iterator ^{:arglists (^{:end-column 34, :end-line 4865, :column 28, :line 4865, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4865, :column 29, :line 4865, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4865, :column 7, :line 4865, :file "cljs/core.cljs"} {:arglists (^cljs.core/SetEntriesIterator [^{:end-column 34, :end-line 4865, :column 29, :line 4865, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4865, :column 28, :line 4865, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4865, :column 29, :line 4865, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4865, :column 7, :line 4865, :file "cljs/core.cljs"} set-entries-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} unchecked-subtract ^{:arglists (^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} unchecked-subtract, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5264, :column 20, :line 5264, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5264, :column 21, :line 5264, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5264, :column 25, :line 5264, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5264, :column 8, :line 5264, :file "cljs/core.cljs"} remove-pair ^{:arglists (^{:end-column 27, :end-line 5264, :column 20, :line 5264, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5264, :column 21, :line 5264, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5264, :column 25, :line 5264, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5264, :column 8, :line 5264, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 25, :end-line 5264, :column 21, :line 5264, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5264, :column 25, :line 5264, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5264, :column 20, :line 5264, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5264, :column 21, :line 5264, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5264, :column 25, :line 5264, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5264, :column 8, :line 5264, :file "cljs/core.cljs"} remove-pair, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} IMap ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/PersistentTreeMap}, :protocol-symbol true, :end-column 19, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 265, :column 14, :line 265, :file "cljs/core.cljs"} IMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next])} ->SeqIter ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next])} {:arglists (^cljs.core/SeqIter [^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next])} ->SeqIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7244, :column 5, :line 7244, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7244, :column 16, :line 7244, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7244, :column 18, :line 7244, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7242, :column 7, :line 7242, :file "cljs/core.cljs"} sorted-set-by ^{:arglists (^{:end-column 23, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7244, :column 5, :line 7244, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7244, :column 16, :line 7244, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7244, :column 18, :line 7244, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7242, :column 7, :line 7242, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7244, :column 5, :line 7244, :file "cljs/core.cljs"} comparator & ^{:end-column 23, :end-line 7244, :column 18, :line 7244, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7244, :column 4, :line 7244, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7244, :column 5, :line 7244, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7244, :column 16, :line 7244, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7244, :column 18, :line 7244, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7242, :column 7, :line 7242, :file "cljs/core.cljs"} sorted-set-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} PersistentVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 70, :end-line 3987, :column 27, :line 3987, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 610, :column 18, :line 610, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 610, :column 19, :line 610, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} cloneable? ^{:arglists (^{:end-column 25, :end-line 610, :column 18, :line 610, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 610, :column 19, :line 610, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 610, :column 19, :line 610, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 610, :column 18, :line 610, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 610, :column 19, :line 610, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} cloneable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 482, :column 20, :line 482, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 482, :column 21, :line 482, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 482, :column 7, :line 482, :file "cljs/core.cljs"} hash-string* ^{:arglists (^{:end-column 23, :end-line 482, :column 20, :line 482, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 482, :column 21, :line 482, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 482, :column 7, :line 482, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 482, :column 21, :line 482, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 482, :column 20, :line 482, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 482, :column 21, :line 482, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 482, :column 7, :line 482, :file "cljs/core.cljs"} hash-string*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5246, :column 25, :line 5246, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5246, :column 26, :line 5246, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5246, :column 30, :line 5246, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5246, :column 8, :line 5246, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5246, :column 16, :line 5246, :file "cljs/core.cljs"} key-test ^{:arglists (^{:end-column 36, :end-line 5246, :column 25, :line 5246, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5246, :column 26, :line 5246, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5246, :column 30, :line 5246, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5246, :column 8, :line 5246, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5246, :column 16, :line 5246, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5246, :column 26, :line 5246, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5246, :column 30, :line 5246, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5246, :column 25, :line 5246, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5246, :column 26, :line 5246, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5246, :column 30, :line 5246, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5246, :column 8, :line 5246, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5246, :column 16, :line 5246, :file "cljs/core.cljs"} key-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta])} ->LazyTransformer ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/LazyTransformer [^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta])} ->LazyTransformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8499, :column 11, :line 8499, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8499, :column 12, :line 8499, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8499, :column 4, :line 8499, :file "cljs/core.cljs"} -reset ^{:arglists (^{:end-column 15, :end-line 8499, :column 11, :line 8499, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8499, :column 12, :line 8499, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8499, :column 4, :line 8499, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8499, :column 12, :line 8499, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8499, :column 11, :line 8499, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8499, :column 12, :line 8499, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8499, :column 4, :line 8499, :file "cljs/core.cljs"} -reset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1426, :column 3, :line 1426, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1426, :column 4, :line 1426, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1424, :column 8, :line 1424, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1424, :column 16, :line 1424, :file "cljs/core.cljs"} true? ^{:arglists (^{:end-column 6, :end-line 1426, :column 3, :line 1426, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1426, :column 4, :line 1426, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1424, :column 8, :line 1424, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1424, :column 16, :line 1424, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1426, :column 4, :line 1426, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1426, :column 3, :line 1426, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1426, :column 4, :line 1426, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1424, :column 8, :line 1424, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1424, :column 16, :line 1424, :file "cljs/core.cljs"} true?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} array ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7887, :column 1, :line 7882, :file "cljs/core.cljs"} print ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7887, :column 1, :line 7882, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 31, :end-line 7886, :column 26, :line 7886, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 7887, :column 1, :line 7882, :file "cljs/core.cljs"} print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 277, :column 10, :line 277, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 277, :column 11, :line 277, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 277, :column 4, :line 277, :file "cljs/core.cljs"} -peek ^{:arglists (^{:end-column 16, :end-line 277, :column 10, :line 277, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 277, :column 11, :line 277, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 277, :column 4, :line 277, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 277, :column 11, :line 277, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 277, :column 10, :line 277, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 277, :column 11, :line 277, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 277, :column 4, :line 277, :file "cljs/core.cljs"} -peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} ISeq ^{:impls #{cljs.core/Cons cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/EmptyList cljs.core/LazySeq cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq}, :protocol-symbol true, :end-column 19, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 250, :column 14, :line 250, :file "cljs/core.cljs"} ISeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1044, :column 3, :line 1044, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1044, :column 4, :line 1044, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1042, :column 7, :line 1042, :file "cljs/core.cljs"} empty ^{:arglists (^{:end-column 9, :end-line 1044, :column 3, :line 1044, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1044, :column 4, :line 1044, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1042, :column 7, :line 1042, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1044, :column 4, :line 1044, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1044, :column 3, :line 1044, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1044, :column 4, :line 1044, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1042, :column 7, :line 1042, :file "cljs/core.cljs"} empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8692, :column 2, :line 8692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8692, :column 3, :line 8692, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8692, :column 11, :line 8692, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8690, :column 7, :line 8690, :file "cljs/core.cljs"} remove-method ^{:arglists (^{:end-column 24, :end-line 8692, :column 2, :line 8692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8692, :column 3, :line 8692, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8692, :column 11, :line 8692, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8690, :column 7, :line 8690, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8692, :column 3, :line 8692, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8692, :column 11, :line 8692, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8692, :column 2, :line 8692, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8692, :column 3, :line 8692, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8692, :column 11, :line 8692, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8690, :column 7, :line 8690, :file "cljs/core.cljs"} remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4556, :column 10, :line 4556, :file "cljs/core.cljs"} PersistentQueueSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4556, :column 10, :line 4556, :file "cljs/core.cljs"} PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 63, :end-line 4556, :column 29, :line 4556, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4556, :column 30, :line 4556, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4556, :column 35, :line 4556, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4556, :column 41, :line 4556, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4556, :column 56, :line 4556, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 44, :end-line 6235, :column 26, :line 6235, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6235, :column 27, :line 6235, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6235, :column 31, :line 6235, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6235, :column 35, :line 6235, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6235, :column 40, :line 6235, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6235, :column 8, :line 6235, :file "cljs/core.cljs"} balance-right-del ^{:arglists (^{:end-column 44, :end-line 6235, :column 26, :line 6235, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6235, :column 27, :line 6235, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6235, :column 31, :line 6235, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6235, :column 35, :line 6235, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6235, :column 40, :line 6235, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6235, :column 8, :line 6235, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6235, :column 27, :line 6235, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6235, :column 31, :line 6235, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6235, :column 35, :line 6235, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6235, :column 40, :line 6235, :file "cljs/core.cljs"} del]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6235, :column 26, :line 6235, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6235, :column 27, :line 6235, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6235, :column 31, :line 6235, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6235, :column 35, :line 6235, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6235, :column 40, :line 6235, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6235, :column 8, :line 6235, :file "cljs/core.cljs"} balance-right-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1707, :column 5, :line 1707, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1708, :column 7, :line 1708, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1709, :column 9, :line 1709, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1709, :column 11, :line 1709, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1704, :column 8, :line 1704, :file "cljs/core.cljs"} number} / ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1707, :column 5, :line 1707, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1708, :column 7, :line 1708, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1709, :column 9, :line 1709, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1709, :column 11, :line 1709, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1704, :column 8, :line 1704, :file "cljs/core.cljs"} number} {:arglists (^number [^{:end-column 7, :end-line 1707, :column 5, :line 1707, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1708, :column 7, :line 1708, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1709, :column 11, :line 1709, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1707, :column 5, :line 1707, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1708, :column 7, :line 1708, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1709, :column 9, :line 1709, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1709, :column 11, :line 1709, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1704, :column 8, :line 1704, :file "cljs/core.cljs"} number} /, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5273, :column 15, :line 5273, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5273, :column 16, :line 5273, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5273, :column 21, :line 5273, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5273, :column 8, :line 5273, :file "cljs/core.cljs"} bitpos ^{:arglists (^{:end-column 27, :end-line 5273, :column 15, :line 5273, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5273, :column 16, :line 5273, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5273, :column 21, :line 5273, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5273, :column 8, :line 5273, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 5273, :column 16, :line 5273, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5273, :column 21, :line 5273, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5273, :column 15, :line 5273, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5273, :column 16, :line 5273, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5273, :column 21, :line 5273, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5273, :column 8, :line 5273, :file "cljs/core.cljs"} bitpos, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1944, :column 3, :line 1944, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1944, :column 4, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1944, :column 6, :line 1944, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1942, :column 7, :line 1942, :file "cljs/core.cljs"} bit-or ^{:arglists (^{:end-column 8, :end-line 1944, :column 3, :line 1944, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1944, :column 4, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1944, :column 6, :line 1944, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1942, :column 7, :line 1942, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1944, :column 4, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1944, :column 6, :line 1944, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1944, :column 3, :line 1944, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1944, :column 4, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1944, :column 6, :line 1944, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1942, :column 7, :line 1942, :file "cljs/core.cljs"} bit-or, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 443, :column 23, :line 443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 443, :column 24, :line 443, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 443, :column 27, :line 443, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 443, :column 8, :line 443, :file "cljs/core.cljs"} number, :end-column 23, :end-line 443, :column 15, :line 443, :file "cljs/core.cljs"} m3-fmix ^{:arglists (^{:end-column 31, :end-line 443, :column 23, :line 443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 443, :column 24, :line 443, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 443, :column 27, :line 443, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 443, :column 8, :line 443, :file "cljs/core.cljs"} number, :end-column 23, :end-line 443, :column 15, :line 443, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 443, :column 24, :line 443, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 443, :column 27, :line 443, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 443, :column 23, :line 443, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 443, :column 24, :line 443, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 443, :column 27, :line 443, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 443, :column 8, :line 443, :file "cljs/core.cljs"} number, :end-column 23, :end-line 443, :column 15, :line 443, :file "cljs/core.cljs"} m3-fmix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 4164, :column 14, :line 4164, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4164, :column 15, :line 4164, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4164, :column 17, :line 4164, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4164, :column 7, :line 4164, :file "cljs/core.cljs"} vector ^{:arglists (^{:end-column 22, :end-line 4164, :column 14, :line 4164, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4164, :column 15, :line 4164, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4164, :column 17, :line 4164, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4164, :column 7, :line 4164, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 22, :end-line 4164, :column 17, :line 4164, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 4164, :column 14, :line 4164, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4164, :column 15, :line 4164, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4164, :column 17, :line 4164, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4164, :column 7, :line 4164, :file "cljs/core.cljs"} vector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 848, :column 10, :line 848, :file "cljs/core.cljs"} hash-coll ^{:arglists (^{:end-column 24, :end-line 2067, :column 18, :line 2067, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2067, :column 19, :line 2067, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 2067, :column 8, :line 2067, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 2067, :column 19, :line 2067, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 2067, :column 18, :line 2067, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2067, :column 19, :line 2067, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 2067, :column 8, :line 2067, :file "cljs/core.cljs"} hash-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 5256, :column 4, :line 5256, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5256, :column 5, :line 5256, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5256, :column 9, :line 5256, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5256, :column 11, :line 5256, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5259, :column 4, :line 5259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5259, :column 5, :line 5259, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5259, :column 9, :line 5259, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5259, :column 11, :line 5259, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5259, :column 13, :line 5259, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5259, :column 15, :line 5259, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5255, :column 8, :line 5255, :file "cljs/core.cljs"} clone-and-set ^{:arglists (^{:end-column 13, :end-line 5256, :column 4, :line 5256, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5256, :column 5, :line 5256, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5256, :column 9, :line 5256, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5256, :column 11, :line 5256, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5259, :column 4, :line 5259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5259, :column 5, :line 5259, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5259, :column 9, :line 5259, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5259, :column 11, :line 5259, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5259, :column 13, :line 5259, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5259, :column 15, :line 5259, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5255, :column 8, :line 5255, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 9, :end-line 5256, :column 5, :line 5256, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5256, :column 9, :line 5256, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5256, :column 11, :line 5256, :file "cljs/core.cljs"} a] ^cljs.core/array [^{:end-column 9, :end-line 5259, :column 5, :line 5259, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5259, :column 9, :line 5259, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5259, :column 11, :line 5259, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5259, :column 13, :line 5259, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5259, :column 15, :line 5259, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 5256, :column 4, :line 5256, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5256, :column 5, :line 5256, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5256, :column 9, :line 5256, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5256, :column 11, :line 5256, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5259, :column 4, :line 5259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5259, :column 5, :line 5259, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5259, :column 9, :line 5259, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5259, :column 11, :line 5259, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5259, :column 13, :line 5259, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5259, :column 15, :line 5259, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5255, :column 8, :line 5255, :file "cljs/core.cljs"} clone-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 36, :end-line 5161, :column 10, :line 5161, :file "cljs/core.cljs"} array->transient-hash-map ^{:arglists (^{:end-column 43, :end-line 5233, :column 34, :line 5233, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5233, :column 35, :line 5233, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5233, :column 39, :line 5233, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 5233, :column 8, :line 5233, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 39, :end-line 5233, :column 35, :line 5233, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5233, :column 39, :line 5233, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5233, :column 34, :line 5233, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5233, :column 35, :line 5233, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5233, :column 39, :line 5233, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 5233, :column 8, :line 5233, :file "cljs/core.cljs"} array->transient-hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1750, :column 4, :line 1750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1750, :column 5, :line 1750, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1751, :column 7, :line 1751, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1752, :column 9, :line 1752, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1752, :column 11, :line 1752, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1747, :column 8, :line 1747, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1747, :column 16, :line 1747, :file "cljs/core.cljs"} >= ^{:arglists (^{:end-column 7, :end-line 1750, :column 4, :line 1750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1750, :column 5, :line 1750, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1751, :column 7, :line 1751, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1752, :column 9, :line 1752, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1752, :column 11, :line 1752, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1747, :column 8, :line 1747, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1747, :column 16, :line 1747, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1750, :column 5, :line 1750, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1751, :column 7, :line 1751, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1752, :column 11, :line 1752, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1750, :column 4, :line 1750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1750, :column 5, :line 1750, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1751, :column 7, :line 1751, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1752, :column 9, :line 1752, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1752, :column 11, :line 1752, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1747, :column 8, :line 1747, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1747, :column 16, :line 1747, :file "cljs/core.cljs"} >=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map])} ->TransientHashSet ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map])} {:arglists (^cljs.core/TransientHashSet [^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 52, :end-line 7082, :column 38, :line 7082, :file "cljs/core.cljs"} transient-map])} ->TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3599, :column 4, :line 3599, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3599, :column 5, :line 3599, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3599, :column 7, :line 3599, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3596, :column 7, :line 3596, :file "cljs/core.cljs"} drop-last ^{:arglists (^{:end-column 7, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3599, :column 4, :line 3599, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3599, :column 5, :line 3599, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3599, :column 7, :line 3599, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3596, :column 7, :line 3596, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} s] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3599, :column 5, :line 3599, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3599, :column 7, :line 3599, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3599, :column 4, :line 3599, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3599, :column 5, :line 3599, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3599, :column 7, :line 3599, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3596, :column 7, :line 3596, :file "cljs/core.cljs"} drop-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i])} ->ArrayIter ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i])} {:arglists (^cljs.core/ArrayIter [^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i])} ->ArrayIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object? ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash])} ->ArrayNodeSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ArrayNodeSeq [^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 29, :end-line 5805, :column 24, :line 5805, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5805, :column 29, :line 5805, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5805, :column 35, :line 5805, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5805, :column 37, :line 5805, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5805, :column 49, :line 5805, :file "cljs/core.cljs"} __hash])} ->ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 6532, :column 24, :line 6532, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6532, :column 25, :line 6532, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6532, :column 30, :line 6532, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6532, :column 8, :line 6532, :file "cljs/core.cljs"} tree-map-append ^{:arglists (^{:end-column 36, :end-line 6532, :column 24, :line 6532, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6532, :column 25, :line 6532, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6532, :column 30, :line 6532, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6532, :column 8, :line 6532, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6532, :column 25, :line 6532, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6532, :column 30, :line 6532, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 6532, :column 24, :line 6532, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6532, :column 25, :line 6532, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6532, :column 30, :line 6532, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6532, :column 8, :line 6532, :file "cljs/core.cljs"} tree-map-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2874, :column 3, :line 2874, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2874, :column 4, :line 2874, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2872, :column 7, :line 2872, :file "cljs/core.cljs"} not-empty ^{:arglists (^{:end-column 9, :end-line 2874, :column 3, :line 2874, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2874, :column 4, :line 2874, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2872, :column 7, :line 2872, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2874, :column 4, :line 2874, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2874, :column 3, :line 2874, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2874, :column 4, :line 2874, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2872, :column 7, :line 2872, :file "cljs/core.cljs"} not-empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7268, :column 3, :line 7268, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7268, :column 4, :line 7268, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7266, :column 7, :line 7266, :file "cljs/core.cljs"} distinct ^{:arglists (^{:end-column 9, :end-line 7268, :column 3, :line 7268, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7268, :column 4, :line 7268, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7266, :column 7, :line 7266, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 7268, :column 4, :line 7268, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7268, :column 3, :line 7268, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7268, :column 4, :line 7268, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7266, :column 7, :line 7266, :file "cljs/core.cljs"} distinct, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3812, :column 4, :line 3812, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3812, :column 5, :line 3812, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3812, :column 7, :line 3812, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3814, :column 7, :line 3814, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3814, :column 12, :line 3814, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3820, :column 4, :line 3820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3820, :column 5, :line 3820, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3820, :column 7, :line 3820, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3820, :column 12, :line 3820, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3820, :column 16, :line 3820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3806, :column 7, :line 3806, :file "cljs/core.cljs"} partition ^{:arglists (^{:end-column 12, :end-line 3812, :column 4, :line 3812, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3812, :column 5, :line 3812, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3812, :column 7, :line 3812, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3814, :column 7, :line 3814, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3814, :column 12, :line 3814, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3820, :column 4, :line 3820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3820, :column 5, :line 3820, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3820, :column 7, :line 3820, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3820, :column 12, :line 3820, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3820, :column 16, :line 3820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3806, :column 7, :line 3806, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3812, :column 5, :line 3812, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3812, :column 7, :line 3812, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3814, :column 7, :line 3814, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3814, :column 12, :line 3814, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3820, :column 5, :line 3820, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3820, :column 7, :line 3820, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3820, :column 12, :line 3820, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3820, :column 16, :line 3820, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3812, :column 4, :line 3812, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3812, :column 5, :line 3812, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3812, :column 7, :line 3812, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3814, :column 7, :line 3814, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3814, :column 12, :line 3814, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3820, :column 4, :line 3820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3820, :column 5, :line 3820, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3820, :column 7, :line 3820, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3820, :column 12, :line 3820, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3820, :column 16, :line 3820, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3806, :column 7, :line 3806, :file "cljs/core.cljs"} partition, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 8498, :column 14, :line 8498, :file "cljs/core.cljs"} IMultiFn ^{:impls #{cljs.core/MultiFn}, :protocol-symbol true, :end-column 23, :end-line 8498, :column 14, :line 8498, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 8498, :column 14, :line 8498, :file "cljs/core.cljs"} IMultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1869, :column 16, :line 1869, :file "cljs/core.cljs"} fix ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1869, :column 16, :line 1869, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} q]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1869, :column 9, :line 1869, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1869, :column 16, :line 1869, :file "cljs/core.cljs"} fix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2169, :column 10, :line 2169, :file "cljs/core.cljs"} EmptyList {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2169, :column 10, :line 2169, :file "cljs/core.cljs"} EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 2169, :column 20, :line 2169, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2169, :column 21, :line 2169, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} IAssociative ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/PersistentArrayMap cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/PersistentTreeMap cljs.core/RedNode}, :protocol-symbol true, :end-column 27, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} IAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1957, :column 3, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1957, :column 6, :line 1957, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1955, :column 7, :line 1955, :file "cljs/core.cljs"} bit-flip ^{:arglists (^{:end-column 8, :end-line 1957, :column 3, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1957, :column 6, :line 1957, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1955, :column 7, :line 1955, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1957, :column 6, :line 1957, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1957, :column 3, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1957, :column 6, :line 1957, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1955, :column 7, :line 1955, :file "cljs/core.cljs"} bit-flip, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2616, :column 4, :line 2616, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2616, :column 5, :line 2616, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2620, :column 4, :line 2620, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2620, :column 5, :line 2620, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2620, :column 10, :line 2620, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2615, :column 7, :line 2615, :file "cljs/core.cljs"} long-array ^{:arglists (^{:end-column 17, :end-line 2616, :column 4, :line 2616, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2616, :column 5, :line 2616, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2620, :column 4, :line 2620, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2620, :column 5, :line 2620, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2620, :column 10, :line 2620, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2615, :column 7, :line 2615, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2616, :column 5, :line 2616, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2620, :column 5, :line 2620, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2620, :column 10, :line 2620, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2616, :column 4, :line 2616, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2616, :column 5, :line 2616, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2620, :column 4, :line 2620, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2620, :column 5, :line 2620, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2620, :column 10, :line 2620, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2615, :column 7, :line 2615, :file "cljs/core.cljs"} long-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 26, :end-line 4843, :column 10, :line 4843, :file "cljs/core.cljs"} EntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 26, :end-line 4843, :column 10, :line 4843, :file "cljs/core.cljs"} EntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 39, :end-line 4843, :column 26, :line 4843, :file "cljs/core.cljs"} [^{:mutable true, :end-column 39, :end-line 4843, :column 37, :line 4843, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 9, :end-line 8388, :column 4, :line 8388, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8388, :column 5, :line 8388, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8389, :column 4, :line 8389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8389, :column 5, :line 8389, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8389, :column 7, :line 8389, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8382, :column 7, :line 8382, :file "cljs/core.cljs"} descendants ^{:arglists (^{:end-column 9, :end-line 8388, :column 4, :line 8388, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8388, :column 5, :line 8388, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8389, :column 4, :line 8389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8389, :column 5, :line 8389, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8389, :column 7, :line 8389, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8382, :column 7, :line 8382, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8388, :column 5, :line 8388, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8389, :column 5, :line 8389, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8389, :column 7, :line 8389, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8388, :column 4, :line 8388, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8388, :column 5, :line 8388, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8389, :column 4, :line 8389, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8389, :column 5, :line 8389, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8389, :column 7, :line 8389, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8382, :column 7, :line 8382, :file "cljs/core.cljs"} descendants, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8191, :column 10, :line 8191, :file "cljs/core.cljs"} coll]), :doc "Returns an iterable/seqable/reducible sequence of applications of\n  the transducer to the items in coll. Note that these applications\n  will be performed every time iterator/seq/reduce is called.", :end-column 17, :end-line 8187, :column 7, :line 8187, :file "cljs/core.cljs"} iteration ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8191, :column 10, :line 8191, :file "cljs/core.cljs"} coll]), :doc "Returns an iterable/seqable/reducible sequence of applications of\n  the transducer to the items in coll. Note that these applications\n  will be performed every time iterator/seq/reduce is called.", :end-column 17, :end-line 8187, :column 7, :line 8187, :file "cljs/core.cljs"} {:arglists (^cljs.core/Iteration [^{:end-column 10, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8191, :column 10, :line 8191, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8191, :column 10, :line 8191, :file "cljs/core.cljs"} coll]), :doc "Returns an iterable/seqable/reducible sequence of applications of\n  the transducer to the items in coll. Note that these applications\n  will be performed every time iterator/seq/reduce is called.", :end-column 17, :end-line 8187, :column 7, :line 8187, :file "cljs/core.cljs"} iteration, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 421, :column 22, :line 421, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 421, :column 23, :line 421, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 421, :column 25, :line 421, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 421, :column 10, :line 421, :file "cljs/core.cljs"} number, :end-column 22, :end-line 421, :column 17, :line 421, :file "cljs/core.cljs"} imul ^{:arglists (^{:end-column 27, :end-line 422, :column 22, :line 422, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 422, :column 23, :line 422, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 422, :column 25, :line 422, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 422, :column 10, :line 422, :file "cljs/core.cljs"} number, :end-column 22, :end-line 422, :column 17, :line 422, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 422, :column 23, :line 422, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 422, :column 25, :line 422, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 422, :column 22, :line 422, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 422, :column 23, :line 422, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 422, :column 25, :line 422, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 422, :column 10, :line 422, :file "cljs/core.cljs"} number, :end-column 22, :end-line 422, :column 17, :line 422, :file "cljs/core.cljs"} imul, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value])} ->Delay ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value])} {:arglists (^cljs.core/Delay [^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 29, :end-line 8101, :column 27, :line 8101, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8101, :column 39, :line 8101, :file "cljs/core.cljs"} value])} ->Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 3955, :column 18, :line 3955, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3955, :column 19, :line 3955, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3955, :column 22, :line 3955, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3955, :column 8, :line 3955, :file "cljs/core.cljs"} array-for ^{:arglists (^{:end-column 24, :end-line 3955, :column 18, :line 3955, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3955, :column 19, :line 3955, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3955, :column 22, :line 3955, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3955, :column 8, :line 3955, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3955, :column 19, :line 3955, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3955, :column 22, :line 3955, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 3955, :column 18, :line 3955, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3955, :column 19, :line 3955, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3955, :column 22, :line 3955, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3955, :column 8, :line 3955, :file "cljs/core.cljs"} array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 6951, :column 3, :line 6951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6951, :column 4, :line 6951, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6951, :column 6, :line 6951, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6947, :column 7, :line 6947, :file "cljs/core.cljs"} merge ^{:arglists (^{:end-column 11, :end-line 6951, :column 3, :line 6951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6951, :column 4, :line 6951, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6951, :column 6, :line 6951, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6947, :column 7, :line 6947, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 6951, :column 6, :line 6951, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6951, :column 3, :line 6951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6951, :column 4, :line 6951, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 6951, :column 6, :line 6951, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 6947, :column 7, :line 6947, :file "cljs/core.cljs"} merge, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} ISeqable ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Iteration cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 23, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 23, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} ISeqable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1905, :column 3, :line 1905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1905, :column 4, :line 1905, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1905, :column 6, :line 1905, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} js-mod ^{:arglists (^{:end-column 8, :end-line 1905, :column 3, :line 1905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1905, :column 4, :line 1905, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1905, :column 6, :line 1905, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1905, :column 4, :line 1905, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1905, :column 6, :line 1905, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1905, :column 3, :line 1905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1905, :column 4, :line 1905, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1905, :column 6, :line 1905, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} js-mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1451, :column 3, :line 1451, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1451, :column 4, :line 1451, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1449, :column 8, :line 1449, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1449, :column 16, :line 1449, :file "cljs/core.cljs"} integer? ^{:arglists (^{:end-column 6, :end-line 1451, :column 3, :line 1451, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1451, :column 4, :line 1451, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1449, :column 8, :line 1449, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1449, :column 16, :line 1449, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1451, :column 4, :line 1451, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1451, :column 3, :line 1451, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1451, :column 4, :line 1451, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1449, :column 8, :line 1449, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1449, :column 16, :line 1449, :file "cljs/core.cljs"} integer?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1235, :column 10, :line 1235, :file "cljs/core.cljs"} MetaFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1235, :column 10, :line 1235, :file "cljs/core.cljs"} MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 27, :end-line 1235, :column 17, :line 1235, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1235, :column 18, :line 1235, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1235, :column 22, :line 1235, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 12, :end-line 3787, :column 4, :line 3787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3787, :column 5, :line 3787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3787, :column 7, :line 3787, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 5, :line 3790, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3790, :column 7, :line 3790, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3790, :column 10, :line 3790, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3792, :column 4, :line 3792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3792, :column 5, :line 3792, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3792, :column 7, :line 3792, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3792, :column 10, :line 3792, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3792, :column 13, :line 3792, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3794, :column 4, :line 3794, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3794, :column 5, :line 3794, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3794, :column 7, :line 3794, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3794, :column 10, :line 3794, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3794, :column 13, :line 3794, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3794, :column 16, :line 3794, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3794, :column 18, :line 3794, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3781, :column 7, :line 3781, :file "cljs/core.cljs"} mapv ^{:arglists (^{:end-column 12, :end-line 3787, :column 4, :line 3787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3787, :column 5, :line 3787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3787, :column 7, :line 3787, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 5, :line 3790, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3790, :column 7, :line 3790, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3790, :column 10, :line 3790, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3792, :column 4, :line 3792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3792, :column 5, :line 3792, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3792, :column 7, :line 3792, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3792, :column 10, :line 3792, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3792, :column 13, :line 3792, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3794, :column 4, :line 3794, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3794, :column 5, :line 3794, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3794, :column 7, :line 3794, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3794, :column 10, :line 3794, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3794, :column 13, :line 3794, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3794, :column 16, :line 3794, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3794, :column 18, :line 3794, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3781, :column 7, :line 3781, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 7, :end-line 3787, :column 5, :line 3787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3787, :column 7, :line 3787, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 3790, :column 5, :line 3790, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3790, :column 7, :line 3790, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3790, :column 10, :line 3790, :file "cljs/core.cljs"} c2] [^{:end-column 7, :end-line 3792, :column 5, :line 3792, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3792, :column 7, :line 3792, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3792, :column 10, :line 3792, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3792, :column 13, :line 3792, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3794, :column 5, :line 3794, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3794, :column 7, :line 3794, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3794, :column 10, :line 3794, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3794, :column 13, :line 3794, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3794, :column 18, :line 3794, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3787, :column 4, :line 3787, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3787, :column 5, :line 3787, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3787, :column 7, :line 3787, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 5, :line 3790, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3790, :column 7, :line 3790, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3790, :column 10, :line 3790, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3792, :column 4, :line 3792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3792, :column 5, :line 3792, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3792, :column 7, :line 3792, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3792, :column 10, :line 3792, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3792, :column 13, :line 3792, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3794, :column 4, :line 3794, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3794, :column 5, :line 3794, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3794, :column 7, :line 3794, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3794, :column 10, :line 3794, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3794, :column 13, :line 3794, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3794, :column 16, :line 3794, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3794, :column 18, :line 3794, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3781, :column 7, :line 3781, :file "cljs/core.cljs"} mapv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7357, :column 4, :line 7357, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7357, :column 5, :line 7357, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7357, :column 7, :line 7357, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7359, :column 4, :line 7359, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7359, :column 5, :line 7359, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7359, :column 7, :line 7359, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7359, :column 12, :line 7359, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} partition-all ^{:arglists (^{:end-column 7, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7357, :column 4, :line 7357, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7357, :column 5, :line 7357, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7357, :column 7, :line 7357, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7359, :column 4, :line 7359, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7359, :column 5, :line 7359, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7359, :column 7, :line 7359, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7359, :column 12, :line 7359, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} n] [^{:end-column 7, :end-line 7357, :column 5, :line 7357, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7357, :column 7, :line 7357, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7359, :column 5, :line 7359, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7359, :column 7, :line 7359, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7359, :column 12, :line 7359, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7357, :column 4, :line 7357, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7357, :column 5, :line 7357, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7357, :column 7, :line 7357, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7359, :column 4, :line 7359, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7359, :column 5, :line 7359, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7359, :column 7, :line 7359, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7359, :column 12, :line 7359, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} partition-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7561, :column 4, :line 7561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7561, :column 5, :line 7561, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} partition-by ^{:arglists (^{:end-column 7, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7561, :column 4, :line 7561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7561, :column 5, :line 7561, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7561, :column 5, :line 7561, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7561, :column 4, :line 7561, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7561, :column 5, :line 7561, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7561, :column 7, :line 7561, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} partition-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 47, :end-line 4900, :column 38, :line 4900, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4900, :column 39, :line 4900, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4900, :column 43, :line 4900, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4900, :column 45, :line 4900, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4900, :column 8, :line 4900, :file "cljs/core.cljs"} array-map-index-of-identical? ^{:arglists (^{:end-column 47, :end-line 4900, :column 38, :line 4900, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4900, :column 39, :line 4900, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4900, :column 43, :line 4900, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4900, :column 45, :line 4900, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4900, :column 8, :line 4900, :file "cljs/core.cljs"} {:arglists ([^{:end-column 43, :end-line 4900, :column 39, :line 4900, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4900, :column 43, :line 4900, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4900, :column 45, :line 4900, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 47, :end-line 4900, :column 38, :line 4900, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4900, :column 39, :line 4900, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4900, :column 43, :line 4900, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4900, :column 45, :line 4900, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4900, :column 8, :line 4900, :file "cljs/core.cljs"} array-map-index-of-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} ISequential ^{:impls #{cljs.core/Cons cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Iteration cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 26, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} ISequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash])} ->LazySeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/LazySeq [^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 24, :end-line 2373, :column 19, :line 2373, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2373, :column 34, :line 2373, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2373, :column 47, :line 2373, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2373, :column 59, :line 2373, :file "cljs/core.cljs"} __hash])} ->LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 4662, :column 3, :line 4662, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4662, :column 4, :line 4662, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4662, :column 6, :line 4662, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4659, :column 8, :line 4659, :file "cljs/core.cljs"} equiv-map ^{:arglists (^{:end-column 8, :end-line 4662, :column 3, :line 4662, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4662, :column 4, :line 4662, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4662, :column 6, :line 4662, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4659, :column 8, :line 4659, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 4662, :column 4, :line 4662, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4662, :column 6, :line 4662, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 4662, :column 3, :line 4662, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4662, :column 4, :line 4662, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4662, :column 6, :line 4662, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4659, :column 8, :line 4659, :file "cljs/core.cljs"} equiv-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2656, :column 4, :line 2656, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2656, :column 5, :line 2656, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2660, :column 4, :line 2660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2660, :column 5, :line 2660, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2660, :column 10, :line 2660, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} object-array ^{:arglists (^{:end-column 17, :end-line 2656, :column 4, :line 2656, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2656, :column 5, :line 2656, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2660, :column 4, :line 2660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2660, :column 5, :line 2660, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2660, :column 10, :line 2660, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2656, :column 5, :line 2656, :file "cljs/core.cljs"} size-or-seq] ^cljs.core/array [^{:end-column 10, :end-line 2660, :column 5, :line 2660, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2660, :column 10, :line 2660, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2656, :column 4, :line 2656, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2656, :column 5, :line 2656, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2660, :column 4, :line 2660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2660, :column 5, :line 2660, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2660, :column 10, :line 2660, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} object-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 76, :column 20, :line 76, :file "cljs/core.cljs"} Keyword {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2312, :column 10, :line 2312, :file "cljs/core.cljs"} Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 47, :end-line 2312, :column 18, :line 2312, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2312, :column 19, :line 2312, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2312, :column 22, :line 2312, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2312, :column 27, :line 2312, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2312, :column 41, :line 2312, :file "cljs/core.cljs"} _hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 16, :end-line 8397, :column 4, :line 8397, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8397, :column 5, :line 8397, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8397, :column 9, :line 8397, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8401, :column 4, :line 8401, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8401, :column 5, :line 8401, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8401, :column 7, :line 8401, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8401, :column 11, :line 8401, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8391, :column 7, :line 8391, :file "cljs/core.cljs"} derive ^{:arglists (^{:end-column 16, :end-line 8397, :column 4, :line 8397, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8397, :column 5, :line 8397, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8397, :column 9, :line 8397, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8401, :column 4, :line 8401, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8401, :column 5, :line 8401, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8401, :column 7, :line 8401, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8401, :column 11, :line 8401, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8391, :column 7, :line 8391, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 8397, :column 5, :line 8397, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8397, :column 9, :line 8397, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8401, :column 5, :line 8401, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8401, :column 7, :line 8401, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8401, :column 11, :line 8401, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8397, :column 4, :line 8397, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8397, :column 5, :line 8397, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8397, :column 9, :line 8397, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8401, :column 4, :line 8401, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8401, :column 5, :line 8401, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8401, :column 7, :line 8401, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8401, :column 11, :line 8401, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8391, :column 7, :line 8391, :file "cljs/core.cljs"} derive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 4839, :column 16, :line 4839, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4839, :column 17, :line 4839, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 4839, :column 7, :line 4839, :file "cljs/core.cljs"} iterator ^{:arglists (^{:end-column 22, :end-line 4839, :column 16, :line 4839, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4839, :column 17, :line 4839, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 4839, :column 7, :line 4839, :file "cljs/core.cljs"} {:arglists (^cljs.core/Iterator [^{:end-column 22, :end-line 4839, :column 17, :line 4839, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 4839, :column 16, :line 4839, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4839, :column 17, :line 4839, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 4839, :column 7, :line 4839, :file "cljs/core.cljs"} iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2928, :column 16, :line 2928, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2928, :column 17, :line 2928, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2928, :column 7, :line 2928, :file "cljs/core.cljs"} seq-iter ^{:arglists (^{:end-column 22, :end-line 2928, :column 16, :line 2928, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2928, :column 17, :line 2928, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2928, :column 7, :line 2928, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:end-column 22, :end-line 2928, :column 17, :line 2928, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2928, :column 16, :line 2928, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2928, :column 17, :line 2928, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2928, :column 7, :line 2928, :file "cljs/core.cljs"} seq-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} IChunkedSeq ^{:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 26, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 374, :column 14, :line 374, :file "cljs/core.cljs"} IChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 8782, :column 32, :line 8782, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8782, :column 33, :line 8782, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8782, :column 8, :line 8782, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8782, :column 16, :line 8782, :file "cljs/core.cljs"} special-symbol? ^{:arglists (^{:end-column 35, :end-line 8782, :column 32, :line 8782, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8782, :column 33, :line 8782, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8782, :column 8, :line 8782, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8782, :column 16, :line 8782, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 35, :end-line 8782, :column 33, :line 8782, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 8782, :column 32, :line 8782, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8782, :column 33, :line 8782, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8782, :column 8, :line 8782, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8782, :column 16, :line 8782, :file "cljs/core.cljs"} special-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8379, :column 4, :line 8379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8379, :column 5, :line 8379, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8380, :column 4, :line 8380, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8380, :column 5, :line 8380, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8374, :column 7, :line 8374, :file "cljs/core.cljs"} ancestors ^{:arglists (^{:end-column 9, :end-line 8379, :column 4, :line 8379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8379, :column 5, :line 8379, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8380, :column 4, :line 8380, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8380, :column 5, :line 8380, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8374, :column 7, :line 8374, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8379, :column 5, :line 8379, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8380, :column 5, :line 8380, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8379, :column 4, :line 8379, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8379, :column 5, :line 8379, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8380, :column 4, :line 8380, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8380, :column 5, :line 8380, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8374, :column 7, :line 8374, :file "cljs/core.cljs"} ancestors, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7393, :column 4, :line 7393, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7393, :column 5, :line 7393, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7393, :column 8, :line 7393, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7393, :column 13, :line 7393, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7399, :column 4, :line 7399, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7399, :column 5, :line 7399, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7399, :column 8, :line 7399, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7399, :column 19, :line 7399, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7399, :column 29, :line 7399, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7399, :column 38, :line 7399, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7389, :column 7, :line 7389, :file "cljs/core.cljs"} subseq ^{:arglists (^{:end-column 17, :end-line 7393, :column 4, :line 7393, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7393, :column 5, :line 7393, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7393, :column 8, :line 7393, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7393, :column 13, :line 7393, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7399, :column 4, :line 7399, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7399, :column 5, :line 7399, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7399, :column 8, :line 7399, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7399, :column 19, :line 7399, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7399, :column 29, :line 7399, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7399, :column 38, :line 7399, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7389, :column 7, :line 7389, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7393, :column 5, :line 7393, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7393, :column 8, :line 7393, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7393, :column 13, :line 7393, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 7399, :column 5, :line 7399, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7399, :column 8, :line 7399, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7399, :column 19, :line 7399, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7399, :column 29, :line 7399, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7399, :column 38, :line 7399, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7393, :column 4, :line 7393, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7393, :column 5, :line 7393, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7393, :column 8, :line 7393, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7393, :column 13, :line 7393, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7399, :column 4, :line 7399, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7399, :column 5, :line 7399, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7399, :column 8, :line 7399, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7399, :column 19, :line 7399, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7399, :column 29, :line 7399, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7399, :column 38, :line 7399, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7389, :column 7, :line 7389, :file "cljs/core.cljs"} subseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} LazyTransformer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3017, :column 10, :line 3017, :file "cljs/core.cljs"} LazyTransformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 81, :end-line 3017, :column 26, :line 3017, :file "cljs/core.cljs"} [^{:mutable true, :end-column 45, :end-line 3017, :column 37, :line 3017, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3017, :column 55, :line 3017, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3017, :column 71, :line 3017, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3017, :column 76, :line 3017, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8088, :column 4, :line 8088, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8089, :column 4, :line 8089, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8089, :column 5, :line 8089, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8084, :column 7, :line 8084, :file "cljs/core.cljs"} gensym ^{:arglists (^{:end-column 6, :end-line 8088, :column 4, :line 8088, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8089, :column 4, :line 8089, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8089, :column 5, :line 8089, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8084, :column 7, :line 8084, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 19, :end-line 8089, :column 5, :line 8089, :file "cljs/core.cljs"} prefix-string]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8088, :column 4, :line 8088, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8089, :column 4, :line 8089, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8089, :column 5, :line 8089, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8084, :column 7, :line 8084, :file "cljs/core.cljs"} gensym, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 255, :column 22, :line 255, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 255, :column 23, :line 255, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 255, :column 5, :line 255, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 255, :column 16, :line 255, :file "cljs/core.cljs"} -next ^{:arglists (^{:end-column 28, :end-line 255, :column 22, :line 255, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 255, :column 23, :line 255, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 255, :column 5, :line 255, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 255, :column 16, :line 255, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 255, :column 23, :line 255, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 255, :column 22, :line 255, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 255, :column 23, :line 255, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 255, :column 5, :line 255, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 255, :column 16, :line 255, :file "cljs/core.cljs"} -next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr])} ->HashCollisionNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/HashCollisionNode [^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr])} ->HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8115, :column 3, :line 8115, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8115, :column 4, :line 8115, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8113, :column 8, :line 8113, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8113, :column 16, :line 8113, :file "cljs/core.cljs"} delay? ^{:arglists (^{:end-column 6, :end-line 8115, :column 3, :line 8115, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8115, :column 4, :line 8115, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8113, :column 8, :line 8113, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8113, :column 16, :line 8113, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 8115, :column 4, :line 8115, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8115, :column 3, :line 8115, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8115, :column 4, :line 8115, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8113, :column 8, :line 8113, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8113, :column 16, :line 8113, :file "cljs/core.cljs"} delay?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5244, :column 10, :line 5244, :file "cljs/core.cljs"} create-inode-seq ^{:arglists (^{:end-column 11, :end-line 5789, :column 4, :line 5789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5789, :column 5, :line 5789, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5791, :column 4, :line 5791, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5791, :column 5, :line 5791, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5791, :column 11, :line 5791, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5791, :column 13, :line 5791, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5788, :column 8, :line 5788, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5789, :column 5, :line 5789, :file "cljs/core.cljs"} nodes] [^{:end-column 11, :end-line 5791, :column 5, :line 5791, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5791, :column 11, :line 5791, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5791, :column 13, :line 5791, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5789, :column 4, :line 5789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5789, :column 5, :line 5789, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5791, :column 4, :line 5791, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5791, :column 5, :line 5791, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5791, :column 11, :line 5791, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5791, :column 13, :line 5791, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5788, :column 8, :line 5788, :file "cljs/core.cljs"} create-inode-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3763, :column 3, :line 3763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3763, :column 4, :line 3763, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3759, :column 7, :line 3759, :file "cljs/core.cljs"} flatten ^{:arglists (^{:end-column 6, :end-line 3763, :column 3, :line 3763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3763, :column 4, :line 3763, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3759, :column 7, :line 3759, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3763, :column 4, :line 3763, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3763, :column 3, :line 3763, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3763, :column 4, :line 3763, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3759, :column 7, :line 3759, :file "cljs/core.cljs"} flatten, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 267, :column 17, :line 267, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 267, :column 18, :line 267, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} -dissoc ^{:arglists (^{:end-column 25, :end-line 267, :column 17, :line 267, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 267, :column 18, :line 267, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 267, :column 18, :line 267, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 267, :column 17, :line 267, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 267, :column 18, :line 267, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 267, :column 9, :line 267, :file "cljs/core.cljs"} -dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1900, :column 15, :line 1900, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1900, :column 16, :line 1900, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} doubles ^{:arglists (^{:end-column 18, :end-line 1900, :column 15, :line 1900, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1900, :column 16, :line 1900, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1900, :column 16, :line 1900, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1900, :column 15, :line 1900, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1900, :column 16, :line 1900, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} doubles, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 261, :column 28, :line 261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 261, :column 29, :line 261, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 261, :column 34, :line 261, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 261, :column 5, :line 261, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 261, :column 13, :line 261, :file "cljs/core.cljs"} -contains-key? ^{:arglists (^{:end-column 36, :end-line 261, :column 28, :line 261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 261, :column 29, :line 261, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 261, :column 34, :line 261, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 261, :column 5, :line 261, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 261, :column 13, :line 261, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 261, :column 29, :line 261, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 261, :column 34, :line 261, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 261, :column 28, :line 261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 261, :column 29, :line 261, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 261, :column 34, :line 261, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 261, :column 5, :line 261, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 261, :column 13, :line 261, :file "cljs/core.cljs"} -contains-key?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8077, :column 3, :line 8077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8077, :column 4, :line 8077, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8077, :column 9, :line 8077, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8073, :column 7, :line 8073, :file "cljs/core.cljs"} remove-watch ^{:arglists (^{:end-column 13, :end-line 8077, :column 3, :line 8077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8077, :column 4, :line 8077, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8077, :column 9, :line 8077, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8073, :column 7, :line 8073, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8077, :column 4, :line 8077, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8077, :column 9, :line 8077, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8077, :column 3, :line 8077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8077, :column 4, :line 8077, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8077, :column 9, :line 8077, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8073, :column 7, :line 8073, :file "cljs/core.cljs"} remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8746, :column 5, :line 8746, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8746, :column 9, :line 8746, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8748, :column 5, :line 8748, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8748, :column 9, :line 8748, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8742, :column 7, :line 8742, :file "cljs/core.cljs"} ex-info ^{:arglists (^{:end-column 13, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8746, :column 5, :line 8746, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8746, :column 9, :line 8746, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8748, :column 5, :line 8748, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8748, :column 9, :line 8748, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8742, :column 7, :line 8742, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 8746, :column 5, :line 8746, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8746, :column 9, :line 8746, :file "cljs/core.cljs"} map] ^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 8748, :column 5, :line 8748, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8748, :column 9, :line 8748, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8746, :column 5, :line 8746, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8746, :column 9, :line 8746, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8748, :column 5, :line 8748, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8748, :column 9, :line 8748, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8742, :column 7, :line 8742, :file "cljs/core.cljs"} ex-info, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1446, :column 21, :line 1446, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1446, :column 22, :line 1446, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1446, :column 8, :line 1446, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1446, :column 16, :line 1446, :file "cljs/core.cljs"} ifn? ^{:arglists (^{:end-column 24, :end-line 1446, :column 21, :line 1446, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1446, :column 22, :line 1446, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1446, :column 8, :line 1446, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1446, :column 16, :line 1446, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 24, :end-line 1446, :column 22, :line 1446, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1446, :column 21, :line 1446, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1446, :column 22, :line 1446, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1446, :column 8, :line 1446, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1446, :column 16, :line 1446, :file "cljs/core.cljs"} ifn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 385, :column 14, :line 385, :file "cljs/core.cljs"} IAtom ^{:impls #{cljs.core/Atom}, :protocol-symbol true, :end-column 20, :end-line 385, :column 14, :line 385, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 385, :column 14, :line 385, :file "cljs/core.cljs"} IAtom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash])} ->PersistentQueue ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentQueue [^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash])} ->PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 343, :column 14, :line 343, :file "cljs/core.cljs"} IWatchable ^{:impls #{cljs.core/Atom}, :protocol-symbol true, :end-column 25, :end-line 343, :column 14, :line 343, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 25, :end-line 343, :column 14, :line 343, :file "cljs/core.cljs"} IWatchable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter])} ->Stepper ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter])} {:arglists (^cljs.core/Stepper [^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter])} ->Stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3889, :column 22, :line 3889, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3889, :column 23, :line 3889, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3889, :column 8, :line 3889, :file "cljs/core.cljs"} pv-fresh-node ^{:arglists (^{:end-column 28, :end-line 3889, :column 22, :line 3889, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3889, :column 23, :line 3889, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3889, :column 8, :line 3889, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3889, :column 23, :line 3889, :file "cljs/core.cljs"} edit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3889, :column 22, :line 3889, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3889, :column 23, :line 3889, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3889, :column 8, :line 3889, :file "cljs/core.cljs"} pv-fresh-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 4169, :column 10, :line 4169, :file "cljs/core.cljs"} subvec ^{:arglists (^{:end-column 13, :end-line 4363, :column 4, :line 4363, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4363, :column 5, :line 4363, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4363, :column 7, :line 4363, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4365, :column 4, :line 4365, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4365, :column 5, :line 4365, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4365, :column 7, :line 4365, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4365, :column 13, :line 4365, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 4357, :column 7, :line 4357, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 4363, :column 5, :line 4363, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4363, :column 7, :line 4363, :file "cljs/core.cljs"} start] ^cljs.core/Subvec [^{:end-column 7, :end-line 4365, :column 5, :line 4365, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4365, :column 7, :line 4365, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4365, :column 13, :line 4365, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 4363, :column 4, :line 4363, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4363, :column 5, :line 4363, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4363, :column 7, :line 4363, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4365, :column 4, :line 4365, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4365, :column 5, :line 4365, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4365, :column 7, :line 4365, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4365, :column 13, :line 4365, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 4357, :column 7, :line 4357, :file "cljs/core.cljs"} subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 363, :column 15, :line 363, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 363, :column 16, :line 363, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -pop! ^{:arglists (^{:end-column 22, :end-line 363, :column 15, :line 363, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 363, :column 16, :line 363, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 363, :column 16, :line 363, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 363, :column 15, :line 363, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 363, :column 16, :line 363, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3192, :column 5, :line 3192, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3193, :column 7, :line 3193, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3195, :column 4, :line 3195, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3195, :column 5, :line 3195, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3195, :column 7, :line 3195, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3195, :column 12, :line 3195, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3197, :column 4, :line 3197, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3197, :column 5, :line 3197, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3197, :column 7, :line 3197, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3197, :column 12, :line 3197, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3197, :column 17, :line 3197, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3199, :column 4, :line 3199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3199, :column 5, :line 3199, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3199, :column 7, :line 3199, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3199, :column 12, :line 3199, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3199, :column 17, :line 3199, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3199, :column 22, :line 3199, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3199, :column 24, :line 3199, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3188, :column 7, :line 3188, :file "cljs/core.cljs"} partial ^{:arglists (^{:end-column 7, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3192, :column 5, :line 3192, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3193, :column 7, :line 3193, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3195, :column 4, :line 3195, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3195, :column 5, :line 3195, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3195, :column 7, :line 3195, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3195, :column 12, :line 3195, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3197, :column 4, :line 3197, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3197, :column 5, :line 3197, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3197, :column 7, :line 3197, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3197, :column 12, :line 3197, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3197, :column 17, :line 3197, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3199, :column 4, :line 3199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3199, :column 5, :line 3199, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3199, :column 7, :line 3199, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3199, :column 12, :line 3199, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3199, :column 17, :line 3199, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3199, :column 22, :line 3199, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3199, :column 24, :line 3199, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3188, :column 7, :line 3188, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3192, :column 5, :line 3192, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3193, :column 7, :line 3193, :file "cljs/core.cljs"} arg1] ^function [^{:end-column 7, :end-line 3195, :column 5, :line 3195, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3195, :column 7, :line 3195, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3195, :column 12, :line 3195, :file "cljs/core.cljs"} arg2] ^function [^{:end-column 7, :end-line 3197, :column 5, :line 3197, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3197, :column 7, :line 3197, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3197, :column 12, :line 3197, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3197, :column 17, :line 3197, :file "cljs/core.cljs"} arg3] ^function [^{:end-column 7, :end-line 3199, :column 5, :line 3199, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3199, :column 7, :line 3199, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3199, :column 12, :line 3199, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3199, :column 17, :line 3199, :file "cljs/core.cljs"} arg3 & ^{:end-column 29, :end-line 3199, :column 24, :line 3199, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3192, :column 5, :line 3192, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3193, :column 7, :line 3193, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3195, :column 4, :line 3195, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3195, :column 5, :line 3195, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3195, :column 7, :line 3195, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3195, :column 12, :line 3195, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3197, :column 4, :line 3197, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3197, :column 5, :line 3197, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3197, :column 7, :line 3197, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3197, :column 12, :line 3197, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3197, :column 17, :line 3197, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3199, :column 4, :line 3199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3199, :column 5, :line 3199, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3199, :column 7, :line 3199, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3199, :column 12, :line 3199, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3199, :column 17, :line 3199, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3199, :column 22, :line 3199, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3199, :column 24, :line 3199, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3188, :column 7, :line 3188, :file "cljs/core.cljs"} partial, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1382, :column 8, :line 1382, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1382, :column 16, :line 1382, :file "cljs/core.cljs"} chunked-seq? ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1382, :column 8, :line 1382, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1382, :column 16, :line 1382, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1382, :column 8, :line 1382, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1382, :column 16, :line 1382, :file "cljs/core.cljs"} chunked-seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3653, :column 3, :line 3653, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3653, :column 4, :line 3653, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3653, :column 6, :line 3653, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3651, :column 7, :line 3651, :file "cljs/core.cljs"} replicate ^{:arglists (^{:end-column 8, :end-line 3653, :column 3, :line 3653, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3653, :column 4, :line 3653, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3653, :column 6, :line 3653, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3651, :column 7, :line 3651, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3653, :column 4, :line 3653, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3653, :column 6, :line 3653, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3653, :column 3, :line 3653, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3653, :column 4, :line 3653, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3653, :column 6, :line 3653, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3651, :column 7, :line 3651, :file "cljs/core.cljs"} replicate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4594, :column 10, :line 4594, :file "cljs/core.cljs"} PersistentQueue {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4594, :column 10, :line 4594, :file "cljs/core.cljs"} PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 4594, :column 26, :line 4594, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4594, :column 27, :line 4594, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4594, :column 32, :line 4594, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4594, :column 38, :line 4594, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4594, :column 44, :line 4594, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4594, :column 59, :line 4594, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 9, :end-line 7316, :column 4, :line 7316, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7316, :column 5, :line 7316, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7316, :column 7, :line 7316, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7317, :column 4, :line 7317, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7317, :column 5, :line 7317, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7317, :column 7, :line 7317, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7317, :column 9, :line 7317, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7318, :column 4, :line 7318, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7318, :column 5, :line 7318, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7318, :column 7, :line 7318, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7318, :column 9, :line 7318, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7318, :column 11, :line 7318, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7318, :column 13, :line 7318, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7314, :column 7, :line 7314, :file "cljs/core.cljs"} min-key ^{:arglists (^{:end-column 9, :end-line 7316, :column 4, :line 7316, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7316, :column 5, :line 7316, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7316, :column 7, :line 7316, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7317, :column 4, :line 7317, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7317, :column 5, :line 7317, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7317, :column 7, :line 7317, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7317, :column 9, :line 7317, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7318, :column 4, :line 7318, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7318, :column 5, :line 7318, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7318, :column 7, :line 7318, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7318, :column 9, :line 7318, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7318, :column 11, :line 7318, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7318, :column 13, :line 7318, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7314, :column 7, :line 7314, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7316, :column 5, :line 7316, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7316, :column 7, :line 7316, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7317, :column 5, :line 7317, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7317, :column 7, :line 7317, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7317, :column 9, :line 7317, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7318, :column 5, :line 7318, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7318, :column 7, :line 7318, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7318, :column 9, :line 7318, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 7318, :column 13, :line 7318, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7316, :column 4, :line 7316, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7316, :column 5, :line 7316, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7316, :column 7, :line 7316, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7317, :column 4, :line 7317, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7317, :column 5, :line 7317, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7317, :column 7, :line 7317, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7317, :column 9, :line 7317, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7318, :column 4, :line 7318, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7318, :column 5, :line 7318, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7318, :column 7, :line 7318, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7318, :column 9, :line 7318, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7318, :column 11, :line 7318, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7318, :column 13, :line 7318, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7314, :column 7, :line 7314, :file "cljs/core.cljs"} min-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2087, :column 18, :line 2087, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2087, :column 19, :line 2087, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2087, :column 8, :line 2087, :file "cljs/core.cljs"} hash-iset ^{:arglists (^{:end-column 21, :end-line 2087, :column 18, :line 2087, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2087, :column 19, :line 2087, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2087, :column 8, :line 2087, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 2087, :column 19, :line 2087, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2087, :column 18, :line 2087, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2087, :column 19, :line 2087, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2087, :column 8, :line 2087, :file "cljs/core.cljs"} hash-iset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 768, :column 7, :line 768, :file "cljs/core.cljs"} reduced ^{:arglists (^{:end-column 6, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 768, :column 7, :line 768, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 6, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 768, :column 7, :line 768, :file "cljs/core.cljs"} reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7662, :column 3, :line 7662, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7662, :column 4, :line 7662, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7662, :column 7, :line 7662, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7660, :column 7, :line 7660, :file "cljs/core.cljs"} re-matches ^{:arglists (^{:end-column 9, :end-line 7662, :column 3, :line 7662, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7662, :column 4, :line 7662, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7662, :column 7, :line 7662, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7660, :column 7, :line 7660, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7662, :column 4, :line 7662, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7662, :column 7, :line 7662, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7662, :column 3, :line 7662, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7662, :column 4, :line 7662, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7662, :column 7, :line 7662, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7660, :column 7, :line 7660, :file "cljs/core.cljs"} re-matches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6780, :column 3, :line 6780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6780, :column 4, :line 6780, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6780, :column 6, :line 6780, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6777, :column 7, :line 6777, :file "cljs/core.cljs"} array-map ^{:arglists (^{:end-column 14, :end-line 6780, :column 3, :line 6780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6780, :column 4, :line 6780, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6780, :column 6, :line 6780, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6777, :column 7, :line 6777, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [& ^{:end-column 14, :end-line 6780, :column 6, :line 6780, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6780, :column 3, :line 6780, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6780, :column 4, :line 6780, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6780, :column 6, :line 6780, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6777, :column 7, :line 6777, :file "cljs/core.cljs"} array-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 365, :column 14, :line 365, :file "cljs/core.cljs"} ITransientSet ^{:impls #{cljs.core/TransientHashSet}, :protocol-symbol true, :end-column 28, :end-line 365, :column 14, :line 365, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 28, :end-line 365, :column 14, :line 365, :file "cljs/core.cljs"} ITransientSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1791, :column 30, :line 1791, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1791, :column 31, :line 1791, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1791, :column 8, :line 1791, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1791, :column 15, :line 1791, :file "cljs/core.cljs"} unchecked-byte ^{:arglists (^{:end-column 33, :end-line 1791, :column 30, :line 1791, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1791, :column 31, :line 1791, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1791, :column 8, :line 1791, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1791, :column 15, :line 1791, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1791, :column 31, :line 1791, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1791, :column 30, :line 1791, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1791, :column 31, :line 1791, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1791, :column 8, :line 1791, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1791, :column 15, :line 1791, :file "cljs/core.cljs"} unchecked-byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 5303, :column 10, :line 5303, :file "cljs/core.cljs"} ArrayNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5516, :column 10, :line 5516, :file "cljs/core.cljs"} ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 5516, :column 20, :line 5516, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5516, :column 21, :line 5516, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5516, :column 36, :line 5516, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5516, :column 50, :line 5516, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash])} ->ChunkedSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 4171, :column 22, :line 4171, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4171, :column 26, :line 4171, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4171, :column 31, :line 4171, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4171, :column 33, :line 4171, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4171, :column 37, :line 4171, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4171, :column 52, :line 4171, :file "cljs/core.cljs"} __hash])} ->ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3428, :column 4, :line 3428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3436, :column 4, :line 3436, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3436, :column 5, :line 3436, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3436, :column 8, :line 3436, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3444, :column 4, :line 3444, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3444, :column 5, :line 3444, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3444, :column 8, :line 3444, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3444, :column 11, :line 3444, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3452, :column 4, :line 3452, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3452, :column 5, :line 3452, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3452, :column 8, :line 3452, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3452, :column 11, :line 3452, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3452, :column 14, :line 3452, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3452, :column 16, :line 3452, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3423, :column 7, :line 3423, :file "cljs/core.cljs"} every-pred ^{:arglists (^{:end-column 7, :end-line 3428, :column 4, :line 3428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3436, :column 4, :line 3436, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3436, :column 5, :line 3436, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3436, :column 8, :line 3436, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3444, :column 4, :line 3444, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3444, :column 5, :line 3444, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3444, :column 8, :line 3444, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3444, :column 11, :line 3444, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3452, :column 4, :line 3452, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3452, :column 5, :line 3452, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3452, :column 8, :line 3452, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3452, :column 11, :line 3452, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3452, :column 14, :line 3452, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3452, :column 16, :line 3452, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3423, :column 7, :line 3423, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 3436, :column 5, :line 3436, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3436, :column 8, :line 3436, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 3444, :column 5, :line 3444, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3444, :column 8, :line 3444, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3444, :column 11, :line 3444, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 3452, :column 5, :line 3452, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3452, :column 8, :line 3452, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3452, :column 11, :line 3452, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 3452, :column 16, :line 3452, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3428, :column 4, :line 3428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3436, :column 4, :line 3436, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3436, :column 5, :line 3436, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3436, :column 8, :line 3436, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3444, :column 4, :line 3444, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3444, :column 5, :line 3444, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3444, :column 8, :line 3444, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3444, :column 11, :line 3444, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3452, :column 4, :line 3452, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3452, :column 5, :line 3452, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3452, :column 8, :line 3452, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3452, :column 11, :line 3452, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3452, :column 14, :line 3452, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3452, :column 16, :line 3452, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3423, :column 7, :line 3423, :file "cljs/core.cljs"} every-pred, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 5002, :column 10, :line 5002, :file "cljs/core.cljs"} keys ^{:arglists (^{:end-column 13, :end-line 6872, :column 3, :line 6872, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6872, :column 4, :line 6872, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6870, :column 7, :line 6870, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6872, :column 4, :line 6872, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6872, :column 3, :line 6872, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6872, :column 4, :line 6872, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6870, :column 7, :line 6870, :file "cljs/core.cljs"} keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} {:arglists (^js/Error [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5004, :column 10, :line 5004, :file "cljs/core.cljs"} PersistentArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5004, :column 10, :line 5004, :file "cljs/core.cljs"} PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 5004, :column 29, :line 5004, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5004, :column 30, :line 5004, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5004, :column 35, :line 5004, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5004, :column 39, :line 5004, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5004, :column 53, :line 5004, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 1478, :column 4, :line 1478, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1478, :column 5, :line 1478, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1479, :column 4, :line 1479, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1479, :column 5, :line 1479, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1480, :column 4, :line 1480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1480, :column 5, :line 1480, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1480, :column 7, :line 1480, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1480, :column 9, :line 1480, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1480, :column 11, :line 1480, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1476, :column 8, :line 1476, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1476, :column 16, :line 1476, :file "cljs/core.cljs"} distinct? ^{:arglists (^{:end-column 7, :end-line 1478, :column 4, :line 1478, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1478, :column 5, :line 1478, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1479, :column 4, :line 1479, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1479, :column 5, :line 1479, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1480, :column 4, :line 1480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1480, :column 5, :line 1480, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1480, :column 7, :line 1480, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1480, :column 9, :line 1480, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1480, :column 11, :line 1480, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1476, :column 8, :line 1476, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1476, :column 16, :line 1476, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 1478, :column 5, :line 1478, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 1479, :column 5, :line 1479, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} y] ^cljs.core/boolean [^{:end-column 7, :end-line 1480, :column 5, :line 1480, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1480, :column 7, :line 1480, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1480, :column 11, :line 1480, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1478, :column 4, :line 1478, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1478, :column 5, :line 1478, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1479, :column 4, :line 1479, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1479, :column 5, :line 1479, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1480, :column 4, :line 1480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1480, :column 5, :line 1480, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1480, :column 7, :line 1480, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1480, :column 9, :line 1480, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1480, :column 11, :line 1480, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1476, :column 8, :line 1476, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1476, :column 16, :line 1476, :file "cljs/core.cljs"} distinct?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 42, :end-line 4657, :column 1, :line 4657, :file "cljs/core.cljs"} never-equiv ^{:private true, :end-column 42, :end-line 4657, :column 1, :line 4657, :file "cljs/core.cljs"} {:tag cljs.core/NeverEquiv, :op :var, :name ^{:private true, :end-column 42, :end-line 4657, :column 1, :line 4657, :file "cljs/core.cljs"} never-equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2943, :column 10, :line 2943, :file "cljs/core.cljs"} Stepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2943, :column 10, :line 2943, :file "cljs/core.cljs"} Stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 30, :end-line 2943, :column 18, :line 2943, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2943, :column 19, :line 2943, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2943, :column 25, :line 2943, :file "cljs/core.cljs"} iter], :protocols #{Object}}, ^{:arglists (^{:end-column 34, :end-line 1793, :column 31, :line 1793, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1793, :column 32, :line 1793, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1793, :column 8, :line 1793, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1793, :column 15, :line 1793, :file "cljs/core.cljs"} unchecked-short ^{:arglists (^{:end-column 34, :end-line 1793, :column 31, :line 1793, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1793, :column 32, :line 1793, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1793, :column 8, :line 1793, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1793, :column 15, :line 1793, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1793, :column 32, :line 1793, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1793, :column 31, :line 1793, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1793, :column 32, :line 1793, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1793, :column 8, :line 1793, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1793, :column 15, :line 1793, :file "cljs/core.cljs"} unchecked-short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash])} ->Range ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Range [^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash])} ->Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8703, :column 3, :line 8703, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8703, :column 4, :line 8703, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8701, :column 7, :line 8701, :file "cljs/core.cljs"} methods ^{:arglists (^{:end-column 12, :end-line 8703, :column 3, :line 8703, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8703, :column 4, :line 8703, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8701, :column 7, :line 8701, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8703, :column 4, :line 8703, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8703, :column 3, :line 8703, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8703, :column 4, :line 8703, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8701, :column 7, :line 8701, :file "cljs/core.cljs"} methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3141, :column 3, :line 3141, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3139, :column 8, :line 3139, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3139, :column 16, :line 3139, :file "cljs/core.cljs"} odd? ^{:arglists (^{:end-column 6, :end-line 3141, :column 3, :line 3141, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3139, :column 8, :line 3139, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3139, :column 16, :line 3139, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3141, :column 3, :line 3141, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3141, :column 4, :line 3141, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3139, :column 8, :line 3139, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3139, :column 16, :line 3139, :file "cljs/core.cljs"} odd?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end])} ->ArrayChunk ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end])} {:arglists (^cljs.core/ArrayChunk [^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end])} ->ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 2940, :column 24, :line 2940, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2940, :column 25, :line 2940, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2940, :column 7, :line 2940, :file "cljs/core.cljs"} lazy-transformer ^{:arglists (^{:end-column 33, :end-line 2940, :column 24, :line 2940, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2940, :column 25, :line 2940, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2940, :column 7, :line 2940, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:end-column 33, :end-line 2940, :column 25, :line 2940, :file "cljs/core.cljs"} stepper]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 2940, :column 24, :line 2940, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2940, :column 25, :line 2940, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2940, :column 7, :line 2940, :file "cljs/core.cljs"} lazy-transformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 787, :column 4, :line 787, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 787, :column 5, :line 787, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 787, :column 12, :line 787, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 798, :column 4, :line 798, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 798, :column 5, :line 798, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 798, :column 12, :line 798, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 798, :column 14, :line 798, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 807, :column 5, :line 807, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 807, :column 12, :line 807, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 807, :column 14, :line 807, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 807, :column 18, :line 807, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 784, :column 8, :line 784, :file "cljs/core.cljs"} ci-reduce ^{:arglists (^{:end-column 14, :end-line 787, :column 4, :line 787, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 787, :column 5, :line 787, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 787, :column 12, :line 787, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 798, :column 4, :line 798, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 798, :column 5, :line 798, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 798, :column 12, :line 798, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 798, :column 14, :line 798, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 807, :column 5, :line 807, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 807, :column 12, :line 807, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 807, :column 14, :line 807, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 807, :column 18, :line 807, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 784, :column 8, :line 784, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 787, :column 5, :line 787, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 787, :column 12, :line 787, :file "cljs/core.cljs"} f] [^{:end-column 12, :end-line 798, :column 5, :line 798, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 798, :column 12, :line 798, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 798, :column 14, :line 798, :file "cljs/core.cljs"} val] [^{:end-column 12, :end-line 807, :column 5, :line 807, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 807, :column 12, :line 807, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 807, :column 14, :line 807, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 807, :column 18, :line 807, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 787, :column 4, :line 787, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 787, :column 5, :line 787, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 787, :column 12, :line 787, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 798, :column 4, :line 798, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 798, :column 5, :line 798, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 798, :column 12, :line 798, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 798, :column 14, :line 798, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 807, :column 4, :line 807, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 807, :column 5, :line 807, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 807, :column 12, :line 807, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 807, :column 14, :line 807, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 807, :column 18, :line 807, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 784, :column 8, :line 784, :file "cljs/core.cljs"} ci-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3 ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 8503, :column 16, :line 8503, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8503, :column 17, :line 8503, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8503, :column 20, :line 8503, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8503, :column 4, :line 8503, :file "cljs/core.cljs"} -get-method ^{:arglists (^{:end-column 33, :end-line 8503, :column 16, :line 8503, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8503, :column 17, :line 8503, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8503, :column 20, :line 8503, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8503, :column 4, :line 8503, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8503, :column 17, :line 8503, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8503, :column 20, :line 8503, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 8503, :column 16, :line 8503, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8503, :column 17, :line 8503, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8503, :column 20, :line 8503, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8503, :column 4, :line 8503, :file "cljs/core.cljs"} -get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7572, :column 3, :line 7572, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7572, :column 4, :line 7572, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} frequencies ^{:arglists (^{:end-column 9, :end-line 7572, :column 3, :line 7572, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7572, :column 4, :line 7572, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 7572, :column 4, :line 7572, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7572, :column 3, :line 7572, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7572, :column 4, :line 7572, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7569, :column 7, :line 7569, :file "cljs/core.cljs"} frequencies, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1367, :column 3, :line 1367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1367, :column 4, :line 1367, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1365, :column 8, :line 1365, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1365, :column 16, :line 1365, :file "cljs/core.cljs"} reduceable? ^{:arglists (^{:end-column 6, :end-line 1367, :column 3, :line 1367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1367, :column 4, :line 1367, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1365, :column 8, :line 1365, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1365, :column 16, :line 1365, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1367, :column 4, :line 1367, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1367, :column 3, :line 1367, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1367, :column 4, :line 1367, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1365, :column 8, :line 1365, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1365, :column 16, :line 1365, :file "cljs/core.cljs"} reduceable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 33, :end-line 478, :column 1, :line 478, :file "cljs/core.cljs"} string-hash-cache ^{:end-column 33, :end-line 478, :column 1, :line 478, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 33, :end-line 478, :column 1, :line 478, :file "cljs/core.cljs"} string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7408, :column 8, :line 7408, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7414, :column 8, :line 7414, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7414, :column 19, :line 7414, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7414, :column 29, :line 7414, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7414, :column 38, :line 7414, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} rsubseq ^{:arglists (^{:end-column 17, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7408, :column 8, :line 7408, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7414, :column 8, :line 7414, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7414, :column 19, :line 7414, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7414, :column 29, :line 7414, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7414, :column 38, :line 7414, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7408, :column 8, :line 7408, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7414, :column 8, :line 7414, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7414, :column 19, :line 7414, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7414, :column 29, :line 7414, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7414, :column 38, :line 7414, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7408, :column 8, :line 7408, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7414, :column 8, :line 7414, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7414, :column 19, :line 7414, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7414, :column 29, :line 7414, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7414, :column 38, :line 7414, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} rsubseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 760, :column 3, :line 760, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 760, :column 4, :line 760, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 758, :column 7, :line 758, :file "cljs/core.cljs"} inc ^{:arglists (^{:end-column 6, :end-line 760, :column 3, :line 760, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 760, :column 4, :line 760, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 758, :column 7, :line 758, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 760, :column 4, :line 760, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 760, :column 3, :line 760, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 760, :column 4, :line 760, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 758, :column 7, :line 758, :file "cljs/core.cljs"} inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4709, :column 18, :line 4709, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4709, :column 19, :line 4709, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4709, :column 23, :line 4709, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4709, :column 8, :line 4709, :file "cljs/core.cljs"} obj-clone ^{:arglists (^{:end-column 26, :end-line 4709, :column 18, :line 4709, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4709, :column 19, :line 4709, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4709, :column 23, :line 4709, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4709, :column 8, :line 4709, :file "cljs/core.cljs"} {:arglists (^object [^{:end-column 23, :end-line 4709, :column 19, :line 4709, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4709, :column 23, :line 4709, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4709, :column 18, :line 4709, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4709, :column 19, :line 4709, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4709, :column 23, :line 4709, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4709, :column 8, :line 4709, :file "cljs/core.cljs"} obj-clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 8708, :column 3, :line 8708, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8708, :column 4, :line 8708, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8708, :column 12, :line 8708, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8705, :column 7, :line 8705, :file "cljs/core.cljs"} get-method ^{:arglists (^{:end-column 25, :end-line 8708, :column 3, :line 8708, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8708, :column 4, :line 8708, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8708, :column 12, :line 8708, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8705, :column 7, :line 8705, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8708, :column 4, :line 8708, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8708, :column 12, :line 8708, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 8708, :column 3, :line 8708, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8708, :column 4, :line 8708, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8708, :column 12, :line 8708, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8705, :column 7, :line 8705, :file "cljs/core.cljs"} get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 3933, :column 35, :line 3933, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3933, :column 36, :line 3933, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3933, :column 38, :line 3933, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} vector-index-out-of-bounds ^{:arglists (^{:end-column 42, :end-line 3933, :column 35, :line 3933, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3933, :column 36, :line 3933, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3933, :column 38, :line 3933, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 38, :end-line 3933, :column 36, :line 3933, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3933, :column 38, :line 3933, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 3933, :column 35, :line 3933, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3933, :column 36, :line 3933, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3933, :column 38, :line 3933, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} vector-index-out-of-bounds, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1952, :column 3, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 6, :line 1952, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1950, :column 7, :line 1950, :file "cljs/core.cljs"} bit-clear ^{:arglists (^{:end-column 8, :end-line 1952, :column 3, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 6, :line 1952, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1950, :column 7, :line 1950, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 6, :line 1952, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1952, :column 3, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 6, :line 1952, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1950, :column 7, :line 1950, :file "cljs/core.cljs"} bit-clear, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7419, :column 10, :line 7419, :file "cljs/core.cljs"} Range {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7419, :column 10, :line 7419, :file "cljs/core.cljs"} Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 7419, :column 16, :line 7419, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7419, :column 17, :line 7419, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7419, :column 22, :line 7419, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7419, :column 28, :line 7419, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7419, :column 32, :line 7419, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7419, :column 47, :line 7419, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 10, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3711, :column 5, :line 3711, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3720, :column 4, :line 3720, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3720, :column 5, :line 3720, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3720, :column 10, :line 3720, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3707, :column 7, :line 3707, :file "cljs/core.cljs"} filter ^{:arglists (^{:end-column 10, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3711, :column 5, :line 3711, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3720, :column 4, :line 3720, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3720, :column 5, :line 3720, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3720, :column 10, :line 3720, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3707, :column 7, :line 3707, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3711, :column 5, :line 3711, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3720, :column 5, :line 3720, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3720, :column 10, :line 3720, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3711, :column 5, :line 3711, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3720, :column 4, :line 3720, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3720, :column 5, :line 3720, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3720, :column 10, :line 3720, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3707, :column 7, :line 3707, :file "cljs/core.cljs"} filter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMapSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 6113, :column 32, :line 6113, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6113, :column 37, :line 6113, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6113, :column 44, :line 6113, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6113, :column 52, :line 6113, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6113, :column 63, :line 6113, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6113, :column 77, :line 6113, :file "cljs/core.cljs"} __hash])} ->PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 49, :end-line 5244, :column 27, :line 5244, :file "cljs/core.cljs"} create-array-node-seq ^{:arglists (^{:end-column 11, :end-line 5849, :column 4, :line 5849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5849, :column 5, :line 5849, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5850, :column 4, :line 5850, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5850, :column 5, :line 5850, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5850, :column 10, :line 5850, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5850, :column 16, :line 5850, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5850, :column 18, :line 5850, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5848, :column 8, :line 5848, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5849, :column 5, :line 5849, :file "cljs/core.cljs"} nodes] [^{:end-column 10, :end-line 5850, :column 5, :line 5850, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5850, :column 10, :line 5850, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5850, :column 16, :line 5850, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5850, :column 18, :line 5850, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5849, :column 4, :line 5849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5849, :column 5, :line 5849, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5850, :column 4, :line 5850, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5850, :column 5, :line 5850, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5850, :column 10, :line 5850, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5850, :column 16, :line 5850, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5850, :column 18, :line 5850, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5848, :column 8, :line 5848, :file "cljs/core.cljs"} create-array-node-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 362, :column 28, :line 362, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} -assoc-n! ^{:arglists (^{:end-column 32, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 362, :column 28, :line 362, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 362, :column 28, :line 362, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 362, :column 19, :line 362, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 362, :column 20, :line 362, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 362, :column 26, :line 362, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 362, :column 28, :line 362, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 362, :column 5, :line 362, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 362, :column 9, :line 362, :file "cljs/core.cljs"} -assoc-n!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} IWithMeta ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/t9657 cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/Symbol cljs.core/MetaFn cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 24, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 24, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} IWithMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 475, :column 10, :line 475, :file "cljs/core.cljs"} list ^{:arglists (^{:end-column 18, :end-line 2236, :column 12, :line 2236, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2236, :column 13, :line 2236, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2236, :column 15, :line 2236, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2236, :column 7, :line 2236, :file "cljs/core.cljs"} {:arglists (^cljs.core/not-native [& ^{:end-column 18, :end-line 2236, :column 15, :line 2236, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2236, :column 12, :line 2236, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2236, :column 13, :line 2236, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2236, :column 15, :line 2236, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2236, :column 7, :line 2236, :file "cljs/core.cljs"} list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1684, :column 5, :line 1684, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1684, :column 7, :line 1684, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1685, :column 4, :line 1685, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1685, :column 5, :line 1685, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1685, :column 7, :line 1685, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1685, :column 9, :line 1685, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1685, :column 11, :line 1685, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1680, :column 8, :line 1680, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1680, :column 15, :line 1680, :file "cljs/core.cljs"} + ^{:arglists (^{:end-column 6, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1684, :column 5, :line 1684, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1684, :column 7, :line 1684, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1685, :column 4, :line 1685, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1685, :column 5, :line 1685, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1685, :column 7, :line 1685, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1685, :column 9, :line 1685, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1685, :column 11, :line 1685, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1680, :column 8, :line 1680, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1680, :column 15, :line 1680, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1684, :column 5, :line 1684, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1684, :column 7, :line 1684, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1685, :column 5, :line 1685, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1685, :column 7, :line 1685, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1685, :column 11, :line 1685, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1682, :column 4, :line 1682, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1683, :column 4, :line 1683, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1683, :column 5, :line 1683, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1684, :column 5, :line 1684, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1684, :column 7, :line 1684, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1685, :column 4, :line 1685, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1685, :column 5, :line 1685, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1685, :column 7, :line 1685, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1685, :column 9, :line 1685, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1685, :column 11, :line 1685, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1680, :column 8, :line 1680, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1680, :column 15, :line 1680, :file "cljs/core.cljs"} +, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7526, :column 3, :line 7526, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} split-with ^{:arglists (^{:end-column 14, :end-line 7526, :column 3, :line 7526, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 9, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7526, :column 3, :line 7526, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} split-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr])} ->VectorNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr])} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 3887, :column 22, :line 3887, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3887, :column 27, :line 3887, :file "cljs/core.cljs"} arr])} ->VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} aset ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 413, :column 31, :line 413, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 413, :column 32, :line 413, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 413, :column 34, :line 413, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 413, :column 8, :line 413, :file "cljs/core.cljs"} number, :end-column 31, :end-line 413, :column 15, :line 413, :file "cljs/core.cljs"} int-rotate-left ^{:arglists (^{:end-column 36, :end-line 413, :column 31, :line 413, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 413, :column 32, :line 413, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 413, :column 34, :line 413, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 413, :column 8, :line 413, :file "cljs/core.cljs"} number, :end-column 31, :end-line 413, :column 15, :line 413, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 34, :end-line 413, :column 32, :line 413, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 413, :column 34, :line 413, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 413, :column 31, :line 413, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 413, :column 32, :line 413, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 413, :column 34, :line 413, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 413, :column 8, :line 413, :file "cljs/core.cljs"} number, :end-column 31, :end-line 413, :column 15, :line 413, :file "cljs/core.cljs"} int-rotate-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2361, :column 4, :line 2361, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2361, :column 5, :line 2361, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2370, :column 4, :line 2370, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2370, :column 5, :line 2370, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2370, :column 8, :line 2370, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2358, :column 7, :line 2358, :file "cljs/core.cljs"} keyword ^{:arglists (^{:end-column 10, :end-line 2361, :column 4, :line 2361, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2361, :column 5, :line 2361, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2370, :column 4, :line 2370, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2370, :column 5, :line 2370, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2370, :column 8, :line 2370, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2358, :column 7, :line 2358, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 2361, :column 5, :line 2361, :file "cljs/core.cljs"} name] ^cljs.core/Keyword [^{:end-column 8, :end-line 2370, :column 5, :line 2370, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2370, :column 8, :line 2370, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2361, :column 4, :line 2361, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2361, :column 5, :line 2361, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2370, :column 4, :line 2370, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2370, :column 5, :line 2370, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2370, :column 8, :line 2370, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2358, :column 7, :line 2358, :file "cljs/core.cljs"} keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash])} ->Cons ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/Cons [^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 21, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2251, :column 21, :line 2251, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2251, :column 27, :line 2251, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2251, :column 42, :line 2251, :file "cljs/core.cljs"} __hash])} ->Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 6164, :column 28, :line 6164, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6164, :column 29, :line 6164, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6164, :column 34, :line 6164, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6164, :column 45, :line 6164, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6164, :column 8, :line 6164, :file "cljs/core.cljs"} create-tree-map-seq ^{:arglists (^{:end-column 49, :end-line 6164, :column 28, :line 6164, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6164, :column 29, :line 6164, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6164, :column 34, :line 6164, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6164, :column 45, :line 6164, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6164, :column 8, :line 6164, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 34, :end-line 6164, :column 29, :line 6164, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6164, :column 34, :line 6164, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6164, :column 45, :line 6164, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 6164, :column 28, :line 6164, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6164, :column 29, :line 6164, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6164, :column 34, :line 6164, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6164, :column 45, :line 6164, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6164, :column 8, :line 6164, :file "cljs/core.cljs"} create-tree-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 239, :column 14, :line 239, :file "cljs/core.cljs"} ICollection ^{:impls #{cljs.core/PersistentHashMap cljs.core/ObjMap cljs.core/Cons cljs.core/PersistentArrayMap cljs.core/NodeSeq cljs.core/PersistentQueue cljs.core/IndexedSeq cljs.core/BlackNode cljs.core/EmptyList cljs.core/LazySeq cljs.core/Subvec cljs.core/PersistentQueueSeq cljs.core/ArrayNodeSeq cljs.core/ValSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List cljs.core/RSeq cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/KeySeq cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ChunkedCons cljs.core/LazyTransformer cljs.core/Range cljs.core/PersistentTreeMapSeq cljs.core/RedNode}, :protocol-symbol true, :end-column 26, :end-line 239, :column 14, :line 239, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 239, :column 14, :line 239, :file "cljs/core.cljs"} ICollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2998, :column 4, :line 2998, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2998, :column 5, :line 2998, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 2998, :column 11, :line 2998, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3001, :column 4, :line 3001, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3001, :column 5, :line 3001, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3001, :column 11, :line 3001, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3001, :column 17, :line 3001, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} multi-stepper ^{:arglists (^{:end-column 17, :end-line 2998, :column 4, :line 2998, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2998, :column 5, :line 2998, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 2998, :column 11, :line 2998, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3001, :column 4, :line 3001, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3001, :column 5, :line 3001, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3001, :column 11, :line 3001, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3001, :column 17, :line 3001, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 2998, :column 5, :line 2998, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 2998, :column 11, :line 2998, :file "cljs/core.cljs"} iters] ^cljs.core/MultiStepper [^{:end-column 11, :end-line 3001, :column 5, :line 3001, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3001, :column 11, :line 3001, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3001, :column 17, :line 3001, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2998, :column 4, :line 2998, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2998, :column 5, :line 2998, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 2998, :column 11, :line 2998, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3001, :column 4, :line 3001, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3001, :column 5, :line 3001, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3001, :column 11, :line 3001, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3001, :column 17, :line 3001, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} multi-stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1896, :column 13, :line 1896, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1896, :column 14, :line 1896, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1896, :column 7, :line 1896, :file "cljs/core.cljs"} chars ^{:arglists (^{:end-column 16, :end-line 1896, :column 13, :line 1896, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1896, :column 14, :line 1896, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1896, :column 7, :line 1896, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1896, :column 14, :line 1896, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1896, :column 13, :line 1896, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1896, :column 14, :line 1896, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1896, :column 7, :line 1896, :file "cljs/core.cljs"} chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2038, :column 4, :line 2038, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2038, :column 5, :line 2038, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2041, :column 4, :line 2041, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2041, :column 5, :line 2041, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2041, :column 7, :line 2041, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2041, :column 9, :line 2041, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2033, :column 7, :line 2033, :file "cljs/core.cljs"} str ^{:arglists (^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2038, :column 4, :line 2038, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2038, :column 5, :line 2038, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2041, :column 4, :line 2041, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2041, :column 5, :line 2041, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2041, :column 7, :line 2041, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2041, :column 9, :line 2041, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2033, :column 7, :line 2033, :file "cljs/core.cljs"} {:arglists (^string [] [^{:end-column 7, :end-line 2038, :column 5, :line 2038, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 2041, :column 5, :line 2041, :file "cljs/core.cljs"} x & ^{:end-column 12, :end-line 2041, :column 9, :line 2041, :file "cljs/core.cljs"} ys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2038, :column 4, :line 2038, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2038, :column 5, :line 2038, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2041, :column 4, :line 2041, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2041, :column 5, :line 2041, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2041, :column 7, :line 2041, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2041, :column 9, :line 2041, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2033, :column 7, :line 2033, :file "cljs/core.cljs"} str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 663, :column 3, :line 663, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 663, :column 4, :line 663, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 660, :column 8, :line 660, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 660, :column 12, :line 660, :file "cljs/core.cljs"} next ^{:arglists (^{:end-column 9, :end-line 663, :column 3, :line 663, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 663, :column 4, :line 663, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 660, :column 8, :line 660, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 660, :column 12, :line 660, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 663, :column 4, :line 663, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 663, :column 3, :line 663, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 663, :column 4, :line 663, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 660, :column 8, :line 660, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 660, :column 12, :line 660, :file "cljs/core.cljs"} next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} ASeq ^{:impls #{cljs.core/Cons cljs.core/IndexedSeq cljs.core/List cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 19, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 19, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} ASeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 39, :end-line 7823, :column 21, :line 7823, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7823, :column 22, :line 7823, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7823, :column 27, :line 7823, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7823, :column 34, :line 7823, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7823, :column 7, :line 7823, :file "cljs/core.cljs"} pr-seq-writer ^{:arglists (^{:end-column 39, :end-line 7823, :column 21, :line 7823, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7823, :column 22, :line 7823, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7823, :column 27, :line 7823, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7823, :column 34, :line 7823, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7823, :column 7, :line 7823, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 7823, :column 22, :line 7823, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7823, :column 27, :line 7823, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7823, :column 34, :line 7823, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 39, :end-line 7823, :column 21, :line 7823, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7823, :column 22, :line 7823, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7823, :column 27, :line 7823, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7823, :column 34, :line 7823, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7823, :column 7, :line 7823, :file "cljs/core.cljs"} pr-seq-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2910, :column 10, :line 2910, :file "cljs/core.cljs"} SeqIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2910, :column 10, :line 2910, :file "cljs/core.cljs"} SeqIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 50, :end-line 2910, :column 18, :line 2910, :file "cljs/core.cljs"} [^{:mutable true, :end-column 34, :end-line 2910, :column 29, :line 2910, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2910, :column 44, :line 2910, :file "cljs/core.cljs"} _next], :protocols #{Object}}, ^{:impls #{}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} IFn ^{:impls #{cljs.core/PersistentHashMap cljs.core/MultiFn cljs.core/ObjMap cljs.core/TransientVector cljs.core/PersistentArrayMap cljs.core/Keyword cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet cljs.core/Symbol cljs.core/MetaFn cljs.core/RedNode}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} IFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7657, :column 15, :line 7657, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7657, :column 16, :line 7657, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7657, :column 7, :line 7657, :file "cljs/core.cljs"} regexp? ^{:arglists (^{:end-column 18, :end-line 7657, :column 15, :line 7657, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7657, :column 16, :line 7657, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7657, :column 7, :line 7657, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 18, :end-line 7657, :column 16, :line 7657, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7657, :column 15, :line 7657, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7657, :column 16, :line 7657, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7657, :column 7, :line 7657, :file "cljs/core.cljs"} regexp?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 725, :column 10, :line 725, :file "cljs/core.cljs"} hash-map ^{:arglists (^{:end-column 14, :end-line 6771, :column 3, :line 6771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6771, :column 4, :line 6771, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6771, :column 6, :line 6771, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6768, :column 7, :line 6768, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [& ^{:end-column 14, :end-line 6771, :column 6, :line 6771, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6771, :column 3, :line 6771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6771, :column 4, :line 6771, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6771, :column 6, :line 6771, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6768, :column 7, :line 6768, :file "cljs/core.cljs"} hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8429, :column 4, :line 8429, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8429, :column 5, :line 8429, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8429, :column 9, :line 8429, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8432, :column 5, :line 8432, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8432, :column 11, :line 8432, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8425, :column 7, :line 8425, :file "cljs/core.cljs"} underive ^{:arglists (^{:end-column 16, :end-line 8429, :column 4, :line 8429, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8429, :column 5, :line 8429, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8429, :column 9, :line 8429, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8432, :column 5, :line 8432, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8432, :column 11, :line 8432, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8425, :column 7, :line 8425, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 8429, :column 5, :line 8429, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8429, :column 9, :line 8429, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8432, :column 5, :line 8432, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8432, :column 11, :line 8432, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8429, :column 4, :line 8429, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8429, :column 5, :line 8429, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8429, :column 9, :line 8429, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8432, :column 5, :line 8432, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8432, :column 11, :line 8432, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8425, :column 7, :line 8425, :file "cljs/core.cljs"} underive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1401, :column 10, :line 1401, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1401, :column 12, :line 1401, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1401, :column 15, :line 1401, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1401, :column 17, :line 1401, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1400, :column 8, :line 1400, :file "cljs/core.cljs"} array-copy ^{:arglists (^{:end-column 21, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1401, :column 10, :line 1401, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1401, :column 12, :line 1401, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1401, :column 15, :line 1401, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1401, :column 17, :line 1401, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1400, :column 8, :line 1400, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1401, :column 10, :line 1401, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1401, :column 12, :line 1401, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1401, :column 15, :line 1401, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1401, :column 17, :line 1401, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1401, :column 4, :line 1401, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1401, :column 5, :line 1401, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1401, :column 10, :line 1401, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1401, :column 12, :line 1401, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1401, :column 15, :line 1401, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1401, :column 17, :line 1401, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1400, :column 8, :line 1400, :file "cljs/core.cljs"} array-copy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4687, :column 29, :line 4687, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4687, :column 30, :line 4687, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4687, :column 32, :line 4687, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4687, :column 8, :line 4687, :file "cljs/core.cljs"} obj-map-compare-keys ^{:arglists (^{:end-column 34, :end-line 4687, :column 29, :line 4687, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4687, :column 30, :line 4687, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4687, :column 32, :line 4687, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4687, :column 8, :line 4687, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 4687, :column 30, :line 4687, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4687, :column 32, :line 4687, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4687, :column 29, :line 4687, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4687, :column 30, :line 4687, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4687, :column 32, :line 4687, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4687, :column 8, :line 4687, :file "cljs/core.cljs"} obj-map-compare-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 388, :column 12, :line 388, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 388, :column 13, :line 388, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 388, :column 15, :line 388, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -reset! ^{:arglists (^{:end-column 25, :end-line 388, :column 12, :line 388, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 388, :column 13, :line 388, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 388, :column 15, :line 388, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 388, :column 13, :line 388, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 388, :column 15, :line 388, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 388, :column 12, :line 388, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 388, :column 13, :line 388, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 388, :column 15, :line 388, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -rest ^{:arglists (^{:end-column 21, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2876, :column 16, :line 2876, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2876, :column 7, :line 2876, :file "cljs/core.cljs"} nil-iter ^{:arglists (^{:end-column 18, :end-line 2876, :column 16, :line 2876, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2876, :column 7, :line 2876, :file "cljs/core.cljs"} {:arglists (^cljs.core/t9657 []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2876, :column 16, :line 2876, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2876, :column 7, :line 2876, :file "cljs/core.cljs"} nil-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 3985, :column 31, :line 3985, :file "cljs/core.cljs"} pr-writer ^{:arglists (^{:end-column 20, :end-line 7756, :column 3, :line 7756, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7756, :column 8, :line 7756, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7756, :column 15, :line 7756, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 7752, :column 8, :line 7752, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7756, :column 8, :line 7756, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7756, :column 15, :line 7756, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7756, :column 3, :line 7756, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7756, :column 8, :line 7756, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7756, :column 15, :line 7756, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 7752, :column 8, :line 7752, :file "cljs/core.cljs"} pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1422, :column 3, :line 1422, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1422, :column 4, :line 1422, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} false? ^{:arglists (^{:end-column 6, :end-line 1422, :column 3, :line 1422, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1422, :column 4, :line 1422, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1422, :column 4, :line 1422, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1422, :column 3, :line 1422, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1422, :column 4, :line 1422, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} false?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably* ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1898, :column 12, :line 1898, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1898, :column 13, :line 1898, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1898, :column 7, :line 1898, :file "cljs/core.cljs"} ints ^{:arglists (^{:end-column 15, :end-line 1898, :column 12, :line 1898, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1898, :column 13, :line 1898, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1898, :column 7, :line 1898, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1898, :column 13, :line 1898, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1898, :column 12, :line 1898, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1898, :column 13, :line 1898, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1898, :column 7, :line 1898, :file "cljs/core.cljs"} ints, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3467, :column 4, :line 3467, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3467, :column 5, :line 3467, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3475, :column 4, :line 3475, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3475, :column 5, :line 3475, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3475, :column 8, :line 3475, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3483, :column 4, :line 3483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3483, :column 5, :line 3483, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3483, :column 8, :line 3483, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3483, :column 11, :line 3483, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 5, :line 3491, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3491, :column 8, :line 3491, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3491, :column 11, :line 3491, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3491, :column 14, :line 3491, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3491, :column 16, :line 3491, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3462, :column 7, :line 3462, :file "cljs/core.cljs"} some-fn ^{:arglists (^{:end-column 7, :end-line 3467, :column 4, :line 3467, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3467, :column 5, :line 3467, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3475, :column 4, :line 3475, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3475, :column 5, :line 3475, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3475, :column 8, :line 3475, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3483, :column 4, :line 3483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3483, :column 5, :line 3483, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3483, :column 8, :line 3483, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3483, :column 11, :line 3483, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 5, :line 3491, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3491, :column 8, :line 3491, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3491, :column 11, :line 3491, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3491, :column 14, :line 3491, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3491, :column 16, :line 3491, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3462, :column 7, :line 3462, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3467, :column 5, :line 3467, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 3475, :column 5, :line 3475, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3475, :column 8, :line 3475, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 3483, :column 5, :line 3483, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3483, :column 8, :line 3483, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3483, :column 11, :line 3483, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 3491, :column 5, :line 3491, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3491, :column 8, :line 3491, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3491, :column 11, :line 3491, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 3491, :column 16, :line 3491, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3467, :column 4, :line 3467, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3467, :column 5, :line 3467, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3475, :column 4, :line 3475, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3475, :column 5, :line 3475, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3475, :column 8, :line 3475, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3483, :column 4, :line 3483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3483, :column 5, :line 3483, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3483, :column 8, :line 3483, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3483, :column 11, :line 3483, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 5, :line 3491, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3491, :column 8, :line 3491, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3491, :column 11, :line 3491, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3491, :column 14, :line 3491, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3491, :column 16, :line 3491, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3462, :column 7, :line 3462, :file "cljs/core.cljs"} some-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline* ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 1552, :column 10, :line 1552, :file "cljs/core.cljs"} to-array ^{:arglists (^{:end-column 6, :end-line 2576, :column 3, :line 2576, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2576, :column 4, :line 2576, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2574, :column 7, :line 2574, :file "cljs/core.cljs"} {:arglists (^cljs.core/array [^{:end-column 6, :end-line 2576, :column 4, :line 2576, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2576, :column 3, :line 2576, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2576, :column 4, :line 2576, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2574, :column 7, :line 2574, :file "cljs/core.cljs"} to-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 23, :end-line 4250, :column 10, :line 4250, :file "cljs/core.cljs"} build-subvec ^{:arglists (^{:end-column 46, :end-line 4346, :column 21, :line 4346, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4346, :column 22, :line 4346, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4346, :column 27, :line 4346, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4346, :column 29, :line 4346, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4346, :column 35, :line 4346, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4346, :column 39, :line 4346, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 4346, :column 8, :line 4346, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 27, :end-line 4346, :column 22, :line 4346, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4346, :column 27, :line 4346, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4346, :column 29, :line 4346, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4346, :column 35, :line 4346, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4346, :column 39, :line 4346, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 4346, :column 21, :line 4346, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4346, :column 22, :line 4346, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4346, :column 27, :line 4346, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4346, :column 29, :line 4346, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4346, :column 35, :line 4346, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4346, :column 39, :line 4346, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 4346, :column 8, :line 4346, :file "cljs/core.cljs"} build-subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2306, :column 22, :line 2306, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2306, :column 23, :line 2306, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2306, :column 8, :line 2306, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2306, :column 16, :line 2306, :file "cljs/core.cljs"} list? ^{:arglists (^{:end-column 25, :end-line 2306, :column 22, :line 2306, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2306, :column 23, :line 2306, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2306, :column 8, :line 2306, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2306, :column 16, :line 2306, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 25, :end-line 2306, :column 23, :line 2306, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2306, :column 22, :line 2306, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2306, :column 23, :line 2306, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2306, :column 8, :line 2306, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2306, :column 16, :line 2306, :file "cljs/core.cljs"} list?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 6589, :column 24, :line 6589, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6589, :column 25, :line 6589, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6589, :column 30, :line 6589, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6589, :column 35, :line 6589, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6589, :column 37, :line 6589, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6589, :column 8, :line 6589, :file "cljs/core.cljs"} tree-map-remove ^{:arglists (^{:end-column 43, :end-line 6589, :column 24, :line 6589, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6589, :column 25, :line 6589, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6589, :column 30, :line 6589, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6589, :column 35, :line 6589, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6589, :column 37, :line 6589, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6589, :column 8, :line 6589, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6589, :column 25, :line 6589, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6589, :column 30, :line 6589, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6589, :column 35, :line 6589, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6589, :column 37, :line 6589, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 6589, :column 24, :line 6589, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6589, :column 25, :line 6589, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6589, :column 30, :line 6589, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6589, :column 35, :line 6589, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6589, :column 37, :line 6589, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6589, :column 8, :line 6589, :file "cljs/core.cljs"} tree-map-remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5622, :column 10, :line 5622, :file "cljs/core.cljs"} HashCollisionNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5622, :column 10, :line 5622, :file "cljs/core.cljs"} HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 43, :end-line 5625, :column 28, :line 5622, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5622, :column 29, :line 5622, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5623, :column 39, :line 5623, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5624, :column 39, :line 5624, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5625, :column 39, :line 5625, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array? ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8452, :column 3, :line 8452, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8452, :column 4, :line 8452, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8452, :column 6, :line 8452, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8452, :column 8, :line 8452, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8451, :column 8, :line 8451, :file "cljs/core.cljs"} prefers* ^{:arglists (^{:end-column 21, :end-line 8452, :column 3, :line 8452, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8452, :column 4, :line 8452, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8452, :column 6, :line 8452, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8452, :column 8, :line 8452, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8451, :column 8, :line 8451, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8452, :column 4, :line 8452, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8452, :column 6, :line 8452, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8452, :column 8, :line 8452, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8452, :column 3, :line 8452, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8452, :column 4, :line 8452, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8452, :column 6, :line 8452, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8452, :column 8, :line 8452, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8451, :column 8, :line 8451, :file "cljs/core.cljs"} prefers*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 607, :column 13, :line 607, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 607, :column 14, :line 607, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 607, :column 7, :line 607, :file "cljs/core.cljs"} clone ^{:arglists (^{:end-column 20, :end-line 607, :column 13, :line 607, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 607, :column 14, :line 607, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 607, :column 7, :line 607, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} clj [^{:end-column 20, :end-line 607, :column 14, :line 607, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 607, :column 13, :line 607, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 607, :column 14, :line 607, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 607, :column 7, :line 607, :file "cljs/core.cljs"} clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4673, :column 19, :line 4673, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4673, :column 20, :line 4673, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4673, :column 25, :line 4673, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4673, :column 27, :line 4673, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4673, :column 8, :line 4673, :file "cljs/core.cljs"} scan-array ^{:arglists (^{:end-column 33, :end-line 4673, :column 19, :line 4673, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4673, :column 20, :line 4673, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4673, :column 25, :line 4673, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4673, :column 27, :line 4673, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4673, :column 8, :line 4673, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4673, :column 20, :line 4673, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4673, :column 25, :line 4673, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4673, :column 27, :line 4673, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4673, :column 19, :line 4673, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4673, :column 20, :line 4673, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4673, :column 25, :line 4673, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4673, :column 27, :line 4673, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4673, :column 8, :line 4673, :file "cljs/core.cljs"} scan-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1962, :column 3, :line 1962, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1962, :column 4, :line 1962, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1960, :column 7, :line 1960, :file "cljs/core.cljs"} bit-not ^{:arglists (^{:end-column 6, :end-line 1962, :column 3, :line 1962, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1962, :column 4, :line 1962, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1960, :column 7, :line 1960, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1962, :column 4, :line 1962, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1962, :column 3, :line 1962, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1962, :column 4, :line 1962, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1960, :column 7, :line 1960, :file "cljs/core.cljs"} bit-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7744, :column 3, :line 7744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7744, :column 4, :line 7744, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7743, :column 17, :line 7743, :file "cljs/core.cljs"} quote-string ^{:arglists (^{:end-column 6, :end-line 7744, :column 3, :line 7744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7744, :column 4, :line 7744, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7743, :column 17, :line 7743, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7744, :column 4, :line 7744, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7744, :column 3, :line 7744, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7744, :column 4, :line 7744, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7743, :column 17, :line 7743, :file "cljs/core.cljs"} quote-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1777, :column 20, :line 1777, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1777, :column 21, :line 1777, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1777, :column 8, :line 1777, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1777, :column 15, :line 1777, :file "cljs/core.cljs"} byte ^{:arglists (^{:end-column 23, :end-line 1777, :column 20, :line 1777, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1777, :column 21, :line 1777, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1777, :column 8, :line 1777, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1777, :column 15, :line 1777, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1777, :column 21, :line 1777, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1777, :column 20, :line 1777, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1777, :column 21, :line 1777, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1777, :column 8, :line 1777, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1777, :column 15, :line 1777, :file "cljs/core.cljs"} byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1766, :column 4, :line 1766, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1766, :column 5, :line 1766, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1766, :column 7, :line 1766, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1767, :column 5, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1767, :column 7, :line 1767, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1767, :column 9, :line 1767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1767, :column 11, :line 1767, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1763, :column 8, :line 1763, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1763, :column 15, :line 1763, :file "cljs/core.cljs"} max ^{:arglists (^{:end-column 7, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1766, :column 4, :line 1766, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1766, :column 5, :line 1766, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1766, :column 7, :line 1766, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1767, :column 5, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1767, :column 7, :line 1767, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1767, :column 9, :line 1767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1767, :column 11, :line 1767, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1763, :column 8, :line 1763, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1763, :column 15, :line 1763, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1766, :column 5, :line 1766, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1766, :column 7, :line 1766, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1767, :column 5, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1767, :column 7, :line 1767, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1767, :column 11, :line 1767, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1766, :column 4, :line 1766, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1766, :column 5, :line 1766, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1766, :column 7, :line 1766, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1767, :column 4, :line 1767, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1767, :column 5, :line 1767, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1767, :column 7, :line 1767, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1767, :column 9, :line 1767, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1767, :column 11, :line 1767, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1763, :column 8, :line 1763, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1763, :column 15, :line 1763, :file "cljs/core.cljs"} max, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 368, :column 14, :line 368, :file "cljs/core.cljs"} IComparable ^{:impls #{cljs.core/Keyword cljs.core/Subvec cljs.core/PersistentVector cljs.core/Symbol}, :protocol-symbol true, :end-column 26, :end-line 368, :column 14, :line 368, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 26, :end-line 368, :column 14, :line 368, :file "cljs/core.cljs"} IComparable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2001, :column 5, :line 2001, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2002, :column 5, :line 2002, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2002, :column 7, :line 2002, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2003, :column 4, :line 2003, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2003, :column 5, :line 2003, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2003, :column 9, :line 2003, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2003, :column 11, :line 2003, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1997, :column 8, :line 1997, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1997, :column 16, :line 1997, :file "cljs/core.cljs"} == ^{:arglists (^{:end-column 7, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2001, :column 5, :line 2001, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2002, :column 5, :line 2002, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2002, :column 7, :line 2002, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2003, :column 4, :line 2003, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2003, :column 5, :line 2003, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2003, :column 9, :line 2003, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2003, :column 11, :line 2003, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1997, :column 8, :line 1997, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1997, :column 16, :line 1997, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 7, :end-line 2001, :column 5, :line 2001, :file "cljs/core.cljs"} x] ^cljs.core/boolean [^{:end-column 7, :end-line 2002, :column 5, :line 2002, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2002, :column 7, :line 2002, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 2003, :column 5, :line 2003, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2003, :column 11, :line 2003, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2001, :column 5, :line 2001, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2002, :column 5, :line 2002, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2002, :column 7, :line 2002, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2003, :column 4, :line 2003, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2003, :column 5, :line 2003, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2003, :column 9, :line 2003, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2003, :column 11, :line 2003, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 1997, :column 8, :line 1997, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1997, :column 16, :line 1997, :file "cljs/core.cljs"} ==, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8371, :column 4, :line 8371, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8371, :column 5, :line 8371, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8372, :column 4, :line 8372, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8372, :column 5, :line 8372, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8372, :column 7, :line 8372, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8366, :column 7, :line 8366, :file "cljs/core.cljs"} parents ^{:arglists (^{:end-column 9, :end-line 8371, :column 4, :line 8371, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8371, :column 5, :line 8371, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8372, :column 4, :line 8372, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8372, :column 5, :line 8372, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8372, :column 7, :line 8372, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8366, :column 7, :line 8366, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8371, :column 5, :line 8371, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8372, :column 5, :line 8372, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8372, :column 7, :line 8372, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8371, :column 4, :line 8371, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8371, :column 5, :line 8371, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8372, :column 4, :line 8372, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8372, :column 5, :line 8372, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8372, :column 7, :line 8372, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8366, :column 7, :line 8366, :file "cljs/core.cljs"} parents, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1057, :column 3, :line 1057, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1054, :column 7, :line 1054, :file "cljs/core.cljs"} count ^{:arglists (^{:end-column 9, :end-line 1057, :column 3, :line 1057, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1054, :column 7, :line 1054, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1057, :column 3, :line 1057, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1054, :column 7, :line 1054, :file "cljs/core.cljs"} count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 366, :column 19, :line 366, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 366, :column 20, :line 366, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 366, :column 26, :line 366, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 366, :column 9, :line 366, :file "cljs/core.cljs"} -disjoin! ^{:arglists (^{:end-column 28, :end-line 366, :column 19, :line 366, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 366, :column 20, :line 366, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 366, :column 26, :line 366, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 366, :column 9, :line 366, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 366, :column 20, :line 366, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 366, :column 26, :line 366, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 366, :column 19, :line 366, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 366, :column 20, :line 366, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 366, :column 26, :line 366, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 366, :column 5, :line 366, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 366, :column 9, :line 366, :file "cljs/core.cljs"} -disjoin!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val])} ->TransientHashMap ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val])} {:arglists (^cljs.core/TransientHashMap [^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6001, :column 39, :line 6001, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6001, :column 47, :line 6001, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6002, :column 38, :line 6002, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6003, :column 38, :line 6003, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6004, :column 39, :line 6004, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6004, :column 47, :line 6004, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6005, :column 38, :line 6005, :file "cljs/core.cljs"} nil-val])} ->TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 2437, :column 10, :line 2437, :file "cljs/core.cljs"} ArrayChunk {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2456, :column 10, :line 2456, :file "cljs/core.cljs"} ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 34, :end-line 2456, :column 21, :line 2456, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2456, :column 22, :line 2456, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2456, :column 26, :line 2456, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2456, :column 30, :line 2456, :file "cljs/core.cljs"} end], :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}}, ^{:arglists (^{:end-column 26, :end-line 6808, :column 4, :line 6808, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6808, :column 5, :line 6808, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6808, :column 16, :line 6808, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6808, :column 18, :line 6808, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} sorted-map-by ^{:arglists (^{:end-column 26, :end-line 6808, :column 4, :line 6808, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6808, :column 5, :line 6808, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6808, :column 16, :line 6808, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6808, :column 18, :line 6808, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 16, :end-line 6808, :column 5, :line 6808, :file "cljs/core.cljs"} comparator & ^{:end-column 26, :end-line 6808, :column 18, :line 6808, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 6808, :column 4, :line 6808, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6808, :column 5, :line 6808, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6808, :column 16, :line 6808, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6808, :column 18, :line 6808, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6805, :column 7, :line 6805, :file "cljs/core.cljs"} sorted-map-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 172, :column 10, :line 172, :file "cljs/core.cljs"} apply ^{:arglists (^{:end-column 12, :end-line 2803, :column 4, :line 2803, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2803, :column 5, :line 2803, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2803, :column 7, :line 2803, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2811, :column 4, :line 2811, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2811, :column 5, :line 2811, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2811, :column 7, :line 2811, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2811, :column 9, :line 2811, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2820, :column 5, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2820, :column 7, :line 2820, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2820, :column 9, :line 2820, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2820, :column 11, :line 2820, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2829, :column 4, :line 2829, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2829, :column 5, :line 2829, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2829, :column 7, :line 2829, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2829, :column 9, :line 2829, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2829, :column 11, :line 2829, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2829, :column 13, :line 2829, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2838, :column 9, :line 2838, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2838, :column 11, :line 2838, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2838, :column 13, :line 2838, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2838, :column 15, :line 2838, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2838, :column 17, :line 2838, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2803, :column 5, :line 2803, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2803, :column 7, :line 2803, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2811, :column 5, :line 2811, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2811, :column 7, :line 2811, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2811, :column 9, :line 2811, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2820, :column 5, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2820, :column 7, :line 2820, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2820, :column 9, :line 2820, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2820, :column 11, :line 2820, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2829, :column 5, :line 2829, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2829, :column 7, :line 2829, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2829, :column 9, :line 2829, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2829, :column 11, :line 2829, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2829, :column 13, :line 2829, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2838, :column 9, :line 2838, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2838, :column 11, :line 2838, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2838, :column 13, :line 2838, :file "cljs/core.cljs"} d & ^{:end-column 22, :end-line 2838, :column 17, :line 2838, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2803, :column 4, :line 2803, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2803, :column 5, :line 2803, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2803, :column 7, :line 2803, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2811, :column 4, :line 2811, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2811, :column 5, :line 2811, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2811, :column 7, :line 2811, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2811, :column 9, :line 2811, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2820, :column 4, :line 2820, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2820, :column 5, :line 2820, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2820, :column 7, :line 2820, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2820, :column 9, :line 2820, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2820, :column 11, :line 2820, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2829, :column 4, :line 2829, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2829, :column 5, :line 2829, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2829, :column 7, :line 2829, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2829, :column 9, :line 2829, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2829, :column 11, :line 2829, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2829, :column 13, :line 2829, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2838, :column 4, :line 2838, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2838, :column 5, :line 2838, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2838, :column 7, :line 2838, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2838, :column 9, :line 2838, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2838, :column 11, :line 2838, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2838, :column 13, :line 2838, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2838, :column 15, :line 2838, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2838, :column 17, :line 2838, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} apply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 8338, :column 29, :line 8338, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8338, :column 8, :line 8338, :file "cljs/core.cljs"} get-global-hierarchy ^{:arglists (^{:end-column 31, :end-line 8338, :column 29, :line 8338, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8338, :column 8, :line 8338, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 8338, :column 29, :line 8338, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8338, :column 8, :line 8338, :file "cljs/core.cljs"} get-global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 493, :column 32, :line 493, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 493, :column 33, :line 493, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} add-to-string-hash-cache ^{:arglists (^{:end-column 35, :end-line 493, :column 32, :line 493, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 493, :column 33, :line 493, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 35, :end-line 493, :column 33, :line 493, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 493, :column 32, :line 493, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 493, :column 33, :line 493, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 493, :column 7, :line 493, :file "cljs/core.cljs"} add-to-string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 8205, :column 10, :line 8205, :file "cljs/core.cljs"} clj->js ^{:arglists (^{:end-column 7, :end-line 8221, :column 4, :line 8221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8221, :column 5, :line 8221, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 8217, :column 7, :line 8217, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8221, :column 5, :line 8221, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8221, :column 4, :line 8221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8221, :column 5, :line 8221, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 8217, :column 7, :line 8217, :file "cljs/core.cljs"} clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 4943, :column 10, :line 4943, :file "cljs/core.cljs"} TransientArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5163, :column 10, :line 5163, :file "cljs/core.cljs"} TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 5165, :column 28, :line 5163, :file "cljs/core.cljs"} [^{:mutable true, :end-column 49, :end-line 5163, :column 39, :line 5163, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5164, :column 39, :line 5164, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5165, :column 29, :line 5165, :file "cljs/core.cljs"} arr], :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail])} ->TransientVector ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail])} {:arglists (^cljs.core/TransientVector [^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:mutable true, :end-column 41, :end-line 4423, :column 37, :line 4423, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4424, :column 37, :line 4424, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4425, :column 37, :line 4425, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4426, :column 37, :line 4426, :file "cljs/core.cljs"} tail])} ->TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 378, :column 14, :line 378, :file "cljs/core.cljs"} IChunkedNext ^{:impls #{cljs.core/ChunkedSeq cljs.core/ChunkedCons}, :protocol-symbol true, :end-column 27, :end-line 378, :column 14, :line 378, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 27, :end-line 378, :column 14, :line 378, :file "cljs/core.cljs"} IChunkedNext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3683, :column 3, :line 3683, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3683, :column 8, :line 3683, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3681, :column 7, :line 3681, :file "cljs/core.cljs"} interpose ^{:arglists (^{:end-column 13, :end-line 3683, :column 3, :line 3683, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3683, :column 8, :line 3683, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3681, :column 7, :line 3681, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3683, :column 8, :line 3683, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3683, :column 3, :line 3683, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3683, :column 8, :line 3683, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3681, :column 7, :line 3681, :file "cljs/core.cljs"} interpose, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash])} ->BlackNode ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/BlackNode [^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 25, :end-line 6270, :column 21, :line 6270, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6270, :column 25, :line 6270, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6270, :column 29, :line 6270, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6270, :column 34, :line 6270, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6270, :column 50, :line 6270, :file "cljs/core.cljs"} __hash])} ->BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 762, :column 10, :line 762, :file "cljs/core.cljs"} deref ^{:declared true, :end-column 79, :end-line 5244, :column 73, :line 5244, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 79, :end-line 5244, :column 73, :line 5244, :file "cljs/core.cljs"} deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 3892, :column 16, :line 3892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3892, :column 17, :line 3892, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3892, :column 22, :line 3892, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3892, :column 8, :line 3892, :file "cljs/core.cljs"} pv-aget ^{:arglists (^{:end-column 26, :end-line 3892, :column 16, :line 3892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3892, :column 17, :line 3892, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3892, :column 22, :line 3892, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3892, :column 8, :line 3892, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3892, :column 17, :line 3892, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3892, :column 22, :line 3892, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 3892, :column 16, :line 3892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3892, :column 17, :line 3892, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3892, :column 22, :line 3892, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3892, :column 8, :line 3892, :file "cljs/core.cljs"} pv-aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 1208, :column 4, :line 1208, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1208, :column 5, :line 1208, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1208, :column 10, :line 1208, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1208, :column 12, :line 1208, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1212, :column 4, :line 1212, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1212, :column 5, :line 1212, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1212, :column 10, :line 1212, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1212, :column 12, :line 1212, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1212, :column 14, :line 1212, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1203, :column 7, :line 1203, :file "cljs/core.cljs"} assoc ^{:arglists (^{:end-column 14, :end-line 1208, :column 4, :line 1208, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1208, :column 5, :line 1208, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1208, :column 10, :line 1208, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1208, :column 12, :line 1208, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1212, :column 4, :line 1212, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1212, :column 5, :line 1212, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1212, :column 10, :line 1212, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1212, :column 12, :line 1212, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1212, :column 14, :line 1212, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1203, :column 7, :line 1203, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1208, :column 5, :line 1208, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1208, :column 10, :line 1208, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1208, :column 12, :line 1208, :file "cljs/core.cljs"} v] [^{:end-column 10, :end-line 1212, :column 5, :line 1212, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1212, :column 10, :line 1212, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1212, :column 12, :line 1212, :file "cljs/core.cljs"} v & ^{:end-column 20, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 1208, :column 4, :line 1208, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1208, :column 5, :line 1208, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1208, :column 10, :line 1208, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1208, :column 12, :line 1208, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1212, :column 4, :line 1212, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1212, :column 5, :line 1212, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1212, :column 10, :line 1212, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1212, :column 12, :line 1212, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1212, :column 14, :line 1212, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1212, :column 16, :line 1212, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1203, :column 7, :line 1203, :file "cljs/core.cljs"} assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2729, :column 7, :line 2729, :file "cljs/core.cljs"} transient ^{:arglists (^{:end-column 9, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2729, :column 7, :line 2729, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 349, :column 5, :line 349, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2731, :column 3, :line 2731, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2729, :column 7, :line 2729, :file "cljs/core.cljs"} transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 274, :column 18, :line 274, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 274, :column 19, :line 274, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 274, :column 24, :line 274, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} -disjoin ^{:arglists (^{:end-column 26, :end-line 274, :column 18, :line 274, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 274, :column 19, :line 274, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 274, :column 24, :line 274, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 274, :column 19, :line 274, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 274, :column 24, :line 274, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 274, :column 18, :line 274, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 274, :column 19, :line 274, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 274, :column 24, :line 274, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 274, :column 5, :line 274, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 274, :column 9, :line 274, :file "cljs/core.cljs"} -disjoin, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2550, :column 18, :line 2550, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2550, :column 19, :line 2550, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2550, :column 25, :line 2550, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} chunk-cons ^{:arglists (^{:end-column 30, :end-line 2550, :column 18, :line 2550, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2550, :column 19, :line 2550, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2550, :column 25, :line 2550, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2550, :column 19, :line 2550, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2550, :column 25, :line 2550, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2550, :column 18, :line 2550, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2550, :column 19, :line 2550, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2550, :column 25, :line 2550, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2550, :column 7, :line 2550, :file "cljs/core.cljs"} chunk-cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2895, :column 10, :line 2895, :file "cljs/core.cljs"} ArrayIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2895, :column 10, :line 2895, :file "cljs/core.cljs"} ArrayIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 37, :end-line 2895, :column 20, :line 2895, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2895, :column 21, :line 2895, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2895, :column 35, :line 2895, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 9, :end-line 8778, :column 3, :line 8778, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8778, :column 4, :line 8778, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8776, :column 7, :line 8776, :file "cljs/core.cljs"} comparator ^{:arglists (^{:end-column 9, :end-line 8778, :column 3, :line 8778, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8778, :column 4, :line 8778, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8776, :column 7, :line 8776, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 8778, :column 4, :line 8778, :file "cljs/core.cljs"} pred]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8778, :column 3, :line 8778, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8778, :column 4, :line 8778, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8776, :column 7, :line 8776, :file "cljs/core.cljs"} comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6796, :column 7, :line 6796, :file "cljs/core.cljs"} sorted-map ^{:arglists (^{:end-column 15, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6796, :column 7, :line 6796, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 15, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6799, :column 4, :line 6799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6799, :column 5, :line 6799, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6799, :column 7, :line 6799, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6796, :column 7, :line 6796, :file "cljs/core.cljs"} sorted-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3614, :column 4, :line 3614, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3614, :column 5, :line 3614, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3627, :column 10, :line 3627, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3610, :column 7, :line 3610, :file "cljs/core.cljs"} drop-while ^{:arglists (^{:end-column 10, :end-line 3614, :column 4, :line 3614, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3614, :column 5, :line 3614, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3627, :column 10, :line 3627, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3610, :column 7, :line 3610, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3614, :column 5, :line 3614, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3627, :column 10, :line 3627, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3614, :column 4, :line 3614, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3614, :column 5, :line 3614, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3627, :column 10, :line 3627, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3610, :column 7, :line 3610, :file "cljs/core.cljs"} drop-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IWriter ^{:impls #{cljs.core/StringBufferWriter}, :protocol-symbol true, :end-column 22, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6815, :column 10, :line 6815, :file "cljs/core.cljs"} KeySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6815, :column 10, :line 6815, :file "cljs/core.cljs"} KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6815, :column 17, :line 6815, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6815, :column 19, :line 6815, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6815, :column 30, :line 6815, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6815, :column 35, :line 6815, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8126, :column 3, :line 8126, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8126, :column 4, :line 8126, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8124, :column 8, :line 8124, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8124, :column 16, :line 8124, :file "cljs/core.cljs"} realized? ^{:arglists (^{:end-column 6, :end-line 8126, :column 3, :line 8126, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8126, :column 4, :line 8126, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8124, :column 8, :line 8124, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8124, :column 16, :line 8124, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 8126, :column 4, :line 8126, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8126, :column 3, :line 8126, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8126, :column 4, :line 8126, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8124, :column 8, :line 8124, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8124, :column 16, :line 8124, :file "cljs/core.cljs"} realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4878, :column 36, :line 4878, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4878, :column 37, :line 4878, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4878, :column 41, :line 4878, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4878, :column 43, :line 4878, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4878, :column 8, :line 4878, :file "cljs/core.cljs"} array-map-index-of-keyword? ^{:arglists (^{:end-column 45, :end-line 4878, :column 36, :line 4878, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4878, :column 37, :line 4878, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4878, :column 41, :line 4878, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4878, :column 43, :line 4878, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4878, :column 8, :line 4878, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4878, :column 37, :line 4878, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4878, :column 41, :line 4878, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4878, :column 43, :line 4878, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4878, :column 36, :line 4878, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4878, :column 37, :line 4878, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4878, :column 41, :line 4878, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4878, :column 43, :line 4878, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4878, :column 8, :line 4878, :file "cljs/core.cljs"} array-map-index-of-keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn* ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 10, :end-line 25, :column 8, :line 25, :file "cljs/core.cljs"} _]), :tag function, :op :var, :name ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 32, :end-line 475, :column 24, :line 475, :file "cljs/core.cljs"} compare ^{:arglists (^{:end-column 8, :end-line 1507, :column 3, :line 1507, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1507, :column 6, :line 1507, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1502, :column 8, :line 1502, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1502, :column 15, :line 1502, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1507, :column 6, :line 1507, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1507, :column 3, :line 1507, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1507, :column 4, :line 1507, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1507, :column 6, :line 1507, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1502, :column 8, :line 1502, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1502, :column 15, :line 1502, :file "cljs/core.cljs"} compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3148, :column 3, :line 3148, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3148, :column 4, :line 3148, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3145, :column 8, :line 3145, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3145, :column 16, :line 3145, :file "cljs/core.cljs"} complement ^{:arglists (^{:end-column 6, :end-line 3148, :column 3, :line 3148, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3148, :column 4, :line 3148, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3145, :column 8, :line 3145, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3145, :column 16, :line 3145, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3148, :column 4, :line 3148, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3148, :column 3, :line 3148, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3148, :column 4, :line 3148, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3145, :column 8, :line 3145, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3145, :column 16, :line 3145, :file "cljs/core.cljs"} complement, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 41, :end-line 1418, :column 1, :line 1418, :file "cljs/core.cljs"} lookup-sentinel ^{:private true, :end-column 41, :end-line 1418, :column 1, :line 1418, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 41, :end-line 1418, :column 1, :line 1418, :file "cljs/core.cljs"} lookup-sentinel, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 356, :column 17, :line 356, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 356, :column 18, :line 356, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 356, :column 24, :line 356, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 356, :column 28, :line 356, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 356, :column 9, :line 356, :file "cljs/core.cljs"} -assoc! ^{:arglists (^{:end-column 32, :end-line 356, :column 17, :line 356, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 356, :column 18, :line 356, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 356, :column 24, :line 356, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 356, :column 28, :line 356, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 356, :column 9, :line 356, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 356, :column 18, :line 356, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 356, :column 24, :line 356, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 356, :column 28, :line 356, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 356, :column 17, :line 356, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 356, :column 18, :line 356, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 356, :column 24, :line 356, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 356, :column 28, :line 356, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 356, :column 5, :line 356, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 356, :column 9, :line 356, :file "cljs/core.cljs"} -assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup* ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll])} ->Iteration ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll])} {:arglists (^cljs.core/Iteration [^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll])} ->Iteration, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2892, :column 19, :line 2892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2892, :column 20, :line 2892, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2892, :column 7, :line 2892, :file "cljs/core.cljs"} string-iter ^{:arglists (^{:end-column 22, :end-line 2892, :column 19, :line 2892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2892, :column 20, :line 2892, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2892, :column 7, :line 2892, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 22, :end-line 2892, :column 20, :line 2892, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2892, :column 19, :line 2892, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2892, :column 20, :line 2892, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2892, :column 7, :line 2892, :file "cljs/core.cljs"} string-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8202, :column 13, :line 8202, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8202, :column 14, :line 8202, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8202, :column 4, :line 8202, :file "cljs/core.cljs"} -key->js ^{:arglists (^{:end-column 16, :end-line 8202, :column 13, :line 8202, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8202, :column 14, :line 8202, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8202, :column 4, :line 8202, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8202, :column 14, :line 8202, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8202, :column 13, :line 8202, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8202, :column 14, :line 8202, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8202, :column 4, :line 8202, :file "cljs/core.cljs"} -key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 283, :column 14, :line 283, :file "cljs/core.cljs"} IDeref ^{:impls #{cljs.core/Reduced cljs.core/Delay cljs.core/Atom}, :protocol-symbol true, :end-column 21, :end-line 283, :column 14, :line 283, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 21, :end-line 283, :column 14, :line 283, :file "cljs/core.cljs"} IDeref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1497, :column 3, :line 1497, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1497, :column 4, :line 1497, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1494, :column 8, :line 1494, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1494, :column 12, :line 1494, :file "cljs/core.cljs"} sequence ^{:arglists (^{:end-column 10, :end-line 3096, :column 4, :line 3096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3096, :column 5, :line 3096, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3100, :column 4, :line 3100, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3100, :column 5, :line 3100, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3100, :column 11, :line 3100, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3102, :column 4, :line 3102, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3102, :column 5, :line 3102, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3102, :column 11, :line 3102, :file "cljs/core.cljs"} coll ^{:end-column 18, :end-line 3102, :column 16, :line 3102, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3102, :column 18, :line 3102, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 16, :end-line 3087, :column 7, :line 3087, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 3096, :column 5, :line 3096, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 3100, :column 5, :line 3100, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3100, :column 11, :line 3100, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 3102, :column 5, :line 3102, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3102, :column 11, :line 3102, :file "cljs/core.cljs"} coll & ^{:end-column 24, :end-line 3102, :column 18, :line 3102, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3096, :column 4, :line 3096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3096, :column 5, :line 3096, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3100, :column 4, :line 3100, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3100, :column 5, :line 3100, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3100, :column 11, :line 3100, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3102, :column 4, :line 3102, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3102, :column 5, :line 3102, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3102, :column 11, :line 3102, :file "cljs/core.cljs"} coll ^{:end-column 18, :end-line 3102, :column 16, :line 3102, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3102, :column 18, :line 3102, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 16, :end-line 3087, :column 7, :line 3087, :file "cljs/core.cljs"} sequence, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3157, :column 3, :line 3157, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3157, :column 4, :line 3157, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3155, :column 7, :line 3155, :file "cljs/core.cljs"} constantly ^{:arglists (^{:end-column 6, :end-line 3157, :column 3, :line 3157, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3157, :column 4, :line 3157, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3155, :column 7, :line 3155, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3157, :column 4, :line 3157, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3157, :column 3, :line 3157, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3157, :column 4, :line 3157, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3155, :column 7, :line 3155, :file "cljs/core.cljs"} constantly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 53, :end-line 3985, :column 41, :line 3985, :file "cljs/core.cljs"} chunked-seq ^{:arglists (^{:end-column 15, :end-line 4245, :column 4, :line 4245, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4245, :column 5, :line 4245, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4245, :column 9, :line 4245, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4245, :column 11, :line 4245, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4246, :column 4, :line 4246, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4246, :column 5, :line 4246, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4246, :column 9, :line 4246, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4246, :column 14, :line 4246, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4246, :column 16, :line 4246, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4247, :column 4, :line 4247, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4247, :column 5, :line 4247, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4247, :column 9, :line 4247, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4247, :column 14, :line 4247, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4247, :column 16, :line 4247, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4247, :column 20, :line 4247, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4245, :column 5, :line 4245, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4245, :column 9, :line 4245, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4245, :column 11, :line 4245, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4246, :column 5, :line 4246, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4246, :column 9, :line 4246, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4246, :column 14, :line 4246, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4246, :column 16, :line 4246, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4247, :column 5, :line 4247, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4247, :column 9, :line 4247, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4247, :column 14, :line 4247, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4247, :column 16, :line 4247, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4247, :column 20, :line 4247, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 4245, :column 4, :line 4245, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4245, :column 5, :line 4245, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4245, :column 9, :line 4245, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4245, :column 11, :line 4245, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4246, :column 4, :line 4246, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4246, :column 5, :line 4246, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4246, :column 9, :line 4246, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4246, :column 14, :line 4246, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4246, :column 16, :line 4246, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4247, :column 4, :line 4247, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4247, :column 5, :line 4247, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4247, :column 9, :line 4247, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4247, :column 14, :line 4247, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4247, :column 16, :line 4247, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4247, :column 20, :line 4247, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} chunked-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} ISorted ^{:impls #{cljs.core/PersistentTreeMap cljs.core/PersistentTreeSet}, :protocol-symbol true, :end-column 22, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 22, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} ISorted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} make-array ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^array [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} make-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1897, :column 14, :line 1897, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1897, :column 15, :line 1897, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1897, :column 7, :line 1897, :file "cljs/core.cljs"} shorts ^{:arglists (^{:end-column 17, :end-line 1897, :column 14, :line 1897, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1897, :column 15, :line 1897, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1897, :column 7, :line 1897, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1897, :column 15, :line 1897, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1897, :column 14, :line 1897, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1897, :column 15, :line 1897, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1897, :column 7, :line 1897, :file "cljs/core.cljs"} shorts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if* ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta])} ->RSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta])} {:arglists (^cljs.core/RSeq [^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 19, :end-line 937, :column 16, :line 937, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 937, :column 19, :line 937, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 937, :column 21, :line 937, :file "cljs/core.cljs"} meta])} ->RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print! ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} {:arglists (^function []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -flush ^{:arglists (^{:end-column 19, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 1657, :column 19, :line 1657, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1657, :column 20, :line 1657, :file "cljs/core.cljs"} f]), :private true, :end-column 19, :end-line 1657, :column 8, :line 1657, :file "cljs/core.cljs"} completing ^{:arglists (^{:end-column 22, :end-line 1657, :column 19, :line 1657, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1657, :column 20, :line 1657, :file "cljs/core.cljs"} f]), :private true, :end-column 19, :end-line 1657, :column 8, :line 1657, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 22, :end-line 1657, :column 20, :line 1657, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 1657, :column 19, :line 1657, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1657, :column 20, :line 1657, :file "cljs/core.cljs"} f]), :private true, :end-column 19, :end-line 1657, :column 8, :line 1657, :file "cljs/core.cljs"} completing, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 1847, :column 28, :line 1847, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1847, :column 29, :line 1847, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} unchecked-negate-int ^{:arglists (^{:end-column 31, :end-line 1847, :column 28, :line 1847, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1847, :column 29, :line 1847, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 31, :end-line 1847, :column 29, :line 1847, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1847, :column 28, :line 1847, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1847, :column 29, :line 1847, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} unchecked-negate-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash])} ->PersistentVector ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/PersistentVector [^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 33, :end-line 3987, :column 28, :line 3987, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3987, :column 33, :line 3987, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 3987, :column 37, :line 3987, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 3987, :column 43, :line 3987, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 3987, :column 48, :line 3987, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 3987, :column 63, :line 3987, :file "cljs/core.cljs"} __hash])} ->PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 725, :column 24, :line 725, :file "cljs/core.cljs"} equiv-sequential ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 2055, :column 8, :line 2055, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 6, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 2055, :column 8, :line 2055, :file "cljs/core.cljs"} equiv-sequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 718, :column 3, :line 718, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 718, :column 4, :line 718, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 712, :column 8, :line 712, :file "cljs/core.cljs"} number, :end-column 35, :end-line 712, :column 15, :line 712, :file "cljs/core.cljs"} hash-unordered-coll ^{:arglists (^{:end-column 9, :end-line 718, :column 3, :line 718, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 718, :column 4, :line 718, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 712, :column 8, :line 712, :file "cljs/core.cljs"} number, :end-column 35, :end-line 712, :column 15, :line 712, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 718, :column 4, :line 718, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 718, :column 3, :line 718, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 718, :column 4, :line 718, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 712, :column 8, :line 712, :file "cljs/core.cljs"} number, :end-column 35, :end-line 712, :column 15, :line 712, :file "cljs/core.cljs"} hash-unordered-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3648, :column 4, :line 3648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3648, :column 5, :line 3648, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3649, :column 4, :line 3649, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3649, :column 5, :line 3649, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3649, :column 7, :line 3649, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3646, :column 7, :line 3646, :file "cljs/core.cljs"} repeat ^{:arglists (^{:end-column 7, :end-line 3648, :column 4, :line 3648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3648, :column 5, :line 3648, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3649, :column 4, :line 3649, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3649, :column 5, :line 3649, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3649, :column 7, :line 3649, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3646, :column 7, :line 3646, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3648, :column 5, :line 3648, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3649, :column 5, :line 3649, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3649, :column 7, :line 3649, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3648, :column 4, :line 3648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3648, :column 5, :line 3648, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3649, :column 4, :line 3649, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3649, :column 5, :line 3649, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3649, :column 7, :line 3649, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3646, :column 7, :line 3646, :file "cljs/core.cljs"} repeat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1824, :column 21, :line 1824, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1824, :column 22, :line 1824, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1824, :column 7, :line 1824, :file "cljs/core.cljs"} unchecked-inc ^{:arglists (^{:end-column 24, :end-line 1824, :column 21, :line 1824, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1824, :column 22, :line 1824, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1824, :column 7, :line 1824, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1824, :column 22, :line 1824, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1824, :column 21, :line 1824, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1824, :column 22, :line 1824, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1824, :column 7, :line 1824, :file "cljs/core.cljs"} unchecked-inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2025, :column 3, :line 2025, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2025, :column 4, :line 2025, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2025, :column 9, :line 2025, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2023, :column 7, :line 2023, :file "cljs/core.cljs"} nthnext ^{:arglists (^{:end-column 11, :end-line 2025, :column 3, :line 2025, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2025, :column 4, :line 2025, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2025, :column 9, :line 2025, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2023, :column 7, :line 2023, :file "cljs/core.cljs"} {:arglists (^cljs.core/seq [^{:end-column 9, :end-line 2025, :column 4, :line 2025, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2025, :column 9, :line 2025, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2025, :column 3, :line 2025, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2025, :column 4, :line 2025, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2025, :column 9, :line 2025, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2023, :column 7, :line 2023, :file "cljs/core.cljs"} nthnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8130, :column 3, :line 8130, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8130, :column 4, :line 8130, :file "cljs/core.cljs"} f1]), :private true, :end-column 27, :end-line 8129, :column 8, :line 8129, :file "cljs/core.cljs"} preserving-reduced ^{:arglists (^{:end-column 7, :end-line 8130, :column 3, :line 8130, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8130, :column 4, :line 8130, :file "cljs/core.cljs"} f1]), :private true, :end-column 27, :end-line 8129, :column 8, :line 8129, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 8130, :column 4, :line 8130, :file "cljs/core.cljs"} f1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8130, :column 3, :line 8130, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8130, :column 4, :line 8130, :file "cljs/core.cljs"} f1]), :private true, :end-column 27, :end-line 8129, :column 8, :line 8129, :file "cljs/core.cljs"} preserving-reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3384, :column 3, :line 3384, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3384, :column 4, :line 3384, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} get-validator ^{:arglists (^{:end-column 9, :end-line 3384, :column 3, :line 3384, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3384, :column 4, :line 3384, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3384, :column 4, :line 3384, :file "cljs/core.cljs"} iref]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3384, :column 3, :line 3384, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3384, :column 4, :line 3384, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} get-validator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2883, :column 10, :line 2883, :file "cljs/core.cljs"} StringIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2883, :column 10, :line 2883, :file "cljs/core.cljs"} StringIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 36, :end-line 2883, :column 21, :line 2883, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2883, :column 22, :line 2883, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2883, :column 34, :line 2883, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number? ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 352, :column 16, :line 352, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 352, :column 23, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} -conj! ^{:arglists (^{:end-column 27, :end-line 352, :column 16, :line 352, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 352, :column 23, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 352, :column 23, :line 352, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 352, :column 16, :line 352, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 352, :column 17, :line 352, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 352, :column 23, :line 352, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 352, :column 5, :line 352, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 352, :column 9, :line 352, :file "cljs/core.cljs"} -conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([meta9658])} ->t9657 ^{:file "cljs/core.cljs", :arglists ([meta9658])} {:arglists (^cljs.core/t9657 [meta9658]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([meta9658])} ->t9657, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta])} ->PersistentArrayMapSeq ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta])} {:arglists (^cljs.core/PersistentArrayMapSeq [^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 37, :end-line 4945, :column 33, :line 4945, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4945, :column 37, :line 4945, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 4945, :column 39, :line 4945, :file "cljs/core.cljs"} _meta])} ->PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2567, :column 18, :line 2567, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2567, :column 19, :line 2567, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2567, :column 7, :line 2567, :file "cljs/core.cljs"} chunk-next ^{:arglists (^{:end-column 21, :end-line 2567, :column 18, :line 2567, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2567, :column 19, :line 2567, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2567, :column 7, :line 2567, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2567, :column 19, :line 2567, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2567, :column 18, :line 2567, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2567, :column 19, :line 2567, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2567, :column 7, :line 2567, :file "cljs/core.cljs"} chunk-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7321, :column 10, :line 7321, :file "cljs/core.cljs"} ArrayList {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7321, :column 10, :line 7321, :file "cljs/core.cljs"} ArrayList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 7321, :column 20, :line 7321, :file "cljs/core.cljs"} [^{:mutable true, :end-column 35, :end-line 7321, :column 31, :line 7321, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 11, :end-line 7891, :column 3, :line 7891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7891, :column 4, :line 7891, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7891, :column 6, :line 7891, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7889, :column 7, :line 7889, :file "cljs/core.cljs"} print-str ^{:arglists (^{:end-column 11, :end-line 7891, :column 3, :line 7891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7891, :column 4, :line 7891, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7891, :column 6, :line 7891, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7889, :column 7, :line 7889, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7891, :column 6, :line 7891, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7891, :column 3, :line 7891, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7891, :column 4, :line 7891, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7891, :column 6, :line 7891, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 7889, :column 7, :line 7889, :file "cljs/core.cljs"} print-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3128, :column 8, :line 3128, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3128, :column 16, :line 3128, :file "cljs/core.cljs"} not-any? ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3128, :column 8, :line 3128, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3128, :column 16, :line 3128, :file "cljs/core.cljs"} {:arglists (^cljs.core/boolean [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3131, :column 3, :line 3131, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3131, :column 4, :line 3131, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3131, :column 9, :line 3131, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3128, :column 8, :line 3128, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3128, :column 16, :line 3128, :file "cljs/core.cljs"} not-any?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 47, :column 10, :line 47, :file "cljs/core.cljs"} into-array ^{:arglists (^{:end-column 10, :end-line 196, :column 4, :line 196, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 198, :column 4, :line 198, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 195, :column 8, :line 195, :file "cljs/core.cljs"} array, :end-column 25, :end-line 195, :column 14, :line 195, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 196, :column 4, :line 196, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 198, :column 4, :line 198, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 195, :column 8, :line 195, :file "cljs/core.cljs"} array, :end-column 25, :end-line 195, :column 14, :line 195, :file "cljs/core.cljs"} into-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 305, :column 10, :line 305, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 305, :column 11, :line 305, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 305, :column 4, :line 305, :file "cljs/core.cljs"} -hash ^{:arglists (^{:end-column 13, :end-line 305, :column 10, :line 305, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 305, :column 11, :line 305, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 305, :column 4, :line 305, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 305, :column 11, :line 305, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 305, :column 10, :line 305, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 305, :column 11, :line 305, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 305, :column 4, :line 305, :file "cljs/core.cljs"} -hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 359, :column 18, :line 359, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 359, :column 19, :line 359, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 359, :column 25, :line 359, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} -dissoc! ^{:arglists (^{:end-column 29, :end-line 359, :column 18, :line 359, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 359, :column 19, :line 359, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 359, :column 25, :line 359, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 359, :column 19, :line 359, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 359, :column 25, :line 359, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 359, :column 18, :line 359, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 359, :column 19, :line 359, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 359, :column 25, :line 359, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 359, :column 5, :line 359, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 359, :column 9, :line 359, :file "cljs/core.cljs"} -dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val])} ->Reduced ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val])} {:arglists (^cljs.core/Reduced [^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 764, :column 19, :line 764, :file "cljs/core.cljs"} val])} ->Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2453, :column 20, :line 2453, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2453, :column 21, :line 2453, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2453, :column 7, :line 2453, :file "cljs/core.cljs"} chunk-buffer ^{:arglists (^{:end-column 30, :end-line 2453, :column 20, :line 2453, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2453, :column 21, :line 2453, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2453, :column 7, :line 2453, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:end-column 30, :end-line 2453, :column 21, :line 2453, :file "cljs/core.cljs"} capacity]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2453, :column 20, :line 2453, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2453, :column 21, :line 2453, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2453, :column 7, :line 2453, :file "cljs/core.cljs"} chunk-buffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1438, :column 8, :line 1438, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1438, :column 16, :line 1438, :file "cljs/core.cljs"} seqable? ^{:arglists (^{:end-column 6, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1438, :column 8, :line 1438, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1438, :column 16, :line 1438, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1440, :column 3, :line 1440, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1440, :column 4, :line 1440, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1438, :column 8, :line 1438, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1438, :column 16, :line 1438, :file "cljs/core.cljs"} seqable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 8174, :column 10, :line 8174, :file "cljs/core.cljs"} Iteration {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 8174, :column 10, :line 8174, :file "cljs/core.cljs"} Iteration, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 32, :end-line 8174, :column 20, :line 8174, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 8174, :column 21, :line 8174, :file "cljs/core.cljs"} xform ^{:end-column 32, :end-line 8174, :column 27, :line 8174, :file "cljs/core.cljs"} coll], :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 27, :end-line 538, :column 24, :line 538, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 538, :column 25, :line 538, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 538, :column 8, :line 538, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 538, :column 16, :line 538, :file "cljs/core.cljs"} symbol? ^{:arglists (^{:end-column 27, :end-line 538, :column 24, :line 538, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 538, :column 25, :line 538, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 538, :column 8, :line 538, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 538, :column 16, :line 538, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 538, :column 25, :line 538, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 538, :column 24, :line 538, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 538, :column 25, :line 538, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 538, :column 8, :line 538, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 538, :column 16, :line 538, :file "cljs/core.cljs"} symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 459, :column 39, :line 459, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 459, :column 40, :line 459, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 459, :column 8, :line 459, :file "cljs/core.cljs"} number, :end-column 39, :end-line 459, :column 15, :line 459, :file "cljs/core.cljs"} m3-hash-unencoded-chars ^{:arglists (^{:end-column 43, :end-line 459, :column 39, :line 459, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 459, :column 40, :line 459, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 459, :column 8, :line 459, :file "cljs/core.cljs"} number, :end-column 39, :end-line 459, :column 15, :line 459, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 43, :end-line 459, :column 40, :line 459, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 459, :column 39, :line 459, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 459, :column 40, :line 459, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 459, :column 8, :line 459, :file "cljs/core.cljs"} number, :end-column 39, :end-line 459, :column 15, :line 459, :file "cljs/core.cljs"} m3-hash-unencoded-chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1792, :column 30, :line 1792, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1792, :column 31, :line 1792, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1792, :column 8, :line 1792, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1792, :column 15, :line 1792, :file "cljs/core.cljs"} unchecked-char ^{:arglists (^{:end-column 33, :end-line 1792, :column 30, :line 1792, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1792, :column 31, :line 1792, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1792, :column 8, :line 1792, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1792, :column 15, :line 1792, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1792, :column 31, :line 1792, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1792, :column 30, :line 1792, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1792, :column 31, :line 1792, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1792, :column 8, :line 1792, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1792, :column 15, :line 1792, :file "cljs/core.cljs"} unchecked-char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4650, :column 10, :line 4650, :file "cljs/core.cljs"} NeverEquiv {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4650, :column 10, :line 4650, :file "cljs/core.cljs"} NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 4650, :column 21, :line 4650, :file "cljs/core.cljs"} [], :protocols #{Object cljs.core/IEquiv}}, ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} s] [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} t] [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} s] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} t] ^{:end-column 54, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} s ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} t ^{:end-column 54, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1341, :column 3, :line 1341, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1341, :column 4, :line 1341, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1339, :column 8, :line 1339, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1339, :column 16, :line 1339, :file "cljs/core.cljs"} coll? ^{:arglists (^{:end-column 6, :end-line 1341, :column 3, :line 1341, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1341, :column 4, :line 1341, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1339, :column 8, :line 1339, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1339, :column 16, :line 1339, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1341, :column 4, :line 1341, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1341, :column 3, :line 1341, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1341, :column 4, :line 1341, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1339, :column 8, :line 1339, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1339, :column 16, :line 1339, :file "cljs/core.cljs"} coll?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3834, :column 4, :line 3834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3834, :column 5, :line 3834, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3834, :column 7, :line 3834, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3836, :column 4, :line 3836, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3836, :column 5, :line 3836, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3836, :column 7, :line 3836, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3836, :column 10, :line 3836, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3828, :column 7, :line 3828, :file "cljs/core.cljs"} get-in ^{:arglists (^{:end-column 10, :end-line 3834, :column 4, :line 3834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3834, :column 5, :line 3834, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3834, :column 7, :line 3834, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3836, :column 4, :line 3836, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3836, :column 5, :line 3836, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3836, :column 7, :line 3836, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3836, :column 10, :line 3836, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3828, :column 7, :line 3828, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3834, :column 5, :line 3834, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3834, :column 7, :line 3834, :file "cljs/core.cljs"} ks] [^{:end-column 7, :end-line 3836, :column 5, :line 3836, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3836, :column 7, :line 3836, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3836, :column 10, :line 3836, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3834, :column 4, :line 3834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3834, :column 5, :line 3834, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3834, :column 7, :line 3834, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3836, :column 4, :line 3836, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3836, :column 5, :line 3836, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3836, :column 7, :line 3836, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3836, :column 10, :line 3836, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3828, :column 7, :line 3828, :file "cljs/core.cljs"} get-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1007, :column 3, :line 1007, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1005, :column 7, :line 1005, :file "cljs/core.cljs"} fnext ^{:arglists (^{:end-column 9, :end-line 1007, :column 3, :line 1007, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1005, :column 7, :line 1005, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1007, :column 3, :line 1007, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1005, :column 7, :line 1005, :file "cljs/core.cljs"} fnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} IList ^{:impls #{cljs.core/Cons cljs.core/EmptyList cljs.core/List}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:impls #{}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} IList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 35, :end-line 848, :column 30, :line 848, :file "cljs/core.cljs"} List {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2110, :column 10, :line 2110, :file "cljs/core.cljs"} List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 2110, :column 15, :line 2110, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2110, :column 16, :line 2110, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2110, :column 21, :line 2110, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2110, :column 27, :line 2110, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2110, :column 32, :line 2110, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2110, :column 48, :line 2110, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -val ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1895, :column 13, :line 1895, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1895, :column 14, :line 1895, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1895, :column 7, :line 1895, :file "cljs/core.cljs"} bytes ^{:arglists (^{:end-column 16, :end-line 1895, :column 13, :line 1895, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1895, :column 14, :line 1895, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1895, :column 7, :line 1895, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1895, :column 14, :line 1895, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1895, :column 13, :line 1895, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1895, :column 14, :line 1895, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1895, :column 7, :line 1895, :file "cljs/core.cljs"} bytes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash])} ->ObjMap ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash])} {:arglists (^cljs.core/ObjMap [^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([^{:end-column 23, :end-line 4719, :column 18, :line 4719, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4719, :column 23, :line 4719, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4719, :column 28, :line 4719, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4719, :column 35, :line 4719, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4719, :column 58, :line 4719, :file "cljs/core.cljs"} __hash])} ->ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 546, :column 24, :line 546, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 546, :column 25, :line 546, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 546, :column 27, :line 546, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 546, :column 8, :line 546, :file "cljs/core.cljs"} compare-symbols ^{:arglists (^{:end-column 29, :end-line 546, :column 24, :line 546, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 546, :column 25, :line 546, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 546, :column 27, :line 546, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 546, :column 8, :line 546, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 546, :column 25, :line 546, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 546, :column 27, :line 546, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 546, :column 24, :line 546, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 546, :column 25, :line 546, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 546, :column 27, :line 546, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 546, :column 8, :line 546, :file "cljs/core.cljs"} compare-symbols, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 308, :column 5, :line 308, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 308, :column 16, :line 308, :file "cljs/core.cljs"} -seq ^{:arglists (^{:end-column 24, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 308, :column 5, :line 308, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 308, :column 16, :line 308, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 308, :column 5, :line 308, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 308, :column 16, :line 308, :file "cljs/core.cljs"} -seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}}, :aliases {}, :macro-mappings {unsafe-bit-and #=(var cljs.core/unsafe-bit-and), unchecked-remainder-int #=(var cljs.core/unchecked-remainder-int), when-first #=(var cljs.core/when-first), cond->> #=(var cljs.core/cond->>), bit-set #=(var cljs.core/bit-set), import-macros #=(var cljs.core/import-macros), while #=(var cljs.core/while), satisfies? #=(var cljs.core/satisfies?), unchecked-subtract-int #=(var cljs.core/unchecked-subtract-int), bit-shift-right #=(var cljs.core/bit-shift-right), aget #=(var cljs.core/aget), specify #=(var cljs.core/specify), caching-hash #=(var cljs.core/caching-hash), bit-shift-left #=(var cljs.core/bit-shift-left), coercive-not #=(var cljs.core/coercive-not), dec #=(var cljs.core/dec), < #=(var cljs.core/<), this-as #=(var cljs.core/this-as), .. #=(var cljs.core/..), delay #=(var cljs.core/delay), unchecked-negate #=(var cljs.core/unchecked-negate), simple-benchmark #=(var cljs.core/simple-benchmark), unchecked-inc-int #=(var cljs.core/unchecked-inc-int), bit-shift-right-zero-fill #=(var cljs.core/bit-shift-right-zero-fill), implements? #=(var cljs.core/implements?), pos? #=(var cljs.core/pos?), specify! #=(var cljs.core/specify!), if-not #=(var cljs.core/if-not), alength #=(var cljs.core/alength), bit-xor #=(var cljs.core/bit-xor), doseq #=(var cljs.core/doseq), unsigned-bit-shift-right #=(var cljs.core/unsigned-bit-shift-right), neg? #=(var cljs.core/neg?), unchecked-float #=(var cljs.core/unchecked-float), undefined? #=(var cljs.core/undefined?), deftype #=(var cljs.core/deftype), mask #=(var cljs.core/mask), when-let #=(var cljs.core/when-let), divide #=(var cljs.core/divide), coercive-boolean #=(var cljs.core/coercive-boolean), <= #=(var cljs.core/<=), * #=(var cljs.core/*), min #=(var cljs.core/min), lazy-seq #=(var cljs.core/lazy-seq), js-delete #=(var cljs.core/js-delete), truth_ #=(var cljs.core/truth_), defcurried #=(var cljs.core/defcurried), let #=(var cljs.core/let), -> #=(var cljs.core/->), coercive-not= #=(var cljs.core/coercive-not=), doto #=(var cljs.core/doto), areduce #=(var cljs.core/areduce), double #=(var cljs.core/double), bit-and-not #=(var cljs.core/bit-and-not), unchecked-add-int #=(var cljs.core/unchecked-add-int), fn #=(var cljs.core/fn), short #=(var cljs.core/short), js-this #=(var cljs.core/js-this), unchecked-double #=(var cljs.core/unchecked-double), string? #=(var cljs.core/string?), js-arguments #=(var cljs.core/js-arguments), unchecked-multiply-int #=(var cljs.core/unchecked-multiply-int), as-> #=(var cljs.core/as->), when-not #=(var cljs.core/when-not), when #=(var cljs.core/when), int #=(var cljs.core/int), > #=(var cljs.core/>), keyword? #=(var cljs.core/keyword?), unchecked-multiply #=(var cljs.core/unchecked-multiply), gen-apply-to #=(var cljs.core/gen-apply-to), some->> #=(var cljs.core/some->>), unchecked-dec #=(var cljs.core/unchecked-dec), defn #=(var cljs.core/defn), float #=(var cljs.core/float), amap #=(var cljs.core/amap), declare #=(var cljs.core/declare), - #=(var cljs.core/-), hash-set #=(var cljs.core/hash-set), or #=(var cljs.core/or), assert-args #=(var cljs.core/assert-args), extend-type #=(var cljs.core/extend-type), bit-test #=(var cljs.core/bit-test), defmethod #=(var cljs.core/defmethod), time #=(var cljs.core/time), zero? #=(var cljs.core/zero?), unchecked-dec-int #=(var cljs.core/unchecked-dec-int), memfn #=(var cljs.core/memfn), js-obj #=(var cljs.core/js-obj), nil? #=(var cljs.core/nil?), extend-protocol #=(var cljs.core/extend-protocol), cond-> #=(var cljs.core/cond->), dotimes #=(var cljs.core/dotimes), bit-and #=(var cljs.core/bit-and), reify #=(var cljs.core/reify), instance? #=(var cljs.core/instance?), defonce #=(var cljs.core/defonce), unchecked-add #=(var cljs.core/unchecked-add), rfn #=(var cljs.core/rfn), identical? #=(var cljs.core/identical?), unchecked-divide-int #=(var cljs.core/unchecked-divide-int), defn- #=(var cljs.core/defn-), defprotocol #=(var cljs.core/defprotocol), unchecked-subtract #=(var cljs.core/unchecked-subtract), assert #=(var cljs.core/assert), true? #=(var cljs.core/true?), array #=(var cljs.core/array), letfn #=(var cljs.core/letfn), / #=(var cljs.core//), bitpos #=(var cljs.core/bitpos), bit-or #=(var cljs.core/bit-or), vector #=(var cljs.core/vector), >= #=(var cljs.core/>=), loop #=(var cljs.core/loop), bit-flip #=(var cljs.core/bit-flip), js-mod #=(var cljs.core/js-mod), with-out-str #=(var cljs.core/with-out-str), condp #=(var cljs.core/condp), cond #=(var cljs.core/cond), some-> #=(var cljs.core/some->), for #=(var cljs.core/for), binding #=(var cljs.core/binding), array-map #=(var cljs.core/array-map), unchecked-byte #=(var cljs.core/unchecked-byte), unchecked-short #=(var cljs.core/unchecked-short), inc #=(var cljs.core/inc), with-redefs #=(var cljs.core/with-redefs), bit-clear #=(var cljs.core/bit-clear), list #=(var cljs.core/list), + #=(var cljs.core/+), aset #=(var cljs.core/aset), defmulti #=(var cljs.core/defmulti), str #=(var cljs.core/str), coercive-= #=(var cljs.core/coercive-=), hash-map #=(var cljs.core/hash-map), if-let #=(var cljs.core/if-let), false? #=(var cljs.core/false?), case #=(var cljs.core/case), array? #=(var cljs.core/array?), exists? #=(var cljs.core/exists?), bit-not #=(var cljs.core/bit-not), byte #=(var cljs.core/byte), max #=(var cljs.core/max), == #=(var cljs.core/==), lazy-cat #=(var cljs.core/lazy-cat), comment #=(var cljs.core/comment), defrecord #=(var cljs.core/defrecord), make-array #=(var cljs.core/make-array), unchecked-negate-int #=(var cljs.core/unchecked-negate-int), unchecked-inc #=(var cljs.core/unchecked-inc), and #=(var cljs.core/and), number? #=(var cljs.core/number?), symbol? #=(var cljs.core/symbol?), unchecked-char #=(var cljs.core/unchecked-char), ->> #=(var cljs.core/->>)}, :macro-aliases {}}, goog {:mappings {}, :js-namespace true, :ns goog}, Math {:mappings {}, :js-namespace true, :ns Math}}