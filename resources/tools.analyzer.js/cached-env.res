{^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core {:ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :mappings {^{:arglists ([^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} ->PersistentHashSet ^{:arglists ([^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentHashSet [^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} ->PersistentHashSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} ->ExceptionInfo ^{:arglists ([^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} ->ExceptionInfo, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8491, :column 4, :line 8491, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8491, :column 5, :line 8491, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8492, :column 7, :line 8492, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8492, :column 9, :line 8492, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 14, :end-line 8486, :column 7, :line 8486, :file "cljs/core.cljs"} js->clj ^{:arglists (^{:end-column 7, :end-line 8491, :column 4, :line 8491, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8491, :column 5, :line 8491, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8492, :column 7, :line 8492, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8492, :column 9, :line 8492, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 14, :end-line 8486, :column 7, :line 8486, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8491, :column 5, :line 8491, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} x & ^{:end-column 13, :end-line 8492, :column 9, :line 8492, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8491, :column 4, :line 8491, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8491, :column 5, :line 8491, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8492, :column 7, :line 8492, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8492, :column 9, :line 8492, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 14, :end-line 8486, :column 7, :line 8486, :file "cljs/core.cljs"} js->clj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1660, :column 4, :line 1660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1660, :column 5, :line 1660, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1660, :column 11, :line 1660, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1662, :column 5, :line 1662, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1662, :column 11, :line 1662, :file "cljs/core.cljs"} comp ^{:end-column 20, :end-line 1662, :column 16, :line 1662, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 14, :end-line 1655, :column 7, :line 1655, :file "cljs/core.cljs"} sort-by ^{:arglists (^{:end-column 16, :end-line 1660, :column 4, :line 1660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1660, :column 5, :line 1660, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1660, :column 11, :line 1660, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1662, :column 5, :line 1662, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1662, :column 11, :line 1662, :file "cljs/core.cljs"} comp ^{:end-column 20, :end-line 1662, :column 16, :line 1662, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 14, :end-line 1655, :column 7, :line 1655, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1660, :column 5, :line 1660, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1660, :column 11, :line 1660, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1662, :column 5, :line 1662, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1662, :column 11, :line 1662, :file "cljs/core.cljs"} comp ^{:end-column 20, :end-line 1662, :column 16, :line 1662, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1660, :column 4, :line 1660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1660, :column 5, :line 1660, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1660, :column 11, :line 1660, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1662, :column 5, :line 1662, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1662, :column 11, :line 1662, :file "cljs/core.cljs"} comp ^{:end-column 20, :end-line 1662, :column 16, :line 1662, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 14, :end-line 1655, :column 7, :line 1655, :file "cljs/core.cljs"} sort-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 35, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} ITransientAssociative ^{:impls (cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 35, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 35, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} ITransientAssociative, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 2191, :column 15, :line 2191, :file "cljs/core.cljs"} chunk-first ^{:arglists (^{:end-column 22, :end-line 2666, :column 19, :line 2666, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2666, :column 20, :line 2666, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2666, :column 7, :line 2666, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2666, :column 20, :line 2666, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2666, :column 19, :line 2666, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2666, :column 20, :line 2666, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2666, :column 7, :line 2666, :file "cljs/core.cljs"} chunk-first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 467, :column 27, :line 467, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 467, :column 28, :line 467, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 467, :column 8, :line 467, :file "cljs/core.cljs"} number, :end-column 26, :end-line 467, :column 15, :line 467, :file "cljs/core.cljs"} m3-hash-int ^{:arglists (^{:end-column 31, :end-line 467, :column 27, :line 467, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 467, :column 28, :line 467, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 467, :column 8, :line 467, :file "cljs/core.cljs"} number, :end-column 26, :end-line 467, :column 15, :line 467, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 467, :column 28, :line 467, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 467, :column 27, :line 467, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 467, :column 28, :line 467, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 467, :column 8, :line 467, :file "cljs/core.cljs"} number, :end-column 26, :end-line 467, :column 15, :line 467, :file "cljs/core.cljs"} m3-hash-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3063, :column 15, :line 3063, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3063, :column 16, :line 3063, :file "cljs/core.cljs"} xform ^{:end-column 26, :end-line 3063, :column 22, :line 3063, :file "cljs/core.cljs"} iter]), :end-column 14, :end-line 3063, :column 7, :line 3063, :file "cljs/core.cljs"} stepper ^{:arglists (^{:end-column 27, :end-line 3063, :column 15, :line 3063, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3063, :column 16, :line 3063, :file "cljs/core.cljs"} xform ^{:end-column 26, :end-line 3063, :column 22, :line 3063, :file "cljs/core.cljs"} iter]), :end-column 14, :end-line 3063, :column 7, :line 3063, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 21, :end-line 3063, :column 16, :line 3063, :file "cljs/core.cljs"} xform ^{:end-column 26, :end-line 3063, :column 22, :line 3063, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3063, :column 15, :line 3063, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3063, :column 16, :line 3063, :file "cljs/core.cljs"} xform ^{:end-column 26, :end-line 3063, :column 22, :line 3063, :file "cljs/core.cljs"} iter]), :end-column 14, :end-line 3063, :column 7, :line 3063, :file "cljs/core.cljs"} stepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 418, :column 3, :line 418, :file "cljs/core.cljs"} [^{:tag ^{:end-column 15, :end-line 418, :column 5, :line 418, :file "cljs/core.cljs"} not-native, :end-column 19, :end-line 418, :column 16, :line 418, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 14, :end-line 415, :column 7, :line 415, :file "cljs/core.cljs"} pr-str* ^{:arglists (^{:end-column 20, :end-line 418, :column 3, :line 418, :file "cljs/core.cljs"} [^{:tag ^{:end-column 15, :end-line 418, :column 5, :line 418, :file "cljs/core.cljs"} not-native, :end-column 19, :end-line 418, :column 16, :line 418, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 14, :end-line 415, :column 7, :line 415, :file "cljs/core.cljs"} {:arglists ([^{:tag ^{:end-column 15, :end-line 418, :column 5, :line 418, :file "cljs/core.cljs"} not-native, :end-column 19, :end-line 418, :column 16, :line 418, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 418, :column 3, :line 418, :file "cljs/core.cljs"} [^{:tag ^{:end-column 15, :end-line 418, :column 5, :line 418, :file "cljs/core.cljs"} not-native, :end-column 19, :end-line 418, :column 16, :line 418, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 14, :end-line 415, :column 7, :line 415, :file "cljs/core.cljs"} pr-str*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8436, :column 3, :line 8436, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8436, :column 4, :line 8436, :file "cljs/core.cljs"} xform ^{:end-column 14, :end-line 8436, :column 10, :line 8436, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 15, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} eduction ^{:arglists (^{:end-column 15, :end-line 8436, :column 3, :line 8436, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8436, :column 4, :line 8436, :file "cljs/core.cljs"} xform ^{:end-column 14, :end-line 8436, :column 10, :line 8436, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 15, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} {:arglists (^cljs.core/Eduction [^{:end-column 9, :end-line 8436, :column 4, :line 8436, :file "cljs/core.cljs"} xform ^{:end-column 14, :end-line 8436, :column 10, :line 8436, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8436, :column 3, :line 8436, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8436, :column 4, :line 8436, :file "cljs/core.cljs"} xform ^{:end-column 14, :end-line 8436, :column 10, :line 8436, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 15, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} eduction, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3862, :column 4, :line 3862, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 3862, :column 5, :line 3862, :file "cljs/core.cljs"} branch? ^{:end-column 21, :end-line 3862, :column 13, :line 3862, :file "cljs/core.cljs"} children ^{:end-column 26, :end-line 3862, :column 22, :line 3862, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 15, :end-line 3855, :column 7, :line 3855, :file "cljs/core.cljs"} tree-seq ^{:arglists (^{:end-column 27, :end-line 3862, :column 4, :line 3862, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 3862, :column 5, :line 3862, :file "cljs/core.cljs"} branch? ^{:end-column 21, :end-line 3862, :column 13, :line 3862, :file "cljs/core.cljs"} children ^{:end-column 26, :end-line 3862, :column 22, :line 3862, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 15, :end-line 3855, :column 7, :line 3855, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 12, :end-line 3862, :column 5, :line 3862, :file "cljs/core.cljs"} branch? ^{:end-column 21, :end-line 3862, :column 13, :line 3862, :file "cljs/core.cljs"} children ^{:end-column 26, :end-line 3862, :column 22, :line 3862, :file "cljs/core.cljs"} root]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3862, :column 4, :line 3862, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 3862, :column 5, :line 3862, :file "cljs/core.cljs"} branch? ^{:end-column 21, :end-line 3862, :column 13, :line 3862, :file "cljs/core.cljs"} children ^{:end-column 26, :end-line 3862, :column 22, :line 3862, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 15, :end-line 3855, :column 7, :line 3855, :file "cljs/core.cljs"} tree-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 1944, :column 31, :line 1944, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1944, :column 32, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 1944, :column 34, :line 1944, :file "cljs/core.cljs"} n]), :end-column 30, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} unchecked-remainder-int ^{:arglists (^{:end-column 36, :end-line 1944, :column 31, :line 1944, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1944, :column 32, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 1944, :column 34, :line 1944, :file "cljs/core.cljs"} n]), :end-column 30, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1944, :column 32, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 1944, :column 34, :line 1944, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 1944, :column 31, :line 1944, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1944, :column 32, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 1944, :column 34, :line 1944, :file "cljs/core.cljs"} n]), :end-column 30, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} unchecked-remainder-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 638, :column 3, :line 638, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 638, :column 4, :line 638, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq, :end-column 15, :end-line 634, :column 12, :line 634, :file "cljs/core.cljs"} seq ^{:arglists (^{:end-column 9, :end-line 638, :column 3, :line 638, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 638, :column 4, :line 638, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq, :end-column 15, :end-line 634, :column 12, :line 634, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 638, :column 4, :line 638, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 638, :column 3, :line 638, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 638, :column 4, :line 638, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq, :end-column 15, :end-line 634, :column 12, :line 634, :file "cljs/core.cljs"} seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} reduce ^{:arglists (^{:end-column 12, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1715, :column 11, :line 1715, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 13, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} coll] [^{:end-column 6, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1715, :column 11, :line 1715, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1715, :column 11, :line 1715, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 13, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 18, :end-line 3012, :column 1, :line 3012, :file "cljs/core.cljs"} INIT ^{:end-column 18, :end-line 3012, :column 1, :line 3012, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 18, :end-line 3012, :column 1, :line 3012, :file "cljs/core.cljs"} INIT, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1550, :column 3, :line 1550, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1550, :column 9, :line 1550, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 15, :end-line 1544, :column 8, :line 1544, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1544, :column 16, :line 1544, :file "cljs/core.cljs"} contains? ^{:arglists (^{:end-column 11, :end-line 1550, :column 3, :line 1550, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1550, :column 9, :line 1550, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 15, :end-line 1544, :column 8, :line 1544, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1544, :column 16, :line 1544, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 8, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1550, :column 9, :line 1550, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1550, :column 3, :line 1550, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1550, :column 9, :line 1550, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 15, :end-line 1544, :column 8, :line 1544, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1544, :column 16, :line 1544, :file "cljs/core.cljs"} contains?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3217, :column 3, :line 3217, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3217, :column 4, :line 3217, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3217, :column 9, :line 3217, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 15, :end-line 3214, :column 8, :line 3214, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3214, :column 16, :line 3214, :file "cljs/core.cljs"} every? ^{:arglists (^{:end-column 14, :end-line 3217, :column 3, :line 3217, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3217, :column 4, :line 3217, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3217, :column 9, :line 3217, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 15, :end-line 3214, :column 8, :line 3214, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3214, :column 16, :line 3214, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3217, :column 4, :line 3217, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3217, :column 9, :line 3217, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3217, :column 3, :line 3217, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3217, :column 4, :line 3217, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3217, :column 9, :line 3217, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 15, :end-line 3214, :column 8, :line 3214, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3214, :column 16, :line 3214, :file "cljs/core.cljs"} every?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} ->ES6IteratorSeq ^{:arglists ([^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6IteratorSeq [^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} ->ES6IteratorSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3499, :column 4, :line 3499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3499, :column 5, :line 3499, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3511, :column 7, :line 3511, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 19, :end-line 3494, :column 7, :line 3494, :file "cljs/core.cljs"} keep-indexed ^{:arglists (^{:end-column 7, :end-line 3499, :column 4, :line 3499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3499, :column 5, :line 3499, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3511, :column 7, :line 3511, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 19, :end-line 3494, :column 7, :line 3494, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3499, :column 5, :line 3499, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3511, :column 7, :line 3511, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3499, :column 4, :line 3499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3499, :column 5, :line 3499, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3511, :column 7, :line 3511, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 19, :end-line 3494, :column 7, :line 3494, :file "cljs/core.cljs"} keep-indexed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} ->PersistentQueueSeq ^{:arglists ([^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentQueueSeq [^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} ->PersistentQueueSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 2142, :column 4, :line 2142, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2142, :column 5, :line 2142, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2142, :column 7, :line 2142, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2143, :column 4, :line 2143, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2143, :column 5, :line 2143, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2143, :column 7, :line 2143, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 2143, :column 13, :line 2143, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 11, :end-line 2139, :column 7, :line 2139, :file "cljs/core.cljs"} subs ^{:arglists (^{:end-column 13, :end-line 2142, :column 4, :line 2142, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2142, :column 5, :line 2142, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2142, :column 7, :line 2142, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2143, :column 4, :line 2143, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2143, :column 5, :line 2143, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2143, :column 7, :line 2143, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 2143, :column 13, :line 2143, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 11, :end-line 2139, :column 7, :line 2139, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 2142, :column 5, :line 2142, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2142, :column 7, :line 2142, :file "cljs/core.cljs"} start] [^{:end-column 6, :end-line 2143, :column 5, :line 2143, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2143, :column 7, :line 2143, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 2143, :column 13, :line 2143, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 2142, :column 4, :line 2142, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2142, :column 5, :line 2142, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2142, :column 7, :line 2142, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2143, :column 4, :line 2143, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2143, :column 5, :line 2143, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2143, :column 7, :line 2143, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 2143, :column 13, :line 2143, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 11, :end-line 2139, :column 7, :line 2139, :file "cljs/core.cljs"} subs, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7433, :column 3, :line 7433, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 10, :end-line 7431, :column 7, :line 7431, :file "cljs/core.cljs"} set ^{:arglists (^{:end-column 9, :end-line 7433, :column 3, :line 7433, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 10, :end-line 7431, :column 7, :line 7431, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7433, :column 3, :line 7433, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 10, :end-line 7431, :column 7, :line 7431, :file "cljs/core.cljs"} set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1619, :column 4, :line 1619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1619, :column 5, :line 1619, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1619, :column 8, :line 1619, :file "cljs/core.cljs"} ys ^{:end-column 14, :end-line 1619, :column 11, :line 1619, :file "cljs/core.cljs"} len ^{:end-column 16, :end-line 1619, :column 15, :line 1619, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 32, :end-line 1610, :column 17, :line 1610, :file "cljs/core.cljs"} compare-indexed ^{:arglists (^{:end-column 11, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1619, :column 4, :line 1619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1619, :column 5, :line 1619, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1619, :column 8, :line 1619, :file "cljs/core.cljs"} ys ^{:end-column 14, :end-line 1619, :column 11, :line 1619, :file "cljs/core.cljs"} len ^{:end-column 16, :end-line 1619, :column 15, :line 1619, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 32, :end-line 1610, :column 17, :line 1610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} ys] ^^{:end-column 14, :end-line 1589, :column 8, :line 1589, :file "cljs/core.cljs"} number [^{:end-column 7, :end-line 1619, :column 5, :line 1619, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1619, :column 8, :line 1619, :file "cljs/core.cljs"} ys ^{:end-column 14, :end-line 1619, :column 11, :line 1619, :file "cljs/core.cljs"} len ^{:end-column 16, :end-line 1619, :column 15, :line 1619, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1619, :column 4, :line 1619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1619, :column 5, :line 1619, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1619, :column 8, :line 1619, :file "cljs/core.cljs"} ys ^{:end-column 14, :end-line 1619, :column 11, :line 1619, :file "cljs/core.cljs"} len ^{:end-column 16, :end-line 1619, :column 15, :line 1619, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 32, :end-line 1610, :column 17, :line 1610, :file "cljs/core.cljs"} compare-indexed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3711, :column 6, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 16, :end-line 3708, :column 7, :line 3708, :file "cljs/core.cljs"} take-last ^{:arglists (^{:end-column 11, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3711, :column 6, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 16, :end-line 3708, :column 7, :line 3708, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq [^{:end-column 5, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3711, :column 6, :line 3711, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3711, :column 6, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 16, :end-line 3708, :column 7, :line 3708, :file "cljs/core.cljs"} take-last, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 39, :end-line 623, :column 29, :line 623, :file "cljs/core.cljs"} IndexedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 929, :column 10, :line 929, :file "cljs/core.cljs"} IndexedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 28, :end-line 929, :column 21, :line 929, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i], :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 14, :end-line 2056, :column 7, :line 2056, :file "cljs/core.cljs"} bit-set ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 14, :end-line 2056, :column 7, :line 2056, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 14, :end-line 2056, :column 7, :line 2056, :file "cljs/core.cljs"} bit-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 32, :end-line 494, :column 1, :line 494, :file "cljs/core.cljs"} string-hash-cache-count ^{:end-column 32, :end-line 494, :column 1, :line 494, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 32, :end-line 494, :column 1, :line 494, :file "cljs/core.cljs"} string-hash-cache-count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} ->Eduction ^{:arglists ([^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} {:arglists (^cljs.core/Eduction [^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} ->Eduction, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 6718, :column 21, :line 6718, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6718, :column 22, :line 6718, :file "cljs/core.cljs"} comp ^{:end-column 31, :end-line 6718, :column 27, :line 6718, :file "cljs/core.cljs"} tree ^{:end-column 33, :end-line 6718, :column 32, :line 6718, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 6718, :column 34, :line 6718, :file "cljs/core.cljs"} v ^{:end-column 41, :end-line 6718, :column 36, :line 6718, :file "cljs/core.cljs"} found]), :private true, :end-column 20, :end-line 6718, :column 8, :line 6718, :file "cljs/core.cljs"} tree-map-add ^{:arglists (^{:end-column 42, :end-line 6718, :column 21, :line 6718, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6718, :column 22, :line 6718, :file "cljs/core.cljs"} comp ^{:end-column 31, :end-line 6718, :column 27, :line 6718, :file "cljs/core.cljs"} tree ^{:end-column 33, :end-line 6718, :column 32, :line 6718, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 6718, :column 34, :line 6718, :file "cljs/core.cljs"} v ^{:end-column 41, :end-line 6718, :column 36, :line 6718, :file "cljs/core.cljs"} found]), :private true, :end-column 20, :end-line 6718, :column 8, :line 6718, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 6718, :column 22, :line 6718, :file "cljs/core.cljs"} comp ^{:end-column 31, :end-line 6718, :column 27, :line 6718, :file "cljs/core.cljs"} tree ^{:end-column 33, :end-line 6718, :column 32, :line 6718, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 6718, :column 34, :line 6718, :file "cljs/core.cljs"} v ^{:end-column 41, :end-line 6718, :column 36, :line 6718, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 6718, :column 21, :line 6718, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6718, :column 22, :line 6718, :file "cljs/core.cljs"} comp ^{:end-column 31, :end-line 6718, :column 27, :line 6718, :file "cljs/core.cljs"} tree ^{:end-column 33, :end-line 6718, :column 32, :line 6718, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 6718, :column 34, :line 6718, :file "cljs/core.cljs"} v ^{:end-column 41, :end-line 6718, :column 36, :line 6718, :file "cljs/core.cljs"} found]), :private true, :end-column 20, :end-line 6718, :column 8, :line 6718, :file "cljs/core.cljs"} tree-map-add, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} ->ES6SetEntriesIterator ^{:arglists ([^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6SetEntriesIterator [^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} ->ES6SetEntriesIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta ^{:arglists (^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 57, :end-line 8691, :column 3, :line 8691, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8691, :column 4, :line 8691, :file "cljs/core.cljs"} method-cache ^{:end-column 29, :end-line 8691, :column 17, :line 8691, :file "cljs/core.cljs"} method-table ^{:end-column 46, :end-line 8691, :column 30, :line 8691, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 56, :end-line 8691, :column 47, :line 8691, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 19, :end-line 8690, :column 8, :line 8690, :file "cljs/core.cljs"} reset-cache ^{:arglists (^{:end-column 57, :end-line 8691, :column 3, :line 8691, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8691, :column 4, :line 8691, :file "cljs/core.cljs"} method-cache ^{:end-column 29, :end-line 8691, :column 17, :line 8691, :file "cljs/core.cljs"} method-table ^{:end-column 46, :end-line 8691, :column 30, :line 8691, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 56, :end-line 8691, :column 47, :line 8691, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 19, :end-line 8690, :column 8, :line 8690, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8691, :column 4, :line 8691, :file "cljs/core.cljs"} method-cache ^{:end-column 29, :end-line 8691, :column 17, :line 8691, :file "cljs/core.cljs"} method-table ^{:end-column 46, :end-line 8691, :column 30, :line 8691, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 56, :end-line 8691, :column 47, :line 8691, :file "cljs/core.cljs"} hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 57, :end-line 8691, :column 3, :line 8691, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8691, :column 4, :line 8691, :file "cljs/core.cljs"} method-cache ^{:end-column 29, :end-line 8691, :column 17, :line 8691, :file "cljs/core.cljs"} method-table ^{:end-column 46, :end-line 8691, :column 30, :line 8691, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 56, :end-line 8691, :column 47, :line 8691, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 19, :end-line 8690, :column 8, :line 8690, :file "cljs/core.cljs"} reset-cache, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} ->PersistentArrayMapIterator ^{:arglists ([^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMapIterator [^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} ->PersistentArrayMapIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} PersistentArrayMapIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} PersistentArrayMapIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 58, :end-line 5179, :column 37, :line 5179, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt], :protocols #{Object}}, ^{:arglists (^{:end-column 18, :end-line 7495, :column 15, :line 7495, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7495, :column 16, :line 7495, :file "cljs/core.cljs"} s]), :end-column 14, :end-line 7495, :column 7, :line 7495, :file "cljs/core.cljs"} butlast ^{:arglists (^{:end-column 18, :end-line 7495, :column 15, :line 7495, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7495, :column 16, :line 7495, :file "cljs/core.cljs"} s]), :end-column 14, :end-line 7495, :column 7, :line 7495, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq [^{:end-column 17, :end-line 7495, :column 16, :line 7495, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7495, :column 15, :line 7495, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7495, :column 16, :line 7495, :file "cljs/core.cljs"} s]), :end-column 14, :end-line 7495, :column 7, :line 7495, :file "cljs/core.cljs"} butlast, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 4028, :column 17, :line 4028, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4028, :column 18, :line 4028, :file "cljs/core.cljs"} pv]), :private true, :end-column 16, :end-line 4028, :column 8, :line 4028, :file "cljs/core.cljs"} tail-off ^{:arglists (^{:end-column 21, :end-line 4028, :column 17, :line 4028, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4028, :column 18, :line 4028, :file "cljs/core.cljs"} pv]), :private true, :end-column 16, :end-line 4028, :column 8, :line 4028, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 20, :end-line 4028, :column 18, :line 4028, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 4028, :column 17, :line 4028, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4028, :column 18, :line 4028, :file "cljs/core.cljs"} pv]), :private true, :end-column 16, :end-line 4028, :column 8, :line 4028, :file "cljs/core.cljs"} tail-off, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 5, :line 1957, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1958, :column 4, :line 1958, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1958, :column 5, :line 1958, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1958, :column 7, :line 1958, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1959, :column 4, :line 1959, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1959, :column 5, :line 1959, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1959, :column 9, :line 1959, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1959, :column 11, :line 1959, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1954, :column 8, :line 1954, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1954, :column 15, :line 1954, :file "cljs/core.cljs"} unchecked-subtract-int ^{:arglists (^{:end-column 7, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 5, :line 1957, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1958, :column 4, :line 1958, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1958, :column 5, :line 1958, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1958, :column 7, :line 1958, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1959, :column 4, :line 1959, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1959, :column 5, :line 1959, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1959, :column 9, :line 1959, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1959, :column 11, :line 1959, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1954, :column 8, :line 1954, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1954, :column 15, :line 1954, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1957, :column 5, :line 1957, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1958, :column 5, :line 1958, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1958, :column 7, :line 1958, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1959, :column 5, :line 1959, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1959, :column 11, :line 1959, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 5, :line 1957, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1958, :column 4, :line 1958, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1958, :column 5, :line 1958, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1958, :column 7, :line 1958, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1959, :column 4, :line 1959, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1959, :column 5, :line 1959, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1959, :column 9, :line 1959, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1959, :column 11, :line 1959, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1954, :column 8, :line 1954, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1954, :column 15, :line 1954, :file "cljs/core.cljs"} unchecked-subtract-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator ^{:arglists (^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7746, :column 4, :line 7746, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7746, :column 5, :line 7746, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7757, :column 4, :line 7757, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7757, :column 5, :line 7757, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7757, :column 7, :line 7757, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 15, :end-line 7743, :column 7, :line 7743, :file "cljs/core.cljs"} take-nth ^{:arglists (^{:end-column 7, :end-line 7746, :column 4, :line 7746, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7746, :column 5, :line 7746, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7757, :column 4, :line 7757, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7757, :column 5, :line 7757, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7757, :column 7, :line 7757, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 15, :end-line 7743, :column 7, :line 7743, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7746, :column 5, :line 7746, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 6, :end-line 7757, :column 5, :line 7757, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7757, :column 7, :line 7757, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7746, :column 4, :line 7746, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7746, :column 5, :line 7746, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7757, :column 4, :line 7757, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7757, :column 5, :line 7757, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7757, :column 7, :line 7757, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 15, :end-line 7743, :column 7, :line 7743, :file "cljs/core.cljs"} take-nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 660, :column 3, :line 660, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 660, :column 4, :line 660, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 12, :end-line 657, :column 7, :line 657, :file "cljs/core.cljs"} first ^{:arglists (^{:end-column 9, :end-line 660, :column 3, :line 660, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 660, :column 4, :line 660, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 12, :end-line 657, :column 7, :line 657, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 660, :column 4, :line 660, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 660, :column 3, :line 660, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 660, :column 4, :line 660, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 12, :end-line 657, :column 7, :line 657, :file "cljs/core.cljs"} first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 7, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 15, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 33, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies? ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 7, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 15, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 33, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 7, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 7, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 15, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 33, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1520, :column 3, :line 1520, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1518, :column 16, :line 1518, :file "cljs/core.cljs"} seq? ^{:arglists (^{:end-column 6, :end-line 1520, :column 3, :line 1520, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1518, :column 16, :line 1518, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1520, :column 3, :line 1520, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1518, :column 16, :line 1518, :file "cljs/core.cljs"} seq?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 38, :end-line 8580, :column 1, :line 8580, :file "cljs/core.cljs"} -global-hierarchy ^{:private true, :end-column 38, :end-line 8580, :column 1, :line 8580, :file "cljs/core.cljs"} {:op :var, :name ^{:private true, :end-column 38, :end-line 8580, :column 1, :line 8580, :file "cljs/core.cljs"} -global-hierarchy, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} UUID {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} UUID, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 21, :end-line 8970, :column 15, :line 8970, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from ^{:arglists (^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8144, :column 3, :line 8144, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8144, :column 4, :line 8144, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8144, :column 6, :line 8144, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 18, :end-line 8142, :column 7, :line 8142, :file "cljs/core.cljs"} println-str ^{:arglists (^{:end-column 11, :end-line 8144, :column 3, :line 8144, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8144, :column 4, :line 8144, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8144, :column 6, :line 8144, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 18, :end-line 8142, :column 7, :line 8142, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 8144, :column 6, :line 8144, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8144, :column 3, :line 8144, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8144, :column 4, :line 8144, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8144, :column 6, :line 8144, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 18, :end-line 8142, :column 7, :line 8142, :file "cljs/core.cljs"} println-str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 1155, :column 4, :line 1155, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1155, :column 5, :line 1155, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1155, :column 10, :line 1155, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1164, :column 4, :line 1164, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1164, :column 5, :line 1164, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1164, :column 10, :line 1164, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1164, :column 12, :line 1164, :file "cljs/core.cljs"} not-found]), :private true, :end-column 28, :end-line 1154, :column 8, :line 1154, :file "cljs/core.cljs"} linear-traversal-nth ^{:arglists (^{:end-column 12, :end-line 1155, :column 4, :line 1155, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1155, :column 5, :line 1155, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1155, :column 10, :line 1155, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1164, :column 4, :line 1164, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1164, :column 5, :line 1164, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1164, :column 10, :line 1164, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1164, :column 12, :line 1164, :file "cljs/core.cljs"} not-found]), :private true, :end-column 28, :end-line 1154, :column 8, :line 1154, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1155, :column 5, :line 1155, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1155, :column 10, :line 1155, :file "cljs/core.cljs"} n] [^{:end-column 9, :end-line 1164, :column 5, :line 1164, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1164, :column 10, :line 1164, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1164, :column 12, :line 1164, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1155, :column 4, :line 1155, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1155, :column 5, :line 1155, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1155, :column 10, :line 1155, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1164, :column 4, :line 1164, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1164, :column 5, :line 1164, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1164, :column 10, :line 1164, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1164, :column 12, :line 1164, :file "cljs/core.cljs"} not-found]), :private true, :end-column 28, :end-line 1154, :column 8, :line 1154, :file "cljs/core.cljs"} linear-traversal-nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3772, :column 3, :line 3772, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 3772, :column 6, :line 3772, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 14, :end-line 3769, :column 7, :line 3769, :file "cljs/core.cljs"} iterate ^{:arglists (^{:end-column 8, :end-line 3772, :column 3, :line 3772, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 3772, :column 6, :line 3772, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 14, :end-line 3769, :column 7, :line 3769, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 5, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 3772, :column 6, :line 3772, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3772, :column 3, :line 3772, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 3772, :column 6, :line 3772, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 14, :end-line 3769, :column 7, :line 3769, :file "cljs/core.cljs"} iterate, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty ^{:arglists (^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8100, :column 15, :line 8100, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8100, :column 16, :line 8100, :file "cljs/core.cljs"} opts]), :end-column 14, :end-line 8100, :column 7, :line 8100, :file "cljs/core.cljs"} newline ^{:arglists (^{:end-column 21, :end-line 8100, :column 15, :line 8100, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8100, :column 16, :line 8100, :file "cljs/core.cljs"} opts]), :end-column 14, :end-line 8100, :column 7, :line 8100, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 20, :end-line 8100, :column 16, :line 8100, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8100, :column 15, :line 8100, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8100, :column 16, :line 8100, :file "cljs/core.cljs"} opts]), :end-column 14, :end-line 8100, :column 7, :line 8100, :file "cljs/core.cljs"} newline, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 21, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} ILookup ^{:impls (cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/TransientHashMap cljs.core/PersistentHashMap cljs.core/TransientArrayMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 21, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 21, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} ILookup, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest ^{:arglists (^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 7963, :column 17, :line 7963, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 7963, :column 18, :line 7963, :file "cljs/core.cljs"} writer ^{:end-column 26, :end-line 7963, :column 25, :line 7963, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 7963, :column 27, :line 7963, :file "cljs/core.cljs"} ss]), :end-column 16, :end-line 7963, :column 7, :line 7963, :file "cljs/core.cljs"} write-all ^{:arglists (^{:end-column 30, :end-line 7963, :column 17, :line 7963, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 7963, :column 18, :line 7963, :file "cljs/core.cljs"} writer ^{:end-column 26, :end-line 7963, :column 25, :line 7963, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 7963, :column 27, :line 7963, :file "cljs/core.cljs"} ss]), :end-column 16, :end-line 7963, :column 7, :line 7963, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 7963, :column 18, :line 7963, :file "cljs/core.cljs"} writer & ^{:end-column 29, :end-line 7963, :column 27, :line 7963, :file "cljs/core.cljs"} ss]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 7963, :column 17, :line 7963, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 7963, :column 18, :line 7963, :file "cljs/core.cljs"} writer ^{:end-column 26, :end-line 7963, :column 25, :line 7963, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 7963, :column 27, :line 7963, :file "cljs/core.cljs"} ss]), :end-column 16, :end-line 7963, :column 7, :line 7963, :file "cljs/core.cljs"} write-all, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1319, :column 20, :line 1319, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1319, :column 21, :line 1319, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} fn? ^{:arglists (^{:end-column 23, :end-line 1319, :column 20, :line 1319, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1319, :column 21, :line 1319, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1320, :column 8, :line 1320, :file "cljs/core.cljs"} boolean [^{:end-column 22, :end-line 1319, :column 21, :line 1319, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1319, :column 20, :line 1319, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1319, :column 21, :line 1319, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} fn?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method ^{:arglists (^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc ^{:arglists (^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7887, :column 4, :line 7887, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7887, :column 5, :line 7887, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7890, :column 5, :line 7890, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7890, :column 7, :line 7890, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 12, :end-line 7880, :column 7, :line 7880, :file "cljs/core.cljs"} doall ^{:arglists (^{:end-column 10, :end-line 7887, :column 4, :line 7887, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7887, :column 5, :line 7887, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7890, :column 5, :line 7890, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7890, :column 7, :line 7890, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 12, :end-line 7880, :column 7, :line 7880, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7887, :column 5, :line 7887, :file "cljs/core.cljs"} coll] [^{:end-column 6, :end-line 7890, :column 5, :line 7890, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7890, :column 7, :line 7890, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7887, :column 4, :line 7887, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7887, :column 5, :line 7887, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7890, :column 5, :line 7890, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7890, :column 7, :line 7890, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 12, :end-line 7880, :column 7, :line 7880, :file "cljs/core.cljs"} doall, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 2444, :column 35, :line 2444, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 2444, :column 36, :line 2444, :file "cljs/core.cljs"} x ^{:end-column 39, :end-line 2444, :column 38, :line 2444, :file "cljs/core.cljs"} y]), :tag ^{:end-column 15, :end-line 2444, :column 8, :line 2444, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 2444, :column 16, :line 2444, :file "cljs/core.cljs"} keyword-identical? ^{:arglists (^{:end-column 40, :end-line 2444, :column 35, :line 2444, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 2444, :column 36, :line 2444, :file "cljs/core.cljs"} x ^{:end-column 39, :end-line 2444, :column 38, :line 2444, :file "cljs/core.cljs"} y]), :tag ^{:end-column 15, :end-line 2444, :column 8, :line 2444, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 2444, :column 16, :line 2444, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 37, :end-line 2444, :column 36, :line 2444, :file "cljs/core.cljs"} x ^{:end-column 39, :end-line 2444, :column 38, :line 2444, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 2444, :column 35, :line 2444, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 2444, :column 36, :line 2444, :file "cljs/core.cljs"} x ^{:end-column 39, :end-line 2444, :column 38, :line 2444, :file "cljs/core.cljs"} y]), :tag ^{:end-column 15, :end-line 2444, :column 8, :line 2444, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 2444, :column 16, :line 2444, :file "cljs/core.cljs"} keyword-identical?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 4022, :column 16, :line 4022, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4022, :column 17, :line 4022, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4022, :column 22, :line 4022, :file "cljs/core.cljs"} idx ^{:end-column 29, :end-line 4022, :column 26, :line 4022, :file "cljs/core.cljs"} val]), :private true, :end-column 15, :end-line 4022, :column 8, :line 4022, :file "cljs/core.cljs"} pv-aset ^{:arglists (^{:end-column 30, :end-line 4022, :column 16, :line 4022, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4022, :column 17, :line 4022, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4022, :column 22, :line 4022, :file "cljs/core.cljs"} idx ^{:end-column 29, :end-line 4022, :column 26, :line 4022, :file "cljs/core.cljs"} val]), :private true, :end-column 15, :end-line 4022, :column 8, :line 4022, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 4022, :column 17, :line 4022, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4022, :column 22, :line 4022, :file "cljs/core.cljs"} idx ^{:end-column 29, :end-line 4022, :column 26, :line 4022, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 4022, :column 16, :line 4022, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4022, :column 17, :line 4022, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4022, :column 22, :line 4022, :file "cljs/core.cljs"} idx ^{:end-column 29, :end-line 4022, :column 26, :line 4022, :file "cljs/core.cljs"} val]), :private true, :end-column 15, :end-line 4022, :column 8, :line 4022, :file "cljs/core.cljs"} pv-aset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8966, :column 3, :line 8966, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8966, :column 4, :line 8966, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 14, :end-line 8964, :column 7, :line 8964, :file "cljs/core.cljs"} prefers ^{:arglists (^{:end-column 12, :end-line 8966, :column 3, :line 8966, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8966, :column 4, :line 8966, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 14, :end-line 8964, :column 7, :line 8964, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8966, :column 4, :line 8966, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8966, :column 3, :line 8966, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8966, :column 4, :line 8966, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 14, :end-line 8964, :column 7, :line 8964, :file "cljs/core.cljs"} prefers, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj ^{:arglists (^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} LazySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} LazySeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 2474, :column 18, :line 2474, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8395, :column 4, :line 8395, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8407, :column 4, :line 8407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8407, :column 5, :line 8407, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 8392, :column 7, :line 8392, :file "cljs/core.cljs"} dedupe ^{:arglists (^{:end-column 6, :end-line 8395, :column 4, :line 8395, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8407, :column 4, :line 8407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8407, :column 5, :line 8407, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 8392, :column 7, :line 8392, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 9, :end-line 8407, :column 5, :line 8407, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8395, :column 4, :line 8395, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8407, :column 4, :line 8407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8407, :column 5, :line 8407, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 8392, :column 7, :line 8392, :file "cljs/core.cljs"} dedupe, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4589, :column 37, :line 4589, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4589, :column 38, :line 4589, :file "cljs/core.cljs"} tv ^{:end-column 42, :end-line 4589, :column 41, :line 4589, :file "cljs/core.cljs"} i]), :private true, :end-column 36, :end-line 4589, :column 8, :line 4589, :file "cljs/core.cljs"} unchecked-editable-array-for ^{:arglists (^{:end-column 43, :end-line 4589, :column 37, :line 4589, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4589, :column 38, :line 4589, :file "cljs/core.cljs"} tv ^{:end-column 42, :end-line 4589, :column 41, :line 4589, :file "cljs/core.cljs"} i]), :private true, :end-column 36, :end-line 4589, :column 8, :line 4589, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 4589, :column 38, :line 4589, :file "cljs/core.cljs"} tv ^{:end-column 42, :end-line 4589, :column 41, :line 4589, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4589, :column 37, :line 4589, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4589, :column 38, :line 4589, :file "cljs/core.cljs"} tv ^{:end-column 42, :end-line 4589, :column 41, :line 4589, :file "cljs/core.cljs"} i]), :private true, :end-column 36, :end-line 4589, :column 8, :line 4589, :file "cljs/core.cljs"} unchecked-editable-array-for, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} ->ES6Iterator ^{:arglists ([^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6Iterator [^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} ->ES6Iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} VectorNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} VectorNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 4014, :column 21, :line 4014, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr], :protocols #{}}, ^{:arglists (^{:end-column 10, :end-line 1308, :column 4, :line 1308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1308, :column 5, :line 1308, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1309, :column 4, :line 1309, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1309, :column 5, :line 1309, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1309, :column 10, :line 1309, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1312, :column 4, :line 1312, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1312, :column 5, :line 1312, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1312, :column 10, :line 1312, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1312, :column 12, :line 1312, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1312, :column 14, :line 1312, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 13, :end-line 1305, :column 7, :line 1305, :file "cljs/core.cljs"} dissoc ^{:arglists (^{:end-column 10, :end-line 1308, :column 4, :line 1308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1308, :column 5, :line 1308, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1309, :column 4, :line 1309, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1309, :column 5, :line 1309, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1309, :column 10, :line 1309, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1312, :column 4, :line 1312, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1312, :column 5, :line 1312, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1312, :column 10, :line 1312, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1312, :column 12, :line 1312, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1312, :column 14, :line 1312, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 13, :end-line 1305, :column 7, :line 1305, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1308, :column 5, :line 1308, :file "cljs/core.cljs"} coll] [^{:end-column 9, :end-line 1309, :column 5, :line 1309, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1309, :column 10, :line 1309, :file "cljs/core.cljs"} k] [^{:end-column 9, :end-line 1312, :column 5, :line 1312, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1312, :column 10, :line 1312, :file "cljs/core.cljs"} k & ^{:end-column 16, :end-line 1312, :column 14, :line 1312, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1308, :column 4, :line 1308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1308, :column 5, :line 1308, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1309, :column 4, :line 1309, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1309, :column 5, :line 1309, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1309, :column 10, :line 1309, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1312, :column 4, :line 1312, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1312, :column 5, :line 1312, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1312, :column 10, :line 1312, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1312, :column 12, :line 1312, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1312, :column 14, :line 1312, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 13, :end-line 1305, :column 7, :line 1305, :file "cljs/core.cljs"} dissoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3428, :column 4, :line 3428, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 3429, :column 4, :line 3429, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3429, :column 5, :line 3429, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 3429, :column 7, :line 3429, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 3429, :column 9, :line 3429, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 3429, :column 16, :line 3429, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3429, :column 17, :line 3429, :file "cljs/core.cljs"} meta ^{:end-column 31, :end-line 3429, :column 22, :line 3429, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 11, :end-line 3414, :column 7, :line 3414, :file "cljs/core.cljs"} atom ^{:declared true, :end-column 72, :end-line 5449, :column 68, :line 5449, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 72, :end-line 5449, :column 68, :line 5449, :file "cljs/core.cljs"} atom, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2072, :column 3, :line 2072, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2072, :column 4, :line 2072, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2072, :column 6, :line 2072, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 22, :end-line 2070, :column 7, :line 2070, :file "cljs/core.cljs"} bit-shift-right ^{:arglists (^{:end-column 8, :end-line 2072, :column 3, :line 2072, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2072, :column 4, :line 2072, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2072, :column 6, :line 2072, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 22, :end-line 2070, :column 7, :line 2070, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2072, :column 4, :line 2072, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2072, :column 6, :line 2072, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2072, :column 3, :line 2072, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2072, :column 4, :line 2072, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2072, :column 6, :line 2072, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 22, :end-line 2070, :column 7, :line 2070, :file "cljs/core.cljs"} bit-shift-right, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version* ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first ^{:arglists (^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1394, :column 3, :line 1394, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1394, :column 4, :line 1394, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 11, :end-line 1391, :column 7, :line 1391, :file "cljs/core.cljs"} peek ^{:arglists (^{:end-column 9, :end-line 1394, :column 3, :line 1394, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1394, :column 4, :line 1394, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 11, :end-line 1391, :column 7, :line 1391, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1394, :column 4, :line 1394, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1394, :column 3, :line 1394, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1394, :column 4, :line 1394, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 11, :end-line 1391, :column 7, :line 1391, :file "cljs/core.cljs"} peek, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 23, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} IKVReduce ^{:impls (cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 23, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 23, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} IKVReduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 183, :column 15, :line 183, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 11, :end-line 179, :column 7, :line 179, :file "cljs/core.cljs"} aget ^{:arglists (^{:end-column 13, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 183, :column 15, :line 183, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 11, :end-line 179, :column 7, :line 179, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} i] [^{:end-column 10, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i & ^{:end-column 19, :end-line 183, :column 15, :line 183, :file "cljs/core.cljs"} idxs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 183, :column 15, :line 183, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 11, :end-line 179, :column 7, :line 179, :file "cljs/core.cljs"} aget, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} PersistentTreeMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} PersistentTreeMapSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 84, :end-line 6312, :column 31, :line 6312, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write ^{:arglists (^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3036, :column 12, :line 3036, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3036, :column 13, :line 3036, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3036, :column 7, :line 3036, :file "cljs/core.cljs"} iter ^{:arglists (^{:end-column 18, :end-line 3036, :column 12, :line 3036, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3036, :column 13, :line 3036, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3036, :column 7, :line 3036, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 3036, :column 13, :line 3036, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3036, :column 12, :line 3036, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3036, :column 13, :line 3036, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3036, :column 7, :line 3036, :file "cljs/core.cljs"} iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7598, :column 3, :line 7598, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} sc ^{:end-column 11, :end-line 7598, :column 7, :line 7598, :file "cljs/core.cljs"} test ^{:end-column 15, :end-line 7598, :column 12, :line 7598, :file "cljs/core.cljs"} key]), :end-column 18, :end-line 7597, :column 7, :line 7597, :file "cljs/core.cljs"} mk-bound-fn ^{:arglists (^{:end-column 16, :end-line 7598, :column 3, :line 7598, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} sc ^{:end-column 11, :end-line 7598, :column 7, :line 7598, :file "cljs/core.cljs"} test ^{:end-column 15, :end-line 7598, :column 12, :line 7598, :file "cljs/core.cljs"} key]), :end-column 18, :end-line 7597, :column 7, :line 7597, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} sc ^{:end-column 11, :end-line 7598, :column 7, :line 7598, :file "cljs/core.cljs"} test ^{:end-column 15, :end-line 7598, :column 12, :line 7598, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7598, :column 3, :line 7598, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} sc ^{:end-column 11, :end-line 7598, :column 7, :line 7598, :file "cljs/core.cljs"} test ^{:end-column 15, :end-line 7598, :column 12, :line 7598, :file "cljs/core.cljs"} key]), :end-column 18, :end-line 7597, :column 7, :line 7597, :file "cljs/core.cljs"} mk-bound-fn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1096, :column 3, :line 1096, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 11, :end-line 1094, :column 7, :line 1094, :file "cljs/core.cljs"} last ^{:arglists (^{:end-column 6, :end-line 1096, :column 3, :line 1096, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 11, :end-line 1094, :column 7, :line 1094, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1096, :column 3, :line 1096, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 11, :end-line 1094, :column 7, :line 1094, :file "cljs/core.cljs"} last, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8120, :column 3, :line 8120, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8120, :column 4, :line 8120, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8120, :column 6, :line 8120, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 9, :end-line 8115, :column 7, :line 8115, :file "cljs/core.cljs"} pr ^{:arglists (^{:end-column 11, :end-line 8120, :column 3, :line 8120, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8120, :column 4, :line 8120, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8120, :column 6, :line 8120, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 9, :end-line 8115, :column 7, :line 8115, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 10, :end-line 8120, :column 6, :line 8120, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8120, :column 3, :line 8120, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8120, :column 4, :line 8120, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8120, :column 6, :line 8120, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 9, :end-line 8115, :column 7, :line 8115, :file "cljs/core.cljs"} pr, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 58, :end-line 6305, :column 26, :line 6305, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6305, :column 27, :line 6305, :file "cljs/core.cljs"} node ^{:end-column 37, :end-line 6305, :column 32, :line 6305, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 46, :end-line 6305, :column 39, :line 6305, :file "cljs/core.cljs"} boolean, :end-column 57, :end-line 6305, :column 47, :line 6305, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 25, :end-line 6305, :column 8, :line 6305, :file "cljs/core.cljs"} tree-map-seq-push ^{:arglists (^{:end-column 58, :end-line 6305, :column 26, :line 6305, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6305, :column 27, :line 6305, :file "cljs/core.cljs"} node ^{:end-column 37, :end-line 6305, :column 32, :line 6305, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 46, :end-line 6305, :column 39, :line 6305, :file "cljs/core.cljs"} boolean, :end-column 57, :end-line 6305, :column 47, :line 6305, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 25, :end-line 6305, :column 8, :line 6305, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6305, :column 27, :line 6305, :file "cljs/core.cljs"} node ^{:end-column 37, :end-line 6305, :column 32, :line 6305, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 46, :end-line 6305, :column 39, :line 6305, :file "cljs/core.cljs"} boolean, :end-column 57, :end-line 6305, :column 47, :line 6305, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 58, :end-line 6305, :column 26, :line 6305, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6305, :column 27, :line 6305, :file "cljs/core.cljs"} node ^{:end-column 37, :end-line 6305, :column 32, :line 6305, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 46, :end-line 6305, :column 39, :line 6305, :file "cljs/core.cljs"} boolean, :end-column 57, :end-line 6305, :column 47, :line 6305, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 25, :end-line 6305, :column 8, :line 6305, :file "cljs/core.cljs"} tree-map-seq-push, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2454, :column 3, :line 2454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2454, :column 4, :line 2454, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 16, :end-line 2452, :column 7, :line 2452, :file "cljs/core.cljs"} namespace ^{:arglists (^{:end-column 6, :end-line 2454, :column 3, :line 2454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2454, :column 4, :line 2454, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 16, :end-line 2452, :column 7, :line 2452, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string [^{:end-column 5, :end-line 2454, :column 4, :line 2454, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2454, :column 3, :line 2454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2454, :column 4, :line 2454, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 16, :end-line 2452, :column 7, :line 2452, :file "cljs/core.cljs"} namespace, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6993, :column 3, :line 6993, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6993, :column 4, :line 6993, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6993, :column 6, :line 6993, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 14, :end-line 6990, :column 7, :line 6990, :file "cljs/core.cljs"} obj-map ^{:arglists (^{:end-column 14, :end-line 6993, :column 3, :line 6993, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6993, :column 4, :line 6993, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6993, :column 6, :line 6993, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 14, :end-line 6990, :column 7, :line 6990, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 13, :end-line 6993, :column 6, :line 6993, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6993, :column 3, :line 6993, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6993, :column 4, :line 6993, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6993, :column 6, :line 6993, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 14, :end-line 6990, :column 7, :line 6990, :file "cljs/core.cljs"} obj-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} Reduced {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} Reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 816, :column 18, :line 816, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val], :protocols #{cljs.core/IDeref}}, ^{:arglists (^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj ^{:arglists (^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} NodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} NodeSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 5943, :column 18, :line 5943, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:declared true, :end-column 23, :end-line 490, :column 22, :line 490, :file "cljs/core.cljs"} = ^{:arglists (^{:end-column 7, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 695, :column 5, :line 695, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 696, :column 4, :line 696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 696, :column 5, :line 696, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 696, :column 7, :line 696, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 701, :column 4, :line 701, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 701, :column 5, :line 701, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 701, :column 7, :line 701, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 701, :column 9, :line 701, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 701, :column 11, :line 701, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 15, :end-line 690, :column 8, :line 690, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 690, :column 16, :line 690, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 695, :column 5, :line 695, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 6, :end-line 696, :column 5, :line 696, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 696, :column 7, :line 696, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 701, :column 5, :line 701, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 701, :column 7, :line 701, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 701, :column 11, :line 701, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 695, :column 5, :line 695, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 696, :column 4, :line 696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 696, :column 5, :line 696, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 696, :column 7, :line 696, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 701, :column 4, :line 701, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 701, :column 5, :line 701, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 701, :column 7, :line 701, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 701, :column 9, :line 701, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 701, :column 11, :line 701, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 15, :end-line 690, :column 8, :line 690, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 690, :column 16, :line 690, :file "cljs/core.cljs"} =, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 27, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} ITransientMap ^{:impls (cljs.core/TransientHashMap cljs.core/TransientArrayMap), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 27, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 27, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} ITransientMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 4044, :column 18, :line 4044, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4044, :column 19, :line 4044, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4044, :column 22, :line 4044, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4044, :column 28, :line 4044, :file "cljs/core.cljs"} parent ^{:end-column 43, :end-line 4044, :column 35, :line 4044, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 17, :end-line 4044, :column 8, :line 4044, :file "cljs/core.cljs"} push-tail ^{:arglists (^{:end-column 44, :end-line 4044, :column 18, :line 4044, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4044, :column 19, :line 4044, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4044, :column 22, :line 4044, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4044, :column 28, :line 4044, :file "cljs/core.cljs"} parent ^{:end-column 43, :end-line 4044, :column 35, :line 4044, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 17, :end-line 4044, :column 8, :line 4044, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 21, :end-line 4044, :column 19, :line 4044, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4044, :column 22, :line 4044, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4044, :column 28, :line 4044, :file "cljs/core.cljs"} parent ^{:end-column 43, :end-line 4044, :column 35, :line 4044, :file "cljs/core.cljs"} tailnode]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 4044, :column 18, :line 4044, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4044, :column 19, :line 4044, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4044, :column 22, :line 4044, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4044, :column 28, :line 4044, :file "cljs/core.cljs"} parent ^{:end-column 43, :end-line 4044, :column 35, :line 4044, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 17, :end-line 4044, :column 8, :line 4044, :file "cljs/core.cljs"} push-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3674, :column 4, :line 3674, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3674, :column 5, :line 3674, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 11, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} take ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3674, :column 4, :line 3674, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3674, :column 5, :line 3674, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 11, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3674, :column 5, :line 3674, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3674, :column 4, :line 3674, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3674, :column 5, :line 3674, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 11, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} take, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1465, :column 3, :line 1465, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1465, :column 4, :line 1465, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 15, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} vector? ^{:arglists (^{:end-column 6, :end-line 1465, :column 3, :line 1465, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1465, :column 4, :line 1465, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 15, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1465, :column 4, :line 1465, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1465, :column 3, :line 1465, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1465, :column 4, :line 1465, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 15, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} vector?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 46, :end-line 5475, :column 34, :line 5475, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 5475, :column 35, :line 5475, :file "cljs/core.cljs"} bitmap ^{:end-column 45, :end-line 5475, :column 42, :line 5475, :file "cljs/core.cljs"} bit]), :private true, :end-column 33, :end-line 5475, :column 8, :line 5475, :file "cljs/core.cljs"} bitmap-indexed-node-index ^{:arglists (^{:end-column 46, :end-line 5475, :column 34, :line 5475, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 5475, :column 35, :line 5475, :file "cljs/core.cljs"} bitmap ^{:end-column 45, :end-line 5475, :column 42, :line 5475, :file "cljs/core.cljs"} bit]), :private true, :end-column 33, :end-line 5475, :column 8, :line 5475, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 41, :end-line 5475, :column 35, :line 5475, :file "cljs/core.cljs"} bitmap ^{:end-column 45, :end-line 5475, :column 42, :line 5475, :file "cljs/core.cljs"} bit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 5475, :column 34, :line 5475, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 5475, :column 35, :line 5475, :file "cljs/core.cljs"} bitmap ^{:end-column 45, :end-line 5475, :column 42, :line 5475, :file "cljs/core.cljs"} bit]), :private true, :end-column 33, :end-line 5475, :column 8, :line 5475, :file "cljs/core.cljs"} bitmap-indexed-node-index, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1530, :column 24, :line 1530, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1530, :column 25, :line 1530, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1530, :column 8, :line 1530, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1530, :column 16, :line 1530, :file "cljs/core.cljs"} boolean ^{:arglists (^{:end-column 27, :end-line 1530, :column 24, :line 1530, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1530, :column 25, :line 1530, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1530, :column 8, :line 1530, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1530, :column 16, :line 1530, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 1530, :column 25, :line 1530, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1530, :column 24, :line 1530, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1530, :column 25, :line 1530, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1530, :column 8, :line 1530, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1530, :column 16, :line 1530, :file "cljs/core.cljs"} boolean, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 383, :column 14, :line 383, :file "cljs/core.cljs"} IChunk ^{:impls (cljs.core/ArrayChunk), :protocol-info {:methods {^{:end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 383, :column 14, :line 383, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 383, :column 14, :line 383, :file "cljs/core.cljs"} IChunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2068, :column 3, :line 2068, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2068, :column 4, :line 2068, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2068, :column 6, :line 2068, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 21, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} bit-shift-left ^{:arglists (^{:end-column 8, :end-line 2068, :column 3, :line 2068, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2068, :column 4, :line 2068, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2068, :column 6, :line 2068, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 21, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2068, :column 4, :line 2068, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2068, :column 6, :line 2068, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2068, :column 3, :line 2068, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2068, :column 4, :line 2068, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2068, :column 6, :line 2068, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 21, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} bit-shift-left, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2024, :column 3, :line 2024, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2024, :column 4, :line 2024, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 15, :end-line 2022, :column 7, :line 2022, :file "cljs/core.cljs"} rand-int ^{:arglists (^{:end-column 6, :end-line 8555, :column 3, :line 8555, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8555, :column 4, :line 8555, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 15, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 8555, :column 4, :line 8555, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8555, :column 3, :line 8555, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8555, :column 4, :line 8555, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 15, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} rand-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 164, :column 3, :line 164, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 164, :column 4, :line 164, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 13, :end-line 162, :column 7, :line 162, :file "cljs/core.cljs"} aclone ^{:arglists (^{:end-column 8, :end-line 164, :column 3, :line 164, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 164, :column 4, :line 164, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 13, :end-line 162, :column 7, :line 162, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 7, :end-line 164, :column 4, :line 164, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 164, :column 3, :line 164, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 164, :column 4, :line 164, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 13, :end-line 162, :column 7, :line 162, :file "cljs/core.cljs"} aclone, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 6368, :column 18, :line 6368, :file "cljs/core.cljs"} BlackNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 19, :end-line 6471, :column 10, :line 6471, :file "cljs/core.cljs"} BlackNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 57, :end-line 6471, :column 20, :line 6471, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 16, :end-line 2663, :column 13, :line 2663, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2663, :column 14, :line 2663, :file "cljs/core.cljs"} b]), :end-column 12, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} chunk ^{:arglists (^{:end-column 16, :end-line 2663, :column 13, :line 2663, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2663, :column 14, :line 2663, :file "cljs/core.cljs"} b]), :end-column 12, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 2663, :column 14, :line 2663, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 2663, :column 13, :line 2663, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2663, :column 14, :line 2663, :file "cljs/core.cljs"} b]), :end-column 12, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} chunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1853, :column 3, :line 1853, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1853, :column 4, :line 1853, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 10, :end-line 1851, :column 7, :line 1851, :file "cljs/core.cljs"} dec ^{:arglists (^{:end-column 6, :end-line 1853, :column 3, :line 1853, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1853, :column 4, :line 1853, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 10, :end-line 1851, :column 7, :line 1851, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 1853, :column 4, :line 1853, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1853, :column 3, :line 1853, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1853, :column 4, :line 1853, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 10, :end-line 1851, :column 7, :line 1851, :file "cljs/core.cljs"} dec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 13, :end-line 2145, :column 10, :line 2145, :file "cljs/core.cljs"} map ^{:arglists (^{:end-column 7, :end-line 3615, :column 4, :line 3615, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3615, :column 5, :line 3615, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3624, :column 4, :line 3624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3624, :column 5, :line 3624, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3635, :column 4, :line 3635, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3635, :column 5, :line 3635, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3635, :column 10, :line 3635, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3641, :column 4, :line 3641, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3641, :column 5, :line 3641, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3641, :column 10, :line 3641, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3641, :column 13, :line 3641, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3647, :column 4, :line 3647, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3647, :column 5, :line 3647, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3647, :column 7, :line 3647, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3647, :column 10, :line 3647, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3647, :column 13, :line 3647, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3647, :column 16, :line 3647, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3647, :column 18, :line 3647, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 10, :end-line 3608, :column 7, :line 3608, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3615, :column 5, :line 3615, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3624, :column 5, :line 3624, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3635, :column 5, :line 3635, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3635, :column 10, :line 3635, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3641, :column 5, :line 3641, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3641, :column 10, :line 3641, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3641, :column 13, :line 3641, :file "cljs/core.cljs"} c3] [^{:end-column 6, :end-line 3647, :column 5, :line 3647, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3647, :column 7, :line 3647, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3647, :column 10, :line 3647, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3647, :column 13, :line 3647, :file "cljs/core.cljs"} c3 & ^{:end-column 23, :end-line 3647, :column 18, :line 3647, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3615, :column 4, :line 3615, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3615, :column 5, :line 3615, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3624, :column 4, :line 3624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3624, :column 5, :line 3624, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3635, :column 4, :line 3635, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3635, :column 5, :line 3635, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3635, :column 10, :line 3635, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3641, :column 4, :line 3641, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3641, :column 5, :line 3641, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3641, :column 10, :line 3641, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3641, :column 13, :line 3641, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3647, :column 4, :line 3647, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3647, :column 5, :line 3647, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3647, :column 7, :line 3647, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3647, :column 10, :line 3647, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3647, :column 13, :line 3647, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3647, :column 16, :line 3647, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3647, :column 18, :line 3647, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 10, :end-line 3608, :column 7, :line 3608, :file "cljs/core.cljs"} map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7837, :column 4, :line 7837, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7837, :column 5, :line 7837, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7844, :column 4, :line 7844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7844, :column 5, :line 7844, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7851, :column 4, :line 7851, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7851, :column 5, :line 7851, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7851, :column 9, :line 7851, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7858, :column 4, :line 7858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7858, :column 5, :line 7858, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7858, :column 7, :line 7858, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7858, :column 9, :line 7858, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 7858, :column 11, :line 7858, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 7858, :column 13, :line 7858, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 11, :end-line 7831, :column 7, :line 7831, :file "cljs/core.cljs"} juxt ^{:arglists (^{:end-column 7, :end-line 7837, :column 4, :line 7837, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7837, :column 5, :line 7837, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7844, :column 4, :line 7844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7844, :column 5, :line 7844, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7851, :column 4, :line 7851, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7851, :column 5, :line 7851, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7851, :column 9, :line 7851, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7858, :column 4, :line 7858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7858, :column 5, :line 7858, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7858, :column 7, :line 7858, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7858, :column 9, :line 7858, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 7858, :column 11, :line 7858, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 7858, :column 13, :line 7858, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 11, :end-line 7831, :column 7, :line 7831, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7837, :column 5, :line 7837, :file "cljs/core.cljs"} f] ^function [^{:end-column 6, :end-line 7844, :column 5, :line 7844, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} g] ^function [^{:end-column 6, :end-line 7851, :column 5, :line 7851, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7851, :column 9, :line 7851, :file "cljs/core.cljs"} h] ^function [^{:end-column 6, :end-line 7858, :column 5, :line 7858, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7858, :column 7, :line 7858, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7858, :column 9, :line 7858, :file "cljs/core.cljs"} h & ^{:end-column 15, :end-line 7858, :column 13, :line 7858, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7837, :column 4, :line 7837, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7837, :column 5, :line 7837, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7844, :column 4, :line 7844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7844, :column 5, :line 7844, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7851, :column 4, :line 7851, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7851, :column 5, :line 7851, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7851, :column 9, :line 7851, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7858, :column 4, :line 7858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7858, :column 5, :line 7858, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7858, :column 7, :line 7858, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7858, :column 9, :line 7858, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 7858, :column 11, :line 7858, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 7858, :column 13, :line 7858, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 11, :end-line 7831, :column 7, :line 7831, :file "cljs/core.cljs"} juxt, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 5, :line 1806, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 7, :line 1807, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1808, :column 9, :line 1808, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1808, :column 11, :line 1808, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1803, :column 8, :line 1803, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1803, :column 16, :line 1803, :file "cljs/core.cljs"} < ^{:arglists (^{:end-column 7, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 5, :line 1806, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 7, :line 1807, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1808, :column 9, :line 1808, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1808, :column 11, :line 1808, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1803, :column 8, :line 1803, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1803, :column 16, :line 1803, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1806, :column 5, :line 1806, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 7, :line 1807, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1808, :column 11, :line 1808, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 5, :line 1806, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 7, :line 1807, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1808, :column 9, :line 1808, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1808, :column 11, :line 1808, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1803, :column 8, :line 1803, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1803, :column 16, :line 1803, :file "cljs/core.cljs"} <, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5492, :column 24, :line 5492, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 5492, :column 25, :line 5492, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 5492, :column 29, :line 5492, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 5492, :column 31, :line 5492, :file "cljs/core.cljs"} init]), :private true, :end-column 23, :end-line 5492, :column 8, :line 5492, :file "cljs/core.cljs"} inode-kv-reduce ^{:arglists (^{:end-column 36, :end-line 5492, :column 24, :line 5492, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 5492, :column 25, :line 5492, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 5492, :column 29, :line 5492, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 5492, :column 31, :line 5492, :file "cljs/core.cljs"} init]), :private true, :end-column 23, :end-line 5492, :column 8, :line 5492, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 5492, :column 25, :line 5492, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 5492, :column 29, :line 5492, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 5492, :column 31, :line 5492, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5492, :column 24, :line 5492, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 5492, :column 25, :line 5492, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 5492, :column 29, :line 5492, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 5492, :column 31, :line 5492, :file "cljs/core.cljs"} init]), :private true, :end-column 23, :end-line 5492, :column 8, :line 5492, :file "cljs/core.cljs"} inode-kv-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4881, :column 26, :line 4881, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4881, :column 27, :line 4881, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 4881, :column 29, :line 4881, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4881, :column 31, :line 4881, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 4881, :column 8, :line 4881, :file "cljs/core.cljs"} obj-map->hash-map ^{:arglists (^{:end-column 33, :end-line 4881, :column 26, :line 4881, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4881, :column 27, :line 4881, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 4881, :column 29, :line 4881, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4881, :column 31, :line 4881, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 4881, :column 8, :line 4881, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 4881, :column 27, :line 4881, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 4881, :column 29, :line 4881, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4881, :column 31, :line 4881, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4881, :column 26, :line 4881, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4881, :column 27, :line 4881, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 4881, :column 29, :line 4881, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4881, :column 31, :line 4881, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 4881, :column 8, :line 4881, :file "cljs/core.cljs"} obj-map->hash-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 671, :column 3, :line 671, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 671, :column 4, :line 671, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 11, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 668, :column 12, :line 668, :file "cljs/core.cljs"} rest ^{:arglists (^{:end-column 9, :end-line 671, :column 3, :line 671, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 671, :column 4, :line 671, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 11, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 668, :column 12, :line 668, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 671, :column 4, :line 671, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 671, :column 3, :line 671, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 671, :column 4, :line 671, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 11, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 668, :column 12, :line 668, :file "cljs/core.cljs"} rest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 9009, :column 3, :line 9009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9009, :column 4, :line 9009, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 14, :end-line 9005, :column 7, :line 9005, :file "cljs/core.cljs"} ex-data ^{:arglists (^{:end-column 7, :end-line 9009, :column 3, :line 9009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9009, :column 4, :line 9009, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 14, :end-line 9005, :column 7, :line 9005, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 9009, :column 4, :line 9009, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 9009, :column 3, :line 9009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9009, :column 4, :line 9009, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 14, :end-line 9005, :column 7, :line 9005, :file "cljs/core.cljs"} ex-data, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} PersistentArrayMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} PersistentArrayMapSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 5118, :column 32, :line 5118, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first ^{:arglists (^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8596, :column 4, :line 8596, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8596, :column 5, :line 8596, :file "cljs/core.cljs"} child ^{:end-column 17, :end-line 8596, :column 11, :line 8596, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8597, :column 4, :line 8597, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8597, :column 5, :line 8597, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 8597, :column 7, :line 8597, :file "cljs/core.cljs"} child ^{:end-column 19, :end-line 8597, :column 13, :line 8597, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 15, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 8590, :column 16, :line 8590, :file "cljs/core.cljs"} isa? ^{:arglists (^{:end-column 18, :end-line 8596, :column 4, :line 8596, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8596, :column 5, :line 8596, :file "cljs/core.cljs"} child ^{:end-column 17, :end-line 8596, :column 11, :line 8596, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8597, :column 4, :line 8597, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8597, :column 5, :line 8597, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 8597, :column 7, :line 8597, :file "cljs/core.cljs"} child ^{:end-column 19, :end-line 8597, :column 13, :line 8597, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 15, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 8590, :column 16, :line 8590, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 8596, :column 5, :line 8596, :file "cljs/core.cljs"} child ^{:end-column 17, :end-line 8596, :column 11, :line 8596, :file "cljs/core.cljs"} parent] [^{:end-column 6, :end-line 8597, :column 5, :line 8597, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 8597, :column 7, :line 8597, :file "cljs/core.cljs"} child ^{:end-column 19, :end-line 8597, :column 13, :line 8597, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8596, :column 4, :line 8596, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8596, :column 5, :line 8596, :file "cljs/core.cljs"} child ^{:end-column 17, :end-line 8596, :column 11, :line 8596, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8597, :column 4, :line 8597, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8597, :column 5, :line 8597, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 8597, :column 7, :line 8597, :file "cljs/core.cljs"} child ^{:end-column 19, :end-line 8597, :column 13, :line 8597, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 15, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 8590, :column 16, :line 8590, :file "cljs/core.cljs"} isa?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone ^{:arglists (^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([meta8411]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} ->t8410 ^{:file "cljs/core.cljs", :arglists ([meta8411]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} {:arglists (^cljs.core/t8410 [meta8411]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([meta8411]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} ->t8410, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} ES6IteratorSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} ES6IteratorSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 53, :end-line 723, :column 25, :line 723, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest], :protocols #{cljs.core/ISeq cljs.core/ISeqable}}, ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} ->NeverEquiv ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} {:arglists (^cljs.core/NeverEquiv []), :tag function, :op :var, :name ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} ->NeverEquiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7927, :column 3, :line 7927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7927, :column 4, :line 7927, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 13, :end-line 7925, :column 7, :line 7925, :file "cljs/core.cljs"} re-seq ^{:arglists (^{:end-column 9, :end-line 7927, :column 3, :line 7927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7927, :column 4, :line 7927, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 13, :end-line 7925, :column 7, :line 7925, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7927, :column 4, :line 7927, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7927, :column 3, :line 7927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7927, :column 4, :line 7927, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 13, :end-line 7925, :column 7, :line 7925, :file "cljs/core.cljs"} re-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 8578, :column 3, :line 8578, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 21, :end-line 8576, :column 7, :line 8576, :file "cljs/core.cljs"} make-hierarchy ^{:arglists (^{:end-column 5, :end-line 8578, :column 3, :line 8578, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 21, :end-line 8576, :column 7, :line 8576, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 8578, :column 3, :line 8578, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 21, :end-line 8576, :column 7, :line 8576, :file "cljs/core.cljs"} make-hierarchy, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 490, :column 15, :line 490, :file "cljs/core.cljs"} Symbol {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 16, :end-line 576, :column 10, :line 576, :file "cljs/core.cljs"} Symbol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 576, :column 17, :line 576, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 48, :end-line 4563, :column 21, :line 4563, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4563, :column 22, :line 4563, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4563, :column 25, :line 4563, :file "cljs/core.cljs"} level ^{:end-column 37, :end-line 4563, :column 31, :line 4563, :file "cljs/core.cljs"} parent ^{:end-column 47, :end-line 4563, :column 38, :line 4563, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 20, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} tv-push-tail ^{:arglists (^{:end-column 48, :end-line 4563, :column 21, :line 4563, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4563, :column 22, :line 4563, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4563, :column 25, :line 4563, :file "cljs/core.cljs"} level ^{:end-column 37, :end-line 4563, :column 31, :line 4563, :file "cljs/core.cljs"} parent ^{:end-column 47, :end-line 4563, :column 38, :line 4563, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 20, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 4563, :column 22, :line 4563, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4563, :column 25, :line 4563, :file "cljs/core.cljs"} level ^{:end-column 37, :end-line 4563, :column 31, :line 4563, :file "cljs/core.cljs"} parent ^{:end-column 47, :end-line 4563, :column 38, :line 4563, :file "cljs/core.cljs"} tail-node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 48, :end-line 4563, :column 21, :line 4563, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4563, :column 22, :line 4563, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4563, :column 25, :line 4563, :file "cljs/core.cljs"} level ^{:end-column 37, :end-line 4563, :column 31, :line 4563, :file "cljs/core.cljs"} parent ^{:end-column 47, :end-line 4563, :column 38, :line 4563, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 20, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} tv-push-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce ^{:arglists (^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count ^{:arglists (^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3355, :column 4, :line 3355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3355, :column 5, :line 3355, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3365, :column 4, :line 3365, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3365, :column 5, :line 3365, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3365, :column 7, :line 3365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 11, :end-line 3351, :column 7, :line 3351, :file "cljs/core.cljs"} keep ^{:arglists (^{:end-column 7, :end-line 3355, :column 4, :line 3355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3355, :column 5, :line 3355, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3365, :column 4, :line 3365, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3365, :column 5, :line 3365, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3365, :column 7, :line 3365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 11, :end-line 3351, :column 7, :line 3351, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3355, :column 5, :line 3355, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3365, :column 5, :line 3365, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3365, :column 7, :line 3365, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3355, :column 4, :line 3355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3355, :column 5, :line 3355, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3365, :column 4, :line 3365, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3365, :column 5, :line 3365, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3365, :column 7, :line 3365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 11, :end-line 3351, :column 7, :line 3351, :file "cljs/core.cljs"} keep, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1873, :column 3, :line 1873, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 11, :end-line 1871, :column 7, :line 1871, :file "cljs/core.cljs"} char ^{:arglists (^{:end-column 6, :end-line 1873, :column 3, :line 1873, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 11, :end-line 1871, :column 7, :line 1871, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1873, :column 3, :line 1873, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 11, :end-line 1871, :column 7, :line 1871, :file "cljs/core.cljs"} char, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3815, :column 4, :line 3815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3815, :column 5, :line 3815, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3815, :column 7, :line 3815, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3815, :column 9, :line 3815, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 13, :end-line 3808, :column 7, :line 3808, :file "cljs/core.cljs"} mapcat ^{:arglists (^{:end-column 7, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3815, :column 4, :line 3815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3815, :column 5, :line 3815, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3815, :column 7, :line 3815, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3815, :column 9, :line 3815, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 13, :end-line 3808, :column 7, :line 3808, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 3815, :column 5, :line 3815, :file "cljs/core.cljs"} f & ^{:end-column 14, :end-line 3815, :column 9, :line 3815, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3815, :column 4, :line 3815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3815, :column 5, :line 3815, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3815, :column 7, :line 3815, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3815, :column 9, :line 3815, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 13, :end-line 3808, :column 7, :line 3808, :file "cljs/core.cljs"} mapcat, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1983, :column 3, :line 1983, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1983, :column 4, :line 1983, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 21, :end-line 1981, :column 7, :line 1981, :file "cljs/core.cljs"} unchecked-long ^{:arglists (^{:end-column 6, :end-line 1983, :column 3, :line 1983, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1983, :column 4, :line 1983, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 21, :end-line 1981, :column 7, :line 1981, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number [^{:end-column 5, :end-line 1983, :column 4, :line 1983, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1983, :column 3, :line 1983, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1983, :column 4, :line 1983, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 21, :end-line 1981, :column 7, :line 1981, :file "cljs/core.cljs"} unchecked-long, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 16, :end-line 448, :column 1, :line 448, :file "cljs/core.cljs"} m3-seed ^{:end-column 16, :end-line 448, :column 1, :line 448, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 16, :end-line 448, :column 1, :line 448, :file "cljs/core.cljs"} m3-seed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 15, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some? ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 15, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 15, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1936, :column 24, :line 1936, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1936, :column 25, :line 1936, :file "cljs/core.cljs"} x]), :end-column 23, :end-line 1936, :column 7, :line 1936, :file "cljs/core.cljs"} unchecked-negate ^{:arglists (^{:end-column 27, :end-line 1936, :column 24, :line 1936, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1936, :column 25, :line 1936, :file "cljs/core.cljs"} x]), :end-column 23, :end-line 1936, :column 7, :line 1936, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 1936, :column 25, :line 1936, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1936, :column 24, :line 1936, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1936, :column 25, :line 1936, :file "cljs/core.cljs"} x]), :end-column 23, :end-line 1936, :column 7, :line 1936, :file "cljs/core.cljs"} unchecked-negate, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2330, :column 3, :line 2330, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2330, :column 4, :line 2330, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 14, :end-line 2328, :column 7, :line 2328, :file "cljs/core.cljs"} reverse ^{:arglists (^{:end-column 9, :end-line 2330, :column 3, :line 2330, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2330, :column 4, :line 2330, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 14, :end-line 2328, :column 7, :line 2328, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2330, :column 4, :line 2330, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2330, :column 3, :line 2330, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2330, :column 4, :line 2330, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 14, :end-line 2328, :column 7, :line 2328, :file "cljs/core.cljs"} reverse, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7739, :column 4, :line 7739, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7739, :column 5, :line 7739, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7740, :column 4, :line 7740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7740, :column 5, :line 7740, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7740, :column 11, :line 7740, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7741, :column 4, :line 7741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7741, :column 5, :line 7741, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7741, :column 11, :line 7741, :file "cljs/core.cljs"} end ^{:end-column 19, :end-line 7741, :column 15, :line 7741, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 12, :end-line 7734, :column 7, :line 7734, :file "cljs/core.cljs"} range ^{:arglists (^{:end-column 6, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7739, :column 4, :line 7739, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7739, :column 5, :line 7739, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7740, :column 4, :line 7740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7740, :column 5, :line 7740, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7740, :column 11, :line 7740, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7741, :column 4, :line 7741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7741, :column 5, :line 7741, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7741, :column 11, :line 7741, :file "cljs/core.cljs"} end ^{:end-column 19, :end-line 7741, :column 15, :line 7741, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 12, :end-line 7734, :column 7, :line 7734, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 8, :end-line 7739, :column 5, :line 7739, :file "cljs/core.cljs"} end] [^{:end-column 10, :end-line 7740, :column 5, :line 7740, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7740, :column 11, :line 7740, :file "cljs/core.cljs"} end] ^cljs.core/Range [^{:end-column 10, :end-line 7741, :column 5, :line 7741, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7741, :column 11, :line 7741, :file "cljs/core.cljs"} end ^{:end-column 19, :end-line 7741, :column 15, :line 7741, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7739, :column 4, :line 7739, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7739, :column 5, :line 7739, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7740, :column 4, :line 7740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7740, :column 5, :line 7740, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7740, :column 11, :line 7740, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7741, :column 4, :line 7741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7741, :column 5, :line 7741, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7741, :column 11, :line 7741, :file "cljs/core.cljs"} end ^{:end-column 19, :end-line 7741, :column 15, :line 7741, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 12, :end-line 7734, :column 7, :line 7734, :file "cljs/core.cljs"} range, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2084, :column 3, :line 2084, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2084, :column 4, :line 2084, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 16, :end-line 2082, :column 7, :line 2082, :file "cljs/core.cljs"} bit-count ^{:arglists (^{:end-column 6, :end-line 2084, :column 3, :line 2084, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2084, :column 4, :line 2084, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 16, :end-line 2082, :column 7, :line 2082, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2084, :column 4, :line 2084, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2084, :column 3, :line 2084, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2084, :column 4, :line 2084, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 16, :end-line 2082, :column 7, :line 2082, :file "cljs/core.cljs"} bit-count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 67, :end-line 5449, :column 56, :line 5449, :file "cljs/core.cljs"} create-node ^{:arglists (^{:end-column 40, :end-line 5926, :column 4, :line 5926, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5926, :column 5, :line 5926, :file "cljs/core.cljs"} shift ^{:end-column 15, :end-line 5926, :column 11, :line 5926, :file "cljs/core.cljs"} key1 ^{:end-column 20, :end-line 5926, :column 16, :line 5926, :file "cljs/core.cljs"} val1 ^{:end-column 29, :end-line 5926, :column 21, :line 5926, :file "cljs/core.cljs"} key2hash ^{:end-column 34, :end-line 5926, :column 30, :line 5926, :file "cljs/core.cljs"} key2 ^{:end-column 39, :end-line 5926, :column 35, :line 5926, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5934, :column 4, :line 5934, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5934, :column 5, :line 5934, :file "cljs/core.cljs"} edit ^{:end-column 15, :end-line 5934, :column 10, :line 5934, :file "cljs/core.cljs"} shift ^{:end-column 20, :end-line 5934, :column 16, :line 5934, :file "cljs/core.cljs"} key1 ^{:end-column 25, :end-line 5934, :column 21, :line 5934, :file "cljs/core.cljs"} val1 ^{:end-column 34, :end-line 5934, :column 26, :line 5934, :file "cljs/core.cljs"} key2hash ^{:end-column 39, :end-line 5934, :column 35, :line 5934, :file "cljs/core.cljs"} key2 ^{:end-column 44, :end-line 5934, :column 40, :line 5934, :file "cljs/core.cljs"} val2]), :private true, :end-column 19, :end-line 5925, :column 8, :line 5925, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 5926, :column 5, :line 5926, :file "cljs/core.cljs"} shift ^{:end-column 15, :end-line 5926, :column 11, :line 5926, :file "cljs/core.cljs"} key1 ^{:end-column 20, :end-line 5926, :column 16, :line 5926, :file "cljs/core.cljs"} val1 ^{:end-column 29, :end-line 5926, :column 21, :line 5926, :file "cljs/core.cljs"} key2hash ^{:end-column 34, :end-line 5926, :column 30, :line 5926, :file "cljs/core.cljs"} key2 ^{:end-column 39, :end-line 5926, :column 35, :line 5926, :file "cljs/core.cljs"} val2] [^{:end-column 9, :end-line 5934, :column 5, :line 5934, :file "cljs/core.cljs"} edit ^{:end-column 15, :end-line 5934, :column 10, :line 5934, :file "cljs/core.cljs"} shift ^{:end-column 20, :end-line 5934, :column 16, :line 5934, :file "cljs/core.cljs"} key1 ^{:end-column 25, :end-line 5934, :column 21, :line 5934, :file "cljs/core.cljs"} val1 ^{:end-column 34, :end-line 5934, :column 26, :line 5934, :file "cljs/core.cljs"} key2hash ^{:end-column 39, :end-line 5934, :column 35, :line 5934, :file "cljs/core.cljs"} key2 ^{:end-column 44, :end-line 5934, :column 40, :line 5934, :file "cljs/core.cljs"} val2]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5926, :column 4, :line 5926, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5926, :column 5, :line 5926, :file "cljs/core.cljs"} shift ^{:end-column 15, :end-line 5926, :column 11, :line 5926, :file "cljs/core.cljs"} key1 ^{:end-column 20, :end-line 5926, :column 16, :line 5926, :file "cljs/core.cljs"} val1 ^{:end-column 29, :end-line 5926, :column 21, :line 5926, :file "cljs/core.cljs"} key2hash ^{:end-column 34, :end-line 5926, :column 30, :line 5926, :file "cljs/core.cljs"} key2 ^{:end-column 39, :end-line 5926, :column 35, :line 5926, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5934, :column 4, :line 5934, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5934, :column 5, :line 5934, :file "cljs/core.cljs"} edit ^{:end-column 15, :end-line 5934, :column 10, :line 5934, :file "cljs/core.cljs"} shift ^{:end-column 20, :end-line 5934, :column 16, :line 5934, :file "cljs/core.cljs"} key1 ^{:end-column 25, :end-line 5934, :column 21, :line 5934, :file "cljs/core.cljs"} val1 ^{:end-column 34, :end-line 5934, :column 26, :line 5934, :file "cljs/core.cljs"} key2hash ^{:end-column 39, :end-line 5934, :column 35, :line 5934, :file "cljs/core.cljs"} key2 ^{:end-column 44, :end-line 5934, :column 40, :line 5934, :file "cljs/core.cljs"} val2]), :private true, :end-column 19, :end-line 5925, :column 8, :line 5925, :file "cljs/core.cljs"} create-node, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1647, :column 4, :line 1647, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1647, :column 5, :line 1647, :file "cljs/core.cljs"} comp ^{:end-column 14, :end-line 1647, :column 10, :line 1647, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 11, :end-line 1641, :column 7, :line 1641, :file "cljs/core.cljs"} sort ^{:arglists (^{:end-column 10, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1647, :column 4, :line 1647, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1647, :column 5, :line 1647, :file "cljs/core.cljs"} comp ^{:end-column 14, :end-line 1647, :column 10, :line 1647, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 11, :end-line 1641, :column 7, :line 1641, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} coll] [^{:end-column 9, :end-line 1647, :column 5, :line 1647, :file "cljs/core.cljs"} comp ^{:end-column 14, :end-line 1647, :column 10, :line 1647, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1647, :column 4, :line 1647, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1647, :column 5, :line 1647, :file "cljs/core.cljs"} comp ^{:end-column 14, :end-line 1647, :column 10, :line 1647, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 11, :end-line 1641, :column 7, :line 1641, :file "cljs/core.cljs"} sort, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} ->MetaFn ^{:arglists ([^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} {:arglists (^cljs.core/MetaFn [^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} ->MetaFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1919, :column 25, :line 1919, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1919, :column 26, :line 1919, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} unchecked-inc-int ^{:arglists (^{:end-column 28, :end-line 1919, :column 25, :line 1919, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1919, :column 26, :line 1919, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1919, :column 26, :line 1919, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1919, :column 25, :line 1919, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1919, :column 26, :line 1919, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} unchecked-inc-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare ^{:arglists (^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3337, :column 3, :line 3337, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3337, :column 4, :line 3337, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3337, :column 6, :line 3337, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 18, :end-line 3332, :column 7, :line 3332, :file "cljs/core.cljs"} map-indexed ^{:arglists (^{:end-column 11, :end-line 3337, :column 3, :line 3337, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3337, :column 4, :line 3337, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3337, :column 6, :line 3337, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 18, :end-line 3332, :column 7, :line 3332, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 5, :end-line 3337, :column 4, :line 3337, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3337, :column 6, :line 3337, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3337, :column 3, :line 3337, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3337, :column 4, :line 3337, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3337, :column 6, :line 3337, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 18, :end-line 3332, :column 7, :line 3332, :file "cljs/core.cljs"} map-indexed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 7544, :column 18, :line 7544, :file "cljs/core.cljs"} []), :end-column 17, :end-line 7544, :column 7, :line 7544, :file "cljs/core.cljs"} array-list ^{:arglists (^{:end-column 20, :end-line 7544, :column 18, :line 7544, :file "cljs/core.cljs"} []), :end-column 17, :end-line 7544, :column 7, :line 7544, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList []), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7544, :column 18, :line 7544, :file "cljs/core.cljs"} []), :end-column 17, :end-line 7544, :column 7, :line 7544, :file "cljs/core.cljs"} array-list, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8561, :column 3, :line 8561, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8561, :column 4, :line 8561, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 15, :end-line 8557, :column 7, :line 8557, :file "cljs/core.cljs"} rand-nth ^{:arglists (^{:end-column 9, :end-line 8561, :column 3, :line 8561, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8561, :column 4, :line 8561, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 15, :end-line 8557, :column 7, :line 8557, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8561, :column 4, :line 8561, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8561, :column 3, :line 8561, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8561, :column 4, :line 8561, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 15, :end-line 8557, :column 7, :line 8557, :file "cljs/core.cljs"} rand-nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3271, :column 4, :line 3271, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3272, :column 4, :line 3272, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3272, :column 5, :line 3272, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3273, :column 4, :line 3273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3273, :column 5, :line 3273, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3273, :column 7, :line 3273, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3280, :column 4, :line 3280, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3280, :column 5, :line 3280, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3280, :column 7, :line 3280, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 3280, :column 9, :line 3280, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3287, :column 4, :line 3287, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3287, :column 5, :line 3287, :file "cljs/core.cljs"} f1 ^{:end-column 10, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} f2 ^{:end-column 13, :end-line 3287, :column 11, :line 3287, :file "cljs/core.cljs"} f3 ^{:end-column 15, :end-line 3287, :column 14, :line 3287, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3287, :column 16, :line 3287, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 11, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} comp ^{:arglists (^{:end-column 6, :end-line 3271, :column 4, :line 3271, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3272, :column 4, :line 3272, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3272, :column 5, :line 3272, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3273, :column 4, :line 3273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3273, :column 5, :line 3273, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3273, :column 7, :line 3273, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3280, :column 4, :line 3280, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3280, :column 5, :line 3280, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3280, :column 7, :line 3280, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 3280, :column 9, :line 3280, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3287, :column 4, :line 3287, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3287, :column 5, :line 3287, :file "cljs/core.cljs"} f1 ^{:end-column 10, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} f2 ^{:end-column 13, :end-line 3287, :column 11, :line 3287, :file "cljs/core.cljs"} f3 ^{:end-column 15, :end-line 3287, :column 14, :line 3287, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3287, :column 16, :line 3287, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 11, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 6, :end-line 3272, :column 5, :line 3272, :file "cljs/core.cljs"} f] ^function [^{:end-column 6, :end-line 3273, :column 5, :line 3273, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3273, :column 7, :line 3273, :file "cljs/core.cljs"} g] ^function [^{:end-column 6, :end-line 3280, :column 5, :line 3280, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3280, :column 7, :line 3280, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 3280, :column 9, :line 3280, :file "cljs/core.cljs"} h] ^function [^{:end-column 7, :end-line 3287, :column 5, :line 3287, :file "cljs/core.cljs"} f1 ^{:end-column 10, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} f2 ^{:end-column 13, :end-line 3287, :column 11, :line 3287, :file "cljs/core.cljs"} f3 & ^{:end-column 18, :end-line 3287, :column 16, :line 3287, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3271, :column 4, :line 3271, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3272, :column 4, :line 3272, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3272, :column 5, :line 3272, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3273, :column 4, :line 3273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3273, :column 5, :line 3273, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3273, :column 7, :line 3273, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3280, :column 4, :line 3280, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3280, :column 5, :line 3280, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3280, :column 7, :line 3280, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 3280, :column 9, :line 3280, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3287, :column 4, :line 3287, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3287, :column 5, :line 3287, :file "cljs/core.cljs"} f1 ^{:end-column 10, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} f2 ^{:end-column 13, :end-line 3287, :column 11, :line 3287, :file "cljs/core.cljs"} f3 ^{:end-column 15, :end-line 3287, :column 14, :line 3287, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3287, :column 16, :line 3287, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 11, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} comp, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2584, :column 4, :line 2584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2584, :column 5, :line 2584, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2586, :column 4, :line 2586, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2586, :column 5, :line 2586, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2586, :column 9, :line 2586, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2588, :column 4, :line 2588, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2588, :column 5, :line 2588, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2588, :column 9, :line 2588, :file "cljs/core.cljs"} off ^{:end-column 16, :end-line 2588, :column 13, :line 2588, :file "cljs/core.cljs"} end]), :end-column 18, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} array-chunk ^{:arglists (^{:end-column 9, :end-line 2584, :column 4, :line 2584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2584, :column 5, :line 2584, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2586, :column 4, :line 2586, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2586, :column 5, :line 2586, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2586, :column 9, :line 2586, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2588, :column 4, :line 2588, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2588, :column 5, :line 2588, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2588, :column 9, :line 2588, :file "cljs/core.cljs"} off ^{:end-column 16, :end-line 2588, :column 13, :line 2588, :file "cljs/core.cljs"} end]), :end-column 18, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 8, :end-line 2584, :column 5, :line 2584, :file "cljs/core.cljs"} arr] ^cljs.core/ArrayChunk [^{:end-column 8, :end-line 2586, :column 5, :line 2586, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2586, :column 9, :line 2586, :file "cljs/core.cljs"} off] ^cljs.core/ArrayChunk [^{:end-column 8, :end-line 2588, :column 5, :line 2588, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2588, :column 9, :line 2588, :file "cljs/core.cljs"} off ^{:end-column 16, :end-line 2588, :column 13, :line 2588, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2584, :column 4, :line 2584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2584, :column 5, :line 2584, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2586, :column 4, :line 2586, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2586, :column 5, :line 2586, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2586, :column 9, :line 2586, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2588, :column 4, :line 2588, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2588, :column 5, :line 2588, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2588, :column 9, :line 2588, :file "cljs/core.cljs"} off ^{:end-column 16, :end-line 2588, :column 13, :line 2588, :file "cljs/core.cljs"} end]), :end-column 18, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} array-chunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2076, :column 3, :line 2076, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2076, :column 6, :line 2076, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 32, :end-line 2074, :column 7, :line 2074, :file "cljs/core.cljs"} bit-shift-right-zero-fill ^{:arglists (^{:end-column 8, :end-line 2076, :column 3, :line 2076, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2076, :column 6, :line 2076, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 32, :end-line 2074, :column 7, :line 2074, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2076, :column 6, :line 2076, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2076, :column 3, :line 2076, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2076, :column 6, :line 2076, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 32, :end-line 2074, :column 7, :line 2074, :file "cljs/core.cljs"} bit-shift-right-zero-fill, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient ^{:arglists (^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7873, :column 4, :line 7873, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7873, :column 5, :line 7873, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7876, :column 4, :line 7876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7876, :column 5, :line 7876, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7876, :column 7, :line 7876, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 12, :end-line 7867, :column 7, :line 7867, :file "cljs/core.cljs"} dorun ^{:arglists (^{:end-column 10, :end-line 7873, :column 4, :line 7873, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7873, :column 5, :line 7873, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7876, :column 4, :line 7876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7876, :column 5, :line 7876, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7876, :column 7, :line 7876, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 12, :end-line 7867, :column 7, :line 7867, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7873, :column 5, :line 7873, :file "cljs/core.cljs"} coll] ^clj-nil [^{:end-column 6, :end-line 7876, :column 5, :line 7876, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7876, :column 7, :line 7876, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7873, :column 4, :line 7873, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7873, :column 5, :line 7873, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7876, :column 4, :line 7876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7876, :column 5, :line 7876, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7876, :column 7, :line 7876, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 12, :end-line 7867, :column 7, :line 7867, :file "cljs/core.cljs"} dorun, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 4131, :column 10, :line 4131, :file "cljs/core.cljs"} pr-sequential-writer ^{:arglists (^{:end-column 70, :end-line 7944, :column 28, :line 7944, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7944, :column 29, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 45, :end-line 7944, :column 36, :line 7944, :file "cljs/core.cljs"} print-one ^{:end-column 51, :end-line 7944, :column 46, :line 7944, :file "cljs/core.cljs"} begin ^{:end-column 55, :end-line 7944, :column 52, :line 7944, :file "cljs/core.cljs"} sep ^{:end-column 59, :end-line 7944, :column 56, :line 7944, :file "cljs/core.cljs"} end ^{:end-column 64, :end-line 7944, :column 60, :line 7944, :file "cljs/core.cljs"} opts ^{:end-column 69, :end-line 7944, :column 65, :line 7944, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 7944, :column 29, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 45, :end-line 7944, :column 36, :line 7944, :file "cljs/core.cljs"} print-one ^{:end-column 51, :end-line 7944, :column 46, :line 7944, :file "cljs/core.cljs"} begin ^{:end-column 55, :end-line 7944, :column 52, :line 7944, :file "cljs/core.cljs"} sep ^{:end-column 59, :end-line 7944, :column 56, :line 7944, :file "cljs/core.cljs"} end ^{:end-column 64, :end-line 7944, :column 60, :line 7944, :file "cljs/core.cljs"} opts ^{:end-column 69, :end-line 7944, :column 65, :line 7944, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 70, :end-line 7944, :column 28, :line 7944, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7944, :column 29, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 45, :end-line 7944, :column 36, :line 7944, :file "cljs/core.cljs"} print-one ^{:end-column 51, :end-line 7944, :column 46, :line 7944, :file "cljs/core.cljs"} begin ^{:end-column 55, :end-line 7944, :column 52, :line 7944, :file "cljs/core.cljs"} sep ^{:end-column 59, :end-line 7944, :column 56, :line 7944, :file "cljs/core.cljs"} end ^{:end-column 64, :end-line 7944, :column 60, :line 7944, :file "cljs/core.cljs"} opts ^{:end-column 69, :end-line 7944, :column 65, :line 7944, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} pr-sequential-writer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 37, :end-line 1127, :column 31, :line 1127, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 1127, :column 32, :line 1127, :file "cljs/core.cljs"} coll]), :private true, :end-column 30, :end-line 1127, :column 8, :line 1127, :file "cljs/core.cljs"} accumulating-seq-count ^{:arglists (^{:end-column 37, :end-line 1127, :column 31, :line 1127, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 1127, :column 32, :line 1127, :file "cljs/core.cljs"} coll]), :private true, :end-column 30, :end-line 1127, :column 8, :line 1127, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 36, :end-line 1127, :column 32, :line 1127, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 37, :end-line 1127, :column 31, :line 1127, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 1127, :column 32, :line 1127, :file "cljs/core.cljs"} coll]), :private true, :end-column 30, :end-line 1127, :column 8, :line 1127, :file "cljs/core.cljs"} accumulating-seq-count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} IIndexed ^{:impls (cljs.core/Range cljs.core/RedNode cljs.core/BlackNode cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} IIndexed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1410, :column 4, :line 1410, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1410, :column 5, :line 1410, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1410, :column 10, :line 1410, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1413, :column 4, :line 1413, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1413, :column 5, :line 1413, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1413, :column 10, :line 1413, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1413, :column 12, :line 1413, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1413, :column 14, :line 1413, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 11, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} disj ^{:arglists (^{:end-column 10, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1410, :column 4, :line 1410, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1410, :column 5, :line 1410, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1410, :column 10, :line 1410, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1413, :column 4, :line 1413, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1413, :column 5, :line 1413, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1413, :column 10, :line 1413, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1413, :column 12, :line 1413, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1413, :column 14, :line 1413, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 11, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} coll] [^{:end-column 9, :end-line 1410, :column 5, :line 1410, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1410, :column 10, :line 1410, :file "cljs/core.cljs"} k] [^{:end-column 9, :end-line 1413, :column 5, :line 1413, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1413, :column 10, :line 1413, :file "cljs/core.cljs"} k & ^{:end-column 16, :end-line 1413, :column 14, :line 1413, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1410, :column 4, :line 1410, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1410, :column 5, :line 1410, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1410, :column 10, :line 1410, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1413, :column 4, :line 1413, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1413, :column 5, :line 1413, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1413, :column 10, :line 1413, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1413, :column 12, :line 1413, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1413, :column 14, :line 1413, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 11, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} disj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 30, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IPrintWithWriter ^{:impls (cljs.core/UUID cljs.core/Eduction cljs.core/List cljs.core/KeySeq cljs.core/Range cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/LazyTransformer cljs.core/EmptyList cljs.core/PersistentQueueSeq cljs.core/PersistentVector cljs.core/RedNode cljs.core/ValSeq cljs.core/Atom cljs.core/ChunkedCons cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/Subvec cljs.core/ArrayNodeSeq cljs.core/PersistentHashMap cljs.core/RSeq cljs.core/Cons cljs.core/ObjMap cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ES6IteratorSeq cljs.core/PersistentArrayMapSeq cljs.core/BlackNode cljs.core/NodeSeq cljs.core/PersistentTreeMapSeq cljs.core/LazySeq cljs.core/IndexedSeq cljs.core/Keyword cljs.core/Symbol), :protocol-info {:methods {^{:end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 30, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 30, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IPrintWithWriter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} ->UUID ^{:arglists ([^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} {:arglists (^cljs.core/UUID [^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} ->UUID, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 21, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} IVector ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 21, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 21, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} IVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 405, :column 14, :line 405, :file "cljs/core.cljs"} IIterable ^{:impls (cljs.core/Range cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 405, :column 14, :line 405, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 405, :column 14, :line 405, :file "cljs/core.cljs"} IIterable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2 ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} Eduction {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} Eduction, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 8417, :column 19, :line 8417, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll], :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 28, :end-line 4025, :column 22, :line 4025, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4025, :column 23, :line 4025, :file "cljs/core.cljs"} node]), :private true, :end-column 21, :end-line 4025, :column 8, :line 4025, :file "cljs/core.cljs"} pv-clone-node ^{:arglists (^{:end-column 28, :end-line 4025, :column 22, :line 4025, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4025, :column 23, :line 4025, :file "cljs/core.cljs"} node]), :private true, :end-column 21, :end-line 4025, :column 8, :line 4025, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 4025, :column 23, :line 4025, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 4025, :column 22, :line 4025, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4025, :column 23, :line 4025, :file "cljs/core.cljs"} node]), :private true, :end-column 21, :end-line 4025, :column 8, :line 4025, :file "cljs/core.cljs"} pv-clone-node, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 24, :end-line 910, :column 20, :line 910, :file "cljs/core.cljs"} cons ^{:arglists (^{:end-column 11, :end-line 2401, :column 3, :line 2401, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2401, :column 4, :line 2401, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2401, :column 6, :line 2401, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 11, :end-line 2399, :column 7, :line 2399, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 5, :end-line 2401, :column 4, :line 2401, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2401, :column 6, :line 2401, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2401, :column 3, :line 2401, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2401, :column 4, :line 2401, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2401, :column 6, :line 2401, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 11, :end-line 2399, :column 7, :line 2399, :file "cljs/core.cljs"} cons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} PersistentTreeSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} PersistentTreeSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7332, :column 28, :line 7332, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 17, :end-line 1991, :column 14, :line 1991, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1991, :column 15, :line 1991, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1991, :column 7, :line 1991, :file "cljs/core.cljs"} floats ^{:arglists (^{:end-column 17, :end-line 1991, :column 14, :line 1991, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1991, :column 15, :line 1991, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1991, :column 7, :line 1991, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1991, :column 15, :line 1991, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1991, :column 14, :line 1991, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1991, :column 15, :line 1991, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1991, :column 7, :line 1991, :file "cljs/core.cljs"} floats, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 59, :end-line 4130, :column 44, :line 4130, :file "cljs/core.cljs"} TransientVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 25, :end-line 4605, :column 10, :line 4605, :file "cljs/core.cljs"} TransientVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4608, :column 26, :line 4605, :file "cljs/core.cljs"} [^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail], :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 2104, :column 3, :line 2104, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2104, :column 4, :line 2104, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 15, :end-line 2102, :column 8, :line 2102, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2102, :column 16, :line 2102, :file "cljs/core.cljs"} pos? ^{:arglists (^{:end-column 6, :end-line 2104, :column 3, :line 2104, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2104, :column 4, :line 2104, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 15, :end-line 2102, :column 8, :line 2102, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2102, :column 16, :line 2102, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2104, :column 4, :line 2104, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2104, :column 3, :line 2104, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2104, :column 4, :line 2104, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 15, :end-line 2102, :column 8, :line 2102, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2102, :column 16, :line 2102, :file "cljs/core.cljs"} pos?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3315, :column 4, :line 3315, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3315, :column 5, :line 3315, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3315, :column 7, :line 3315, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3321, :column 4, :line 3321, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3321, :column 7, :line 3321, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3321, :column 9, :line 3321, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3326, :column 4, :line 3326, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3326, :column 5, :line 3326, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3326, :column 9, :line 3326, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 3326, :column 11, :line 3326, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 11, :end-line 3309, :column 7, :line 3309, :file "cljs/core.cljs"} fnil ^{:arglists (^{:end-column 9, :end-line 3315, :column 4, :line 3315, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3315, :column 5, :line 3315, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3315, :column 7, :line 3315, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3321, :column 4, :line 3321, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3321, :column 7, :line 3321, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3321, :column 9, :line 3321, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3326, :column 4, :line 3326, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3326, :column 5, :line 3326, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3326, :column 9, :line 3326, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 3326, :column 11, :line 3326, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 11, :end-line 3309, :column 7, :line 3309, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3315, :column 5, :line 3315, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3315, :column 7, :line 3315, :file "cljs/core.cljs"} x] ^function [^{:end-column 6, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3321, :column 7, :line 3321, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3321, :column 9, :line 3321, :file "cljs/core.cljs"} y] ^function [^{:end-column 6, :end-line 3326, :column 5, :line 3326, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3326, :column 9, :line 3326, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 3326, :column 11, :line 3326, :file "cljs/core.cljs"} z]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3315, :column 4, :line 3315, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3315, :column 5, :line 3315, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3315, :column 7, :line 3315, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3321, :column 4, :line 3321, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3321, :column 7, :line 3321, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3321, :column 9, :line 3321, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3326, :column 4, :line 3326, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3326, :column 5, :line 3326, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3326, :column 9, :line 3326, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 3326, :column 11, :line 3326, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 11, :end-line 3309, :column 7, :line 3309, :file "cljs/core.cljs"} fnil, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7171, :column 3, :line 7171, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7171, :column 4, :line 7171, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 7171, :column 6, :line 7171, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7171, :column 8, :line 7171, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 17, :end-line 7166, :column 7, :line 7166, :file "cljs/core.cljs"} merge-with ^{:arglists (^{:end-column 13, :end-line 7171, :column 3, :line 7171, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7171, :column 4, :line 7171, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 7171, :column 6, :line 7171, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7171, :column 8, :line 7171, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 17, :end-line 7166, :column 7, :line 7166, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 7171, :column 4, :line 7171, :file "cljs/core.cljs"} f & ^{:end-column 12, :end-line 7171, :column 8, :line 7171, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7171, :column 3, :line 7171, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7171, :column 4, :line 7171, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 7171, :column 6, :line 7171, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7171, :column 8, :line 7171, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 17, :end-line 7166, :column 7, :line 7166, :file "cljs/core.cljs"} merge-with, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1240, :column 3, :line 1240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1240, :column 4, :line 1240, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1240, :column 9, :line 1240, :file "cljs/core.cljs"} n]), :doc "Returns the nth rest of coll, coll when n is 0.", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} nthrest ^{:arglists (^{:end-column 11, :end-line 1240, :column 3, :line 1240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1240, :column 4, :line 1240, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1240, :column 9, :line 1240, :file "cljs/core.cljs"} n]), :doc "Returns the nth rest of coll, coll when n is 0.", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1240, :column 4, :line 1240, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1240, :column 9, :line 1240, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1240, :column 3, :line 1240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1240, :column 4, :line 1240, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1240, :column 9, :line 1240, :file "cljs/core.cljs"} n]), :doc "Returns the nth rest of coll, coll when n is 0.", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} nthrest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 15, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} sequential? ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 15, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 15, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} sequential?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6816, :column 25, :line 6816, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6816, :column 26, :line 6816, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6816, :column 31, :line 6816, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6816, :column 36, :line 6816, :file "cljs/core.cljs"} k ^{:end-column 39, :end-line 6816, :column 38, :line 6816, :file "cljs/core.cljs"} v]), :private true, :end-column 24, :end-line 6816, :column 8, :line 6816, :file "cljs/core.cljs"} tree-map-replace ^{:arglists (^{:end-column 40, :end-line 6816, :column 25, :line 6816, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6816, :column 26, :line 6816, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6816, :column 31, :line 6816, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6816, :column 36, :line 6816, :file "cljs/core.cljs"} k ^{:end-column 39, :end-line 6816, :column 38, :line 6816, :file "cljs/core.cljs"} v]), :private true, :end-column 24, :end-line 6816, :column 8, :line 6816, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6816, :column 26, :line 6816, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6816, :column 31, :line 6816, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6816, :column 36, :line 6816, :file "cljs/core.cljs"} k ^{:end-column 39, :end-line 6816, :column 38, :line 6816, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6816, :column 25, :line 6816, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6816, :column 26, :line 6816, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6816, :column 31, :line 6816, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6816, :column 36, :line 6816, :file "cljs/core.cljs"} k ^{:end-column 39, :end-line 6816, :column 38, :line 6816, :file "cljs/core.cljs"} v]), :private true, :end-column 24, :end-line 6816, :column 8, :line 6816, :file "cljs/core.cljs"} tree-map-replace, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 455, :column 25, :line 455, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 455, :column 26, :line 455, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 455, :column 29, :line 455, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 455, :column 8, :line 455, :file "cljs/core.cljs"} number, :end-column 24, :end-line 455, :column 15, :line 455, :file "cljs/core.cljs"} m3-mix-H1 ^{:arglists (^{:end-column 32, :end-line 455, :column 25, :line 455, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 455, :column 26, :line 455, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 455, :column 29, :line 455, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 455, :column 8, :line 455, :file "cljs/core.cljs"} number, :end-column 24, :end-line 455, :column 15, :line 455, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 455, :column 26, :line 455, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 455, :column 29, :line 455, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 455, :column 25, :line 455, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 455, :column 26, :line 455, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 455, :column 29, :line 455, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 455, :column 8, :line 455, :file "cljs/core.cljs"} number, :end-column 24, :end-line 455, :column 15, :line 455, :file "cljs/core.cljs"} m3-mix-H1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5368, :column 10, :line 5368, :file "cljs/core.cljs"} ->TransientArrayMap ^{:arglists ([^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5368, :column 10, :line 5368, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientArrayMap [^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5368, :column 10, :line 5368, :file "cljs/core.cljs"} ->TransientArrayMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 623, :column 20, :line 623, :file "cljs/core.cljs"} prim-seq ^{:arglists (^{:end-column 10, :end-line 1000, :column 4, :line 1000, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1000, :column 5, :line 1000, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 5, :line 1002, :file "cljs/core.cljs"} prim ^{:end-column 11, :end-line 1002, :column 10, :line 1002, :file "cljs/core.cljs"} i]), :end-column 15, :end-line 999, :column 7, :line 999, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1000, :column 5, :line 1000, :file "cljs/core.cljs"} prim] [^{:end-column 9, :end-line 1002, :column 5, :line 1002, :file "cljs/core.cljs"} prim ^{:end-column 11, :end-line 1002, :column 10, :line 1002, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1000, :column 4, :line 1000, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1000, :column 5, :line 1000, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 5, :line 1002, :file "cljs/core.cljs"} prim ^{:end-column 11, :end-line 1002, :column 10, :line 1002, :file "cljs/core.cljs"} i]), :end-column 15, :end-line 999, :column 7, :line 999, :file "cljs/core.cljs"} prim-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level* ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} {:op :var, :name ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1684, :column 3, :line 1684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 14, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} shuffle ^{:arglists (^{:end-column 9, :end-line 1684, :column 3, :line 1684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 14, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1684, :column 3, :line 1684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 14, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} shuffle, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 32, :end-line 1467, :column 22, :line 1467, :file "cljs/core.cljs"} ChunkedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 4348, :column 10, :line 4348, :file "cljs/core.cljs"} ChunkedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 59, :end-line 4348, :column 21, :line 4348, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 23, :end-line 2410, :column 20, :line 2410, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2410, :column 21, :line 2410, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 2410, :column 7, :line 2410, :file "cljs/core.cljs"} hash-keyword ^{:arglists (^{:end-column 23, :end-line 2410, :column 20, :line 2410, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2410, :column 21, :line 2410, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 2410, :column 7, :line 2410, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 22, :end-line 2410, :column 21, :line 2410, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2410, :column 20, :line 2410, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2410, :column 21, :line 2410, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 2410, :column 7, :line 2410, :file "cljs/core.cljs"} hash-keyword, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1557, :column 3, :line 1557, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1557, :column 4, :line 1557, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1557, :column 9, :line 1557, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 11, :end-line 1555, :column 7, :line 1555, :file "cljs/core.cljs"} find ^{:arglists (^{:end-column 11, :end-line 1557, :column 3, :line 1557, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1557, :column 4, :line 1557, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1557, :column 9, :line 1557, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 11, :end-line 1555, :column 7, :line 1555, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1557, :column 4, :line 1557, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1557, :column 9, :line 1557, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1557, :column 3, :line 1557, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1557, :column 4, :line 1557, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1557, :column 9, :line 1557, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 11, :end-line 1555, :column 7, :line 1555, :file "cljs/core.cljs"} find, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 195, :column 3, :line 195, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 195, :column 4, :line 195, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 14, :end-line 193, :column 8, :line 193, :file "cljs/core.cljs"} number, :end-column 22, :end-line 193, :column 15, :line 193, :file "cljs/core.cljs"} alength ^{:arglists (^{:end-column 10, :end-line 195, :column 3, :line 195, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 195, :column 4, :line 195, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 14, :end-line 193, :column 8, :line 193, :file "cljs/core.cljs"} number, :end-column 22, :end-line 193, :column 15, :line 193, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 195, :column 4, :line 195, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 195, :column 3, :line 195, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 195, :column 4, :line 195, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 14, :end-line 193, :column 8, :line 193, :file "cljs/core.cljs"} number, :end-column 22, :end-line 193, :column 15, :line 193, :file "cljs/core.cljs"} alength, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2028, :column 3, :line 2028, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2028, :column 6, :line 2028, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 14, :end-line 2026, :column 7, :line 2026, :file "cljs/core.cljs"} bit-xor ^{:arglists (^{:end-column 8, :end-line 2028, :column 3, :line 2028, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2028, :column 6, :line 2028, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 14, :end-line 2026, :column 7, :line 2026, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2028, :column 6, :line 2028, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2028, :column 3, :line 2028, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2028, :column 6, :line 2028, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 14, :end-line 2026, :column 7, :line 2026, :file "cljs/core.cljs"} bit-xor, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 929, :column 10, :line 929, :file "cljs/core.cljs"} ->IndexedSeq ^{:arglists ([^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 929, :column 10, :line 929, :file "cljs/core.cljs"} {:arglists (^cljs.core/IndexedSeq [^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 929, :column 10, :line 929, :file "cljs/core.cljs"} ->IndexedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} ObjMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} ObjMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4905, :column 17, :line 4905, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 2080, :column 3, :line 2080, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2080, :column 4, :line 2080, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2080, :column 6, :line 2080, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 31, :end-line 2078, :column 7, :line 2078, :file "cljs/core.cljs"} unsigned-bit-shift-right ^{:arglists (^{:end-column 8, :end-line 2080, :column 3, :line 2080, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2080, :column 4, :line 2080, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2080, :column 6, :line 2080, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 31, :end-line 2078, :column 7, :line 2078, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2080, :column 4, :line 2080, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2080, :column 6, :line 2080, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2080, :column 3, :line 2080, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2080, :column 4, :line 2080, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2080, :column 6, :line 2080, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 31, :end-line 2078, :column 7, :line 2078, :file "cljs/core.cljs"} unsigned-bit-shift-right, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} ES6SetEntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} ES6SetEntriesIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 5029, :column 32, :line 5029, :file "cljs/core.cljs"} [^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 6, :end-line 2111, :column 3, :line 2111, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2111, :column 4, :line 2111, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 15, :end-line 2109, :column 8, :line 2109, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2109, :column 16, :line 2109, :file "cljs/core.cljs"} neg? ^{:arglists (^{:end-column 6, :end-line 2111, :column 3, :line 2111, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2111, :column 4, :line 2111, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 15, :end-line 2109, :column 8, :line 2109, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2109, :column 16, :line 2109, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2111, :column 4, :line 2111, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2111, :column 3, :line 2111, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2111, :column 4, :line 2111, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 15, :end-line 2109, :column 8, :line 2109, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2109, :column 16, :line 2109, :file "cljs/core.cljs"} neg?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} Cons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} Cons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 49, :end-line 2350, :column 15, :line 2350, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method ^{:arglists (^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} ->StringIter ^{:arglists ([^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} ->StringIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 209, :column 3, :line 209, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 209, :column 4, :line 209, :file "cljs/core.cljs"} obj ^{:end-column 9, :end-line 209, :column 8, :line 209, :file "cljs/core.cljs"} s ^{:end-column 11, :end-line 209, :column 10, :line 209, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 209, :column 12, :line 209, :file "cljs/core.cljs"} args]), :doc "Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.", :end-column 16, :end-line 206, :column 7, :line 206, :file "cljs/core.cljs"} js-invoke ^{:arglists (^{:end-column 17, :end-line 209, :column 3, :line 209, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 209, :column 4, :line 209, :file "cljs/core.cljs"} obj ^{:end-column 9, :end-line 209, :column 8, :line 209, :file "cljs/core.cljs"} s ^{:end-column 11, :end-line 209, :column 10, :line 209, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 209, :column 12, :line 209, :file "cljs/core.cljs"} args]), :doc "Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.", :end-column 16, :end-line 206, :column 7, :line 206, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 209, :column 4, :line 209, :file "cljs/core.cljs"} obj ^{:end-column 9, :end-line 209, :column 8, :line 209, :file "cljs/core.cljs"} s & ^{:end-column 16, :end-line 209, :column 12, :line 209, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 209, :column 3, :line 209, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 209, :column 4, :line 209, :file "cljs/core.cljs"} obj ^{:end-column 9, :end-line 209, :column 8, :line 209, :file "cljs/core.cljs"} s ^{:end-column 11, :end-line 209, :column 10, :line 209, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 209, :column 12, :line 209, :file "cljs/core.cljs"} args]), :doc "Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.", :end-column 16, :end-line 206, :column 7, :line 206, :file "cljs/core.cljs"} js-invoke, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2205, :column 10, :line 2205, :file "cljs/core.cljs"} ->List ^{:arglists ([^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2205, :column 10, :line 2205, :file "cljs/core.cljs"} {:arglists (^cljs.core/List [^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2205, :column 10, :line 2205, :file "cljs/core.cljs"} ->List, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 452, :column 25, :line 452, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 452, :column 26, :line 452, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 24, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} m3-mix-K1 ^{:arglists (^{:end-column 29, :end-line 452, :column 25, :line 452, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 452, :column 26, :line 452, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 24, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 452, :column 26, :line 452, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 452, :column 25, :line 452, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 452, :column 26, :line 452, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 24, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} m3-mix-K1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1886, :column 31, :line 1886, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1886, :column 32, :line 1886, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1886, :column 8, :line 1886, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1886, :column 15, :line 1886, :file "cljs/core.cljs"} unchecked-float ^{:arglists (^{:end-column 34, :end-line 1886, :column 31, :line 1886, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1886, :column 32, :line 1886, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1886, :column 8, :line 1886, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1886, :column 15, :line 1886, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1886, :column 32, :line 1886, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1886, :column 31, :line 1886, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1886, :column 32, :line 1886, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1886, :column 8, :line 1886, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1886, :column 15, :line 1886, :file "cljs/core.cljs"} unchecked-float, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 1515, :column 27, :line 1515, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 1515, :column 28, :line 1515, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1515, :column 8, :line 1515, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1515, :column 16, :line 1515, :file "cljs/core.cljs"} undefined? ^{:arglists (^{:end-column 30, :end-line 1515, :column 27, :line 1515, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 1515, :column 28, :line 1515, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1515, :column 8, :line 1515, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1515, :column 16, :line 1515, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 29, :end-line 1515, :column 28, :line 1515, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 1515, :column 27, :line 1515, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 1515, :column 28, :line 1515, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1515, :column 8, :line 1515, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1515, :column 16, :line 1515, :file "cljs/core.cljs"} undefined?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} IMeta ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/MetaFn cljs.core/RSeq ^{:end-column 22, :end-line 799, :column 14, :line 799, :file "cljs/core.cljs"} function cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} IMeta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 15, :end-line 825, :column 8, :line 825, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 825, :column 16, :line 825, :file "cljs/core.cljs"} reduced? ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 15, :end-line 825, :column 8, :line 825, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 825, :column 16, :line 825, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} r]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 15, :end-line 825, :column 8, :line 825, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 825, :column 16, :line 825, :file "cljs/core.cljs"} reduced?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to ^{:file "cljs/core.cljs", :arglists ([f argc args])} {:arglists ([f argc args]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2892, :column 4, :line 2892, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2892, :column 5, :line 2892, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2892, :column 11, :line 2892, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2892, :column 15, :line 2892, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2892, :column 17, :line 2892, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 2887, :column 7, :line 2887, :file "cljs/core.cljs"} disj! ^{:arglists (^{:end-column 15, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2892, :column 4, :line 2892, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2892, :column 5, :line 2892, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2892, :column 11, :line 2892, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2892, :column 15, :line 2892, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2892, :column 17, :line 2892, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 2887, :column 7, :line 2887, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} val] ^^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2892, :column 5, :line 2892, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2892, :column 11, :line 2892, :file "cljs/core.cljs"} val & ^{:end-column 21, :end-line 2892, :column 17, :line 2892, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2892, :column 4, :line 2892, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2892, :column 5, :line 2892, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2892, :column 11, :line 2892, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2892, :column 15, :line 2892, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2892, :column 17, :line 2892, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 2887, :column 7, :line 2887, :file "cljs/core.cljs"} disj!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup ^{:arglists (^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 24, :end-line 242, :column 14, :line 242, :file "cljs/core.cljs"} ICloneable ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/Subvec cljs.core/PersistentVector cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 24, :end-line 242, :column 14, :line 242, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 24, :end-line 242, :column 14, :line 242, :file "cljs/core.cljs"} ICloneable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 28, :end-line 8483, :column 14, :line 8483, :file "cljs/core.cljs"} IEncodeClojure ^{:protocol-info {:methods {^{:end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 28, :end-line 8483, :column 14, :line 8483, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 28, :end-line 8483, :column 14, :line 8483, :file "cljs/core.cljs"} IEncodeClojure, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1986, :column 16, :line 1986, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1986, :column 17, :line 1986, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} booleans ^{:arglists (^{:end-column 19, :end-line 1986, :column 16, :line 1986, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1986, :column 17, :line 1986, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1986, :column 17, :line 1986, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1986, :column 16, :line 1986, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1986, :column 17, :line 1986, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} booleans, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 5062, :column 35, :line 5062, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5062, :column 36, :line 5062, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 5062, :column 40, :line 5062, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 5062, :column 42, :line 5062, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 5062, :column 8, :line 5062, :file "cljs/core.cljs"} array-map-index-of-symbol? ^{:arglists (^{:end-column 44, :end-line 5062, :column 35, :line 5062, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5062, :column 36, :line 5062, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 5062, :column 40, :line 5062, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 5062, :column 42, :line 5062, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 5062, :column 8, :line 5062, :file "cljs/core.cljs"} {:arglists ([^{:end-column 39, :end-line 5062, :column 36, :line 5062, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 5062, :column 40, :line 5062, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 5062, :column 42, :line 5062, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 5062, :column 35, :line 5062, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5062, :column 36, :line 5062, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 5062, :column 40, :line 5062, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 5062, :column 42, :line 5062, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 5062, :column 8, :line 5062, :file "cljs/core.cljs"} array-map-index-of-symbol?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} ->ArrayList ^{:arglists ([^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList [^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} ->ArrayList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 29, :end-line 910, :column 25, :line 910, :file "cljs/core.cljs"} RSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} RSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 1014, :column 15, :line 1014, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 5457, :column 13, :line 5457, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 5457, :column 14, :line 5457, :file "cljs/core.cljs"} hash ^{:end-column 24, :end-line 5457, :column 19, :line 5457, :file "cljs/core.cljs"} shift]), :private true, :end-column 12, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} mask ^{:arglists (^{:end-column 25, :end-line 5457, :column 13, :line 5457, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 5457, :column 14, :line 5457, :file "cljs/core.cljs"} hash ^{:end-column 24, :end-line 5457, :column 19, :line 5457, :file "cljs/core.cljs"} shift]), :private true, :end-column 12, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 18, :end-line 5457, :column 14, :line 5457, :file "cljs/core.cljs"} hash ^{:end-column 24, :end-line 5457, :column 19, :line 5457, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 5457, :column 13, :line 5457, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 5457, :column 14, :line 5457, :file "cljs/core.cljs"} hash ^{:end-column 24, :end-line 5457, :column 19, :line 5457, :file "cljs/core.cljs"} shift]), :private true, :end-column 12, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} mask, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2701, :column 4, :line 2701, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2701, :column 5, :line 2701, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2705, :column 4, :line 2705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2705, :column 5, :line 2705, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2705, :column 10, :line 2705, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 16, :end-line 2700, :column 7, :line 2700, :file "cljs/core.cljs"} int-array ^{:arglists (^{:end-column 17, :end-line 2701, :column 4, :line 2701, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2701, :column 5, :line 2701, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2705, :column 4, :line 2705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2705, :column 5, :line 2705, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2705, :column 10, :line 2705, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 16, :end-line 2700, :column 7, :line 2700, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2701, :column 5, :line 2701, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 9, :end-line 2705, :column 5, :line 2705, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2705, :column 10, :line 2705, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2701, :column 4, :line 2701, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2701, :column 5, :line 2701, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2705, :column 4, :line 2705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2705, :column 5, :line 2705, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2705, :column 10, :line 2705, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 16, :end-line 2700, :column 7, :line 2700, :file "cljs/core.cljs"} int-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 88, :end-line 8718, :column 3, :line 8718, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8718, :column 4, :line 8718, :file "cljs/core.cljs"} name ^{:end-column 21, :end-line 8718, :column 9, :line 8718, :file "cljs/core.cljs"} dispatch-val ^{:end-column 31, :end-line 8718, :column 22, :line 8718, :file "cljs/core.cljs"} hierarchy ^{:end-column 44, :end-line 8718, :column 32, :line 8718, :file "cljs/core.cljs"} method-table ^{:end-column 57, :end-line 8718, :column 45, :line 8718, :file "cljs/core.cljs"} prefer-table ^{:end-column 70, :end-line 8718, :column 58, :line 8718, :file "cljs/core.cljs"} method-cache ^{:end-column 87, :end-line 8718, :column 71, :line 8718, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 34, :end-line 8717, :column 8, :line 8717, :file "cljs/core.cljs"} find-and-cache-best-method ^{:arglists (^{:end-column 88, :end-line 8718, :column 3, :line 8718, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8718, :column 4, :line 8718, :file "cljs/core.cljs"} name ^{:end-column 21, :end-line 8718, :column 9, :line 8718, :file "cljs/core.cljs"} dispatch-val ^{:end-column 31, :end-line 8718, :column 22, :line 8718, :file "cljs/core.cljs"} hierarchy ^{:end-column 44, :end-line 8718, :column 32, :line 8718, :file "cljs/core.cljs"} method-table ^{:end-column 57, :end-line 8718, :column 45, :line 8718, :file "cljs/core.cljs"} prefer-table ^{:end-column 70, :end-line 8718, :column 58, :line 8718, :file "cljs/core.cljs"} method-cache ^{:end-column 87, :end-line 8718, :column 71, :line 8718, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 34, :end-line 8717, :column 8, :line 8717, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8718, :column 4, :line 8718, :file "cljs/core.cljs"} name ^{:end-column 21, :end-line 8718, :column 9, :line 8718, :file "cljs/core.cljs"} dispatch-val ^{:end-column 31, :end-line 8718, :column 22, :line 8718, :file "cljs/core.cljs"} hierarchy ^{:end-column 44, :end-line 8718, :column 32, :line 8718, :file "cljs/core.cljs"} method-table ^{:end-column 57, :end-line 8718, :column 45, :line 8718, :file "cljs/core.cljs"} prefer-table ^{:end-column 70, :end-line 8718, :column 58, :line 8718, :file "cljs/core.cljs"} method-cache ^{:end-column 87, :end-line 8718, :column 71, :line 8718, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 88, :end-line 8718, :column 3, :line 8718, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8718, :column 4, :line 8718, :file "cljs/core.cljs"} name ^{:end-column 21, :end-line 8718, :column 9, :line 8718, :file "cljs/core.cljs"} dispatch-val ^{:end-column 31, :end-line 8718, :column 22, :line 8718, :file "cljs/core.cljs"} hierarchy ^{:end-column 44, :end-line 8718, :column 32, :line 8718, :file "cljs/core.cljs"} method-table ^{:end-column 57, :end-line 8718, :column 45, :line 8718, :file "cljs/core.cljs"} prefer-table ^{:end-column 70, :end-line 8718, :column 58, :line 8718, :file "cljs/core.cljs"} method-cache ^{:end-column 87, :end-line 8718, :column 71, :line 8718, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 34, :end-line 8717, :column 8, :line 8717, :file "cljs/core.cljs"} find-and-cache-best-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1435, :column 3, :line 1435, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1435, :column 4, :line 1435, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 15, :end-line 1433, :column 8, :line 1433, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1433, :column 16, :line 1433, :file "cljs/core.cljs"} set? ^{:arglists (^{:end-column 6, :end-line 1435, :column 3, :line 1435, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1435, :column 4, :line 1435, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 15, :end-line 1433, :column 8, :line 1433, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1433, :column 16, :line 1433, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1435, :column 4, :line 1435, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1435, :column 3, :line 1435, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1435, :column 4, :line 1435, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 15, :end-line 1433, :column 8, :line 1433, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1433, :column 16, :line 1433, :file "cljs/core.cljs"} set?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 625, :column 17, :line 625, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 625, :column 18, :line 625, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 625, :column 7, :line 625, :file "cljs/core.cljs"} iterable? ^{:arglists (^{:end-column 20, :end-line 625, :column 17, :line 625, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 625, :column 18, :line 625, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 625, :column 7, :line 625, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 19, :end-line 625, :column 18, :line 625, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 625, :column 17, :line 625, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 625, :column 18, :line 625, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 625, :column 7, :line 625, :file "cljs/core.cljs"} iterable?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 13, :end-line 3806, :column 10, :line 3806, :file "cljs/core.cljs"} cat ^{:arglists (^{:end-column 7, :end-line 8384, :column 3, :line 8384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8384, :column 4, :line 8384, :file "cljs/core.cljs"} rf]), :added "1.7", :doc "A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.", :end-column 10, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 8384, :column 4, :line 8384, :file "cljs/core.cljs"} rf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8384, :column 3, :line 8384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8384, :column 4, :line 8384, :file "cljs/core.cljs"} rf]), :added "1.7", :doc "A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.", :end-column 10, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} cat, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} ->ES6EntriesIterator ^{:arglists ([^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6EntriesIterator [^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} ->ES6EntriesIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 1794, :column 10, :line 1794, :file "cljs/core.cljs"} divide ^{:declared true, :end-column 16, :end-line 1794, :column 10, :line 1794, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 16, :end-line 1794, :column 10, :line 1794, :file "cljs/core.cljs"} divide, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer ^{:arglists (^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7971, :column 13, :line 7971, :file "cljs/core.cljs"} []), :end-column 12, :end-line 7971, :column 7, :line 7971, :file "cljs/core.cljs"} flush ^{:arglists (^{:end-column 15, :end-line 7971, :column 13, :line 7971, :file "cljs/core.cljs"} []), :end-column 12, :end-line 7971, :column 7, :line 7971, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7971, :column 13, :line 7971, :file "cljs/core.cljs"} []), :end-column 12, :end-line 7971, :column 7, :line 7971, :file "cljs/core.cljs"} flush, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 7425, :column 28, :line 7425, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7425, :column 29, :line 7425, :file "cljs/core.cljs"} iseq]), :end-column 27, :end-line 7425, :column 7, :line 7425, :file "cljs/core.cljs"} set-from-indexed-seq ^{:arglists (^{:end-column 34, :end-line 7425, :column 28, :line 7425, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7425, :column 29, :line 7425, :file "cljs/core.cljs"} iseq]), :end-column 27, :end-line 7425, :column 7, :line 7425, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 33, :end-line 7425, :column 29, :line 7425, :file "cljs/core.cljs"} iseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 7425, :column 28, :line 7425, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7425, :column 29, :line 7425, :file "cljs/core.cljs"} iseq]), :end-column 27, :end-line 7425, :column 7, :line 7425, :file "cljs/core.cljs"} set-from-indexed-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7582, :column 4, :line 7582, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7582, :column 5, :line 7582, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7591, :column 4, :line 7591, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7591, :column 5, :line 7591, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7591, :column 10, :line 7591, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 17, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} take-while ^{:arglists (^{:end-column 10, :end-line 7582, :column 4, :line 7582, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7582, :column 5, :line 7582, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7591, :column 4, :line 7591, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7591, :column 5, :line 7591, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7591, :column 10, :line 7591, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 17, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 7582, :column 5, :line 7582, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 9, :end-line 7591, :column 5, :line 7591, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7591, :column 10, :line 7591, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7582, :column 4, :line 7582, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7582, :column 5, :line 7582, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7591, :column 4, :line 7591, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7591, :column 5, :line 7591, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7591, :column 10, :line 7591, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 17, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} take-while, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2957, :column 4, :line 2957, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2957, :column 5, :line 2957, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2957, :column 9, :line 2957, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2959, :column 4, :line 2959, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2959, :column 5, :line 2959, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2959, :column 9, :line 2959, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2959, :column 11, :line 2959, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2961, :column 4, :line 2961, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2961, :column 5, :line 2961, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2961, :column 9, :line 2961, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2961, :column 11, :line 2961, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2961, :column 13, :line 2961, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2963, :column 4, :line 2963, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2963, :column 5, :line 2963, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2963, :column 9, :line 2963, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2963, :column 11, :line 2963, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2963, :column 13, :line 2963, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2963, :column 15, :line 2963, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2965, :column 4, :line 2965, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2965, :column 5, :line 2965, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2965, :column 9, :line 2965, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2965, :column 11, :line 2965, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2965, :column 13, :line 2965, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2965, :column 15, :line 2965, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2965, :column 17, :line 2965, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2967, :column 4, :line 2967, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2967, :column 5, :line 2967, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2967, :column 9, :line 2967, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2967, :column 11, :line 2967, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2967, :column 13, :line 2967, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2967, :column 15, :line 2967, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2967, :column 17, :line 2967, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 2967, :column 19, :line 2967, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2967, :column 21, :line 2967, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 16, :end-line 2954, :column 7, :line 2954, :file "cljs/core.cljs"} vary-meta ^{:arglists (^{:end-column 11, :end-line 2957, :column 4, :line 2957, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2957, :column 5, :line 2957, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2957, :column 9, :line 2957, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2959, :column 4, :line 2959, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2959, :column 5, :line 2959, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2959, :column 9, :line 2959, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2959, :column 11, :line 2959, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2961, :column 4, :line 2961, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2961, :column 5, :line 2961, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2961, :column 9, :line 2961, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2961, :column 11, :line 2961, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2961, :column 13, :line 2961, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2963, :column 4, :line 2963, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2963, :column 5, :line 2963, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2963, :column 9, :line 2963, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2963, :column 11, :line 2963, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2963, :column 13, :line 2963, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2963, :column 15, :line 2963, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2965, :column 4, :line 2965, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2965, :column 5, :line 2965, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2965, :column 9, :line 2965, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2965, :column 11, :line 2965, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2965, :column 13, :line 2965, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2965, :column 15, :line 2965, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2965, :column 17, :line 2965, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2967, :column 4, :line 2967, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2967, :column 5, :line 2967, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2967, :column 9, :line 2967, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2967, :column 11, :line 2967, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2967, :column 13, :line 2967, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2967, :column 15, :line 2967, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2967, :column 17, :line 2967, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 2967, :column 19, :line 2967, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2967, :column 21, :line 2967, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 16, :end-line 2954, :column 7, :line 2954, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2957, :column 5, :line 2957, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2957, :column 9, :line 2957, :file "cljs/core.cljs"} f] [^{:end-column 8, :end-line 2959, :column 5, :line 2959, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2959, :column 9, :line 2959, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2959, :column 11, :line 2959, :file "cljs/core.cljs"} a] [^{:end-column 8, :end-line 2961, :column 5, :line 2961, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2961, :column 9, :line 2961, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2961, :column 11, :line 2961, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2961, :column 13, :line 2961, :file "cljs/core.cljs"} b] [^{:end-column 8, :end-line 2963, :column 5, :line 2963, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2963, :column 9, :line 2963, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2963, :column 11, :line 2963, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2963, :column 13, :line 2963, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2963, :column 15, :line 2963, :file "cljs/core.cljs"} c] [^{:end-column 8, :end-line 2965, :column 5, :line 2965, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2965, :column 9, :line 2965, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2965, :column 11, :line 2965, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2965, :column 13, :line 2965, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2965, :column 15, :line 2965, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2965, :column 17, :line 2965, :file "cljs/core.cljs"} d] [^{:end-column 8, :end-line 2967, :column 5, :line 2967, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2967, :column 9, :line 2967, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2967, :column 11, :line 2967, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2967, :column 13, :line 2967, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2967, :column 15, :line 2967, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2967, :column 17, :line 2967, :file "cljs/core.cljs"} d & ^{:end-column 25, :end-line 2967, :column 21, :line 2967, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2957, :column 4, :line 2957, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2957, :column 5, :line 2957, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2957, :column 9, :line 2957, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2959, :column 4, :line 2959, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2959, :column 5, :line 2959, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2959, :column 9, :line 2959, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2959, :column 11, :line 2959, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2961, :column 4, :line 2961, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2961, :column 5, :line 2961, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2961, :column 9, :line 2961, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2961, :column 11, :line 2961, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2961, :column 13, :line 2961, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2963, :column 4, :line 2963, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2963, :column 5, :line 2963, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2963, :column 9, :line 2963, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2963, :column 11, :line 2963, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2963, :column 13, :line 2963, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2963, :column 15, :line 2963, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2965, :column 4, :line 2965, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2965, :column 5, :line 2965, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2965, :column 9, :line 2965, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2965, :column 11, :line 2965, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2965, :column 13, :line 2965, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2965, :column 15, :line 2965, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2965, :column 17, :line 2965, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2967, :column 4, :line 2967, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2967, :column 5, :line 2967, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2967, :column 9, :line 2967, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2967, :column 11, :line 2967, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2967, :column 13, :line 2967, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2967, :column 15, :line 2967, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2967, :column 17, :line 2967, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 2967, :column 19, :line 2967, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2967, :column 21, :line 2967, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 16, :end-line 2954, :column 7, :line 2954, :file "cljs/core.cljs"} vary-meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} INext ^{:impls (cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentArrayMapSeq cljs.core/ChunkedSeq cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} INext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_ ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 19, :end-line 3013, :column 1, :line 3013, :file "cljs/core.cljs"} START ^{:end-column 19, :end-line 3013, :column 1, :line 3013, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 19, :end-line 3013, :column 1, :line 3013, :file "cljs/core.cljs"} START, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} ICounted ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/TransientHashMap cljs.core/PersistentHashMap cljs.core/TransientArrayMap cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/ChunkBuffer cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq nil), :protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} ICounted, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]], ^{:end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} IMapEntry ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]], ^{:end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]], ^{:end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} IMapEntry, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1818, :column 4, :line 1818, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1818, :column 5, :line 1818, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1819, :column 4, :line 1819, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1819, :column 5, :line 1819, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1819, :column 7, :line 1819, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1820, :column 7, :line 1820, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1820, :column 9, :line 1820, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1820, :column 11, :line 1820, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1815, :column 8, :line 1815, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1815, :column 16, :line 1815, :file "cljs/core.cljs"} <= ^{:arglists (^{:end-column 7, :end-line 1818, :column 4, :line 1818, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1818, :column 5, :line 1818, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1819, :column 4, :line 1819, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1819, :column 5, :line 1819, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1819, :column 7, :line 1819, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1820, :column 7, :line 1820, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1820, :column 9, :line 1820, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1820, :column 11, :line 1820, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1815, :column 8, :line 1815, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1815, :column 16, :line 1815, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1818, :column 5, :line 1818, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1819, :column 5, :line 1819, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1819, :column 7, :line 1819, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1820, :column 7, :line 1820, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1820, :column 11, :line 1820, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1818, :column 4, :line 1818, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1818, :column 5, :line 1818, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1819, :column 4, :line 1819, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1819, :column 5, :line 1819, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1819, :column 7, :line 1819, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1820, :column 7, :line 1820, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1820, :column 9, :line 1820, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1820, :column 11, :line 1820, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1815, :column 8, :line 1815, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1815, :column 16, :line 1815, :file "cljs/core.cljs"} <=, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2849, :column 4, :line 2849, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2850, :column 4, :line 2850, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2850, :column 5, :line 2850, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2851, :column 4, :line 2851, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2851, :column 5, :line 2851, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2851, :column 11, :line 2851, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2853, :column 4, :line 2853, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2853, :column 5, :line 2853, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2853, :column 11, :line 2853, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2853, :column 15, :line 2853, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2853, :column 17, :line 2853, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 2846, :column 7, :line 2846, :file "cljs/core.cljs"} conj! ^{:arglists (^{:end-column 6, :end-line 2849, :column 4, :line 2849, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2850, :column 4, :line 2850, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2850, :column 5, :line 2850, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2851, :column 4, :line 2851, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2851, :column 5, :line 2851, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2851, :column 11, :line 2851, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2853, :column 4, :line 2853, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2853, :column 5, :line 2853, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2853, :column 11, :line 2853, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2853, :column 15, :line 2853, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2853, :column 17, :line 2853, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 2846, :column 7, :line 2846, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj [] [^{:end-column 9, :end-line 2850, :column 5, :line 2850, :file "cljs/core.cljs"} coll] ^^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2851, :column 5, :line 2851, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2851, :column 11, :line 2851, :file "cljs/core.cljs"} val] ^^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2853, :column 5, :line 2853, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2853, :column 11, :line 2853, :file "cljs/core.cljs"} val & ^{:end-column 21, :end-line 2853, :column 17, :line 2853, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2849, :column 4, :line 2849, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2850, :column 4, :line 2850, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2850, :column 5, :line 2850, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2851, :column 4, :line 2851, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2851, :column 5, :line 2851, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2851, :column 11, :line 2851, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2853, :column 4, :line 2853, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2853, :column 5, :line 2853, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2853, :column 11, :line 2853, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2853, :column 15, :line 2853, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2853, :column 17, :line 2853, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 2846, :column 7, :line 2846, :file "cljs/core.cljs"} conj!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop ^{:arglists (^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3766, :column 4, :line 3766, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3766, :column 5, :line 3766, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3767, :column 4, :line 3767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3767, :column 5, :line 3767, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 17, :end-line 3762, :column 7, :line 3762, :file "cljs/core.cljs"} repeatedly ^{:arglists (^{:end-column 7, :end-line 3766, :column 4, :line 3766, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3766, :column 5, :line 3766, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3767, :column 4, :line 3767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3767, :column 5, :line 3767, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 17, :end-line 3762, :column 7, :line 3762, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3766, :column 5, :line 3766, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3767, :column 5, :line 3767, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3766, :column 4, :line 3766, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3766, :column 5, :line 3766, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3767, :column 4, :line 3767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3767, :column 5, :line 3767, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 17, :end-line 3762, :column 7, :line 3762, :file "cljs/core.cljs"} repeatedly, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} keys ^{:end-column 13, :end-line 7512, :column 9, :line 7512, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 13, :end-line 7510, :column 7, :line 7510, :file "cljs/core.cljs"} zipmap ^{:arglists (^{:end-column 14, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} keys ^{:end-column 13, :end-line 7512, :column 9, :line 7512, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 13, :end-line 7510, :column 7, :line 7510, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 8, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} keys ^{:end-column 13, :end-line 7512, :column 9, :line 7512, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} keys ^{:end-column 13, :end-line 7512, :column 9, :line 7512, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 13, :end-line 7510, :column 7, :line 7510, :file "cljs/core.cljs"} zipmap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} IStack ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentQueue cljs.core/Subvec cljs.core/PersistentVector cljs.core/EmptyList cljs.core/List), :protocol-info {:methods {^{:end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} IStack, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch ^{:arglists (^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3851, :column 4, :line 3851, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3851, :column 5, :line 3851, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3852, :column 10, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3847, :column 7, :line 3847, :file "cljs/core.cljs"} remove ^{:arglists (^{:end-column 10, :end-line 3851, :column 4, :line 3851, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3851, :column 5, :line 3851, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3852, :column 10, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3847, :column 7, :line 3847, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 3851, :column 5, :line 3851, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 9, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3852, :column 10, :line 3852, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3851, :column 4, :line 3851, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3851, :column 5, :line 3851, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3852, :column 10, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3847, :column 7, :line 3847, :file "cljs/core.cljs"} remove, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} ->BitmapIndexedNode ^{:arglists ([^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} {:arglists (^cljs.core/BitmapIndexedNode [^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} ->BitmapIndexedNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} * ^{:arglists (^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} *, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7936, :column 3, :line 7936, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7936, :column 4, :line 7936, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 17, :end-line 7934, :column 7, :line 7934, :file "cljs/core.cljs"} re-pattern ^{:arglists (^{:end-column 6, :end-line 7936, :column 3, :line 7936, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7936, :column 4, :line 7936, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 17, :end-line 7934, :column 7, :line 7934, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 7936, :column 4, :line 7936, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7936, :column 3, :line 7936, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7936, :column 4, :line 7936, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 17, :end-line 7934, :column 7, :line 7934, :file "cljs/core.cljs"} re-pattern, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1865, :column 7, :line 1865, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1866, :column 9, :line 1866, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1866, :column 11, :line 1866, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 14, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} min ^{:arglists (^{:end-column 7, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1865, :column 7, :line 1865, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1866, :column 9, :line 1866, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1866, :column 11, :line 1866, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 14, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1865, :column 7, :line 1865, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1866, :column 11, :line 1866, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1865, :column 7, :line 1865, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1866, :column 9, :line 1866, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1866, :column 11, :line 1866, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 14, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} min, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 5043, :column 32, :line 5043, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5043, :column 33, :line 5043, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5043, :column 37, :line 5043, :file "cljs/core.cljs"} m ^{:end-column 40, :end-line 5043, :column 39, :line 5043, :file "cljs/core.cljs"} k]), :private true, :end-column 31, :end-line 5043, :column 8, :line 5043, :file "cljs/core.cljs"} array-map-index-of-nil? ^{:arglists (^{:end-column 41, :end-line 5043, :column 32, :line 5043, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5043, :column 33, :line 5043, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5043, :column 37, :line 5043, :file "cljs/core.cljs"} m ^{:end-column 40, :end-line 5043, :column 39, :line 5043, :file "cljs/core.cljs"} k]), :private true, :end-column 31, :end-line 5043, :column 8, :line 5043, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 5043, :column 33, :line 5043, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5043, :column 37, :line 5043, :file "cljs/core.cljs"} m ^{:end-column 40, :end-line 5043, :column 39, :line 5043, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 5043, :column 32, :line 5043, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5043, :column 33, :line 5043, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5043, :column 37, :line 5043, :file "cljs/core.cljs"} m ^{:end-column 40, :end-line 5043, :column 39, :line 5043, :file "cljs/core.cljs"} k]), :private true, :end-column 31, :end-line 5043, :column 8, :line 5043, :file "cljs/core.cljs"} array-map-index-of-nil?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent! ^{:arglists (^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth ^{:arglists (^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2884, :column 3, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 11, :end-line 2881, :column 7, :line 2881, :file "cljs/core.cljs"} pop! ^{:arglists (^{:end-column 10, :end-line 2884, :column 3, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 11, :end-line 2881, :column 7, :line 2881, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2884, :column 3, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 11, :end-line 2881, :column 7, :line 2881, :file "cljs/core.cljs"} pop!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2660, :column 20, :line 2660, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2660, :column 21, :line 2660, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 2660, :column 23, :line 2660, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2660, :column 7, :line 2660, :file "cljs/core.cljs"} chunk-append ^{:arglists (^{:end-column 25, :end-line 2660, :column 20, :line 2660, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2660, :column 21, :line 2660, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 2660, :column 23, :line 2660, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2660, :column 7, :line 2660, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 2660, :column 21, :line 2660, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 2660, :column 23, :line 2660, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2660, :column 20, :line 2660, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2660, :column 21, :line 2660, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 2660, :column 23, :line 2660, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2660, :column 7, :line 2660, :file "cljs/core.cljs"} chunk-append, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8112, :column 3, :line 8112, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8112, :column 4, :line 8112, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8112, :column 6, :line 8112, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 14, :end-line 8110, :column 7, :line 8110, :file "cljs/core.cljs"} prn-str ^{:arglists (^{:end-column 11, :end-line 8112, :column 3, :line 8112, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8112, :column 4, :line 8112, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8112, :column 6, :line 8112, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 14, :end-line 8110, :column 7, :line 8110, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 8112, :column 6, :line 8112, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8112, :column 3, :line 8112, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8112, :column 4, :line 8112, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8112, :column 6, :line 8112, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 14, :end-line 8110, :column 7, :line 8110, :file "cljs/core.cljs"} prn-str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 331, :column 14, :line 331, :file "cljs/core.cljs"} IReversible ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap cljs.core/Subvec cljs.core/PersistentVector cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 331, :column 14, :line 331, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 331, :column 14, :line 331, :file "cljs/core.cljs"} IReversible, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 2322, :column 28, :line 2322, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2322, :column 29, :line 2322, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 15, :end-line 2322, :column 8, :line 2322, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2322, :column 16, :line 2322, :file "cljs/core.cljs"} reversible? ^{:arglists (^{:end-column 34, :end-line 2322, :column 28, :line 2322, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2322, :column 29, :line 2322, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 15, :end-line 2322, :column 8, :line 2322, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2322, :column 16, :line 2322, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 33, :end-line 2322, :column 29, :line 2322, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 2322, :column 28, :line 2322, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2322, :column 29, :line 2322, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 15, :end-line 2322, :column 8, :line 2322, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2322, :column 16, :line 2322, :file "cljs/core.cljs"} reversible?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized? ^{:arglists (^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch ^{:arglists (^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout ^{:arglists (^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1110, :column 4, :line 1110, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 5, :line 1111, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1112, :column 4, :line 1112, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1112, :column 5, :line 1112, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1112, :column 10, :line 1112, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1116, :column 4, :line 1116, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1116, :column 5, :line 1116, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1116, :column 10, :line 1116, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 1116, :column 12, :line 1116, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1116, :column 14, :line 1116, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 11, :end-line 1106, :column 7, :line 1106, :file "cljs/core.cljs"} conj ^{:arglists (^{:end-column 6, :end-line 1110, :column 4, :line 1110, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 5, :line 1111, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1112, :column 4, :line 1112, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1112, :column 5, :line 1112, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1112, :column 10, :line 1112, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1116, :column 4, :line 1116, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1116, :column 5, :line 1116, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1116, :column 10, :line 1116, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 1116, :column 12, :line 1116, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1116, :column 14, :line 1116, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 11, :end-line 1106, :column 7, :line 1106, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [] [^{:end-column 9, :end-line 1111, :column 5, :line 1111, :file "cljs/core.cljs"} coll] ^^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 1112, :column 5, :line 1112, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1112, :column 10, :line 1112, :file "cljs/core.cljs"} x] [^{:end-column 9, :end-line 1116, :column 5, :line 1116, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1116, :column 10, :line 1116, :file "cljs/core.cljs"} x & ^{:end-column 16, :end-line 1116, :column 14, :line 1116, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1110, :column 4, :line 1110, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 5, :line 1111, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1112, :column 4, :line 1112, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1112, :column 5, :line 1112, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1112, :column 10, :line 1112, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1116, :column 4, :line 1116, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1116, :column 5, :line 1116, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1116, :column 10, :line 1116, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 1116, :column 12, :line 1116, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1116, :column 14, :line 1116, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 11, :end-line 1106, :column 7, :line 1106, :file "cljs/core.cljs"} conj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq ^{:arglists (^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3797, :column 3, :line 3797, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3797, :column 4, :line 3797, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 16, :end-line 3794, :column 8, :line 3794, :file "cljs/core.cljs"} flatten1 ^{:arglists (^{:end-column 10, :end-line 3797, :column 3, :line 3797, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3797, :column 4, :line 3797, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 16, :end-line 3794, :column 8, :line 3794, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3797, :column 4, :line 3797, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3797, :column 3, :line 3797, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3797, :column 4, :line 3797, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 16, :end-line 3794, :column 8, :line 3794, :file "cljs/core.cljs"} flatten1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1763, :column 11, :line 1763, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1763, :column 13, :line 1763, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1764, :column 11, :line 1764, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1764, :column 13, :line 1764, :file "cljs/core.cljs"} init ^{:end-column 22, :end-line 1764, :column 18, :line 1764, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 16, :end-line 1754, :column 7, :line 1754, :file "cljs/core.cljs"} transduce ^{:arglists (^{:end-column 18, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1763, :column 11, :line 1763, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1763, :column 13, :line 1763, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1764, :column 11, :line 1764, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1764, :column 13, :line 1764, :file "cljs/core.cljs"} init ^{:end-column 22, :end-line 1764, :column 18, :line 1764, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 16, :end-line 1754, :column 7, :line 1754, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1763, :column 11, :line 1763, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1763, :column 13, :line 1763, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1764, :column 11, :line 1764, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1764, :column 13, :line 1764, :file "cljs/core.cljs"} init ^{:end-column 22, :end-line 1764, :column 18, :line 1764, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1763, :column 11, :line 1763, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1763, :column 13, :line 1763, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1764, :column 11, :line 1764, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1764, :column 13, :line 1764, :file "cljs/core.cljs"} init ^{:end-column 22, :end-line 1764, :column 18, :line 1764, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 16, :end-line 1754, :column 7, :line 1754, :file "cljs/core.cljs"} transduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8340, :column 1, :line 8340, :file "cljs/core.cljs"} fixture1 ^{:end-column 17, :end-line 8340, :column 1, :line 8340, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8340, :column 1, :line 8340, :file "cljs/core.cljs"} fixture1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap! ^{:arglists (^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length* ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} {:op :var, :name ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 1484, :column 17, :line 1484, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1484, :column 18, :line 1484, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 1484, :column 22, :line 1484, :file "cljs/core.cljs"} key]), :end-column 16, :end-line 1484, :column 7, :line 1484, :file "cljs/core.cljs"} js-delete ^{:arglists (^{:end-column 26, :end-line 1484, :column 17, :line 1484, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1484, :column 18, :line 1484, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 1484, :column 22, :line 1484, :file "cljs/core.cljs"} key]), :end-column 16, :end-line 1484, :column 7, :line 1484, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 1484, :column 18, :line 1484, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 1484, :column 22, :line 1484, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 1484, :column 17, :line 1484, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1484, :column 18, :line 1484, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 1484, :column 22, :line 1484, :file "cljs/core.cljs"} key]), :end-column 16, :end-line 1484, :column 7, :line 1484, :file "cljs/core.cljs"} js-delete, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 13, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_ ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 13, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 13, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} ->MultiFn ^{:arglists ([^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} {:arglists (^cljs.core/MultiFn [^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} ->MultiFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8452, :column 15, :line 8452, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8452, :column 16, :line 8452, :file "cljs/core.cljs"} k]), :end-column 14, :end-line 8452, :column 7, :line 8452, :file "cljs/core.cljs"} key->js ^{:arglists (^{:end-column 18, :end-line 8452, :column 15, :line 8452, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8452, :column 16, :line 8452, :file "cljs/core.cljs"} k]), :end-column 14, :end-line 8452, :column 7, :line 8452, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8452, :column 16, :line 8452, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8452, :column 15, :line 8452, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8452, :column 16, :line 8452, :file "cljs/core.cljs"} k]), :end-column 14, :end-line 8452, :column 7, :line 8452, :file "cljs/core.cljs"} key->js, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} ->MultiStepper ^{:arglists ([^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} {:arglists (^cljs.core/MultiStepper [^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} ->MultiStepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]], ^{:end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 23, :end-line 8445, :column 14, :line 8445, :file "cljs/core.cljs"} IEncodeJS ^{:protocol-info {:methods {^{:end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]], ^{:end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 23, :end-line 8445, :column 14, :line 8445, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]], ^{:end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 23, :end-line 8445, :column 14, :line 8445, :file "cljs/core.cljs"} IEncodeJS, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4034, :column 17, :line 4034, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4034, :column 18, :line 4034, :file "cljs/core.cljs"} edit ^{:end-column 28, :end-line 4034, :column 23, :line 4034, :file "cljs/core.cljs"} level ^{:end-column 33, :end-line 4034, :column 29, :line 4034, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4034, :column 8, :line 4034, :file "cljs/core.cljs"} new-path ^{:arglists (^{:end-column 34, :end-line 4034, :column 17, :line 4034, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4034, :column 18, :line 4034, :file "cljs/core.cljs"} edit ^{:end-column 28, :end-line 4034, :column 23, :line 4034, :file "cljs/core.cljs"} level ^{:end-column 33, :end-line 4034, :column 29, :line 4034, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4034, :column 8, :line 4034, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 4034, :column 18, :line 4034, :file "cljs/core.cljs"} edit ^{:end-column 28, :end-line 4034, :column 23, :line 4034, :file "cljs/core.cljs"} level ^{:end-column 33, :end-line 4034, :column 29, :line 4034, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4034, :column 17, :line 4034, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4034, :column 18, :line 4034, :file "cljs/core.cljs"} edit ^{:end-column 28, :end-line 4034, :column 23, :line 4034, :file "cljs/core.cljs"} level ^{:end-column 33, :end-line 4034, :column 29, :line 4034, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4034, :column 8, :line 4034, :file "cljs/core.cljs"} new-path, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 3474, :column 3, :line 3474, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3474, :column 4, :line 3474, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 3474, :column 6, :line 3474, :file "cljs/core.cljs"} oldval ^{:end-column 19, :end-line 3474, :column 13, :line 3474, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 23, :end-line 3470, :column 7, :line 3470, :file "cljs/core.cljs"} compare-and-set! ^{:arglists (^{:end-column 20, :end-line 3474, :column 3, :line 3474, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3474, :column 4, :line 3474, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 3474, :column 6, :line 3474, :file "cljs/core.cljs"} oldval ^{:end-column 19, :end-line 3474, :column 13, :line 3474, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 23, :end-line 3470, :column 7, :line 3470, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 3474, :column 4, :line 3474, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 3474, :column 6, :line 3474, :file "cljs/core.cljs"} oldval ^{:end-column 19, :end-line 3474, :column 13, :line 3474, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 3474, :column 3, :line 3474, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3474, :column 4, :line 3474, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 3474, :column 6, :line 3474, :file "cljs/core.cljs"} oldval ^{:end-column 19, :end-line 3474, :column 13, :line 3474, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 23, :end-line 3470, :column 7, :line 3470, :file "cljs/core.cljs"} compare-and-set!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 623, :column 10, :line 623, :file "cljs/core.cljs"} array-seq ^{:arglists (^{:end-column 11, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1007, :column 5, :line 1007, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 1009, :column 4, :line 1009, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1009, :column 5, :line 1009, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 1009, :column 11, :line 1009, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 1006, :column 7, :line 1006, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1007, :column 5, :line 1007, :file "cljs/core.cljs"} array] [^{:end-column 10, :end-line 1009, :column 5, :line 1009, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 1009, :column 11, :line 1009, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1007, :column 5, :line 1007, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 1009, :column 4, :line 1009, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1009, :column 5, :line 1009, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 1009, :column 11, :line 1009, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 1006, :column 7, :line 1006, :file "cljs/core.cljs"} array-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1496, :column 4, :line 1496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1496, :column 5, :line 1496, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1496, :column 10, :line 1496, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1496, :column 12, :line 1496, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1496, :column 15, :line 1496, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1496, :column 17, :line 1496, :file "cljs/core.cljs"} len]), :private true, :end-column 27, :end-line 1495, :column 8, :line 1495, :file "cljs/core.cljs"} array-copy-downward ^{:arglists (^{:end-column 21, :end-line 1496, :column 4, :line 1496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1496, :column 5, :line 1496, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1496, :column 10, :line 1496, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1496, :column 12, :line 1496, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1496, :column 15, :line 1496, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1496, :column 17, :line 1496, :file "cljs/core.cljs"} len]), :private true, :end-column 27, :end-line 1495, :column 8, :line 1495, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1496, :column 5, :line 1496, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1496, :column 10, :line 1496, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1496, :column 12, :line 1496, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1496, :column 15, :line 1496, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1496, :column 17, :line 1496, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1496, :column 4, :line 1496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1496, :column 5, :line 1496, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1496, :column 10, :line 1496, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1496, :column 12, :line 1496, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1496, :column 15, :line 1496, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1496, :column 17, :line 1496, :file "cljs/core.cljs"} len]), :private true, :end-column 27, :end-line 1495, :column 8, :line 1495, :file "cljs/core.cljs"} array-copy-downward, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5708, :column 24, :line 5708, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5708, :column 25, :line 5708, :file "cljs/core.cljs"} array-node ^{:end-column 40, :end-line 5708, :column 36, :line 5708, :file "cljs/core.cljs"} edit ^{:end-column 44, :end-line 5708, :column 41, :line 5708, :file "cljs/core.cljs"} idx]), :private true, :end-column 23, :end-line 5708, :column 8, :line 5708, :file "cljs/core.cljs"} pack-array-node ^{:arglists (^{:end-column 45, :end-line 5708, :column 24, :line 5708, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5708, :column 25, :line 5708, :file "cljs/core.cljs"} array-node ^{:end-column 40, :end-line 5708, :column 36, :line 5708, :file "cljs/core.cljs"} edit ^{:end-column 44, :end-line 5708, :column 41, :line 5708, :file "cljs/core.cljs"} idx]), :private true, :end-column 23, :end-line 5708, :column 8, :line 5708, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 5708, :column 25, :line 5708, :file "cljs/core.cljs"} array-node ^{:end-column 40, :end-line 5708, :column 36, :line 5708, :file "cljs/core.cljs"} edit ^{:end-column 44, :end-line 5708, :column 41, :line 5708, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5708, :column 24, :line 5708, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5708, :column 25, :line 5708, :file "cljs/core.cljs"} array-node ^{:end-column 40, :end-line 5708, :column 36, :line 5708, :file "cljs/core.cljs"} edit ^{:end-column 44, :end-line 5708, :column 41, :line 5708, :file "cljs/core.cljs"} idx]), :private true, :end-column 23, :end-line 5708, :column 8, :line 5708, :file "cljs/core.cljs"} pack-array-node, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3782, :column 4, :line 3782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3782, :column 5, :line 3782, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3782, :column 8, :line 3782, :file "cljs/core.cljs"} c2 ^{:end-column 12, :end-line 3782, :column 11, :line 3782, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3782, :column 13, :line 3782, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 17, :end-line 3774, :column 7, :line 3774, :file "cljs/core.cljs"} interleave ^{:arglists (^{:end-column 11, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3782, :column 4, :line 3782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3782, :column 5, :line 3782, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3782, :column 8, :line 3782, :file "cljs/core.cljs"} c2 ^{:end-column 12, :end-line 3782, :column 11, :line 3782, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3782, :column 13, :line 3782, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 17, :end-line 3774, :column 7, :line 3774, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3782, :column 5, :line 3782, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3782, :column 8, :line 3782, :file "cljs/core.cljs"} c2 & ^{:end-column 18, :end-line 3782, :column 13, :line 3782, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3782, :column 4, :line 3782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3782, :column 5, :line 3782, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3782, :column 8, :line 3782, :file "cljs/core.cljs"} c2 ^{:end-column 12, :end-line 3782, :column 11, :line 3782, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3782, :column 13, :line 3782, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 17, :end-line 3774, :column 7, :line 3774, :file "cljs/core.cljs"} interleave, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 7991, :column 10, :line 7991, :file "cljs/core.cljs"} print-map ^{:arglists (^{:end-column 42, :end-line 8154, :column 17, :line 8154, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8154, :column 18, :line 8154, :file "cljs/core.cljs"} m ^{:end-column 29, :end-line 8154, :column 20, :line 8154, :file "cljs/core.cljs"} print-one ^{:end-column 36, :end-line 8154, :column 30, :line 8154, :file "cljs/core.cljs"} writer ^{:end-column 41, :end-line 8154, :column 37, :line 8154, :file "cljs/core.cljs"} opts]), :end-column 16, :end-line 8154, :column 7, :line 8154, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 8154, :column 18, :line 8154, :file "cljs/core.cljs"} m ^{:end-column 29, :end-line 8154, :column 20, :line 8154, :file "cljs/core.cljs"} print-one ^{:end-column 36, :end-line 8154, :column 30, :line 8154, :file "cljs/core.cljs"} writer ^{:end-column 41, :end-line 8154, :column 37, :line 8154, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8154, :column 17, :line 8154, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8154, :column 18, :line 8154, :file "cljs/core.cljs"} m ^{:end-column 29, :end-line 8154, :column 20, :line 8154, :file "cljs/core.cljs"} print-one ^{:end-column 36, :end-line 8154, :column 30, :line 8154, :file "cljs/core.cljs"} writer ^{:end-column 41, :end-line 8154, :column 37, :line 8154, :file "cljs/core.cljs"} opts]), :end-column 16, :end-line 8154, :column 7, :line 8154, :file "cljs/core.cljs"} print-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1458, :column 3, :line 1458, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1458, :column 4, :line 1458, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 15, :end-line 1456, :column 8, :line 1456, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1456, :column 16, :line 1456, :file "cljs/core.cljs"} map? ^{:arglists (^{:end-column 6, :end-line 1458, :column 3, :line 1458, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1458, :column 4, :line 1458, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 15, :end-line 1456, :column 8, :line 1456, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1456, :column 16, :line 1456, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1458, :column 4, :line 1458, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1458, :column 3, :line 1458, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1458, :column 4, :line 1458, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 15, :end-line 1456, :column 8, :line 1456, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1456, :column 16, :line 1456, :file "cljs/core.cljs"} map?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 449, :column 1, :line 449, :file "cljs/core.cljs"} m3-C1 ^{:end-column 23, :end-line 449, :column 1, :line 449, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 449, :column 1, :line 449, :file "cljs/core.cljs"} m3-C1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1248, :column 4, :line 1248, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1248, :column 5, :line 1248, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1248, :column 7, :line 1248, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1266, :column 4, :line 1266, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1266, :column 5, :line 1266, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1266, :column 7, :line 1266, :file "cljs/core.cljs"} k ^{:end-column 18, :end-line 1266, :column 9, :line 1266, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 10, :end-line 1246, :column 7, :line 1246, :file "cljs/core.cljs"} get ^{:arglists (^{:end-column 9, :end-line 1248, :column 4, :line 1248, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1248, :column 5, :line 1248, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1248, :column 7, :line 1248, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1266, :column 4, :line 1266, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1266, :column 5, :line 1266, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1266, :column 7, :line 1266, :file "cljs/core.cljs"} k ^{:end-column 18, :end-line 1266, :column 9, :line 1266, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 10, :end-line 1246, :column 7, :line 1246, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1248, :column 5, :line 1248, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1248, :column 7, :line 1248, :file "cljs/core.cljs"} k] [^{:end-column 6, :end-line 1266, :column 5, :line 1266, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1266, :column 7, :line 1266, :file "cljs/core.cljs"} k ^{:end-column 18, :end-line 1266, :column 9, :line 1266, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1248, :column 4, :line 1248, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1248, :column 5, :line 1248, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1248, :column 7, :line 1248, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1266, :column 4, :line 1266, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1266, :column 5, :line 1266, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1266, :column 7, :line 1266, :file "cljs/core.cljs"} k ^{:end-column 18, :end-line 1266, :column 9, :line 1266, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 10, :end-line 1246, :column 7, :line 1246, :file "cljs/core.cljs"} get, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1744, :column 16, :line 1744, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1744, :column 17, :line 1744, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1744, :column 7, :line 1744, :file "cljs/core.cljs"} identity ^{:arglists (^{:end-column 19, :end-line 1744, :column 16, :line 1744, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1744, :column 17, :line 1744, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1744, :column 7, :line 1744, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1744, :column 17, :line 1744, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1744, :column 16, :line 1744, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1744, :column 17, :line 1744, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1744, :column 7, :line 1744, :file "cljs/core.cljs"} identity, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3881, :column 4, :line 3881, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3881, :column 5, :line 3881, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3881, :column 8, :line 3881, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3887, :column 4, :line 3887, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3887, :column 5, :line 3887, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3887, :column 8, :line 3887, :file "cljs/core.cljs"} xform ^{:end-column 18, :end-line 3887, :column 14, :line 3887, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 11, :end-line 3878, :column 7, :line 3878, :file "cljs/core.cljs"} into ^{:arglists (^{:end-column 13, :end-line 3881, :column 4, :line 3881, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3881, :column 5, :line 3881, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3881, :column 8, :line 3881, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3887, :column 4, :line 3887, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3887, :column 5, :line 3887, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3887, :column 8, :line 3887, :file "cljs/core.cljs"} xform ^{:end-column 18, :end-line 3887, :column 14, :line 3887, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 11, :end-line 3878, :column 7, :line 3878, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3881, :column 5, :line 3881, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3881, :column 8, :line 3881, :file "cljs/core.cljs"} from] [^{:end-column 7, :end-line 3887, :column 5, :line 3887, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3887, :column 8, :line 3887, :file "cljs/core.cljs"} xform ^{:end-column 18, :end-line 3887, :column 14, :line 3887, :file "cljs/core.cljs"} from]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3881, :column 4, :line 3881, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3881, :column 5, :line 3881, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3881, :column 8, :line 3881, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3887, :column 4, :line 3887, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3887, :column 5, :line 3887, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3887, :column 8, :line 3887, :file "cljs/core.cljs"} xform ^{:end-column 18, :end-line 3887, :column 14, :line 3887, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 11, :end-line 3878, :column 7, :line 3878, :file "cljs/core.cljs"} into, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1978, :column 3, :line 1978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1978, :column 4, :line 1978, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 11, :end-line 1976, :column 7, :line 1976, :file "cljs/core.cljs"} long ^{:arglists (^{:end-column 6, :end-line 1978, :column 3, :line 1978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1978, :column 4, :line 1978, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 11, :end-line 1976, :column 7, :line 1976, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number [^{:end-column 5, :end-line 1978, :column 4, :line 1978, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1978, :column 3, :line 1978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1978, :column 4, :line 1978, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 11, :end-line 1976, :column 7, :line 1976, :file "cljs/core.cljs"} long, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1881, :column 22, :line 1881, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1881, :column 23, :line 1881, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1881, :column 8, :line 1881, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1881, :column 15, :line 1881, :file "cljs/core.cljs"} double ^{:arglists (^{:end-column 25, :end-line 1881, :column 22, :line 1881, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1881, :column 23, :line 1881, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1881, :column 8, :line 1881, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1881, :column 15, :line 1881, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1881, :column 23, :line 1881, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1881, :column 22, :line 1881, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1881, :column 23, :line 1881, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1881, :column 8, :line 1881, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1881, :column 15, :line 1881, :file "cljs/core.cljs"} double, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} ChunkBuffer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} ChunkBuffer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 2542, :column 22, :line 2542, :file "cljs/core.cljs"} [^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end], :protocols #{Object cljs.core/ICounted}}, ^{:arglists (^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key ^{:arglists (^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1081, :column 3, :line 1081, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1081, :column 4, :line 1081, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 13, :end-line 1079, :column 7, :line 1079, :file "cljs/core.cljs"} nfirst ^{:arglists (^{:end-column 9, :end-line 1081, :column 3, :line 1081, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1081, :column 4, :line 1081, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 13, :end-line 1079, :column 7, :line 1079, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq [^{:end-column 8, :end-line 1081, :column 4, :line 1081, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1081, :column 3, :line 1081, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1081, :column 4, :line 1081, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 13, :end-line 1079, :column 7, :line 1079, :file "cljs/core.cljs"} nfirst, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} StringBufferWriter {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} StringBufferWriter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 410, :column 29, :line 410, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb], :protocols #{cljs.core/IWriter}}, ^{:arglists (^{:end-column 6, :end-line 1386, :column 3, :line 1386, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1386, :column 4, :line 1386, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 11, :end-line 1384, :column 7, :line 1384, :file "cljs/core.cljs"} meta ^{:arglists (^{:end-column 6, :end-line 1386, :column 3, :line 1386, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1386, :column 4, :line 1386, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 11, :end-line 1384, :column 7, :line 1384, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1386, :column 4, :line 1386, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1386, :column 3, :line 1386, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1386, :column 4, :line 1386, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 11, :end-line 1384, :column 7, :line 1384, :file "cljs/core.cljs"} meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 43, :end-line 4130, :column 27, :line 4130, :file "cljs/core.cljs"} tv-editable-tail ^{:arglists (^{:end-column 29, :end-line 4558, :column 25, :line 4558, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4558, :column 26, :line 4558, :file "cljs/core.cljs"} tl]), :private true, :end-column 24, :end-line 4558, :column 8, :line 4558, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 28, :end-line 4558, :column 26, :line 4558, :file "cljs/core.cljs"} tl]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 4558, :column 25, :line 4558, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4558, :column 26, :line 4558, :file "cljs/core.cljs"} tl]), :private true, :end-column 24, :end-line 4558, :column 8, :line 4558, :file "cljs/core.cljs"} tv-editable-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce ^{:arglists (^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} IHash ^{:impls (cljs.core/UUID cljs.core/MultiFn cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Keyword cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq ^{:end-column 21, :end-line 804, :column 14, :line 804, :file "cljs/core.cljs"} default cljs.core/Symbol), :protocol-info {:methods {^{:end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} IHash, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2040, :column 3, :line 2040, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2040, :column 4, :line 2040, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2040, :column 6, :line 2040, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 18, :end-line 2038, :column 7, :line 2038, :file "cljs/core.cljs"} bit-and-not ^{:arglists (^{:end-column 8, :end-line 2040, :column 3, :line 2040, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2040, :column 4, :line 2040, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2040, :column 6, :line 2040, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 18, :end-line 2038, :column 7, :line 2038, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2040, :column 4, :line 2040, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2040, :column 6, :line 2040, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2040, :column 3, :line 2040, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2040, :column 4, :line 2040, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2040, :column 6, :line 2040, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 18, :end-line 2038, :column 7, :line 2038, :file "cljs/core.cljs"} bit-and-not, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator ^{:arglists (^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1898, :column 4, :line 1898, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1899, :column 4, :line 1899, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1899, :column 5, :line 1899, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1900, :column 4, :line 1900, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1900, :column 5, :line 1900, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 5, :line 1901, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1901, :column 9, :line 1901, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1901, :column 11, :line 1901, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1896, :column 15, :line 1896, :file "cljs/core.cljs"} unchecked-add-int ^{:arglists (^{:end-column 6, :end-line 1898, :column 4, :line 1898, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1899, :column 4, :line 1899, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1899, :column 5, :line 1899, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1900, :column 4, :line 1900, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1900, :column 5, :line 1900, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 5, :line 1901, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1901, :column 9, :line 1901, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1901, :column 11, :line 1901, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1896, :column 15, :line 1896, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1899, :column 5, :line 1899, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1900, :column 5, :line 1900, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1901, :column 5, :line 1901, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1901, :column 11, :line 1901, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1898, :column 4, :line 1898, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1899, :column 4, :line 1899, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1899, :column 5, :line 1899, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1900, :column 4, :line 1900, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1900, :column 5, :line 1900, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 5, :line 1901, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1901, :column 9, :line 1901, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1901, :column 11, :line 1901, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1896, :column 15, :line 1896, :file "cljs/core.cljs"} unchecked-add-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 757, :column 3, :line 757, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 757, :column 4, :line 757, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 753, :column 8, :line 753, :file "cljs/core.cljs"} number, :end-column 32, :end-line 753, :column 15, :line 753, :file "cljs/core.cljs"} hash-ordered-coll ^{:arglists (^{:end-column 9, :end-line 757, :column 3, :line 757, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 757, :column 4, :line 757, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 753, :column 8, :line 753, :file "cljs/core.cljs"} number, :end-column 32, :end-line 753, :column 15, :line 753, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 8, :end-line 757, :column 4, :line 757, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 757, :column 3, :line 757, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 757, :column 4, :line 757, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 753, :column 8, :line 753, :file "cljs/core.cljs"} number, :end-column 32, :end-line 753, :column 15, :line 753, :file "cljs/core.cljs"} hash-ordered-coll, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2198, :column 3, :line 2198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2198, :column 4, :line 2198, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 2198, :column 8, :line 2198, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 22, :end-line 2193, :column 8, :line 2193, :file "cljs/core.cljs"} extend-object! ^{:arglists (^{:end-column 15, :end-line 2198, :column 3, :line 2198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2198, :column 4, :line 2198, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 2198, :column 8, :line 2198, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 22, :end-line 2193, :column 8, :line 2193, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2198, :column 4, :line 2198, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 2198, :column 8, :line 2198, :file "cljs/core.cljs"} fn-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2198, :column 3, :line 2198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2198, :column 4, :line 2198, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 2198, :column 8, :line 2198, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 22, :end-line 2193, :column 8, :line 2193, :file "cljs/core.cljs"} extend-object!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4087, :column 17, :line 4087, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4087, :column 18, :line 4087, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4087, :column 21, :line 4087, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4087, :column 27, :line 4087, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4087, :column 32, :line 4087, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4087, :column 34, :line 4087, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 4087, :column 8, :line 4087, :file "cljs/core.cljs"} do-assoc ^{:arglists (^{:end-column 38, :end-line 4087, :column 17, :line 4087, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4087, :column 18, :line 4087, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4087, :column 21, :line 4087, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4087, :column 27, :line 4087, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4087, :column 32, :line 4087, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4087, :column 34, :line 4087, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 4087, :column 8, :line 4087, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 20, :end-line 4087, :column 18, :line 4087, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4087, :column 21, :line 4087, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4087, :column 27, :line 4087, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4087, :column 32, :line 4087, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4087, :column 34, :line 4087, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4087, :column 17, :line 4087, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4087, :column 18, :line 4087, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4087, :column 21, :line 4087, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4087, :column 27, :line 4087, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4087, :column 32, :line 4087, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4087, :column 34, :line 4087, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 4087, :column 8, :line 4087, :file "cljs/core.cljs"} do-assoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8290, :column 3, :line 8290, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8290, :column 4, :line 8290, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8290, :column 9, :line 8290, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} reset-meta! ^{:arglists (^{:end-column 11, :end-line 8290, :column 3, :line 8290, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8290, :column 4, :line 8290, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8290, :column 9, :line 8290, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8290, :column 4, :line 8290, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8290, :column 9, :line 8290, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8290, :column 3, :line 8290, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8290, :column 4, :line 8290, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8290, :column 9, :line 8290, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} reset-meta!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} ->KeySeq ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} {:arglists (^cljs.core/KeySeq [^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} ->KeySeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} IEquiv ^{:impls (cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/NeverEquiv cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Keyword cljs.core/Cons cljs.core/EmptyList cljs.core/List ^{:end-column 21, :end-line 1102, :column 14, :line 1102, :file "cljs/core.cljs"} default cljs.core/RSeq cljs.core/IndexedSeq ^{:end-column 20, :end-line 793, :column 14, :line 793, :file "cljs/core.cljs"} number Date cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} IEquiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6455, :column 27, :line 6455, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6455, :column 28, :line 6455, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 6455, :column 33, :line 6455, :file "cljs/core.cljs"} f ^{:end-column 39, :end-line 6455, :column 35, :line 6455, :file "cljs/core.cljs"} init]), :private true, :end-column 26, :end-line 6455, :column 8, :line 6455, :file "cljs/core.cljs"} tree-map-kv-reduce ^{:arglists (^{:end-column 40, :end-line 6455, :column 27, :line 6455, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6455, :column 28, :line 6455, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 6455, :column 33, :line 6455, :file "cljs/core.cljs"} f ^{:end-column 39, :end-line 6455, :column 35, :line 6455, :file "cljs/core.cljs"} init]), :private true, :end-column 26, :end-line 6455, :column 8, :line 6455, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 6455, :column 28, :line 6455, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 6455, :column 33, :line 6455, :file "cljs/core.cljs"} f ^{:end-column 39, :end-line 6455, :column 35, :line 6455, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6455, :column 27, :line 6455, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6455, :column 28, :line 6455, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 6455, :column 33, :line 6455, :file "cljs/core.cljs"} f ^{:end-column 39, :end-line 6455, :column 35, :line 6455, :file "cljs/core.cljs"} init]), :private true, :end-column 26, :end-line 6455, :column 8, :line 6455, :file "cljs/core.cljs"} tree-map-kv-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3744, :column 3, :line 3744, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3744, :column 4, :line 3744, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 12, :end-line 3742, :column 7, :line 3742, :file "cljs/core.cljs"} cycle ^{:arglists (^{:end-column 9, :end-line 3744, :column 3, :line 3744, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3744, :column 4, :line 3744, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 12, :end-line 3742, :column 7, :line 3742, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3744, :column 4, :line 3744, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3744, :column 3, :line 3744, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3744, :column 4, :line 3744, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 12, :end-line 3742, :column 7, :line 3742, :file "cljs/core.cljs"} cycle, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref ^{:arglists (^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1423, :column 3, :line 1423, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 15, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} empty? ^{:arglists (^{:end-column 9, :end-line 1423, :column 3, :line 1423, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 15, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 8, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1423, :column 3, :line 1423, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 15, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} empty?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1879, :column 21, :line 1879, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1879, :column 22, :line 1879, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1879, :column 8, :line 1879, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1879, :column 15, :line 1879, :file "cljs/core.cljs"} short ^{:arglists (^{:end-column 24, :end-line 1879, :column 21, :line 1879, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1879, :column 22, :line 1879, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1879, :column 8, :line 1879, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1879, :column 15, :line 1879, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1879, :column 22, :line 1879, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1879, :column 21, :line 1879, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1879, :column 22, :line 1879, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1879, :column 8, :line 1879, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1879, :column 15, :line 1879, :file "cljs/core.cljs"} short, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js ^{:arglists (^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first ^{:arglists (^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3911, :column 3, :line 3911, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3911, :column 4, :line 3911, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3911, :column 9, :line 3911, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} filterv ^{:arglists (^{:end-column 14, :end-line 3911, :column 3, :line 3911, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3911, :column 4, :line 3911, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3911, :column 9, :line 3911, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 8, :end-line 3911, :column 4, :line 3911, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3911, :column 9, :line 3911, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3911, :column 3, :line 3911, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3911, :column 4, :line 3911, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3911, :column 9, :line 3911, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} filterv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 4130, :column 10, :line 4130, :file "cljs/core.cljs"} tv-editable-root ^{:arglists (^{:end-column 31, :end-line 4555, :column 25, :line 4555, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4555, :column 26, :line 4555, :file "cljs/core.cljs"} node]), :private true, :end-column 24, :end-line 4555, :column 8, :line 4555, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 30, :end-line 4555, :column 26, :line 4555, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 4555, :column 25, :line 4555, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4555, :column 26, :line 4555, :file "cljs/core.cljs"} node]), :private true, :end-column 24, :end-line 4555, :column 8, :line 4555, :file "cljs/core.cljs"} tv-editable-root, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 523, :column 12, :line 523, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 523, :column 13, :line 523, :file "cljs/core.cljs"} o]), :end-column 11, :end-line 523, :column 7, :line 523, :file "cljs/core.cljs"} hash ^{:arglists (^{:end-column 15, :end-line 523, :column 12, :line 523, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 523, :column 13, :line 523, :file "cljs/core.cljs"} o]), :end-column 11, :end-line 523, :column 7, :line 523, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 523, :column 13, :line 523, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 523, :column 12, :line 523, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 523, :column 13, :line 523, :file "cljs/core.cljs"} o]), :end-column 11, :end-line 523, :column 7, :line 523, :file "cljs/core.cljs"} hash, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2007, :column 3, :line 2007, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2007, :column 4, :line 2007, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2007, :column 6, :line 2007, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 11, :end-line 2005, :column 7, :line 2005, :file "cljs/core.cljs"} quot ^{:arglists (^{:end-column 8, :end-line 2007, :column 3, :line 2007, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2007, :column 4, :line 2007, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2007, :column 6, :line 2007, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 11, :end-line 2005, :column 7, :line 2005, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number [^{:end-column 5, :end-line 2007, :column 4, :line 2007, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2007, :column 6, :line 2007, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2007, :column 3, :line 2007, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2007, :column 4, :line 2007, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2007, :column 6, :line 2007, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 11, :end-line 2005, :column 7, :line 2005, :file "cljs/core.cljs"} quot, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1887, :column 32, :line 1887, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1887, :column 33, :line 1887, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} unchecked-double ^{:arglists (^{:end-column 35, :end-line 1887, :column 32, :line 1887, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1887, :column 33, :line 1887, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1887, :column 33, :line 1887, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1887, :column 32, :line 1887, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1887, :column 33, :line 1887, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} unchecked-double, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 21, :end-line 2591, :column 10, :line 2591, :file "cljs/core.cljs"} ->ChunkedCons ^{:arglists ([^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 21, :end-line 2591, :column 10, :line 2591, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedCons [^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 21, :end-line 2591, :column 10, :line 2591, :file "cljs/core.cljs"} ->ChunkedCons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4123, :column 23, :line 4123, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4123, :column 24, :line 4123, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4123, :column 26, :line 4123, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4123, :column 32, :line 4123, :file "cljs/core.cljs"} end]), :end-column 22, :end-line 4123, :column 7, :line 4123, :file "cljs/core.cljs"} ranged-iterator ^{:arglists (^{:end-column 36, :end-line 4123, :column 23, :line 4123, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4123, :column 24, :line 4123, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4123, :column 26, :line 4123, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4123, :column 32, :line 4123, :file "cljs/core.cljs"} end]), :end-column 22, :end-line 4123, :column 7, :line 4123, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangedIterator [^{:end-column 25, :end-line 4123, :column 24, :line 4123, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4123, :column 26, :line 4123, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4123, :column 32, :line 4123, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4123, :column 23, :line 4123, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4123, :column 24, :line 4123, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4123, :column 26, :line 4123, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4123, :column 32, :line 4123, :file "cljs/core.cljs"} end]), :end-column 22, :end-line 4123, :column 7, :line 4123, :file "cljs/core.cljs"} ranged-iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 30, :end-line 373, :column 14, :line 373, :file "cljs/core.cljs"} ITransientVector ^{:impls (cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 30, :end-line 373, :column 14, :line 373, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 30, :end-line 373, :column 14, :line 373, :file "cljs/core.cljs"} ITransientVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 13, :end-line 2170, :column 10, :line 2170, :file "cljs/core.cljs"} key ^{:arglists (^{:end-column 14, :end-line 7087, :column 3, :line 7087, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7087, :column 4, :line 7087, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 10, :end-line 7085, :column 7, :line 7085, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 7087, :column 4, :line 7087, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7087, :column 3, :line 7087, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7087, :column 4, :line 7087, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 10, :end-line 7085, :column 7, :line 7085, :file "cljs/core.cljs"} key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1993, :column 13, :line 1993, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1993, :column 14, :line 1993, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1993, :column 7, :line 1993, :file "cljs/core.cljs"} longs ^{:arglists (^{:end-column 16, :end-line 1993, :column 13, :line 1993, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1993, :column 14, :line 1993, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1993, :column 7, :line 1993, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1993, :column 14, :line 1993, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1993, :column 13, :line 1993, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1993, :column 14, :line 1993, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1993, :column 7, :line 1993, :file "cljs/core.cljs"} longs, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2972, :column 4, :line 2972, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2972, :column 5, :line 2972, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2974, :column 4, :line 2974, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2974, :column 5, :line 2974, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2974, :column 7, :line 2974, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2974, :column 9, :line 2974, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2974, :column 11, :line 2974, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 15, :end-line 2970, :column 8, :line 2970, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2970, :column 16, :line 2970, :file "cljs/core.cljs"} not= ^{:arglists (^{:end-column 7, :end-line 2972, :column 4, :line 2972, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2972, :column 5, :line 2972, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2974, :column 4, :line 2974, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2974, :column 5, :line 2974, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2974, :column 7, :line 2974, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2974, :column 9, :line 2974, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2974, :column 11, :line 2974, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 15, :end-line 2970, :column 8, :line 2970, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2970, :column 16, :line 2970, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 2972, :column 5, :line 2972, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 6, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} y] ^boolean [^{:end-column 6, :end-line 2974, :column 5, :line 2974, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2974, :column 7, :line 2974, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 2974, :column 11, :line 2974, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2972, :column 4, :line 2972, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2972, :column 5, :line 2972, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2974, :column 4, :line 2974, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2974, :column 5, :line 2974, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2974, :column 7, :line 2974, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2974, :column 9, :line 2974, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2974, :column 11, :line 2974, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 15, :end-line 2970, :column 8, :line 2970, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2970, :column 16, :line 2970, :file "cljs/core.cljs"} not=, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string? ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 718, :column 20, :line 718, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 718, :column 21, :line 718, :file "cljs/core.cljs"} coll]), :end-column 19, :end-line 718, :column 7, :line 718, :file "cljs/core.cljs"} es6-iterator ^{:arglists (^{:end-column 26, :end-line 718, :column 20, :line 718, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 718, :column 21, :line 718, :file "cljs/core.cljs"} coll]), :end-column 19, :end-line 718, :column 7, :line 718, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6Iterator [^{:end-column 25, :end-line 718, :column 21, :line 718, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 718, :column 20, :line 718, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 718, :column 21, :line 718, :file "cljs/core.cljs"} coll]), :end-column 19, :end-line 718, :column 7, :line 718, :file "cljs/core.cljs"} es6-iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} Delay {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} Delay, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 8345, :column 16, :line 8345, :file "cljs/core.cljs"} [^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value], :protocols #{cljs.core/IPending cljs.core/IDeref}}, ^{:arglists (^{:end-column 14, :end-line 8080, :column 3, :line 8080, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8080, :column 4, :line 8080, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8080, :column 9, :line 8080, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 23, :end-line 8077, :column 7, :line 8077, :file "cljs/core.cljs"} pr-str-with-opts ^{:arglists (^{:end-column 14, :end-line 8080, :column 3, :line 8080, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8080, :column 4, :line 8080, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8080, :column 9, :line 8080, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 23, :end-line 8077, :column 7, :line 8077, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8080, :column 4, :line 8080, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8080, :column 9, :line 8080, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8080, :column 3, :line 8080, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8080, :column 4, :line 8080, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8080, :column 9, :line 8080, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 23, :end-line 8077, :column 7, :line 8077, :file "cljs/core.cljs"} pr-str-with-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 450, :column 1, :line 450, :file "cljs/core.cljs"} m3-C2 ^{:end-column 23, :end-line 450, :column 1, :line 450, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 450, :column 1, :line 450, :file "cljs/core.cljs"} m3-C2, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 16, :end-line 576, :column 10, :line 576, :file "cljs/core.cljs"} ->Symbol ^{:arglists ([^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 16, :end-line 576, :column 10, :line 576, :file "cljs/core.cljs"} {:arglists (^cljs.core/Symbol [^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 16, :end-line 576, :column 10, :line 576, :file "cljs/core.cljs"} ->Symbol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline* ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1931, :column 4, :line 1931, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1932, :column 5, :line 1932, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1933, :column 4, :line 1933, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1933, :column 5, :line 1933, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1934, :column 4, :line 1934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1934, :column 5, :line 1934, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1934, :column 9, :line 1934, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1934, :column 11, :line 1934, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1929, :column 8, :line 1929, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1929, :column 15, :line 1929, :file "cljs/core.cljs"} unchecked-multiply-int ^{:arglists (^{:end-column 6, :end-line 1931, :column 4, :line 1931, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1932, :column 5, :line 1932, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1933, :column 4, :line 1933, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1933, :column 5, :line 1933, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1934, :column 4, :line 1934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1934, :column 5, :line 1934, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1934, :column 9, :line 1934, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1934, :column 11, :line 1934, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1929, :column 8, :line 1929, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1929, :column 15, :line 1929, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1932, :column 5, :line 1932, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1933, :column 5, :line 1933, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1934, :column 5, :line 1934, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1934, :column 11, :line 1934, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1931, :column 4, :line 1931, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1932, :column 5, :line 1932, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1933, :column 4, :line 1933, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1933, :column 5, :line 1933, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1934, :column 4, :line 1934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1934, :column 5, :line 1934, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1934, :column 9, :line 1934, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1934, :column 11, :line 1934, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1929, :column 8, :line 1929, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1929, :column 15, :line 1929, :file "cljs/core.cljs"} unchecked-multiply-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 37, :end-line 2191, :column 27, :line 2191, :file "cljs/core.cljs"} chunk-rest ^{:arglists (^{:end-column 21, :end-line 2669, :column 18, :line 2669, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2669, :column 19, :line 2669, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2669, :column 7, :line 2669, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 2669, :column 19, :line 2669, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2669, :column 18, :line 2669, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2669, :column 19, :line 2669, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2669, :column 7, :line 2669, :file "cljs/core.cljs"} chunk-rest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8941, :column 2, :line 8941, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8941, :column 3, :line 8941, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 25, :end-line 8939, :column 7, :line 8939, :file "cljs/core.cljs"} remove-all-methods ^{:arglists (^{:end-column 11, :end-line 8941, :column 2, :line 8941, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8941, :column 3, :line 8941, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 25, :end-line 8939, :column 7, :line 8939, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 8941, :column 3, :line 8941, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8941, :column 2, :line 8941, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8941, :column 3, :line 8941, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 25, :end-line 8939, :column 7, :line 8939, :file "cljs/core.cljs"} remove-all-methods, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8539, :column 4, :line 8539, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8539, :column 5, :line 8539, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8544, :column 4, :line 8544, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8544, :column 5, :line 8544, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 8544, :column 7, :line 8544, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8544, :column 9, :line 8544, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 17, :end-line 8531, :column 7, :line 8531, :file "cljs/core.cljs"} trampoline ^{:arglists (^{:end-column 7, :end-line 8539, :column 4, :line 8539, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8539, :column 5, :line 8539, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8544, :column 4, :line 8544, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8544, :column 5, :line 8544, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 8544, :column 7, :line 8544, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8544, :column 9, :line 8544, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 17, :end-line 8531, :column 7, :line 8531, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8539, :column 5, :line 8539, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 8544, :column 5, :line 8544, :file "cljs/core.cljs"} f & ^{:end-column 13, :end-line 8544, :column 9, :line 8544, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8539, :column 4, :line 8539, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8539, :column 5, :line 8539, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8544, :column 4, :line 8544, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8544, :column 5, :line 8544, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 8544, :column 7, :line 8544, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8544, :column 9, :line 8544, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 17, :end-line 8531, :column 7, :line 8531, :file "cljs/core.cljs"} trampoline, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 15, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 15, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 15, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1 ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 13, :end-line 1680, :column 10, :line 1680, :file "cljs/core.cljs"} vec ^{:arglists (^{:end-column 17, :end-line 4335, :column 11, :line 4335, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4335, :column 12, :line 4335, :file "cljs/core.cljs"} coll]), :end-column 10, :end-line 4335, :column 7, :line 4335, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 16, :end-line 4335, :column 12, :line 4335, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 4335, :column 11, :line 4335, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4335, :column 12, :line 4335, :file "cljs/core.cljs"} coll]), :end-column 10, :end-line 4335, :column 7, :line 4335, :file "cljs/core.cljs"} vec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta* ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} {:op :var, :name ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches ^{:arglists (^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} MultiFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} MultiFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 75, :end-line 8755, :column 18, :line 8754, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy], :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}}, ^{:arglists (^{:end-column 6, :end-line 1968, :column 3, :line 1968, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1968, :column 4, :line 1968, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 10, :end-line 1966, :column 7, :line 1966, :file "cljs/core.cljs"} int ^{:arglists (^{:end-column 6, :end-line 1968, :column 3, :line 1968, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1968, :column 4, :line 1968, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 10, :end-line 1966, :column 7, :line 1966, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 1968, :column 4, :line 1968, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1968, :column 3, :line 1968, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1968, :column 4, :line 1968, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 10, :end-line 1966, :column 7, :line 1966, :file "cljs/core.cljs"} int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} ->ValSeq ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} {:arglists (^cljs.core/ValSeq [^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} ->ValSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2020, :column 4, :line 2020, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2020, :column 5, :line 2020, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).", :tag ^{:end-column 14, :end-line 2017, :column 8, :line 2017, :file "cljs/core.cljs"} number, :end-column 19, :end-line 2017, :column 15, :line 2017, :file "cljs/core.cljs"} rand ^{:arglists (^{:end-column 6, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8551, :column 4, :line 8551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8551, :column 5, :line 8551, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 11, :end-line 8547, :column 7, :line 8547, :file "cljs/core.cljs"} {:arglists ([] ^number [^{:end-column 6, :end-line 8551, :column 5, :line 8551, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8551, :column 4, :line 8551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8551, :column 5, :line 8551, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 11, :end-line 8547, :column 7, :line 8547, :file "cljs/core.cljs"} rand, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1071, :column 3, :line 1071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1071, :column 4, :line 1071, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1069, :column 7, :line 1069, :file "cljs/core.cljs"} second ^{:arglists (^{:end-column 9, :end-line 1071, :column 3, :line 1071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1071, :column 4, :line 1071, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1069, :column 7, :line 1069, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1071, :column 4, :line 1071, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1071, :column 3, :line 1071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1071, :column 4, :line 1071, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1069, :column 7, :line 1069, :file "cljs/core.cljs"} second, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 33, :end-line 360, :column 14, :line 360, :file "cljs/core.cljs"} IEditableCollection ^{:impls (cljs.core/PersistentHashSet cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 33, :end-line 360, :column 14, :line 360, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 33, :end-line 360, :column 14, :line 360, :file "cljs/core.cljs"} IEditableCollection, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 546, :column 20, :line 546, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 546, :column 21, :line 546, :file "cljs/core.cljs"} seed ^{:end-column 30, :end-line 546, :column 26, :line 546, :file "cljs/core.cljs"} hash]), :end-column 19, :end-line 546, :column 7, :line 546, :file "cljs/core.cljs"} hash-combine ^{:arglists (^{:end-column 31, :end-line 546, :column 20, :line 546, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 546, :column 21, :line 546, :file "cljs/core.cljs"} seed ^{:end-column 30, :end-line 546, :column 26, :line 546, :file "cljs/core.cljs"} hash]), :end-column 19, :end-line 546, :column 7, :line 546, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 546, :column 21, :line 546, :file "cljs/core.cljs"} seed ^{:end-column 30, :end-line 546, :column 26, :line 546, :file "cljs/core.cljs"} hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 546, :column 20, :line 546, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 546, :column 21, :line 546, :file "cljs/core.cljs"} seed ^{:end-column 30, :end-line 546, :column 26, :line 546, :file "cljs/core.cljs"} hash]), :end-column 19, :end-line 546, :column 7, :line 546, :file "cljs/core.cljs"} hash-combine, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1830, :column 4, :line 1830, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1830, :column 5, :line 1830, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1831, :column 5, :line 1831, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1831, :column 7, :line 1831, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1832, :column 7, :line 1832, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1832, :column 9, :line 1832, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1832, :column 11, :line 1832, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1827, :column 8, :line 1827, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1827, :column 16, :line 1827, :file "cljs/core.cljs"} > ^{:arglists (^{:end-column 7, :end-line 1830, :column 4, :line 1830, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1830, :column 5, :line 1830, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1831, :column 5, :line 1831, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1831, :column 7, :line 1831, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1832, :column 7, :line 1832, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1832, :column 9, :line 1832, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1832, :column 11, :line 1832, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1827, :column 8, :line 1827, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1827, :column 16, :line 1827, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1830, :column 5, :line 1830, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1831, :column 5, :line 1831, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1831, :column 7, :line 1831, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1832, :column 7, :line 1832, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1832, :column 11, :line 1832, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1830, :column 4, :line 1830, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1830, :column 5, :line 1830, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1831, :column 5, :line 1831, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1831, :column 7, :line 1831, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1832, :column 7, :line 1832, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1832, :column 9, :line 1832, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1832, :column 11, :line 1832, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1827, :column 8, :line 1827, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1827, :column 16, :line 1827, :file "cljs/core.cljs"} >, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name ^{:arglists (^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7469, :column 4, :line 7469, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7469, :column 5, :line 7469, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7471, :column 4, :line 7471, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7471, :column 5, :line 7471, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 7471, :column 10, :line 7471, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 14, :end-line 7464, :column 7, :line 7464, :file "cljs/core.cljs"} replace ^{:arglists (^{:end-column 10, :end-line 7469, :column 4, :line 7469, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7469, :column 5, :line 7469, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7471, :column 4, :line 7471, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7471, :column 5, :line 7471, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 7471, :column 10, :line 7471, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 14, :end-line 7464, :column 7, :line 7464, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 7469, :column 5, :line 7469, :file "cljs/core.cljs"} smap] [^{:end-column 9, :end-line 7471, :column 5, :line 7471, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 7471, :column 10, :line 7471, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7469, :column 4, :line 7469, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7469, :column 5, :line 7469, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7471, :column 4, :line 7471, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7471, :column 5, :line 7471, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 7471, :column 10, :line 7471, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 14, :end-line 7464, :column 7, :line 7464, :file "cljs/core.cljs"} replace, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} ->Subvec ^{:arglists ([^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} ->Subvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 15, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} associative? ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 15, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 15, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} associative?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 20, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} unchecked-int ^{:arglists (^{:end-column 6, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 20, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number [^{:end-column 5, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 20, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} unchecked-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 1479, :column 15, :line 1479, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1479, :column 16, :line 1479, :file "cljs/core.cljs"} obj]), :end-column 14, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} js-keys ^{:arglists (^{:end-column 20, :end-line 1479, :column 15, :line 1479, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1479, :column 16, :line 1479, :file "cljs/core.cljs"} obj]), :end-column 14, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 19, :end-line 1479, :column 16, :line 1479, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 1479, :column 15, :line 1479, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1479, :column 16, :line 1479, :file "cljs/core.cljs"} obj]), :end-column 14, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} js-keys, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} ES6EntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} ES6EntriesIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 5016, :column 29, :line 5016, :file "cljs/core.cljs"} [^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 28, :end-line 2441, :column 25, :line 2441, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 2441, :column 26, :line 2441, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2441, :column 8, :line 2441, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 2441, :column 16, :line 2441, :file "cljs/core.cljs"} keyword? ^{:arglists (^{:end-column 28, :end-line 2441, :column 25, :line 2441, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 2441, :column 26, :line 2441, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2441, :column 8, :line 2441, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 2441, :column 16, :line 2441, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 2441, :column 26, :line 2441, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 2441, :column 25, :line 2441, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 2441, :column 26, :line 2441, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2441, :column 8, :line 2441, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 2441, :column 16, :line 2441, :file "cljs/core.cljs"} keyword?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 3009, :column 18, :line 3009, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 3009, :column 19, :line 3009, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 3009, :column 7, :line 3009, :file "cljs/core.cljs"} array-iter ^{:arglists (^{:end-column 21, :end-line 3009, :column 18, :line 3009, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 3009, :column 19, :line 3009, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 3009, :column 7, :line 3009, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 20, :end-line 3009, :column 19, :line 3009, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 3009, :column 18, :line 3009, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 3009, :column 19, :line 3009, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 3009, :column 7, :line 3009, :file "cljs/core.cljs"} array-iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8363, :column 3, :line 8363, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8363, :column 4, :line 8363, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 12, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} force ^{:arglists (^{:end-column 6, :end-line 8363, :column 3, :line 8363, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8363, :column 4, :line 8363, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 12, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 8363, :column 4, :line 8363, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8363, :column 3, :line 8363, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8363, :column 4, :line 8363, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 12, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} force, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 8568, :column 6, :line 8568, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 15, :end-line 8564, :column 7, :line 8564, :file "cljs/core.cljs"} group-by ^{:arglists (^{:end-column 11, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 8568, :column 6, :line 8568, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 15, :end-line 8564, :column 7, :line 8564, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 5, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 8568, :column 6, :line 8568, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 8568, :column 6, :line 8568, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 15, :end-line 8564, :column 7, :line 8564, :file "cljs/core.cljs"} group-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq ^{:arglists (^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8149, :column 3, :line 8149, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8149, :column 4, :line 8149, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8149, :column 6, :line 8149, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 10, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} prn ^{:arglists (^{:end-column 11, :end-line 8149, :column 3, :line 8149, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8149, :column 4, :line 8149, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8149, :column 6, :line 8149, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 10, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 10, :end-line 8149, :column 6, :line 8149, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8149, :column 3, :line 8149, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8149, :column 4, :line 8149, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8149, :column 6, :line 8149, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 10, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} prn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} tv ^{:end-column 29, :end-line 4575, :column 24, :line 4575, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4575, :column 30, :line 4575, :file "cljs/core.cljs"} node]), :private true, :end-column 19, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} tv-pop-tail ^{:arglists (^{:end-column 35, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} tv ^{:end-column 29, :end-line 4575, :column 24, :line 4575, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4575, :column 30, :line 4575, :file "cljs/core.cljs"} node]), :private true, :end-column 19, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} tv ^{:end-column 29, :end-line 4575, :column 24, :line 4575, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4575, :column 30, :line 4575, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} tv ^{:end-column 29, :end-line 4575, :column 24, :line 4575, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4575, :column 30, :line 4575, :file "cljs/core.cljs"} node]), :private true, :end-column 19, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} tv-pop-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} ->Atom ^{:arglists ([^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} {:arglists (^cljs.core/Atom [^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} ->Atom, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 1288, :column 10, :line 1288, :file "cljs/core.cljs"} PersistentHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6061, :column 10, :line 6061, :file "cljs/core.cljs"} PersistentHashMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 86, :end-line 6061, :column 28, :line 6061, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1924, :column 4, :line 1924, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1925, :column 4, :line 1925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1925, :column 5, :line 1925, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1926, :column 4, :line 1926, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1926, :column 5, :line 1926, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1927, :column 4, :line 1927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1927, :column 5, :line 1927, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1927, :column 7, :line 1927, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1927, :column 9, :line 1927, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1927, :column 11, :line 1927, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1922, :column 8, :line 1922, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} unchecked-multiply ^{:arglists (^{:end-column 6, :end-line 1924, :column 4, :line 1924, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1925, :column 4, :line 1925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1925, :column 5, :line 1925, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1926, :column 4, :line 1926, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1926, :column 5, :line 1926, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1927, :column 4, :line 1927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1927, :column 5, :line 1927, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1927, :column 7, :line 1927, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1927, :column 9, :line 1927, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1927, :column 11, :line 1927, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1922, :column 8, :line 1922, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1925, :column 5, :line 1925, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1926, :column 5, :line 1926, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1927, :column 5, :line 1927, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1927, :column 7, :line 1927, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1927, :column 11, :line 1927, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1924, :column 4, :line 1924, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1925, :column 4, :line 1925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1925, :column 5, :line 1925, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1926, :column 4, :line 1926, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1926, :column 5, :line 1926, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1927, :column 4, :line 1927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1927, :column 5, :line 1927, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1927, :column 7, :line 1927, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1927, :column 9, :line 1927, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1927, :column 11, :line 1927, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1922, :column 8, :line 1922, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} unchecked-multiply, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} ArrayNodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} ArrayNodeSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 6006, :column 23, :line 6006, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 3244, :column 4, :line 3244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3244, :column 5, :line 3244, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3242, :column 8, :line 3242, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3242, :column 16, :line 3242, :file "cljs/core.cljs"} even? ^{:arglists (^{:end-column 7, :end-line 3244, :column 4, :line 3244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3244, :column 5, :line 3244, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3242, :column 8, :line 3242, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3242, :column 16, :line 3242, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 3244, :column 5, :line 3244, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3244, :column 4, :line 3244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3244, :column 5, :line 3244, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3242, :column 8, :line 3242, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3242, :column 16, :line 3242, :file "cljs/core.cljs"} even?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 721, :column 10, :line 721, :file "cljs/core.cljs"} es6-iterator-seq ^{:arglists (^{:end-column 30, :end-line 733, :column 24, :line 733, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 733, :column 25, :line 733, :file "cljs/core.cljs"} iter]), :end-column 23, :end-line 733, :column 7, :line 733, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 733, :column 25, :line 733, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 733, :column 24, :line 733, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 733, :column 25, :line 733, :file "cljs/core.cljs"} iter]), :end-column 23, :end-line 733, :column 7, :line 733, :file "cljs/core.cljs"} es6-iterator-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1903, :column 21, :line 1903, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1903, :column 22, :line 1903, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} unchecked-dec ^{:arglists (^{:end-column 24, :end-line 1903, :column 21, :line 1903, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1903, :column 22, :line 1903, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 1903, :column 22, :line 1903, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1903, :column 21, :line 1903, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1903, :column 22, :line 1903, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} unchecked-dec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 52, :end-line 5818, :column 39, :line 5818, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 5818, :column 40, :line 5818, :file "cljs/core.cljs"} arr ^{:end-column 47, :end-line 5818, :column 44, :line 5818, :file "cljs/core.cljs"} cnt ^{:end-column 51, :end-line 5818, :column 48, :line 5818, :file "cljs/core.cljs"} key]), :private true, :end-column 38, :end-line 5818, :column 8, :line 5818, :file "cljs/core.cljs"} hash-collision-node-find-index ^{:arglists (^{:end-column 52, :end-line 5818, :column 39, :line 5818, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 5818, :column 40, :line 5818, :file "cljs/core.cljs"} arr ^{:end-column 47, :end-line 5818, :column 44, :line 5818, :file "cljs/core.cljs"} cnt ^{:end-column 51, :end-line 5818, :column 48, :line 5818, :file "cljs/core.cljs"} key]), :private true, :end-column 38, :end-line 5818, :column 8, :line 5818, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 43, :end-line 5818, :column 40, :line 5818, :file "cljs/core.cljs"} arr ^{:end-column 47, :end-line 5818, :column 44, :line 5818, :file "cljs/core.cljs"} cnt ^{:end-column 51, :end-line 5818, :column 48, :line 5818, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 52, :end-line 5818, :column 39, :line 5818, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 5818, :column 40, :line 5818, :file "cljs/core.cljs"} arr ^{:end-column 47, :end-line 5818, :column 44, :line 5818, :file "cljs/core.cljs"} cnt ^{:end-column 51, :end-line 5818, :column 48, :line 5818, :file "cljs/core.cljs"} key]), :private true, :end-column 38, :end-line 5818, :column 8, :line 5818, :file "cljs/core.cljs"} hash-collision-node-find-index, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5173, :column 32, :line 5173, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5173, :column 33, :line 5173, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5173, :column 37, :line 5173, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5173, :column 39, :line 5173, :file "cljs/core.cljs"} _meta]), :end-column 31, :end-line 5173, :column 7, :line 5173, :file "cljs/core.cljs"} persistent-array-map-seq ^{:arglists (^{:end-column 45, :end-line 5173, :column 32, :line 5173, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5173, :column 33, :line 5173, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5173, :column 37, :line 5173, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5173, :column 39, :line 5173, :file "cljs/core.cljs"} _meta]), :end-column 31, :end-line 5173, :column 7, :line 5173, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 5173, :column 33, :line 5173, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5173, :column 37, :line 5173, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5173, :column 39, :line 5173, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5173, :column 32, :line 5173, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5173, :column 33, :line 5173, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5173, :column 37, :line 5173, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5173, :column 39, :line 5173, :file "cljs/core.cljs"} _meta]), :end-column 31, :end-line 5173, :column 7, :line 5173, :file "cljs/core.cljs"} persistent-array-map-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} RangeIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} RangeIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 7633, :column 24, :line 7633, :file "cljs/core.cljs"} [^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step], :protocols #{Object}}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} MultiStepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} MultiStepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 3079, :column 23, :line 3079, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts], :protocols #{Object}}, ^{:arglists (^{:end-column 17, :end-line 2741, :column 4, :line 2741, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2741, :column 5, :line 2741, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2745, :column 10, :line 2745, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2740, :column 7, :line 2740, :file "cljs/core.cljs"} double-array ^{:arglists (^{:end-column 17, :end-line 2741, :column 4, :line 2741, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2741, :column 5, :line 2741, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2745, :column 10, :line 2745, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2740, :column 7, :line 2740, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2741, :column 5, :line 2741, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 9, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2745, :column 10, :line 2745, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2741, :column 4, :line 2741, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2741, :column 5, :line 2741, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2745, :column 10, :line 2745, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2740, :column 7, :line 2740, :file "cljs/core.cljs"} double-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} ->EmptyList ^{:arglists ([^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} {:arglists (^cljs.core/EmptyList [^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} ->EmptyList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 1012, :column 20, :line 1012, :file "cljs/core.cljs"} seq-reduce ^{:arglists (^{:end-column 12, :end-line 1667, :column 4, :line 1667, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1667, :column 5, :line 1667, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1671, :column 7, :line 1671, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 1666, :column 8, :line 1666, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1667, :column 5, :line 1667, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} coll] [^{:end-column 6, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1671, :column 7, :line 1671, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1667, :column 4, :line 1667, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1667, :column 5, :line 1667, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1671, :column 7, :line 1671, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 1666, :column 8, :line 1666, :file "cljs/core.cljs"} seq-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2789, :column 3, :line 2789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} arglist]), :end-column 13, :end-line 2788, :column 7, :line 2788, :file "cljs/core.cljs"} spread ^{:arglists (^{:end-column 12, :end-line 2789, :column 3, :line 2789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} arglist]), :end-column 13, :end-line 2788, :column 7, :line 2788, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} arglist]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2789, :column 3, :line 2789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} arglist]), :end-column 13, :end-line 2788, :column 7, :line 2788, :file "cljs/core.cljs"} spread, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6370, :column 21, :line 6370, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6370, :column 22, :line 6370, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6370, :column 26, :line 6370, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6370, :column 30, :line 6370, :file "cljs/core.cljs"} ins ^{:end-column 39, :end-line 6370, :column 34, :line 6370, :file "cljs/core.cljs"} right]), :private true, :end-column 20, :end-line 6370, :column 8, :line 6370, :file "cljs/core.cljs"} balance-left ^{:arglists (^{:end-column 40, :end-line 6370, :column 21, :line 6370, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6370, :column 22, :line 6370, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6370, :column 26, :line 6370, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6370, :column 30, :line 6370, :file "cljs/core.cljs"} ins ^{:end-column 39, :end-line 6370, :column 34, :line 6370, :file "cljs/core.cljs"} right]), :private true, :end-column 20, :end-line 6370, :column 8, :line 6370, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 6370, :column 22, :line 6370, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6370, :column 26, :line 6370, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6370, :column 30, :line 6370, :file "cljs/core.cljs"} ins ^{:end-column 39, :end-line 6370, :column 34, :line 6370, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6370, :column 21, :line 6370, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6370, :column 22, :line 6370, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6370, :column 26, :line 6370, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6370, :column 30, :line 6370, :file "cljs/core.cljs"} ins ^{:end-column 39, :end-line 6370, :column 34, :line 6370, :file "cljs/core.cljs"} right]), :private true, :end-column 20, :end-line 6370, :column 8, :line 6370, :file "cljs/core.cljs"} balance-left, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 2325, :column 17, :line 2325, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2325, :column 18, :line 2325, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 11, :end-line 2325, :column 8, :line 2325, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 2325, :column 12, :line 2325, :file "cljs/core.cljs"} rseq ^{:arglists (^{:end-column 23, :end-line 2325, :column 17, :line 2325, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2325, :column 18, :line 2325, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 11, :end-line 2325, :column 8, :line 2325, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 2325, :column 12, :line 2325, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj [^{:end-column 22, :end-line 2325, :column 18, :line 2325, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2325, :column 17, :line 2325, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2325, :column 18, :line 2325, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 11, :end-line 2325, :column 8, :line 2325, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 2325, :column 12, :line 2325, :file "cljs/core.cljs"} rseq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 9026, :column 3, :line 9026, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9026, :column 4, :line 9026, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 9021, :column 7, :line 9021, :file "cljs/core.cljs"} ex-cause ^{:arglists (^{:end-column 7, :end-line 9026, :column 3, :line 9026, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9026, :column 4, :line 9026, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 9021, :column 7, :line 9021, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 9026, :column 4, :line 9026, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 9026, :column 3, :line 9026, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9026, :column 4, :line 9026, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 9021, :column 7, :line 9021, :file "cljs/core.cljs"} ex-cause, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 20, :end-line 399, :column 14, :line 399, :file "cljs/core.cljs"} IReset ^{:protocol-info {:methods {^{:end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 20, :end-line 399, :column 14, :line 399, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 20, :end-line 399, :column 14, :line 399, :file "cljs/core.cljs"} IReset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} IEmptyableCollection ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} IEmptyableCollection, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 5089, :column 27, :line 5089, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5089, :column 28, :line 5089, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 5089, :column 30, :line 5089, :file "cljs/core.cljs"} k]), :private true, :end-column 26, :end-line 5089, :column 8, :line 5089, :file "cljs/core.cljs"} array-map-index-of ^{:arglists (^{:end-column 32, :end-line 5089, :column 27, :line 5089, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5089, :column 28, :line 5089, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 5089, :column 30, :line 5089, :file "cljs/core.cljs"} k]), :private true, :end-column 26, :end-line 5089, :column 8, :line 5089, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 5089, :column 28, :line 5089, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 5089, :column 30, :line 5089, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 5089, :column 27, :line 5089, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5089, :column 28, :line 5089, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 5089, :column 30, :line 5089, :file "cljs/core.cljs"} k]), :private true, :end-column 26, :end-line 5089, :column 8, :line 5089, :file "cljs/core.cljs"} array-map-index-of, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 9017, :column 3, :line 9017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9017, :column 4, :line 9017, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 17, :end-line 9013, :column 7, :line 9013, :file "cljs/core.cljs"} ex-message ^{:arglists (^{:end-column 7, :end-line 9017, :column 3, :line 9017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9017, :column 4, :line 9017, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 17, :end-line 9013, :column 7, :line 9013, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 9017, :column 4, :line 9017, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 9017, :column 3, :line 9017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9017, :column 4, :line 9017, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 17, :end-line 9013, :column 7, :line 9013, :file "cljs/core.cljs"} ex-message, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7967, :column 20, :line 7967, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7967, :column 21, :line 7967, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 7967, :column 7, :line 7967, :file "cljs/core.cljs"} string-print ^{:arglists (^{:end-column 23, :end-line 7967, :column 20, :line 7967, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7967, :column 21, :line 7967, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 7967, :column 7, :line 7967, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 22, :end-line 7967, :column 21, :line 7967, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7967, :column 20, :line 7967, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7967, :column 21, :line 7967, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 7967, :column 7, :line 7967, :file "cljs/core.cljs"} string-print, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1880, :column 21, :line 1880, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1880, :column 22, :line 1880, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} float ^{:arglists (^{:end-column 24, :end-line 1880, :column 21, :line 1880, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1880, :column 22, :line 1880, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1880, :column 22, :line 1880, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1880, :column 21, :line 1880, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1880, :column 22, :line 1880, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} float, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8341, :column 1, :line 8341, :file "cljs/core.cljs"} fixture2 ^{:end-column 17, :end-line 8341, :column 1, :line 8341, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8341, :column 1, :line 8341, :file "cljs/core.cljs"} fixture2, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 21, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IRecord ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 21, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 21, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IRecord, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 3431, :column 10, :line 3431, :file "cljs/core.cljs"} pr-str ^{:arglists (^{:end-column 11, :end-line 8107, :column 3, :line 8107, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8107, :column 4, :line 8107, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8107, :column 6, :line 8107, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 13, :end-line 8105, :column 7, :line 8105, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 8107, :column 6, :line 8107, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8107, :column 3, :line 8107, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8107, :column 4, :line 8107, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8107, :column 6, :line 8107, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 13, :end-line 8105, :column 7, :line 8105, :file "cljs/core.cljs"} pr-str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4063, :column 32, :line 4063, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4063, :column 33, :line 4063, :file "cljs/core.cljs"} pv]), :private true, :end-column 31, :end-line 4063, :column 8, :line 4063, :file "cljs/core.cljs"} first-array-for-longvec ^{:arglists (^{:end-column 36, :end-line 4063, :column 32, :line 4063, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4063, :column 33, :line 4063, :file "cljs/core.cljs"} pv]), :private true, :end-column 31, :end-line 4063, :column 8, :line 4063, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 4063, :column 33, :line 4063, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4063, :column 32, :line 4063, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4063, :column 33, :line 4063, :file "cljs/core.cljs"} pv]), :private true, :end-column 31, :end-line 4063, :column 8, :line 4063, :file "cljs/core.cljs"} first-array-for-longvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 5038, :column 32, :line 5038, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5038, :column 33, :line 5038, :file "cljs/core.cljs"} coll]), :end-column 31, :end-line 5038, :column 7, :line 5038, :file "cljs/core.cljs"} es6-set-entries-iterator ^{:arglists (^{:end-column 38, :end-line 5038, :column 32, :line 5038, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5038, :column 33, :line 5038, :file "cljs/core.cljs"} coll]), :end-column 31, :end-line 5038, :column 7, :line 5038, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6SetEntriesIterator [^{:end-column 37, :end-line 5038, :column 33, :line 5038, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 5038, :column 32, :line 5038, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5038, :column 33, :line 5038, :file "cljs/core.cljs"} coll]), :end-column 31, :end-line 5038, :column 7, :line 5038, :file "cljs/core.cljs"} es6-set-entries-iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2799, :column 4, :line 2799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2799, :column 5, :line 2799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2800, :column 4, :line 2800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2800, :column 5, :line 2800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2808, :column 4, :line 2808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2808, :column 5, :line 2808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2808, :column 7, :line 2808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2808, :column 9, :line 2808, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 2808, :column 11, :line 2808, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 13, :end-line 2796, :column 7, :line 2796, :file "cljs/core.cljs"} concat ^{:arglists (^{:end-column 6, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2799, :column 4, :line 2799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2799, :column 5, :line 2799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2800, :column 4, :line 2800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2800, :column 5, :line 2800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2808, :column 4, :line 2808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2808, :column 5, :line 2808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2808, :column 7, :line 2808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2808, :column 9, :line 2808, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 2808, :column 11, :line 2808, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 13, :end-line 2796, :column 7, :line 2796, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [] ^cljs.core/LazySeq [^{:end-column 6, :end-line 2799, :column 5, :line 2799, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 6, :end-line 2800, :column 5, :line 2800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} y] ^cljs.core/LazySeq [^{:end-column 6, :end-line 2808, :column 5, :line 2808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2808, :column 7, :line 2808, :file "cljs/core.cljs"} y & ^{:end-column 13, :end-line 2808, :column 11, :line 2808, :file "cljs/core.cljs"} zs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2799, :column 4, :line 2799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2799, :column 5, :line 2799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2800, :column 4, :line 2800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2800, :column 5, :line 2800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2808, :column 4, :line 2808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2808, :column 5, :line 2808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2808, :column 7, :line 2808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2808, :column 9, :line 2808, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 2808, :column 11, :line 2808, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 13, :end-line 2796, :column 7, :line 2796, :file "cljs/core.cljs"} concat, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods ^{:arglists (^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 31, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} IDerefWithTimeout ^{:protocol-info {:methods {^{:end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 31, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 31, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} IDerefWithTimeout, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 611, :column 4, :line 611, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 611, :column 5, :line 611, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 615, :column 4, :line 615, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 615, :column 5, :line 615, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 615, :column 8, :line 615, :file "cljs/core.cljs"} name]), :end-column 13, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} symbol ^{:arglists (^{:end-column 10, :end-line 611, :column 4, :line 611, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 611, :column 5, :line 611, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 615, :column 4, :line 615, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 615, :column 5, :line 615, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 615, :column 8, :line 615, :file "cljs/core.cljs"} name]), :end-column 13, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 611, :column 5, :line 611, :file "cljs/core.cljs"} name] ^cljs.core/Symbol [^{:end-column 7, :end-line 615, :column 5, :line 615, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 615, :column 8, :line 615, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 611, :column 4, :line 611, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 611, :column 5, :line 611, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 615, :column 4, :line 615, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 615, :column 5, :line 615, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 615, :column 8, :line 615, :file "cljs/core.cljs"} name]), :end-column 13, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} symbol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2692, :column 3, :line 2692, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2692, :column 4, :line 2692, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 18, :end-line 2689, :column 7, :line 2689, :file "cljs/core.cljs"} to-array-2d ^{:arglists (^{:end-column 9, :end-line 2692, :column 3, :line 2692, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2692, :column 4, :line 2692, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 18, :end-line 2689, :column 7, :line 2689, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 2692, :column 4, :line 2692, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2692, :column 3, :line 2692, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2692, :column 4, :line 2692, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 18, :end-line 2689, :column 7, :line 2689, :file "cljs/core.cljs"} to-array-2d, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} Subvec {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} Subvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 4432, :column 17, :line 4432, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} ExceptionInfo {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} ExceptionInfo, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 44, :end-line 8990, :column 24, :line 8990, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause], :protocols #{}}, ^{:declared true, :end-column 13, :end-line 1942, :column 10, :line 1942, :file "cljs/core.cljs"} mod ^{:arglists (^{:end-column 8, :end-line 2002, :column 3, :line 2002, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2002, :column 6, :line 2002, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 10, :end-line 2000, :column 7, :line 2000, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2002, :column 6, :line 2002, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2002, :column 3, :line 2002, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2002, :column 6, :line 2002, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 10, :end-line 2000, :column 7, :line 2000, :file "cljs/core.cljs"} mod, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 18, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} ISet ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentHashSet), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 18, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 18, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} ISet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1402, :column 3, :line 1402, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1402, :column 4, :line 1402, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 10, :end-line 1398, :column 7, :line 1398, :file "cljs/core.cljs"} pop ^{:arglists (^{:end-column 9, :end-line 1402, :column 3, :line 1402, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1402, :column 4, :line 1402, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 10, :end-line 1398, :column 7, :line 1398, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1402, :column 4, :line 1402, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1402, :column 3, :line 1402, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1402, :column 4, :line 1402, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 10, :end-line 1398, :column 7, :line 1398, :file "cljs/core.cljs"} pop, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 22, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} IPending ^{:impls (cljs.core/Delay), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 22, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 22, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} IPending, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key ^{:arglists (^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4097, :column 17, :line 4097, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4097, :column 18, :line 4097, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4097, :column 21, :line 4097, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4097, :column 27, :line 4097, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4097, :column 8, :line 4097, :file "cljs/core.cljs"} pop-tail ^{:arglists (^{:end-column 32, :end-line 4097, :column 17, :line 4097, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4097, :column 18, :line 4097, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4097, :column 21, :line 4097, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4097, :column 27, :line 4097, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4097, :column 8, :line 4097, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 4097, :column 18, :line 4097, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4097, :column 21, :line 4097, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4097, :column 27, :line 4097, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4097, :column 17, :line 4097, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4097, :column 18, :line 4097, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4097, :column 21, :line 4097, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4097, :column 27, :line 4097, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4097, :column 8, :line 4097, :file "cljs/core.cljs"} pop-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2873, :column 4, :line 2873, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2873, :column 5, :line 2873, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2873, :column 11, :line 2873, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2875, :column 4, :line 2875, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2875, :column 5, :line 2875, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2875, :column 11, :line 2875, :file "cljs/core.cljs"} key ^{:end-column 16, :end-line 2875, :column 15, :line 2875, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2875, :column 17, :line 2875, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 14, :end-line 2871, :column 7, :line 2871, :file "cljs/core.cljs"} dissoc! ^{:arglists (^{:end-column 15, :end-line 2873, :column 4, :line 2873, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2873, :column 5, :line 2873, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2873, :column 11, :line 2873, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2875, :column 4, :line 2875, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2875, :column 5, :line 2875, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2875, :column 11, :line 2875, :file "cljs/core.cljs"} key ^{:end-column 16, :end-line 2875, :column 15, :line 2875, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2875, :column 17, :line 2875, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 14, :end-line 2871, :column 7, :line 2871, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2873, :column 5, :line 2873, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2873, :column 11, :line 2873, :file "cljs/core.cljs"} key] ^^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2875, :column 5, :line 2875, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2875, :column 11, :line 2875, :file "cljs/core.cljs"} key & ^{:end-column 19, :end-line 2875, :column 17, :line 2875, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2873, :column 4, :line 2873, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2873, :column 5, :line 2873, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2873, :column 11, :line 2873, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2875, :column 4, :line 2875, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2875, :column 5, :line 2875, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2875, :column 11, :line 2875, :file "cljs/core.cljs"} key ^{:end-column 16, :end-line 2875, :column 15, :line 2875, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2875, :column 17, :line 2875, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 14, :end-line 2871, :column 7, :line 2871, :file "cljs/core.cljs"} dissoc!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7820, :column 4, :line 7820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7820, :column 5, :line 7820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7820, :column 7, :line 7820, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7825, :column 4, :line 7825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7825, :column 5, :line 7825, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7825, :column 7, :line 7825, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 7825, :column 12, :line 7825, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 17, :end-line 7817, :column 7, :line 7817, :file "cljs/core.cljs"} reductions ^{:arglists (^{:end-column 12, :end-line 7820, :column 4, :line 7820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7820, :column 5, :line 7820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7820, :column 7, :line 7820, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7825, :column 4, :line 7825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7825, :column 5, :line 7825, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7825, :column 7, :line 7825, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 7825, :column 12, :line 7825, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 17, :end-line 7817, :column 7, :line 7817, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 7820, :column 5, :line 7820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7820, :column 7, :line 7820, :file "cljs/core.cljs"} coll] ^cljs.core/Cons [^{:end-column 6, :end-line 7825, :column 5, :line 7825, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7825, :column 7, :line 7825, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 7825, :column 12, :line 7825, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7820, :column 4, :line 7820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7820, :column 5, :line 7820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7820, :column 7, :line 7820, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7825, :column 4, :line 7825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7825, :column 5, :line 7825, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7825, :column 7, :line 7825, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 7825, :column 12, :line 7825, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 17, :end-line 7817, :column 7, :line 7817, :file "cljs/core.cljs"} reductions, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 918, :column 3, :line 918, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 918, :column 4, :line 918, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 15, :end-line 916, :column 8, :line 916, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 916, :column 16, :line 916, :file "cljs/core.cljs"} indexed? ^{:arglists (^{:end-column 6, :end-line 918, :column 3, :line 918, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 918, :column 4, :line 918, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 15, :end-line 916, :column 8, :line 916, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 916, :column 16, :line 916, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 918, :column 4, :line 918, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 918, :column 3, :line 918, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 918, :column 4, :line 918, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 15, :end-line 916, :column 8, :line 916, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 916, :column 16, :line 916, :file "cljs/core.cljs"} indexed?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1783, :column 4, :line 1783, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1783, :column 5, :line 1783, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1784, :column 4, :line 1784, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1784, :column 5, :line 1784, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 5, :line 1785, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1785, :column 7, :line 1785, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1785, :column 9, :line 1785, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1785, :column 11, :line 1785, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1780, :column 8, :line 1780, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1780, :column 15, :line 1780, :file "cljs/core.cljs"} - ^{:arglists (^{:end-column 7, :end-line 1783, :column 4, :line 1783, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1783, :column 5, :line 1783, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1784, :column 4, :line 1784, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1784, :column 5, :line 1784, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 5, :line 1785, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1785, :column 7, :line 1785, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1785, :column 9, :line 1785, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1785, :column 11, :line 1785, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1780, :column 8, :line 1780, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1780, :column 15, :line 1780, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1783, :column 5, :line 1783, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1784, :column 5, :line 1784, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1785, :column 5, :line 1785, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1785, :column 7, :line 1785, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1785, :column 11, :line 1785, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1783, :column 4, :line 1783, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1783, :column 5, :line 1783, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1784, :column 4, :line 1784, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1784, :column 5, :line 1784, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 5, :line 1785, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1785, :column 7, :line 1785, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1785, :column 9, :line 1785, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1785, :column 11, :line 1785, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1780, :column 8, :line 1780, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1780, :column 15, :line 1780, :file "cljs/core.cljs"} -, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv ^{:arglists (^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} ->RangeIterator ^{:arglists ([^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangeIterator [^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} ->RangeIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 5721, :column 10, :line 5721, :file "cljs/core.cljs"} ->ArrayNode ^{:arglists ([^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 5721, :column 10, :line 5721, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayNode [^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 5721, :column 10, :line 5721, :file "cljs/core.cljs"} ->ArrayNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2863, :column 4, :line 2863, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2863, :column 5, :line 2863, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2863, :column 11, :line 2863, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2863, :column 15, :line 2863, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2865, :column 4, :line 2865, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2865, :column 5, :line 2865, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2865, :column 11, :line 2865, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2865, :column 15, :line 2865, :file "cljs/core.cljs"} val ^{:end-column 20, :end-line 2865, :column 19, :line 2865, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2865, :column 21, :line 2865, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 13, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} assoc! ^{:arglists (^{:end-column 19, :end-line 2863, :column 4, :line 2863, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2863, :column 5, :line 2863, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2863, :column 11, :line 2863, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2863, :column 15, :line 2863, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2865, :column 4, :line 2865, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2865, :column 5, :line 2865, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2865, :column 11, :line 2865, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2865, :column 15, :line 2865, :file "cljs/core.cljs"} val ^{:end-column 20, :end-line 2865, :column 19, :line 2865, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2865, :column 21, :line 2865, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 13, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2863, :column 5, :line 2863, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2863, :column 11, :line 2863, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2863, :column 15, :line 2863, :file "cljs/core.cljs"} val] ^^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2865, :column 5, :line 2865, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2865, :column 11, :line 2865, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2865, :column 15, :line 2865, :file "cljs/core.cljs"} val & ^{:end-column 24, :end-line 2865, :column 21, :line 2865, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2863, :column 4, :line 2863, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2863, :column 5, :line 2863, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2863, :column 11, :line 2863, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2863, :column 15, :line 2863, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2865, :column 4, :line 2865, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2865, :column 5, :line 2865, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2865, :column 11, :line 2865, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2865, :column 15, :line 2865, :file "cljs/core.cljs"} val ^{:end-column 20, :end-line 2865, :column 19, :line 2865, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2865, :column 21, :line 2865, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 13, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} assoc!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7449, :column 4, :line 7449, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7450, :column 4, :line 7450, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7450, :column 5, :line 7450, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7450, :column 7, :line 7450, :file "cljs/core.cljs"} keys]), :end-column 15, :end-line 7448, :column 7, :line 7448, :file "cljs/core.cljs"} hash-set ^{:arglists (^{:end-column 6, :end-line 7449, :column 4, :line 7449, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7450, :column 4, :line 7450, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7450, :column 5, :line 7450, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7450, :column 7, :line 7450, :file "cljs/core.cljs"} keys]), :end-column 15, :end-line 7448, :column 7, :line 7448, :file "cljs/core.cljs"} {:arglists (^cljs.core/ISet [] [& ^{:end-column 11, :end-line 7450, :column 7, :line 7450, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7449, :column 4, :line 7449, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7450, :column 4, :line 7450, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7450, :column 5, :line 7450, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7450, :column 7, :line 7450, :file "cljs/core.cljs"} keys]), :end-column 15, :end-line 7448, :column 7, :line 7448, :file "cljs/core.cljs"} hash-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 1739, :column 12, :line 1739, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 16, :end-line 1732, :column 7, :line 1732, :file "cljs/core.cljs"} reduce-kv ^{:arglists (^{:end-column 17, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 1739, :column 12, :line 1739, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 16, :end-line 1732, :column 7, :line 1732, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 1739, :column 12, :line 1739, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 1739, :column 12, :line 1739, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 16, :end-line 1732, :column 7, :line 1732, :file "cljs/core.cljs"} reduce-kv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 3436, :column 3, :line 3436, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3436, :column 4, :line 3436, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 3436, :column 6, :line 3436, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 13, :end-line 3433, :column 7, :line 3433, :file "cljs/core.cljs"} reset! ^{:declared true, :end-column 55, :end-line 5449, :column 49, :line 5449, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 55, :end-line 5449, :column 49, :line 5449, :file "cljs/core.cljs"} reset!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 2145, :column 14, :line 2145, :file "cljs/core.cljs"} name ^{:arglists (^{:end-column 6, :end-line 7503, :column 3, :line 7503, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 11, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7503, :column 3, :line 7503, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 11, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} name, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 6575, :column 10, :line 6575, :file "cljs/core.cljs"} ->RedNode ^{:arglists ([^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 6575, :column 10, :line 6575, :file "cljs/core.cljs"} {:arglists (^cljs.core/RedNode [^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 6575, :column 10, :line 6575, :file "cljs/core.cljs"} ->RedNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4071, :column 28, :line 4071, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4071, :column 29, :line 4071, :file "cljs/core.cljs"} pv ^{:end-column 33, :end-line 4071, :column 32, :line 4071, :file "cljs/core.cljs"} i]), :private true, :end-column 27, :end-line 4071, :column 8, :line 4071, :file "cljs/core.cljs"} unchecked-array-for ^{:arglists (^{:end-column 34, :end-line 4071, :column 28, :line 4071, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4071, :column 29, :line 4071, :file "cljs/core.cljs"} pv ^{:end-column 33, :end-line 4071, :column 32, :line 4071, :file "cljs/core.cljs"} i]), :private true, :end-column 27, :end-line 4071, :column 8, :line 4071, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 4071, :column 29, :line 4071, :file "cljs/core.cljs"} pv ^{:end-column 33, :end-line 4071, :column 32, :line 4071, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4071, :column 28, :line 4071, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4071, :column 29, :line 4071, :file "cljs/core.cljs"} pv ^{:end-column 33, :end-line 4071, :column 32, :line 4071, :file "cljs/core.cljs"} i]), :private true, :end-column 27, :end-line 4071, :column 8, :line 4071, :file "cljs/core.cljs"} unchecked-array-for, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 16, :end-line 214, :column 14, :line 214, :file "cljs/core.cljs"} Fn ^{:impls (cljs.core/MetaFn ^{:end-column 22, :end-line 799, :column 14, :line 799, :file "cljs/core.cljs"} function), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 16, :end-line 214, :column 14, :line 214, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 16, :end-line 214, :column 14, :line 214, :file "cljs/core.cljs"} Fn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1076, :column 3, :line 1076, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} ffirst ^{:arglists (^{:end-column 9, :end-line 1076, :column 3, :line 1076, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1076, :column 3, :line 1076, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} ffirst, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7454, :column 4, :line 7454, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7454, :column 5, :line 7454, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7454, :column 7, :line 7454, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 17, :end-line 7452, :column 7, :line 7452, :file "cljs/core.cljs"} sorted-set ^{:arglists (^{:end-column 12, :end-line 7454, :column 4, :line 7454, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7454, :column 5, :line 7454, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7454, :column 7, :line 7454, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 17, :end-line 7452, :column 7, :line 7452, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7454, :column 7, :line 7454, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7454, :column 4, :line 7454, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7454, :column 5, :line 7454, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7454, :column 7, :line 7454, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 17, :end-line 7452, :column 7, :line 7452, :file "cljs/core.cljs"} sorted-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8097, :column 3, :line 8097, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8097, :column 4, :line 8097, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8097, :column 9, :line 8097, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 20, :end-line 8094, :column 8, :line 8094, :file "cljs/core.cljs"} pr-with-opts ^{:arglists (^{:end-column 14, :end-line 8097, :column 3, :line 8097, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8097, :column 4, :line 8097, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8097, :column 9, :line 8097, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 20, :end-line 8094, :column 8, :line 8094, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 8, :end-line 8097, :column 4, :line 8097, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8097, :column 9, :line 8097, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8097, :column 3, :line 8097, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8097, :column 4, :line 8097, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8097, :column 9, :line 8097, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 20, :end-line 8094, :column 8, :line 8094, :file "cljs/core.cljs"} pr-with-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} PersistentTreeMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} PersistentTreeMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 6825, :column 28, :line 6825, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists ([^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} ->PersistentTreeMap ^{:arglists ([^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} ->PersistentTreeMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 880, :column 4, :line 880, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 880, :column 5, :line 880, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 880, :column 9, :line 880, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 891, :column 4, :line 891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 891, :column 5, :line 891, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 891, :column 9, :line 891, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 891, :column 11, :line 891, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 900, :column 4, :line 900, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 900, :column 5, :line 900, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 900, :column 9, :line 900, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 900, :column 11, :line 900, :file "cljs/core.cljs"} val ^{:end-column 18, :end-line 900, :column 15, :line 900, :file "cljs/core.cljs"} idx]), :private true, :end-column 20, :end-line 879, :column 8, :line 879, :file "cljs/core.cljs"} array-reduce ^{:arglists (^{:end-column 11, :end-line 880, :column 4, :line 880, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 880, :column 5, :line 880, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 880, :column 9, :line 880, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 891, :column 4, :line 891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 891, :column 5, :line 891, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 891, :column 9, :line 891, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 891, :column 11, :line 891, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 900, :column 4, :line 900, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 900, :column 5, :line 900, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 900, :column 9, :line 900, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 900, :column 11, :line 900, :file "cljs/core.cljs"} val ^{:end-column 18, :end-line 900, :column 15, :line 900, :file "cljs/core.cljs"} idx]), :private true, :end-column 20, :end-line 879, :column 8, :line 879, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 880, :column 5, :line 880, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 880, :column 9, :line 880, :file "cljs/core.cljs"} f] [^{:end-column 8, :end-line 891, :column 5, :line 891, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 891, :column 9, :line 891, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 891, :column 11, :line 891, :file "cljs/core.cljs"} val] [^{:end-column 8, :end-line 900, :column 5, :line 900, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 900, :column 9, :line 900, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 900, :column 11, :line 900, :file "cljs/core.cljs"} val ^{:end-column 18, :end-line 900, :column 15, :line 900, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 880, :column 4, :line 880, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 880, :column 5, :line 880, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 880, :column 9, :line 880, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 891, :column 4, :line 891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 891, :column 5, :line 891, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 891, :column 9, :line 891, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 891, :column 11, :line 891, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 900, :column 4, :line 900, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 900, :column 5, :line 900, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 900, :column 9, :line 900, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 900, :column 11, :line 900, :file "cljs/core.cljs"} val ^{:end-column 18, :end-line 900, :column 15, :line 900, :file "cljs/core.cljs"} idx]), :private true, :end-column 20, :end-line 879, :column 8, :line 879, :file "cljs/core.cljs"} array-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 914, :column 3, :line 914, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 914, :column 4, :line 914, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 15, :end-line 912, :column 8, :line 912, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 912, :column 16, :line 912, :file "cljs/core.cljs"} counted? ^{:arglists (^{:end-column 6, :end-line 914, :column 3, :line 914, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 914, :column 4, :line 914, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 15, :end-line 912, :column 8, :line 912, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 912, :column 16, :line 912, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 914, :column 4, :line 914, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 914, :column 3, :line 914, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 914, :column 4, :line 914, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 15, :end-line 912, :column 8, :line 912, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 912, :column 16, :line 912, :file "cljs/core.cljs"} counted?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8137, :column 3, :line 8137, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8137, :column 4, :line 8137, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8137, :column 6, :line 8137, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 14, :end-line 8135, :column 7, :line 8135, :file "cljs/core.cljs"} println ^{:arglists (^{:end-column 11, :end-line 8137, :column 3, :line 8137, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8137, :column 4, :line 8137, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8137, :column 6, :line 8137, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 14, :end-line 8135, :column 7, :line 8135, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 10, :end-line 8137, :column 6, :line 8137, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8137, :column 3, :line 8137, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8137, :column 4, :line 8137, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8137, :column 6, :line 8137, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 14, :end-line 8135, :column 7, :line 8135, :file "cljs/core.cljs"} println, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3964, :column 3, :line 3964, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3964, :column 4, :line 3964, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3964, :column 6, :line 3964, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3964, :column 7, :line 3964, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 3964, :column 9, :line 3964, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 3964, :column 11, :line 3964, :file "cljs/core.cljs"} ks] ^{:end-column 16, :end-line 3964, :column 15, :line 3964, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 15, :end-line 3960, :column 7, :line 3960, :file "cljs/core.cljs"} assoc-in ^{:arglists (^{:end-column 17, :end-line 3964, :column 3, :line 3964, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3964, :column 4, :line 3964, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3964, :column 6, :line 3964, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3964, :column 7, :line 3964, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 3964, :column 9, :line 3964, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 3964, :column 11, :line 3964, :file "cljs/core.cljs"} ks] ^{:end-column 16, :end-line 3964, :column 15, :line 3964, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 15, :end-line 3960, :column 7, :line 3960, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 3964, :column 4, :line 3964, :file "cljs/core.cljs"} m p__8759 ^{:end-column 16, :end-line 3964, :column 15, :line 3964, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3964, :column 3, :line 3964, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3964, :column 4, :line 3964, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3964, :column 6, :line 3964, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3964, :column 7, :line 3964, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 3964, :column 9, :line 3964, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 3964, :column 11, :line 3964, :file "cljs/core.cljs"} ks] ^{:end-column 16, :end-line 3964, :column 15, :line 3964, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 15, :end-line 3960, :column 7, :line 3960, :file "cljs/core.cljs"} assoc-in, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} PersistentHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} PersistentHashSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7200, :column 28, :line 7200, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 2063, :column 3, :line 2063, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2063, :column 6, :line 2063, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 15, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} bit-test ^{:arglists (^{:end-column 8, :end-line 2063, :column 3, :line 2063, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2063, :column 6, :line 2063, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 15, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2063, :column 6, :line 2063, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2063, :column 3, :line 2063, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2063, :column 6, :line 2063, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 15, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} bit-test, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 5436, :column 10, :line 5436, :file "cljs/core.cljs"} TransientHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 6200, :column 10, :line 6200, :file "cljs/core.cljs"} TransientHashMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 6204, :column 27, :line 6200, :file "cljs/core.cljs"} [^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val], :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists ([^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6061, :column 10, :line 6061, :file "cljs/core.cljs"} ->PersistentHashMap ^{:arglists ([^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6061, :column 10, :line 6061, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentHashMap [^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6061, :column 10, :line 6061, :file "cljs/core.cljs"} ->PersistentHashMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 19, :end-line 402, :column 14, :line 402, :file "cljs/core.cljs"} ISwap ^{:protocol-info {:methods {^{:end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 19, :end-line 402, :column 14, :line 402, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 19, :end-line 402, :column 14, :line 402, :file "cljs/core.cljs"} ISwap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 1467, :column 10, :line 1467, :file "cljs/core.cljs"} ChunkedCons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 21, :end-line 2591, :column 10, :line 2591, :file "cljs/core.cljs"} ChunkedCons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 2591, :column 22, :line 2591, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8521, :column 3, :line 8521, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8521, :column 4, :line 8521, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 14, :end-line 8516, :column 7, :line 8516, :file "cljs/core.cljs"} memoize ^{:arglists (^{:end-column 6, :end-line 8521, :column 3, :line 8521, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8521, :column 4, :line 8521, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 14, :end-line 8516, :column 7, :line 8516, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 8521, :column 4, :line 8521, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8521, :column 3, :line 8521, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8521, :column 4, :line 8521, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 14, :end-line 8516, :column 7, :line 8516, :file "cljs/core.cljs"} memoize, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8285, :column 3, :line 8285, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8285, :column 4, :line 8285, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8285, :column 9, :line 8285, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8285, :column 11, :line 8285, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 8285, :column 13, :line 8285, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 18, :end-line 8279, :column 7, :line 8279, :file "cljs/core.cljs"} alter-meta! ^{:arglists (^{:end-column 18, :end-line 8285, :column 3, :line 8285, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8285, :column 4, :line 8285, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8285, :column 9, :line 8285, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8285, :column 11, :line 8285, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 8285, :column 13, :line 8285, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 18, :end-line 8279, :column 7, :line 8279, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8285, :column 4, :line 8285, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8285, :column 9, :line 8285, :file "cljs/core.cljs"} f & ^{:end-column 17, :end-line 8285, :column 13, :line 8285, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8285, :column 3, :line 8285, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8285, :column 4, :line 8285, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8285, :column 9, :line 8285, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8285, :column 11, :line 8285, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 8285, :column 13, :line 8285, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 18, :end-line 8279, :column 7, :line 8279, :file "cljs/core.cljs"} alter-meta!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} ->StringBufferWriter ^{:arglists ([^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringBufferWriter [^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} ->StringBufferWriter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2106, :column 22, :line 2106, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2106, :column 23, :line 2106, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 2106, :column 8, :line 2106, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2106, :column 16, :line 2106, :file "cljs/core.cljs"} zero? ^{:arglists (^{:end-column 25, :end-line 2106, :column 22, :line 2106, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2106, :column 23, :line 2106, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 2106, :column 8, :line 2106, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2106, :column 16, :line 2106, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 2106, :column 23, :line 2106, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2106, :column 22, :line 2106, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2106, :column 23, :line 2106, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 2106, :column 8, :line 2106, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2106, :column 16, :line 2106, :file "cljs/core.cljs"} zero?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4550, :column 27, :line 4550, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4550, :column 28, :line 4550, :file "cljs/core.cljs"} edit ^{:end-column 37, :end-line 4550, :column 33, :line 4550, :file "cljs/core.cljs"} node]), :private true, :end-column 26, :end-line 4550, :column 8, :line 4550, :file "cljs/core.cljs"} tv-ensure-editable ^{:arglists (^{:end-column 38, :end-line 4550, :column 27, :line 4550, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4550, :column 28, :line 4550, :file "cljs/core.cljs"} edit ^{:end-column 37, :end-line 4550, :column 33, :line 4550, :file "cljs/core.cljs"} node]), :private true, :end-column 26, :end-line 4550, :column 8, :line 4550, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 4550, :column 28, :line 4550, :file "cljs/core.cljs"} edit ^{:end-column 37, :end-line 4550, :column 33, :line 4550, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4550, :column 27, :line 4550, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4550, :column 28, :line 4550, :file "cljs/core.cljs"} edit ^{:end-column 37, :end-line 4550, :column 33, :line 4550, :file "cljs/core.cljs"} node]), :private true, :end-column 26, :end-line 4550, :column 8, :line 4550, :file "cljs/core.cljs"} tv-ensure-editable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn* ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n ^{:arglists (^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1906, :column 25, :line 1906, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1906, :column 26, :line 1906, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1906, :column 7, :line 1906, :file "cljs/core.cljs"} unchecked-dec-int ^{:arglists (^{:end-column 28, :end-line 1906, :column 25, :line 1906, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1906, :column 26, :line 1906, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1906, :column 7, :line 1906, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1906, :column 26, :line 1906, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1906, :column 25, :line 1906, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1906, :column 26, :line 1906, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1906, :column 7, :line 1906, :file "cljs/core.cljs"} unchecked-dec-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2172, :column 18, :line 2172, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2172, :column 19, :line 2172, :file "cljs/core.cljs"} m]), :private true, :end-column 17, :end-line 2172, :column 8, :line 2172, :file "cljs/core.cljs"} hash-imap ^{:arglists (^{:end-column 21, :end-line 2172, :column 18, :line 2172, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2172, :column 19, :line 2172, :file "cljs/core.cljs"} m]), :private true, :end-column 17, :end-line 2172, :column 8, :line 2172, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 20, :end-line 2172, :column 19, :line 2172, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2172, :column 18, :line 2172, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2172, :column 19, :line 2172, :file "cljs/core.cljs"} m]), :private true, :end-column 17, :end-line 2172, :column 8, :line 2172, :file "cljs/core.cljs"} hash-imap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8714, :column 3, :line 8714, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8714, :column 4, :line 8714, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8714, :column 6, :line 8714, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8714, :column 8, :line 8714, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8713, :column 8, :line 8713, :file "cljs/core.cljs"} dominates ^{:arglists (^{:end-column 21, :end-line 8714, :column 3, :line 8714, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8714, :column 4, :line 8714, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8714, :column 6, :line 8714, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8714, :column 8, :line 8714, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8713, :column 8, :line 8713, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 8714, :column 4, :line 8714, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8714, :column 6, :line 8714, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8714, :column 8, :line 8714, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8714, :column 3, :line 8714, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8714, :column 4, :line 8714, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8714, :column 6, :line 8714, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8714, :column 8, :line 8714, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8713, :column 8, :line 8713, :file "cljs/core.cljs"} dominates, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2843, :column 3, :line 2843, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2843, :column 4, :line 2843, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 18, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} persistent! ^{:arglists (^{:end-column 10, :end-line 2843, :column 3, :line 2843, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2843, :column 4, :line 2843, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 18, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2843, :column 4, :line 2843, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2843, :column 3, :line 2843, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2843, :column 4, :line 2843, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 18, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} persistent!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 20, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn! ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 20, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 20, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1091, :column 3, :line 1091, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1091, :column 4, :line 1091, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 12, :end-line 1089, :column 7, :line 1089, :file "cljs/core.cljs"} nnext ^{:arglists (^{:end-column 9, :end-line 1091, :column 3, :line 1091, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1091, :column 4, :line 1091, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 12, :end-line 1089, :column 7, :line 1089, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq [^{:end-column 8, :end-line 1091, :column 4, :line 1091, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1091, :column 3, :line 1091, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1091, :column 4, :line 1091, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 12, :end-line 1089, :column 7, :line 1089, :file "cljs/core.cljs"} nnext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} Box {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} Box, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 29, :end-line 5447, :column 14, :line 5447, :file "cljs/core.cljs"} [^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val], :protocols #{}}, StringBuffer {:op :js-var, :ns goog.string, :name StringBuffer}, ^{:arglists (^{:end-column 40, :end-line 6395, :column 22, :line 6395, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6395, :column 23, :line 6395, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6395, :column 27, :line 6395, :file "cljs/core.cljs"} val ^{:end-column 35, :end-line 6395, :column 31, :line 6395, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6395, :column 36, :line 6395, :file "cljs/core.cljs"} ins]), :private true, :end-column 21, :end-line 6395, :column 8, :line 6395, :file "cljs/core.cljs"} balance-right ^{:arglists (^{:end-column 40, :end-line 6395, :column 22, :line 6395, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6395, :column 23, :line 6395, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6395, :column 27, :line 6395, :file "cljs/core.cljs"} val ^{:end-column 35, :end-line 6395, :column 31, :line 6395, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6395, :column 36, :line 6395, :file "cljs/core.cljs"} ins]), :private true, :end-column 21, :end-line 6395, :column 8, :line 6395, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 6395, :column 23, :line 6395, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6395, :column 27, :line 6395, :file "cljs/core.cljs"} val ^{:end-column 35, :end-line 6395, :column 31, :line 6395, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6395, :column 36, :line 6395, :file "cljs/core.cljs"} ins]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6395, :column 22, :line 6395, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6395, :column 23, :line 6395, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6395, :column 27, :line 6395, :file "cljs/core.cljs"} val ^{:end-column 35, :end-line 6395, :column 31, :line 6395, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6395, :column 36, :line 6395, :file "cljs/core.cljs"} ins]), :private true, :end-column 21, :end-line 6395, :column 8, :line 6395, :file "cljs/core.cljs"} balance-right, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 8751, :column 30, :line 8751, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8751, :column 31, :line 8751, :file "cljs/core.cljs"} name ^{:end-column 48, :end-line 8751, :column 36, :line 8751, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 29, :end-line 8751, :column 8, :line 8751, :file "cljs/core.cljs"} throw-no-method-error ^{:arglists (^{:end-column 49, :end-line 8751, :column 30, :line 8751, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8751, :column 31, :line 8751, :file "cljs/core.cljs"} name ^{:end-column 48, :end-line 8751, :column 36, :line 8751, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 29, :end-line 8751, :column 8, :line 8751, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 35, :end-line 8751, :column 31, :line 8751, :file "cljs/core.cljs"} name ^{:end-column 48, :end-line 8751, :column 36, :line 8751, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 8751, :column 30, :line 8751, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8751, :column 31, :line 8751, :file "cljs/core.cljs"} name ^{:end-column 48, :end-line 8751, :column 36, :line 8751, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 29, :end-line 8751, :column 8, :line 8751, :file "cljs/core.cljs"} throw-no-method-error, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8314, :column 3, :line 8314, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8314, :column 4, :line 8314, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8314, :column 9, :line 8314, :file "cljs/core.cljs"} key ^{:end-column 14, :end-line 8314, :column 13, :line 8314, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 16, :end-line 8293, :column 7, :line 8293, :file "cljs/core.cljs"} add-watch ^{:arglists (^{:end-column 15, :end-line 8314, :column 3, :line 8314, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8314, :column 4, :line 8314, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8314, :column 9, :line 8314, :file "cljs/core.cljs"} key ^{:end-column 14, :end-line 8314, :column 13, :line 8314, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 16, :end-line 8293, :column 7, :line 8293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8314, :column 4, :line 8314, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8314, :column 9, :line 8314, :file "cljs/core.cljs"} key ^{:end-column 14, :end-line 8314, :column 13, :line 8314, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8314, :column 3, :line 8314, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8314, :column 4, :line 8314, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8314, :column 9, :line 8314, :file "cljs/core.cljs"} key ^{:end-column 14, :end-line 8314, :column 13, :line 8314, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 16, :end-line 8293, :column 7, :line 8293, :file "cljs/core.cljs"} add-watch, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3226, :column 3, :line 3226, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3226, :column 4, :line 3226, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3226, :column 9, :line 3226, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 15, :end-line 3223, :column 8, :line 3223, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3223, :column 16, :line 3223, :file "cljs/core.cljs"} not-every? ^{:arglists (^{:end-column 14, :end-line 3226, :column 3, :line 3226, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3226, :column 4, :line 3226, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3226, :column 9, :line 3226, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 15, :end-line 3223, :column 8, :line 3223, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3223, :column 16, :line 3223, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 8, :end-line 3226, :column 4, :line 3226, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3226, :column 9, :line 3226, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3226, :column 3, :line 3226, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3226, :column 4, :line 3226, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3226, :column 9, :line 3226, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 15, :end-line 3223, :column 8, :line 3223, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3223, :column 16, :line 3223, :file "cljs/core.cljs"} not-every?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 10, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} rem ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 10, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 10, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} rem, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 8070, :column 24, :line 8070, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 8070, :column 25, :line 8070, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 8070, :column 30, :line 8070, :file "cljs/core.cljs"} opts]), :private true, :end-column 23, :end-line 8070, :column 8, :line 8070, :file "cljs/core.cljs"} pr-sb-with-opts ^{:arglists (^{:end-column 35, :end-line 8070, :column 24, :line 8070, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 8070, :column 25, :line 8070, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 8070, :column 30, :line 8070, :file "cljs/core.cljs"} opts]), :private true, :end-column 23, :end-line 8070, :column 8, :line 8070, :file "cljs/core.cljs"} {:arglists (^goog.string/StringBuffer [^{:end-column 29, :end-line 8070, :column 25, :line 8070, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 8070, :column 30, :line 8070, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 8070, :column 24, :line 8070, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 8070, :column 25, :line 8070, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 8070, :column 30, :line 8070, :file "cljs/core.cljs"} opts]), :private true, :end-column 23, :end-line 8070, :column 8, :line 8070, :file "cljs/core.cljs"} pr-sb-with-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} BitmapIndexedNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} BitmapIndexedNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 5510, :column 28, :line 5510, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists ([^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} ->NodeSeq ^{:arglists ([^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} {:arglists (^cljs.core/NodeSeq [^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} ->NodeSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3233, :column 3, :line 3233, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3233, :column 4, :line 3233, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3233, :column 9, :line 3233, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 11, :end-line 3228, :column 7, :line 3228, :file "cljs/core.cljs"} some ^{:arglists (^{:end-column 14, :end-line 3233, :column 3, :line 3233, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3233, :column 4, :line 3233, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3233, :column 9, :line 3233, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 11, :end-line 3228, :column 7, :line 3228, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3233, :column 4, :line 3233, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3233, :column 9, :line 3233, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3233, :column 3, :line 3233, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3233, :column 4, :line 3233, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3233, :column 9, :line 3233, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 11, :end-line 3228, :column 7, :line 3228, :file "cljs/core.cljs"} some, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 20, :end-line 393, :column 14, :line 393, :file "cljs/core.cljs"} INamed ^{:impls (cljs.core/MultiFn cljs.core/Keyword cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 20, :end-line 393, :column 14, :line 393, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 20, :end-line 393, :column 14, :line 393, :file "cljs/core.cljs"} INamed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} ->Box ^{:arglists ([^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} {:arglists (^cljs.core/Box [^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} ->Box, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 21, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} IReduce ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 21, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 21, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} IReduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3683, :column 5, :line 3683, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3695, :column 4, :line 3695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3695, :column 5, :line 3695, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 11, :end-line 3680, :column 7, :line 3680, :file "cljs/core.cljs"} drop ^{:arglists (^{:end-column 7, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3683, :column 5, :line 3683, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3695, :column 4, :line 3695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3695, :column 5, :line 3695, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 11, :end-line 3680, :column 7, :line 3680, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3683, :column 5, :line 3683, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3695, :column 5, :line 3695, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3683, :column 5, :line 3683, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3695, :column 4, :line 3695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3695, :column 5, :line 3695, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 11, :end-line 3680, :column 7, :line 3680, :file "cljs/core.cljs"} drop, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1474, :column 4, :line 1474, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1476, :column 4, :line 1476, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1476, :column 5, :line 1476, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 1476, :column 7, :line 1476, :file "cljs/core.cljs"} keyvals]), :end-column 13, :end-line 1473, :column 7, :line 1473, :file "cljs/core.cljs"} js-obj ^{:arglists (^{:end-column 6, :end-line 1474, :column 4, :line 1474, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1476, :column 4, :line 1476, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1476, :column 5, :line 1476, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 1476, :column 7, :line 1476, :file "cljs/core.cljs"} keyvals]), :end-column 13, :end-line 1473, :column 7, :line 1473, :file "cljs/core.cljs"} {:arglists (^object [] [& ^{:end-column 14, :end-line 1476, :column 7, :line 1476, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1474, :column 4, :line 1474, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1476, :column 4, :line 1476, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1476, :column 5, :line 1476, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 1476, :column 7, :line 1476, :file "cljs/core.cljs"} keyvals]), :end-column 13, :end-line 1473, :column 7, :line 1473, :file "cljs/core.cljs"} js-obj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 34, :end-line 363, :column 14, :line 363, :file "cljs/core.cljs"} ITransientCollection ^{:impls (cljs.core/TransientHashSet cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 34, :end-line 363, :column 14, :line 363, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 34, :end-line 363, :column 14, :line 363, :file "cljs/core.cljs"} ITransientCollection, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} Atom {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} Atom, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 3385, :column 15, :line 3385, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches], :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}}, ^{:arglists (^{:end-column 12, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1179, :column 10, :line 1179, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1207, :column 4, :line 1207, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1207, :column 5, :line 1207, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1207, :column 10, :line 1207, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1207, :column 12, :line 1207, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 10, :end-line 1174, :column 7, :line 1174, :file "cljs/core.cljs"} nth ^{:arglists (^{:end-column 12, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1179, :column 10, :line 1179, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1207, :column 4, :line 1207, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1207, :column 5, :line 1207, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1207, :column 10, :line 1207, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1207, :column 12, :line 1207, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 10, :end-line 1174, :column 7, :line 1174, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1179, :column 10, :line 1179, :file "cljs/core.cljs"} n] [^{:end-column 9, :end-line 1207, :column 5, :line 1207, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1207, :column 10, :line 1207, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1207, :column 12, :line 1207, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1179, :column 10, :line 1179, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1207, :column 4, :line 1207, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1207, :column 5, :line 1207, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1207, :column 10, :line 1207, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1207, :column 12, :line 1207, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 10, :end-line 1174, :column 7, :line 1174, :file "cljs/core.cljs"} nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1450, :column 3, :line 1450, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1450, :column 4, :line 1450, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 15, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} sorted? ^{:arglists (^{:end-column 6, :end-line 1450, :column 3, :line 1450, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1450, :column 4, :line 1450, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 15, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1450, :column 4, :line 1450, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1450, :column 3, :line 1450, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1450, :column 4, :line 1450, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 15, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} sorted?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 15, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil? ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 15, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 15, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3750, :column 3, :line 3750, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3750, :column 4, :line 3750, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3750, :column 6, :line 3750, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 15, :end-line 3748, :column 7, :line 3748, :file "cljs/core.cljs"} split-at ^{:arglists (^{:end-column 11, :end-line 3750, :column 3, :line 3750, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3750, :column 4, :line 3750, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3750, :column 6, :line 3750, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 15, :end-line 3748, :column 7, :line 3748, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 5, :end-line 3750, :column 4, :line 3750, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3750, :column 6, :line 3750, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3750, :column 3, :line 3750, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3750, :column 4, :line 3750, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3750, :column 6, :line 3750, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 15, :end-line 3748, :column 7, :line 3748, :file "cljs/core.cljs"} split-at, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 7198, :column 10, :line 7198, :file "cljs/core.cljs"} TransientHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 26, :end-line 7295, :column 10, :line 7295, :file "cljs/core.cljs"} TransientHashSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 7295, :column 27, :line 7295, :file "cljs/core.cljs"} [^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map], :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, ^{:arglists (^{:end-column 35, :end-line 5104, :column 28, :line 5104, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5104, :column 29, :line 5104, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 5104, :column 31, :line 5104, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 5104, :column 33, :line 5104, :file "cljs/core.cljs"} v]), :private true, :end-column 27, :end-line 5104, :column 8, :line 5104, :file "cljs/core.cljs"} array-map-extend-kv ^{:arglists (^{:end-column 35, :end-line 5104, :column 28, :line 5104, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5104, :column 29, :line 5104, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 5104, :column 31, :line 5104, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 5104, :column 33, :line 5104, :file "cljs/core.cljs"} v]), :private true, :end-column 27, :end-line 5104, :column 8, :line 5104, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 30, :end-line 5104, :column 29, :line 5104, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 5104, :column 31, :line 5104, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 5104, :column 33, :line 5104, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 5104, :column 28, :line 5104, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5104, :column 29, :line 5104, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 5104, :column 31, :line 5104, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 5104, :column 33, :line 5104, :file "cljs/core.cljs"} v]), :private true, :end-column 27, :end-line 5104, :column 8, :line 5104, :file "cljs/core.cljs"} array-map-extend-kv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8087, :column 3, :line 8087, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8087, :column 4, :line 8087, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8087, :column 9, :line 8087, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 24, :end-line 8085, :column 7, :line 8085, :file "cljs/core.cljs"} prn-str-with-opts ^{:arglists (^{:end-column 14, :end-line 8087, :column 3, :line 8087, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8087, :column 4, :line 8087, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8087, :column 9, :line 8087, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 24, :end-line 8085, :column 7, :line 8085, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8087, :column 4, :line 8087, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8087, :column 9, :line 8087, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8087, :column 3, :line 8087, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8087, :column 4, :line 8087, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8087, :column 9, :line 8087, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 24, :end-line 8085, :column 7, :line 8085, :file "cljs/core.cljs"} prn-str-with-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 8412, :column 4, :line 8412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8412, :column 5, :line 8412, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8414, :column 4, :line 8414, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8414, :column 5, :line 8414, :file "cljs/core.cljs"} prob ^{:end-column 14, :end-line 8414, :column 10, :line 8414, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 20, :end-line 8409, :column 7, :line 8409, :file "cljs/core.cljs"} random-sample ^{:arglists (^{:end-column 10, :end-line 8412, :column 4, :line 8412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8412, :column 5, :line 8412, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8414, :column 4, :line 8414, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8414, :column 5, :line 8414, :file "cljs/core.cljs"} prob ^{:end-column 14, :end-line 8414, :column 10, :line 8414, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 20, :end-line 8409, :column 7, :line 8409, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 8412, :column 5, :line 8412, :file "cljs/core.cljs"} prob] ^cljs.core/LazySeq [^{:end-column 9, :end-line 8414, :column 5, :line 8414, :file "cljs/core.cljs"} prob ^{:end-column 14, :end-line 8414, :column 10, :line 8414, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 8412, :column 4, :line 8412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8412, :column 5, :line 8412, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8414, :column 4, :line 8414, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8414, :column 5, :line 8414, :file "cljs/core.cljs"} prob ^{:end-column 14, :end-line 8414, :column 10, :line 8414, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 20, :end-line 8409, :column 7, :line 8409, :file "cljs/core.cljs"} random-sample, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7184, :column 3, :line 7184, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7184, :column 4, :line 7184, :file "cljs/core.cljs"} map ^{:end-column 14, :end-line 7184, :column 8, :line 7184, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 18, :end-line 7182, :column 7, :line 7182, :file "cljs/core.cljs"} select-keys ^{:arglists (^{:end-column 15, :end-line 7184, :column 3, :line 7184, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7184, :column 4, :line 7184, :file "cljs/core.cljs"} map ^{:end-column 14, :end-line 7184, :column 8, :line 7184, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 18, :end-line 7182, :column 7, :line 7182, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7184, :column 4, :line 7184, :file "cljs/core.cljs"} map ^{:end-column 14, :end-line 7184, :column 8, :line 7184, :file "cljs/core.cljs"} keyseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7184, :column 3, :line 7184, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7184, :column 4, :line 7184, :file "cljs/core.cljs"} map ^{:end-column 14, :end-line 7184, :column 8, :line 7184, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 18, :end-line 7182, :column 7, :line 7182, :file "cljs/core.cljs"} select-keys, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2032, :column 3, :line 2032, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2032, :column 4, :line 2032, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2032, :column 6, :line 2032, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 14, :end-line 2030, :column 7, :line 2030, :file "cljs/core.cljs"} bit-and ^{:arglists (^{:end-column 8, :end-line 2032, :column 3, :line 2032, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2032, :column 4, :line 2032, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2032, :column 6, :line 2032, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 14, :end-line 2030, :column 7, :line 2030, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2032, :column 4, :line 2032, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2032, :column 6, :line 2032, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2032, :column 3, :line 2032, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2032, :column 4, :line 2032, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2032, :column 6, :line 2032, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 14, :end-line 2030, :column 7, :line 2030, :file "cljs/core.cljs"} bit-and, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2780, :column 22, :line 2780, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2780, :column 23, :line 2780, :file "cljs/core.cljs"} s ^{:end-column 26, :end-line 2780, :column 25, :line 2780, :file "cljs/core.cljs"} n]), :private true, :end-column 21, :end-line 2780, :column 8, :line 2780, :file "cljs/core.cljs"} bounded-count ^{:arglists (^{:end-column 27, :end-line 2780, :column 22, :line 2780, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2780, :column 23, :line 2780, :file "cljs/core.cljs"} s ^{:end-column 26, :end-line 2780, :column 25, :line 2780, :file "cljs/core.cljs"} n]), :private true, :end-column 21, :end-line 2780, :column 8, :line 2780, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 2780, :column 23, :line 2780, :file "cljs/core.cljs"} s ^{:end-column 26, :end-line 2780, :column 25, :line 2780, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2780, :column 22, :line 2780, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2780, :column 23, :line 2780, :file "cljs/core.cljs"} s ^{:end-column 26, :end-line 2780, :column 25, :line 2780, :file "cljs/core.cljs"} n]), :private true, :end-column 21, :end-line 2780, :column 8, :line 2780, :file "cljs/core.cljs"} bounded-count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 4001, :column 4, :line 4001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4001, :column 5, :line 4001, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4001, :column 7, :line 4001, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4001, :column 9, :line 4001, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 4003, :column 4, :line 4003, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4003, :column 5, :line 4003, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4003, :column 7, :line 4003, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4003, :column 9, :line 4003, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4003, :column 11, :line 4003, :file "cljs/core.cljs"} x] ^{:end-column 15, :end-line 4005, :column 4, :line 4005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4005, :column 5, :line 4005, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4005, :column 7, :line 4005, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4005, :column 9, :line 4005, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4005, :column 11, :line 4005, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4005, :column 13, :line 4005, :file "cljs/core.cljs"} y] ^{:end-column 17, :end-line 4007, :column 4, :line 4007, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4007, :column 5, :line 4007, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4007, :column 7, :line 4007, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4007, :column 9, :line 4007, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4007, :column 11, :line 4007, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4007, :column 13, :line 4007, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4007, :column 15, :line 4007, :file "cljs/core.cljs"} z] ^{:end-column 24, :end-line 4009, :column 4, :line 4009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4009, :column 5, :line 4009, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4009, :column 7, :line 4009, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4009, :column 9, :line 4009, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4009, :column 11, :line 4009, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4009, :column 13, :line 4009, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4009, :column 15, :line 4009, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 4009, :column 17, :line 4009, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 4009, :column 19, :line 4009, :file "cljs/core.cljs"} more]), :doc "'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.", :end-column 13, :end-line 3996, :column 7, :line 3996, :file "cljs/core.cljs"} update ^{:arglists (^{:end-column 11, :end-line 4001, :column 4, :line 4001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4001, :column 5, :line 4001, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4001, :column 7, :line 4001, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4001, :column 9, :line 4001, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 4003, :column 4, :line 4003, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4003, :column 5, :line 4003, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4003, :column 7, :line 4003, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4003, :column 9, :line 4003, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4003, :column 11, :line 4003, :file "cljs/core.cljs"} x] ^{:end-column 15, :end-line 4005, :column 4, :line 4005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4005, :column 5, :line 4005, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4005, :column 7, :line 4005, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4005, :column 9, :line 4005, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4005, :column 11, :line 4005, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4005, :column 13, :line 4005, :file "cljs/core.cljs"} y] ^{:end-column 17, :end-line 4007, :column 4, :line 4007, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4007, :column 5, :line 4007, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4007, :column 7, :line 4007, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4007, :column 9, :line 4007, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4007, :column 11, :line 4007, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4007, :column 13, :line 4007, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4007, :column 15, :line 4007, :file "cljs/core.cljs"} z] ^{:end-column 24, :end-line 4009, :column 4, :line 4009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4009, :column 5, :line 4009, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4009, :column 7, :line 4009, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4009, :column 9, :line 4009, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4009, :column 11, :line 4009, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4009, :column 13, :line 4009, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4009, :column 15, :line 4009, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 4009, :column 17, :line 4009, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 4009, :column 19, :line 4009, :file "cljs/core.cljs"} more]), :doc "'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.", :end-column 13, :end-line 3996, :column 7, :line 3996, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 4001, :column 5, :line 4001, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4001, :column 7, :line 4001, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4001, :column 9, :line 4001, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 4003, :column 5, :line 4003, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4003, :column 7, :line 4003, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4003, :column 9, :line 4003, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4003, :column 11, :line 4003, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 4005, :column 5, :line 4005, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4005, :column 7, :line 4005, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4005, :column 9, :line 4005, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4005, :column 11, :line 4005, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4005, :column 13, :line 4005, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 4007, :column 5, :line 4007, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4007, :column 7, :line 4007, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4007, :column 9, :line 4007, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4007, :column 11, :line 4007, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4007, :column 13, :line 4007, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4007, :column 15, :line 4007, :file "cljs/core.cljs"} z] [^{:end-column 6, :end-line 4009, :column 5, :line 4009, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4009, :column 7, :line 4009, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4009, :column 9, :line 4009, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4009, :column 11, :line 4009, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4009, :column 13, :line 4009, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4009, :column 15, :line 4009, :file "cljs/core.cljs"} z & ^{:end-column 23, :end-line 4009, :column 19, :line 4009, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 4001, :column 4, :line 4001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4001, :column 5, :line 4001, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4001, :column 7, :line 4001, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4001, :column 9, :line 4001, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 4003, :column 4, :line 4003, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4003, :column 5, :line 4003, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4003, :column 7, :line 4003, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4003, :column 9, :line 4003, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4003, :column 11, :line 4003, :file "cljs/core.cljs"} x] ^{:end-column 15, :end-line 4005, :column 4, :line 4005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4005, :column 5, :line 4005, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4005, :column 7, :line 4005, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4005, :column 9, :line 4005, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4005, :column 11, :line 4005, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4005, :column 13, :line 4005, :file "cljs/core.cljs"} y] ^{:end-column 17, :end-line 4007, :column 4, :line 4007, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4007, :column 5, :line 4007, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4007, :column 7, :line 4007, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4007, :column 9, :line 4007, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4007, :column 11, :line 4007, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4007, :column 13, :line 4007, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4007, :column 15, :line 4007, :file "cljs/core.cljs"} z] ^{:end-column 24, :end-line 4009, :column 4, :line 4009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4009, :column 5, :line 4009, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4009, :column 7, :line 4009, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4009, :column 9, :line 4009, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4009, :column 11, :line 4009, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4009, :column 13, :line 4009, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4009, :column 15, :line 4009, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 4009, :column 17, :line 4009, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 4009, :column 19, :line 4009, :file "cljs/core.cljs"} more]), :doc "'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.", :end-column 13, :end-line 3996, :column 7, :line 3996, :file "cljs/core.cljs"} update, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 25, :end-line 8326, :column 1, :line 8326, :file "cljs/core.cljs"} gensym_counter ^{:end-column 25, :end-line 8326, :column 1, :line 8326, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 25, :end-line 8326, :column 1, :line 8326, :file "cljs/core.cljs"} gensym_counter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2824, :column 4, :line 2824, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2824, :column 5, :line 2824, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2825, :column 4, :line 2825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2825, :column 5, :line 2825, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2825, :column 7, :line 2825, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2826, :column 4, :line 2826, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2826, :column 5, :line 2826, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2826, :column 7, :line 2826, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2826, :column 9, :line 2826, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2827, :column 4, :line 2827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2827, :column 5, :line 2827, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2827, :column 7, :line 2827, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2827, :column 9, :line 2827, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2827, :column 11, :line 2827, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2828, :column 4, :line 2828, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2828, :column 5, :line 2828, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2828, :column 9, :line 2828, :file "cljs/core.cljs"} c ^{:end-column 12, :end-line 2828, :column 11, :line 2828, :file "cljs/core.cljs"} d ^{:end-column 14, :end-line 2828, :column 13, :line 2828, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2828, :column 15, :line 2828, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 12, :end-line 2821, :column 7, :line 2821, :file "cljs/core.cljs"} list* ^{:arglists (^{:end-column 10, :end-line 2824, :column 4, :line 2824, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2824, :column 5, :line 2824, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2825, :column 4, :line 2825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2825, :column 5, :line 2825, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2825, :column 7, :line 2825, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2826, :column 4, :line 2826, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2826, :column 5, :line 2826, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2826, :column 7, :line 2826, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2826, :column 9, :line 2826, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2827, :column 4, :line 2827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2827, :column 5, :line 2827, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2827, :column 7, :line 2827, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2827, :column 9, :line 2827, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2827, :column 11, :line 2827, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2828, :column 4, :line 2828, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2828, :column 5, :line 2828, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2828, :column 9, :line 2828, :file "cljs/core.cljs"} c ^{:end-column 12, :end-line 2828, :column 11, :line 2828, :file "cljs/core.cljs"} d ^{:end-column 14, :end-line 2828, :column 13, :line 2828, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2828, :column 15, :line 2828, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 12, :end-line 2821, :column 7, :line 2821, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq [^{:end-column 9, :end-line 2824, :column 5, :line 2824, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 6, :end-line 2825, :column 5, :line 2825, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2825, :column 7, :line 2825, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 6, :end-line 2826, :column 5, :line 2826, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2826, :column 7, :line 2826, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2826, :column 9, :line 2826, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 6, :end-line 2827, :column 5, :line 2827, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2827, :column 7, :line 2827, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2827, :column 9, :line 2827, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2827, :column 11, :line 2827, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 6, :end-line 2828, :column 5, :line 2828, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2828, :column 9, :line 2828, :file "cljs/core.cljs"} c ^{:end-column 12, :end-line 2828, :column 11, :line 2828, :file "cljs/core.cljs"} d & ^{:end-column 19, :end-line 2828, :column 15, :line 2828, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2824, :column 4, :line 2824, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2824, :column 5, :line 2824, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2825, :column 4, :line 2825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2825, :column 5, :line 2825, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2825, :column 7, :line 2825, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2826, :column 4, :line 2826, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2826, :column 5, :line 2826, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2826, :column 7, :line 2826, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2826, :column 9, :line 2826, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2827, :column 4, :line 2827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2827, :column 5, :line 2827, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2827, :column 7, :line 2827, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2827, :column 9, :line 2827, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2827, :column 11, :line 2827, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2828, :column 4, :line 2828, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2828, :column 5, :line 2828, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2828, :column 9, :line 2828, :file "cljs/core.cljs"} c ^{:end-column 12, :end-line 2828, :column 11, :line 2828, :file "cljs/core.cljs"} d ^{:end-column 14, :end-line 2828, :column 13, :line 2828, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2828, :column 15, :line 2828, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 12, :end-line 2821, :column 7, :line 2821, :file "cljs/core.cljs"} list*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 17, :end-line 2413, :column 10, :line 2413, :file "cljs/core.cljs"} ->Keyword ^{:arglists ([^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 17, :end-line 2413, :column 10, :line 2413, :file "cljs/core.cljs"} {:arglists (^cljs.core/Keyword [^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 17, :end-line 2413, :column 10, :line 2413, :file "cljs/core.cljs"} ->Keyword, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3975, :column 4, :line 3975, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3975, :column 5, :line 3975, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3975, :column 7, :line 3975, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3975, :column 8, :line 3975, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3975, :column 10, :line 3975, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3975, :column 12, :line 3975, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3975, :column 16, :line 3975, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3979, :column 4, :line 3979, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3979, :column 5, :line 3979, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3979, :column 7, :line 3979, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3979, :column 8, :line 3979, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3979, :column 10, :line 3979, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3979, :column 12, :line 3979, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3979, :column 16, :line 3979, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3979, :column 18, :line 3979, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3983, :column 4, :line 3983, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3983, :column 5, :line 3983, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3983, :column 7, :line 3983, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3983, :column 8, :line 3983, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3983, :column 10, :line 3983, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3983, :column 12, :line 3983, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3983, :column 16, :line 3983, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3983, :column 18, :line 3983, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3983, :column 20, :line 3983, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3987, :column 4, :line 3987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3987, :column 5, :line 3987, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3987, :column 7, :line 3987, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3987, :column 12, :line 3987, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3987, :column 16, :line 3987, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3987, :column 20, :line 3987, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3991, :column 4, :line 3991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3991, :column 5, :line 3991, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3991, :column 7, :line 3991, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3991, :column 8, :line 3991, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3991, :column 10, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3991, :column 12, :line 3991, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3991, :column 16, :line 3991, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3991, :column 18, :line 3991, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3991, :column 20, :line 3991, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3991, :column 22, :line 3991, :file "cljs/core.cljs"} c ^{:end-column 25, :end-line 3991, :column 24, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 3991, :column 26, :line 3991, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 16, :end-line 3969, :column 7, :line 3969, :file "cljs/core.cljs"} update-in ^{:arglists (^{:end-column 18, :end-line 3975, :column 4, :line 3975, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3975, :column 5, :line 3975, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3975, :column 7, :line 3975, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3975, :column 8, :line 3975, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3975, :column 10, :line 3975, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3975, :column 12, :line 3975, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3975, :column 16, :line 3975, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3979, :column 4, :line 3979, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3979, :column 5, :line 3979, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3979, :column 7, :line 3979, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3979, :column 8, :line 3979, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3979, :column 10, :line 3979, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3979, :column 12, :line 3979, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3979, :column 16, :line 3979, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3979, :column 18, :line 3979, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3983, :column 4, :line 3983, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3983, :column 5, :line 3983, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3983, :column 7, :line 3983, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3983, :column 8, :line 3983, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3983, :column 10, :line 3983, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3983, :column 12, :line 3983, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3983, :column 16, :line 3983, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3983, :column 18, :line 3983, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3983, :column 20, :line 3983, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3987, :column 4, :line 3987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3987, :column 5, :line 3987, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3987, :column 7, :line 3987, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3987, :column 12, :line 3987, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3987, :column 16, :line 3987, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3987, :column 20, :line 3987, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3991, :column 4, :line 3991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3991, :column 5, :line 3991, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3991, :column 7, :line 3991, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3991, :column 8, :line 3991, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3991, :column 10, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3991, :column 12, :line 3991, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3991, :column 16, :line 3991, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3991, :column 18, :line 3991, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3991, :column 20, :line 3991, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3991, :column 22, :line 3991, :file "cljs/core.cljs"} c ^{:end-column 25, :end-line 3991, :column 24, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 3991, :column 26, :line 3991, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 16, :end-line 3969, :column 7, :line 3969, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3975, :column 5, :line 3975, :file "cljs/core.cljs"} m p__8762 ^{:end-column 17, :end-line 3975, :column 16, :line 3975, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 3979, :column 5, :line 3979, :file "cljs/core.cljs"} m p__8765 ^{:end-column 17, :end-line 3979, :column 16, :line 3979, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3979, :column 18, :line 3979, :file "cljs/core.cljs"} a] [^{:end-column 6, :end-line 3983, :column 5, :line 3983, :file "cljs/core.cljs"} m p__8768 ^{:end-column 17, :end-line 3983, :column 16, :line 3983, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3983, :column 18, :line 3983, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3983, :column 20, :line 3983, :file "cljs/core.cljs"} b] [^{:end-column 6, :end-line 3987, :column 5, :line 3987, :file "cljs/core.cljs"} m p__8771 ^{:end-column 17, :end-line 3987, :column 16, :line 3987, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3987, :column 20, :line 3987, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} c] [^{:end-column 6, :end-line 3991, :column 5, :line 3991, :file "cljs/core.cljs"} m p__8774 ^{:end-column 17, :end-line 3991, :column 16, :line 3991, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3991, :column 18, :line 3991, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3991, :column 20, :line 3991, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3991, :column 22, :line 3991, :file "cljs/core.cljs"} c & ^{:end-column 30, :end-line 3991, :column 26, :line 3991, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3975, :column 4, :line 3975, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3975, :column 5, :line 3975, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3975, :column 7, :line 3975, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3975, :column 8, :line 3975, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3975, :column 10, :line 3975, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3975, :column 12, :line 3975, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3975, :column 16, :line 3975, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3979, :column 4, :line 3979, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3979, :column 5, :line 3979, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3979, :column 7, :line 3979, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3979, :column 8, :line 3979, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3979, :column 10, :line 3979, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3979, :column 12, :line 3979, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3979, :column 16, :line 3979, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3979, :column 18, :line 3979, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3983, :column 4, :line 3983, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3983, :column 5, :line 3983, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3983, :column 7, :line 3983, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3983, :column 8, :line 3983, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3983, :column 10, :line 3983, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3983, :column 12, :line 3983, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3983, :column 16, :line 3983, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3983, :column 18, :line 3983, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3983, :column 20, :line 3983, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3987, :column 4, :line 3987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3987, :column 5, :line 3987, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3987, :column 7, :line 3987, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3987, :column 12, :line 3987, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3987, :column 16, :line 3987, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3987, :column 20, :line 3987, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3991, :column 4, :line 3991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3991, :column 5, :line 3991, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3991, :column 7, :line 3991, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3991, :column 8, :line 3991, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3991, :column 10, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3991, :column 12, :line 3991, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3991, :column 16, :line 3991, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3991, :column 18, :line 3991, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3991, :column 20, :line 3991, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3991, :column 22, :line 3991, :file "cljs/core.cljs"} c ^{:end-column 25, :end-line 3991, :column 24, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 3991, :column 26, :line 3991, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 16, :end-line 3969, :column 7, :line 3969, :file "cljs/core.cljs"} update-in, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 8952, :column 3, :line 8952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8952, :column 4, :line 8952, :file "cljs/core.cljs"} multifn ^{:end-column 26, :end-line 8952, :column 12, :line 8952, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 41, :end-line 8952, :column 27, :line 8952, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 20, :end-line 8949, :column 7, :line 8949, :file "cljs/core.cljs"} prefer-method ^{:arglists (^{:end-column 42, :end-line 8952, :column 3, :line 8952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8952, :column 4, :line 8952, :file "cljs/core.cljs"} multifn ^{:end-column 26, :end-line 8952, :column 12, :line 8952, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 41, :end-line 8952, :column 27, :line 8952, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 20, :end-line 8949, :column 7, :line 8949, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8952, :column 4, :line 8952, :file "cljs/core.cljs"} multifn ^{:end-column 26, :end-line 8952, :column 12, :line 8952, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 41, :end-line 8952, :column 27, :line 8952, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8952, :column 3, :line 8952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8952, :column 4, :line 8952, :file "cljs/core.cljs"} multifn ^{:end-column 26, :end-line 8952, :column 12, :line 8952, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 41, :end-line 8952, :column 27, :line 8952, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 20, :end-line 8949, :column 7, :line 8949, :file "cljs/core.cljs"} prefer-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 559, :column 20, :line 559, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 559, :column 21, :line 559, :file "cljs/core.cljs"} sym]), :private true, :end-column 19, :end-line 559, :column 8, :line 559, :file "cljs/core.cljs"} hash-symbol ^{:arglists (^{:end-column 25, :end-line 559, :column 20, :line 559, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 559, :column 21, :line 559, :file "cljs/core.cljs"} sym]), :private true, :end-column 19, :end-line 559, :column 8, :line 559, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 559, :column 21, :line 559, :file "cljs/core.cljs"} sym]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 559, :column 20, :line 559, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 559, :column 21, :line 559, :file "cljs/core.cljs"} sym]), :private true, :end-column 19, :end-line 559, :column 8, :line 559, :file "cljs/core.cljs"} hash-symbol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 832, :column 3, :line 832, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 832, :column 4, :line 832, :file "cljs/core.cljs"} x]), :doc "If x is already reduced?, returns it, else returns (reduced x)", :end-column 21, :end-line 830, :column 7, :line 830, :file "cljs/core.cljs"} ensure-reduced ^{:arglists (^{:end-column 6, :end-line 832, :column 3, :line 832, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 832, :column 4, :line 832, :file "cljs/core.cljs"} x]), :doc "If x is already reduced?, returns it, else returns (reduced x)", :end-column 21, :end-line 830, :column 7, :line 830, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 832, :column 4, :line 832, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 832, :column 3, :line 832, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 832, :column 4, :line 832, :file "cljs/core.cljs"} x]), :doc "If x is already reduced?, returns it, else returns (reduced x)", :end-column 21, :end-line 830, :column 7, :line 830, :file "cljs/core.cljs"} ensure-reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 5482, :column 4, :line 5482, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5482, :column 5, :line 5482, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5482, :column 11, :line 5482, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5482, :column 16, :line 5482, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5482, :column 18, :line 5482, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5486, :column 4, :line 5486, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5486, :column 5, :line 5486, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5486, :column 11, :line 5486, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5486, :column 16, :line 5486, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5486, :column 18, :line 5486, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 5486, :column 20, :line 5486, :file "cljs/core.cljs"} j ^{:end-column 23, :end-line 5486, :column 22, :line 5486, :file "cljs/core.cljs"} b]), :private true, :end-column 20, :end-line 5481, :column 8, :line 5481, :file "cljs/core.cljs"} edit-and-set ^{:arglists (^{:end-column 20, :end-line 5482, :column 4, :line 5482, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5482, :column 5, :line 5482, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5482, :column 11, :line 5482, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5482, :column 16, :line 5482, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5482, :column 18, :line 5482, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5486, :column 4, :line 5486, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5486, :column 5, :line 5486, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5486, :column 11, :line 5486, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5486, :column 16, :line 5486, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5486, :column 18, :line 5486, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 5486, :column 20, :line 5486, :file "cljs/core.cljs"} j ^{:end-column 23, :end-line 5486, :column 22, :line 5486, :file "cljs/core.cljs"} b]), :private true, :end-column 20, :end-line 5481, :column 8, :line 5481, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 5482, :column 5, :line 5482, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5482, :column 11, :line 5482, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5482, :column 16, :line 5482, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5482, :column 18, :line 5482, :file "cljs/core.cljs"} a] [^{:end-column 10, :end-line 5486, :column 5, :line 5486, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5486, :column 11, :line 5486, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5486, :column 16, :line 5486, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5486, :column 18, :line 5486, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 5486, :column 20, :line 5486, :file "cljs/core.cljs"} j ^{:end-column 23, :end-line 5486, :column 22, :line 5486, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 5482, :column 4, :line 5482, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5482, :column 5, :line 5482, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5482, :column 11, :line 5482, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5482, :column 16, :line 5482, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5482, :column 18, :line 5482, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5486, :column 4, :line 5486, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5486, :column 5, :line 5486, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5486, :column 11, :line 5486, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5486, :column 16, :line 5486, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5486, :column 18, :line 5486, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 5486, :column 20, :line 5486, :file "cljs/core.cljs"} j ^{:end-column 23, :end-line 5486, :column 22, :line 5486, :file "cljs/core.cljs"} b]), :private true, :end-column 20, :end-line 5481, :column 8, :line 5481, :file "cljs/core.cljs"} edit-and-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} ->PersistentArrayMap ^{:arglists ([^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} ->PersistentArrayMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 76, :column 10, :line 76, :file "cljs/core.cljs"} instance? ^{:arglists (^{:end-column 31, :end-line 553, :column 26, :line 553, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 553, :column 27, :line 553, :file "cljs/core.cljs"} t ^{:end-column 30, :end-line 553, :column 29, :line 553, :file "cljs/core.cljs"} o]), :tag ^{:end-column 15, :end-line 553, :column 8, :line 553, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 553, :column 16, :line 553, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 28, :end-line 553, :column 27, :line 553, :file "cljs/core.cljs"} t ^{:end-column 30, :end-line 553, :column 29, :line 553, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 553, :column 26, :line 553, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 553, :column 27, :line 553, :file "cljs/core.cljs"} t ^{:end-column 30, :end-line 553, :column 29, :line 553, :file "cljs/core.cljs"} o]), :tag ^{:end-column 15, :end-line 553, :column 8, :line 553, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 553, :column 16, :line 553, :file "cljs/core.cljs"} instance?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 747, :column 3, :line 747, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 747, :column 4, :line 747, :file "cljs/core.cljs"} hash-basis ^{:end-column 20, :end-line 747, :column 15, :line 747, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 741, :column 8, :line 741, :file "cljs/core.cljs"} number, :end-column 34, :end-line 741, :column 15, :line 741, :file "cljs/core.cljs"} mix-collection-hash ^{:arglists (^{:end-column 21, :end-line 747, :column 3, :line 747, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 747, :column 4, :line 747, :file "cljs/core.cljs"} hash-basis ^{:end-column 20, :end-line 747, :column 15, :line 747, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 741, :column 8, :line 741, :file "cljs/core.cljs"} number, :end-column 34, :end-line 741, :column 15, :line 741, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 14, :end-line 747, :column 4, :line 747, :file "cljs/core.cljs"} hash-basis ^{:end-column 20, :end-line 747, :column 15, :line 747, :file "cljs/core.cljs"} count]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 747, :column 3, :line 747, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 747, :column 4, :line 747, :file "cljs/core.cljs"} hash-basis ^{:end-column 20, :end-line 747, :column 15, :line 747, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 741, :column 8, :line 741, :file "cljs/core.cljs"} number, :end-column 34, :end-line 741, :column 15, :line 741, :file "cljs/core.cljs"} mix-collection-hash, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7916, :column 3, :line 7916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7916, :column 4, :line 7916, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7916, :column 7, :line 7916, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 14, :end-line 7911, :column 7, :line 7911, :file "cljs/core.cljs"} re-find ^{:arglists (^{:end-column 9, :end-line 7916, :column 3, :line 7916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7916, :column 4, :line 7916, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7916, :column 7, :line 7916, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 14, :end-line 7911, :column 7, :line 7911, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7916, :column 4, :line 7916, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7916, :column 7, :line 7916, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7916, :column 3, :line 7916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7916, :column 4, :line 7916, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7916, :column 7, :line 7916, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 14, :end-line 7911, :column 7, :line 7911, :file "cljs/core.cljs"} re-find, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8442, :column 3, :line 8442, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8442, :column 4, :line 8442, :file "cljs/core.cljs"} proc ^{:end-column 13, :end-line 8442, :column 9, :line 8442, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 11, :end-line 8439, :column 7, :line 8439, :file "cljs/core.cljs"} run! ^{:arglists (^{:end-column 14, :end-line 8442, :column 3, :line 8442, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8442, :column 4, :line 8442, :file "cljs/core.cljs"} proc ^{:end-column 13, :end-line 8442, :column 9, :line 8442, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 11, :end-line 8439, :column 7, :line 8439, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8442, :column 4, :line 8442, :file "cljs/core.cljs"} proc ^{:end-column 13, :end-line 8442, :column 9, :line 8442, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8442, :column 3, :line 8442, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8442, :column 4, :line 8442, :file "cljs/core.cljs"} proc ^{:end-column 13, :end-line 8442, :column 9, :line 8442, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 11, :end-line 8439, :column 7, :line 8439, :file "cljs/core.cljs"} run!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 17, :end-line 7982, :column 1, :line 7974, :file "cljs/core.cljs"} char-escapes ^{:private true, :end-column 17, :end-line 7982, :column 1, :line 7974, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 17, :end-line 7982, :column 1, :line 7974, :file "cljs/core.cljs"} char-escapes, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} ES6Iterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} ES6Iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 709, :column 22, :line 709, :file "cljs/core.cljs"} [^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:declared true, :end-column 17, :end-line 2170, :column 14, :line 2170, :file "cljs/core.cljs"} val ^{:arglists (^{:end-column 14, :end-line 7155, :column 3, :line 7155, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7155, :column 4, :line 7155, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 10, :end-line 7153, :column 7, :line 7153, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 7155, :column 4, :line 7155, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7155, :column 3, :line 7155, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7155, :column 4, :line 7155, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 10, :end-line 7153, :column 7, :line 7153, :file "cljs/core.cljs"} val, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1893, :column 4, :line 1893, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1893, :column 5, :line 1893, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1893, :column 7, :line 1893, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1894, :column 4, :line 1894, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1894, :column 5, :line 1894, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1894, :column 11, :line 1894, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1889, :column 8, :line 1889, :file "cljs/core.cljs"} number, :end-column 28, :end-line 1889, :column 15, :line 1889, :file "cljs/core.cljs"} unchecked-add ^{:arglists (^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1893, :column 4, :line 1893, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1893, :column 5, :line 1893, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1893, :column 7, :line 1893, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1894, :column 4, :line 1894, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1894, :column 5, :line 1894, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1894, :column 11, :line 1894, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1889, :column 8, :line 1889, :file "cljs/core.cljs"} number, :end-column 28, :end-line 1889, :column 15, :line 1889, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1893, :column 5, :line 1893, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1893, :column 7, :line 1893, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1894, :column 5, :line 1894, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1894, :column 11, :line 1894, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1893, :column 4, :line 1893, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1893, :column 5, :line 1893, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1893, :column 7, :line 1893, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1894, :column 4, :line 1894, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1894, :column 5, :line 1894, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1894, :column 11, :line 1894, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1889, :column 8, :line 1889, :file "cljs/core.cljs"} number, :end-column 28, :end-line 1889, :column 15, :line 1889, :file "cljs/core.cljs"} unchecked-add, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 15, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 15, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 15, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1628, :column 3, :line 1628, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 31, :end-line 1625, :column 17, :line 1625, :file "cljs/core.cljs"} fn->comparator ^{:arglists (^{:end-column 6, :end-line 1628, :column 3, :line 1628, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 31, :end-line 1625, :column 17, :line 1625, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1628, :column 3, :line 1628, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 31, :end-line 1625, :column 17, :line 1625, :file "cljs/core.cljs"} fn->comparator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 797, :column 10, :line 797, :file "cljs/core.cljs"} with-meta ^{:arglists (^{:end-column 11, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} o ^{:end-column 10, :end-line 1378, :column 6, :line 1378, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 16, :end-line 1375, :column 7, :line 1375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} o ^{:end-column 10, :end-line 1378, :column 6, :line 1378, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} o ^{:end-column 10, :end-line 1378, :column 6, :line 1378, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 16, :end-line 1375, :column 7, :line 1375, :file "cljs/core.cljs"} with-meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 837, :column 3, :line 837, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 837, :column 4, :line 837, :file "cljs/core.cljs"} x]), :doc "If x is reduced?, returns (deref x), else returns x", :end-column 16, :end-line 835, :column 7, :line 835, :file "cljs/core.cljs"} unreduced ^{:arglists (^{:end-column 6, :end-line 837, :column 3, :line 837, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 837, :column 4, :line 837, :file "cljs/core.cljs"} x]), :doc "If x is reduced?, returns (deref x), else returns x", :end-column 16, :end-line 835, :column 7, :line 835, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 837, :column 4, :line 837, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 837, :column 3, :line 837, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 837, :column 4, :line 837, :file "cljs/core.cljs"} x]), :doc "If x is reduced?, returns (deref x), else returns x", :end-column 16, :end-line 835, :column 7, :line 835, :file "cljs/core.cljs"} unreduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 15, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical? ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 15, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 15, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace ^{:arglists (^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1912, :column 4, :line 1912, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1912, :column 5, :line 1912, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1913, :column 4, :line 1913, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1913, :column 5, :line 1913, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1914, :column 4, :line 1914, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1914, :column 5, :line 1914, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1914, :column 9, :line 1914, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1914, :column 11, :line 1914, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1909, :column 8, :line 1909, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1909, :column 15, :line 1909, :file "cljs/core.cljs"} unchecked-divide-int ^{:arglists (^{:end-column 7, :end-line 1912, :column 4, :line 1912, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1912, :column 5, :line 1912, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1913, :column 4, :line 1913, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1913, :column 5, :line 1913, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1914, :column 4, :line 1914, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1914, :column 5, :line 1914, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1914, :column 9, :line 1914, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1914, :column 11, :line 1914, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1909, :column 8, :line 1909, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1909, :column 15, :line 1909, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1912, :column 5, :line 1912, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1913, :column 5, :line 1913, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1914, :column 5, :line 1914, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1914, :column 11, :line 1914, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1912, :column 4, :line 1912, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1912, :column 5, :line 1912, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1913, :column 4, :line 1913, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1913, :column 5, :line 1913, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1914, :column 4, :line 1914, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1914, :column 5, :line 1914, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1914, :column 9, :line 1914, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1914, :column 11, :line 1914, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1909, :column 8, :line 1909, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1909, :column 15, :line 1909, :file "cljs/core.cljs"} unchecked-divide-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 8587, :column 31, :line 8587, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8587, :column 32, :line 8587, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 8587, :column 34, :line 8587, :file "cljs/core.cljs"} & ^{:end-column 40, :end-line 8587, :column 36, :line 8587, :file "cljs/core.cljs"} args]), :private true, :end-column 30, :end-line 8587, :column 8, :line 8587, :file "cljs/core.cljs"} swap-global-hierarchy! ^{:arglists (^{:end-column 41, :end-line 8587, :column 31, :line 8587, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8587, :column 32, :line 8587, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 8587, :column 34, :line 8587, :file "cljs/core.cljs"} & ^{:end-column 40, :end-line 8587, :column 36, :line 8587, :file "cljs/core.cljs"} args]), :private true, :end-column 30, :end-line 8587, :column 8, :line 8587, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 8587, :column 32, :line 8587, :file "cljs/core.cljs"} f & ^{:end-column 40, :end-line 8587, :column 36, :line 8587, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 8587, :column 31, :line 8587, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8587, :column 32, :line 8587, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 8587, :column 34, :line 8587, :file "cljs/core.cljs"} & ^{:end-column 40, :end-line 8587, :column 36, :line 8587, :file "cljs/core.cljs"} args]), :private true, :end-column 30, :end-line 8587, :column 8, :line 8587, :file "cljs/core.cljs"} swap-global-hierarchy!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7524, :column 4, :line 7524, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7524, :column 5, :line 7524, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7525, :column 4, :line 7525, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7525, :column 5, :line 7525, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7525, :column 7, :line 7525, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7525, :column 9, :line 7525, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7526, :column 5, :line 7526, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7526, :column 7, :line 7526, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7526, :column 11, :line 7526, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7526, :column 13, :line 7526, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 14, :end-line 7522, :column 7, :line 7522, :file "cljs/core.cljs"} max-key ^{:arglists (^{:end-column 9, :end-line 7524, :column 4, :line 7524, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7524, :column 5, :line 7524, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7525, :column 4, :line 7525, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7525, :column 5, :line 7525, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7525, :column 7, :line 7525, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7525, :column 9, :line 7525, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7526, :column 5, :line 7526, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7526, :column 7, :line 7526, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7526, :column 11, :line 7526, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7526, :column 13, :line 7526, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 14, :end-line 7522, :column 7, :line 7522, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7524, :column 5, :line 7524, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 7525, :column 5, :line 7525, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7525, :column 7, :line 7525, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7525, :column 9, :line 7525, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 7526, :column 5, :line 7526, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7526, :column 7, :line 7526, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} y & ^{:end-column 17, :end-line 7526, :column 13, :line 7526, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7524, :column 4, :line 7524, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7524, :column 5, :line 7524, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7525, :column 4, :line 7525, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7525, :column 5, :line 7525, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7525, :column 7, :line 7525, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7525, :column 9, :line 7525, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7526, :column 5, :line 7526, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7526, :column 7, :line 7526, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7526, :column 11, :line 7526, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7526, :column 13, :line 7526, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 14, :end-line 7522, :column 7, :line 7522, :file "cljs/core.cljs"} max-key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} ->PersistentTreeSet ^{:arglists ([^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeSet [^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} ->PersistentTreeSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} ->ChunkBuffer ^{:arglists ([^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} ->ChunkBuffer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 514, :column 19, :line 514, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 514, :column 20, :line 514, :file "cljs/core.cljs"} k]), :end-column 18, :end-line 514, :column 7, :line 514, :file "cljs/core.cljs"} hash-string ^{:arglists (^{:end-column 22, :end-line 514, :column 19, :line 514, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 514, :column 20, :line 514, :file "cljs/core.cljs"} k]), :end-column 18, :end-line 514, :column 7, :line 514, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 514, :column 20, :line 514, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 514, :column 19, :line 514, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 514, :column 20, :line 514, :file "cljs/core.cljs"} k]), :end-column 18, :end-line 514, :column 7, :line 514, :file "cljs/core.cljs"} hash-string, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} ValSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} ValSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 7090, :column 17, :line 7090, :file "cljs/core.cljs"} [^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers ^{:arglists (^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3486, :column 3, :line 3486, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3486, :column 4, :line 3486, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 3486, :column 9, :line 3486, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 21, :end-line 3479, :column 7, :line 3479, :file "cljs/core.cljs"} set-validator! ^{:arglists (^{:end-column 13, :end-line 3486, :column 3, :line 3486, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3486, :column 4, :line 3486, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 3486, :column 9, :line 3486, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 21, :end-line 3479, :column 7, :line 3479, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3486, :column 4, :line 3486, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 3486, :column 9, :line 3486, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3486, :column 3, :line 3486, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3486, :column 4, :line 3486, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 3486, :column 9, :line 3486, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 21, :end-line 3479, :column 7, :line 3479, :file "cljs/core.cljs"} set-validator!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 5081, :column 34, :line 5081, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5081, :column 35, :line 5081, :file "cljs/core.cljs"} arr ^{:end-column 40, :end-line 5081, :column 39, :line 5081, :file "cljs/core.cljs"} m ^{:end-column 42, :end-line 5081, :column 41, :line 5081, :file "cljs/core.cljs"} k]), :private true, :end-column 33, :end-line 5081, :column 8, :line 5081, :file "cljs/core.cljs"} array-map-index-of-equiv? ^{:arglists (^{:end-column 43, :end-line 5081, :column 34, :line 5081, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5081, :column 35, :line 5081, :file "cljs/core.cljs"} arr ^{:end-column 40, :end-line 5081, :column 39, :line 5081, :file "cljs/core.cljs"} m ^{:end-column 42, :end-line 5081, :column 41, :line 5081, :file "cljs/core.cljs"} k]), :private true, :end-column 33, :end-line 5081, :column 8, :line 5081, :file "cljs/core.cljs"} {:arglists ([^{:end-column 38, :end-line 5081, :column 35, :line 5081, :file "cljs/core.cljs"} arr ^{:end-column 40, :end-line 5081, :column 39, :line 5081, :file "cljs/core.cljs"} m ^{:end-column 42, :end-line 5081, :column 41, :line 5081, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5081, :column 34, :line 5081, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5081, :column 35, :line 5081, :file "cljs/core.cljs"} arr ^{:end-column 40, :end-line 5081, :column 39, :line 5081, :file "cljs/core.cljs"} m ^{:end-column 42, :end-line 5081, :column 41, :line 5081, :file "cljs/core.cljs"} k]), :private true, :end-column 33, :end-line 5081, :column 8, :line 5081, :file "cljs/core.cljs"} array-map-index-of-equiv?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta ^{:arglists (^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 6368, :column 10, :line 6368, :file "cljs/core.cljs"} RedNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 6575, :column 10, :line 6575, :file "cljs/core.cljs"} RedNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 6575, :column 18, :line 6575, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists ([^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} ->IndexedSeqIterator ^{:arglists ([^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} {:arglists (^cljs.core/IndexedSeqIterator [^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} ->IndexedSeqIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method ^{:arglists (^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 6417, :column 25, :line 6417, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6417, :column 26, :line 6417, :file "cljs/core.cljs"} key ^{:end-column 33, :end-line 6417, :column 30, :line 6417, :file "cljs/core.cljs"} val ^{:end-column 37, :end-line 6417, :column 34, :line 6417, :file "cljs/core.cljs"} del ^{:end-column 43, :end-line 6417, :column 38, :line 6417, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6417, :column 8, :line 6417, :file "cljs/core.cljs"} balance-left-del ^{:arglists (^{:end-column 44, :end-line 6417, :column 25, :line 6417, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6417, :column 26, :line 6417, :file "cljs/core.cljs"} key ^{:end-column 33, :end-line 6417, :column 30, :line 6417, :file "cljs/core.cljs"} val ^{:end-column 37, :end-line 6417, :column 34, :line 6417, :file "cljs/core.cljs"} del ^{:end-column 43, :end-line 6417, :column 38, :line 6417, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6417, :column 8, :line 6417, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 6417, :column 26, :line 6417, :file "cljs/core.cljs"} key ^{:end-column 33, :end-line 6417, :column 30, :line 6417, :file "cljs/core.cljs"} val ^{:end-column 37, :end-line 6417, :column 34, :line 6417, :file "cljs/core.cljs"} del ^{:end-column 43, :end-line 6417, :column 38, :line 6417, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6417, :column 25, :line 6417, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6417, :column 26, :line 6417, :file "cljs/core.cljs"} key ^{:end-column 33, :end-line 6417, :column 30, :line 6417, :file "cljs/core.cljs"} val ^{:end-column 37, :end-line 6417, :column 34, :line 6417, :file "cljs/core.cljs"} del ^{:end-column 43, :end-line 6417, :column 38, :line 6417, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6417, :column 8, :line 6417, :file "cljs/core.cljs"} balance-left-del, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3453, :column 4, :line 3453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3453, :column 5, :line 3453, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3453, :column 7, :line 3453, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3457, :column 4, :line 3457, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3457, :column 5, :line 3457, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3457, :column 7, :line 3457, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3457, :column 9, :line 3457, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3461, :column 4, :line 3461, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3461, :column 5, :line 3461, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3461, :column 7, :line 3461, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3461, :column 9, :line 3461, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3461, :column 11, :line 3461, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3465, :column 4, :line 3465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3465, :column 5, :line 3465, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3465, :column 7, :line 3465, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3465, :column 9, :line 3465, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3465, :column 11, :line 3465, :file "cljs/core.cljs"} y ^{:end-column 14, :end-line 3465, :column 13, :line 3465, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3465, :column 15, :line 3465, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 12, :end-line 3448, :column 7, :line 3448, :file "cljs/core.cljs"} swap! ^{:arglists (^{:end-column 9, :end-line 3453, :column 4, :line 3453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3453, :column 5, :line 3453, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3453, :column 7, :line 3453, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3457, :column 4, :line 3457, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3457, :column 5, :line 3457, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3457, :column 7, :line 3457, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3457, :column 9, :line 3457, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3461, :column 4, :line 3461, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3461, :column 5, :line 3461, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3461, :column 7, :line 3461, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3461, :column 9, :line 3461, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3461, :column 11, :line 3461, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3465, :column 4, :line 3465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3465, :column 5, :line 3465, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3465, :column 7, :line 3465, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3465, :column 9, :line 3465, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3465, :column 11, :line 3465, :file "cljs/core.cljs"} y ^{:end-column 14, :end-line 3465, :column 13, :line 3465, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3465, :column 15, :line 3465, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 12, :end-line 3448, :column 7, :line 3448, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3453, :column 5, :line 3453, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3453, :column 7, :line 3453, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 3457, :column 5, :line 3457, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3457, :column 7, :line 3457, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3457, :column 9, :line 3457, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 3461, :column 5, :line 3461, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3461, :column 7, :line 3461, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3461, :column 9, :line 3461, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3461, :column 11, :line 3461, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 3465, :column 5, :line 3465, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3465, :column 7, :line 3465, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3465, :column 9, :line 3465, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3465, :column 11, :line 3465, :file "cljs/core.cljs"} y & ^{:end-column 19, :end-line 3465, :column 15, :line 3465, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3453, :column 4, :line 3453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3453, :column 5, :line 3453, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3453, :column 7, :line 3453, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3457, :column 4, :line 3457, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3457, :column 5, :line 3457, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3457, :column 7, :line 3457, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3457, :column 9, :line 3457, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3461, :column 4, :line 3461, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3461, :column 5, :line 3461, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3461, :column 7, :line 3461, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3461, :column 9, :line 3461, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3461, :column 11, :line 3461, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3465, :column 4, :line 3465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3465, :column 5, :line 3465, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3465, :column 7, :line 3465, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3465, :column 9, :line 3465, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3465, :column 11, :line 3465, :file "cljs/core.cljs"} y ^{:end-column 14, :end-line 3465, :column 13, :line 3465, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3465, :column 15, :line 3465, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 12, :end-line 3448, :column 7, :line 3448, :file "cljs/core.cljs"} swap!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 5177, :column 15, :line 5177, :file "cljs/core.cljs"} vals ^{:arglists (^{:end-column 13, :end-line 7149, :column 3, :line 7149, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7149, :column 4, :line 7149, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 11, :end-line 7147, :column 7, :line 7147, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7149, :column 4, :line 7149, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7149, :column 3, :line 7149, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7149, :column 4, :line 7149, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 11, :end-line 7147, :column 7, :line 7147, :file "cljs/core.cljs"} vals, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next ^{:arglists (^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1950, :column 4, :line 1950, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1950, :column 5, :line 1950, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1951, :column 4, :line 1951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1951, :column 5, :line 1951, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1951, :column 7, :line 1951, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 5, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 7, :line 1952, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1952, :column 9, :line 1952, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1952, :column 11, :line 1952, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1947, :column 8, :line 1947, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1947, :column 15, :line 1947, :file "cljs/core.cljs"} unchecked-subtract ^{:arglists (^{:end-column 7, :end-line 1950, :column 4, :line 1950, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1950, :column 5, :line 1950, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1951, :column 4, :line 1951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1951, :column 5, :line 1951, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1951, :column 7, :line 1951, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 5, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 7, :line 1952, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1952, :column 9, :line 1952, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1952, :column 11, :line 1952, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1947, :column 8, :line 1947, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1947, :column 15, :line 1947, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1950, :column 5, :line 1950, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1951, :column 5, :line 1951, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1951, :column 7, :line 1951, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1952, :column 5, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 7, :line 1952, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1952, :column 11, :line 1952, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1950, :column 4, :line 1950, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1950, :column 5, :line 1950, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1951, :column 4, :line 1951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1951, :column 5, :line 1951, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1951, :column 7, :line 1951, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 5, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 7, :line 1952, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1952, :column 9, :line 1952, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1952, :column 11, :line 1952, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1947, :column 8, :line 1947, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1947, :column 15, :line 1947, :file "cljs/core.cljs"} unchecked-subtract, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5469, :column 20, :line 5469, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5469, :column 21, :line 5469, :file "cljs/core.cljs"} arr ^{:end-column 26, :end-line 5469, :column 25, :line 5469, :file "cljs/core.cljs"} i]), :private true, :end-column 19, :end-line 5469, :column 8, :line 5469, :file "cljs/core.cljs"} remove-pair ^{:arglists (^{:end-column 27, :end-line 5469, :column 20, :line 5469, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5469, :column 21, :line 5469, :file "cljs/core.cljs"} arr ^{:end-column 26, :end-line 5469, :column 25, :line 5469, :file "cljs/core.cljs"} i]), :private true, :end-column 19, :end-line 5469, :column 8, :line 5469, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 24, :end-line 5469, :column 21, :line 5469, :file "cljs/core.cljs"} arr ^{:end-column 26, :end-line 5469, :column 25, :line 5469, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5469, :column 20, :line 5469, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5469, :column 21, :line 5469, :file "cljs/core.cljs"} arr ^{:end-column 26, :end-line 5469, :column 25, :line 5469, :file "cljs/core.cljs"} i]), :private true, :end-column 19, :end-line 5469, :column 8, :line 5469, :file "cljs/core.cljs"} remove-pair, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 18, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} IMap ^{:impls (cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 18, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 18, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} IMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} ->SeqIter ^{:arglists ([^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} ->SeqIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7459, :column 4, :line 7459, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7459, :column 5, :line 7459, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7459, :column 16, :line 7459, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 7459, :column 18, :line 7459, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 20, :end-line 7457, :column 7, :line 7457, :file "cljs/core.cljs"} sorted-set-by ^{:arglists (^{:end-column 23, :end-line 7459, :column 4, :line 7459, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7459, :column 5, :line 7459, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7459, :column 16, :line 7459, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 7459, :column 18, :line 7459, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 20, :end-line 7457, :column 7, :line 7457, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 7459, :column 5, :line 7459, :file "cljs/core.cljs"} comparator & ^{:end-column 22, :end-line 7459, :column 18, :line 7459, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7459, :column 4, :line 7459, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7459, :column 5, :line 7459, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7459, :column 16, :line 7459, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 7459, :column 18, :line 7459, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 20, :end-line 7457, :column 7, :line 7457, :file "cljs/core.cljs"} sorted-set-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} PersistentVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} PersistentVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 70, :end-line 4133, :column 27, :line 4133, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 631, :column 18, :line 631, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 631, :column 19, :line 631, :file "cljs/core.cljs"} value]), :end-column 17, :end-line 631, :column 7, :line 631, :file "cljs/core.cljs"} cloneable? ^{:arglists (^{:end-column 25, :end-line 631, :column 18, :line 631, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 631, :column 19, :line 631, :file "cljs/core.cljs"} value]), :end-column 17, :end-line 631, :column 7, :line 631, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 24, :end-line 631, :column 19, :line 631, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 631, :column 18, :line 631, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 631, :column 19, :line 631, :file "cljs/core.cljs"} value]), :end-column 17, :end-line 631, :column 7, :line 631, :file "cljs/core.cljs"} cloneable?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 497, :column 20, :line 497, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 497, :column 21, :line 497, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} hash-string* ^{:arglists (^{:end-column 23, :end-line 497, :column 20, :line 497, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 497, :column 21, :line 497, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 22, :end-line 497, :column 21, :line 497, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 497, :column 20, :line 497, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 497, :column 21, :line 497, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} hash-string*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5451, :column 25, :line 5451, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5451, :column 26, :line 5451, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5451, :column 30, :line 5451, :file "cljs/core.cljs"} other]), :tag ^{:end-column 15, :end-line 5451, :column 8, :line 5451, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 5451, :column 16, :line 5451, :file "cljs/core.cljs"} key-test ^{:arglists (^{:end-column 36, :end-line 5451, :column 25, :line 5451, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5451, :column 26, :line 5451, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5451, :column 30, :line 5451, :file "cljs/core.cljs"} other]), :tag ^{:end-column 15, :end-line 5451, :column 8, :line 5451, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 5451, :column 16, :line 5451, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 5451, :column 26, :line 5451, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5451, :column 30, :line 5451, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5451, :column 25, :line 5451, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5451, :column 26, :line 5451, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5451, :column 30, :line 5451, :file "cljs/core.cljs"} other]), :tag ^{:end-column 15, :end-line 5451, :column 8, :line 5451, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 5451, :column 16, :line 5451, :file "cljs/core.cljs"} key-test, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 3124, :column 10, :line 3124, :file "cljs/core.cljs"} ->LazyTransformer ^{:arglists ([^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 3124, :column 10, :line 3124, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 3124, :column 10, :line 3124, :file "cljs/core.cljs"} ->LazyTransformer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset ^{:arglists (^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1513, :column 3, :line 1513, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1513, :column 4, :line 1513, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1511, :column 16, :line 1511, :file "cljs/core.cljs"} true? ^{:arglists (^{:end-column 6, :end-line 1513, :column 3, :line 1513, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1513, :column 4, :line 1513, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1511, :column 16, :line 1511, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1513, :column 4, :line 1513, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1513, :column 3, :line 1513, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1513, :column 4, :line 1513, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1511, :column 16, :line 1511, :file "cljs/core.cljs"} true?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 174, :column 3, :line 174, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 13, :end-line 171, :column 8, :line 171, :file "cljs/core.cljs"} array, :end-column 19, :end-line 171, :column 14, :line 171, :file "cljs/core.cljs"} array ^{:arglists (^{:end-column 13, :end-line 174, :column 3, :line 174, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 13, :end-line 171, :column 8, :line 171, :file "cljs/core.cljs"} array, :end-column 19, :end-line 171, :column 14, :line 171, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} var-args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 174, :column 3, :line 174, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 13, :end-line 171, :column 8, :line 171, :file "cljs/core.cljs"} array, :end-column 19, :end-line 171, :column 14, :line 171, :file "cljs/core.cljs"} array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8128, :column 1, :line 8123, :file "cljs/core.cljs"} print ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8128, :column 1, :line 8123, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 30, :end-line 8127, :column 26, :line 8127, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8128, :column 1, :line 8123, :file "cljs/core.cljs"} print, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek ^{:arglists (^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 18, :end-line 262, :column 14, :line 262, :file "cljs/core.cljs"} ISeq ^{:impls (cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/ChunkedSeq cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq cljs.core/ES6IteratorSeq), :protocol-info {:methods {^{:end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 18, :end-line 262, :column 14, :line 262, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 18, :end-line 262, :column 14, :line 262, :file "cljs/core.cljs"} ISeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1123, :column 3, :line 1123, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1123, :column 4, :line 1123, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 12, :end-line 1121, :column 7, :line 1121, :file "cljs/core.cljs"} empty ^{:arglists (^{:end-column 9, :end-line 1123, :column 3, :line 1123, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1123, :column 4, :line 1123, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 12, :end-line 1121, :column 7, :line 1121, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1123, :column 4, :line 1123, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1123, :column 3, :line 1123, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1123, :column 4, :line 1123, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 12, :end-line 1121, :column 7, :line 1121, :file "cljs/core.cljs"} empty, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} t8410 {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} t8410, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields [meta8411], :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 24, :end-line 8946, :column 2, :line 8946, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8946, :column 3, :line 8946, :file "cljs/core.cljs"} multifn ^{:end-column 23, :end-line 8946, :column 11, :line 8946, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 20, :end-line 8944, :column 7, :line 8944, :file "cljs/core.cljs"} remove-method ^{:arglists (^{:end-column 24, :end-line 8946, :column 2, :line 8946, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8946, :column 3, :line 8946, :file "cljs/core.cljs"} multifn ^{:end-column 23, :end-line 8946, :column 11, :line 8946, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 20, :end-line 8944, :column 7, :line 8944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 8946, :column 3, :line 8946, :file "cljs/core.cljs"} multifn ^{:end-column 23, :end-line 8946, :column 11, :line 8946, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8946, :column 2, :line 8946, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8946, :column 3, :line 8946, :file "cljs/core.cljs"} multifn ^{:end-column 23, :end-line 8946, :column 11, :line 8946, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 20, :end-line 8944, :column 7, :line 8944, :file "cljs/core.cljs"} remove-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} PersistentQueueSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} PersistentQueueSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 63, :end-line 4738, :column 29, :line 4738, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 44, :end-line 6436, :column 26, :line 6436, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6436, :column 27, :line 6436, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6436, :column 31, :line 6436, :file "cljs/core.cljs"} val ^{:end-column 39, :end-line 6436, :column 35, :line 6436, :file "cljs/core.cljs"} left ^{:end-column 43, :end-line 6436, :column 40, :line 6436, :file "cljs/core.cljs"} del]), :private true, :end-column 25, :end-line 6436, :column 8, :line 6436, :file "cljs/core.cljs"} balance-right-del ^{:arglists (^{:end-column 44, :end-line 6436, :column 26, :line 6436, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6436, :column 27, :line 6436, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6436, :column 31, :line 6436, :file "cljs/core.cljs"} val ^{:end-column 39, :end-line 6436, :column 35, :line 6436, :file "cljs/core.cljs"} left ^{:end-column 43, :end-line 6436, :column 40, :line 6436, :file "cljs/core.cljs"} del]), :private true, :end-column 25, :end-line 6436, :column 8, :line 6436, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6436, :column 27, :line 6436, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6436, :column 31, :line 6436, :file "cljs/core.cljs"} val ^{:end-column 39, :end-line 6436, :column 35, :line 6436, :file "cljs/core.cljs"} left ^{:end-column 43, :end-line 6436, :column 40, :line 6436, :file "cljs/core.cljs"} del]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6436, :column 26, :line 6436, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6436, :column 27, :line 6436, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6436, :column 31, :line 6436, :file "cljs/core.cljs"} val ^{:end-column 39, :end-line 6436, :column 35, :line 6436, :file "cljs/core.cljs"} left ^{:end-column 43, :end-line 6436, :column 40, :line 6436, :file "cljs/core.cljs"} del]), :private true, :end-column 25, :end-line 6436, :column 8, :line 6436, :file "cljs/core.cljs"} balance-right-del, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1800, :column 7, :line 1800, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1801, :column 9, :line 1801, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1801, :column 11, :line 1801, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1796, :column 8, :line 1796, :file "cljs/core.cljs"} number} / ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1800, :column 7, :line 1800, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1801, :column 9, :line 1801, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1801, :column 11, :line 1801, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1796, :column 8, :line 1796, :file "cljs/core.cljs"} number} {:arglists (^number [^{:end-column 6, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1800, :column 7, :line 1800, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1801, :column 11, :line 1801, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1800, :column 7, :line 1800, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1801, :column 9, :line 1801, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1801, :column 11, :line 1801, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1796, :column 8, :line 1796, :file "cljs/core.cljs"} number} /, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5478, :column 15, :line 5478, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 5478, :column 16, :line 5478, :file "cljs/core.cljs"} hash ^{:end-column 26, :end-line 5478, :column 21, :line 5478, :file "cljs/core.cljs"} shift]), :private true, :end-column 14, :end-line 5478, :column 8, :line 5478, :file "cljs/core.cljs"} bitpos ^{:arglists (^{:end-column 27, :end-line 5478, :column 15, :line 5478, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 5478, :column 16, :line 5478, :file "cljs/core.cljs"} hash ^{:end-column 26, :end-line 5478, :column 21, :line 5478, :file "cljs/core.cljs"} shift]), :private true, :end-column 14, :end-line 5478, :column 8, :line 5478, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 20, :end-line 5478, :column 16, :line 5478, :file "cljs/core.cljs"} hash ^{:end-column 26, :end-line 5478, :column 21, :line 5478, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5478, :column 15, :line 5478, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 5478, :column 16, :line 5478, :file "cljs/core.cljs"} hash ^{:end-column 26, :end-line 5478, :column 21, :line 5478, :file "cljs/core.cljs"} shift]), :private true, :end-column 14, :end-line 5478, :column 8, :line 5478, :file "cljs/core.cljs"} bitpos, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2036, :column 3, :line 2036, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2036, :column 4, :line 2036, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2036, :column 6, :line 2036, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 13, :end-line 2034, :column 7, :line 2034, :file "cljs/core.cljs"} bit-or ^{:arglists (^{:end-column 8, :end-line 2036, :column 3, :line 2036, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2036, :column 4, :line 2036, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2036, :column 6, :line 2036, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 13, :end-line 2034, :column 7, :line 2034, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2036, :column 4, :line 2036, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2036, :column 6, :line 2036, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2036, :column 3, :line 2036, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2036, :column 4, :line 2036, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2036, :column 6, :line 2036, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 13, :end-line 2034, :column 7, :line 2034, :file "cljs/core.cljs"} bit-or, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 458, :column 23, :line 458, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 458, :column 24, :line 458, :file "cljs/core.cljs"} h1 ^{:end-column 30, :end-line 458, :column 27, :line 458, :file "cljs/core.cljs"} len]), :tag ^{:end-column 14, :end-line 458, :column 8, :line 458, :file "cljs/core.cljs"} number, :end-column 22, :end-line 458, :column 15, :line 458, :file "cljs/core.cljs"} m3-fmix ^{:arglists (^{:end-column 31, :end-line 458, :column 23, :line 458, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 458, :column 24, :line 458, :file "cljs/core.cljs"} h1 ^{:end-column 30, :end-line 458, :column 27, :line 458, :file "cljs/core.cljs"} len]), :tag ^{:end-column 14, :end-line 458, :column 8, :line 458, :file "cljs/core.cljs"} number, :end-column 22, :end-line 458, :column 15, :line 458, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 458, :column 24, :line 458, :file "cljs/core.cljs"} h1 ^{:end-column 30, :end-line 458, :column 27, :line 458, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 458, :column 23, :line 458, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 458, :column 24, :line 458, :file "cljs/core.cljs"} h1 ^{:end-column 30, :end-line 458, :column 27, :line 458, :file "cljs/core.cljs"} len]), :tag ^{:end-column 14, :end-line 458, :column 8, :line 458, :file "cljs/core.cljs"} number, :end-column 22, :end-line 458, :column 15, :line 458, :file "cljs/core.cljs"} m3-fmix, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 4341, :column 14, :line 4341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4341, :column 15, :line 4341, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 4341, :column 17, :line 4341, :file "cljs/core.cljs"} args]), :end-column 13, :end-line 4341, :column 7, :line 4341, :file "cljs/core.cljs"} vector ^{:arglists (^{:end-column 22, :end-line 4341, :column 14, :line 4341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4341, :column 15, :line 4341, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 4341, :column 17, :line 4341, :file "cljs/core.cljs"} args]), :end-column 13, :end-line 4341, :column 7, :line 4341, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 21, :end-line 4341, :column 17, :line 4341, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 4341, :column 14, :line 4341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4341, :column 15, :line 4341, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 4341, :column 17, :line 4341, :file "cljs/core.cljs"} args]), :end-column 13, :end-line 4341, :column 7, :line 4341, :file "cljs/core.cljs"} vector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 910, :column 10, :line 910, :file "cljs/core.cljs"} hash-coll ^{:arglists (^{:end-column 24, :end-line 2162, :column 18, :line 2162, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2162, :column 19, :line 2162, :file "cljs/core.cljs"} coll]), :private true, :end-column 17, :end-line 2162, :column 8, :line 2162, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 2162, :column 19, :line 2162, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 2162, :column 18, :line 2162, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2162, :column 19, :line 2162, :file "cljs/core.cljs"} coll]), :private true, :end-column 17, :end-line 2162, :column 8, :line 2162, :file "cljs/core.cljs"} hash-coll, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 5461, :column 4, :line 5461, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5461, :column 5, :line 5461, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5461, :column 9, :line 5461, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5461, :column 11, :line 5461, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5464, :column 4, :line 5464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5464, :column 5, :line 5464, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5464, :column 9, :line 5464, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5464, :column 11, :line 5464, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 5464, :column 13, :line 5464, :file "cljs/core.cljs"} j ^{:end-column 16, :end-line 5464, :column 15, :line 5464, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5460, :column 8, :line 5460, :file "cljs/core.cljs"} clone-and-set ^{:arglists (^{:end-column 13, :end-line 5461, :column 4, :line 5461, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5461, :column 5, :line 5461, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5461, :column 9, :line 5461, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5461, :column 11, :line 5461, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5464, :column 4, :line 5464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5464, :column 5, :line 5464, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5464, :column 9, :line 5464, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5464, :column 11, :line 5464, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 5464, :column 13, :line 5464, :file "cljs/core.cljs"} j ^{:end-column 16, :end-line 5464, :column 15, :line 5464, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5460, :column 8, :line 5460, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 5461, :column 5, :line 5461, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5461, :column 9, :line 5461, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5461, :column 11, :line 5461, :file "cljs/core.cljs"} a] ^array [^{:end-column 8, :end-line 5464, :column 5, :line 5464, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5464, :column 9, :line 5464, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5464, :column 11, :line 5464, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 5464, :column 13, :line 5464, :file "cljs/core.cljs"} j ^{:end-column 16, :end-line 5464, :column 15, :line 5464, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 5461, :column 4, :line 5461, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5461, :column 5, :line 5461, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5461, :column 9, :line 5461, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5461, :column 11, :line 5461, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5464, :column 4, :line 5464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5464, :column 5, :line 5464, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5464, :column 9, :line 5464, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5464, :column 11, :line 5464, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 5464, :column 13, :line 5464, :file "cljs/core.cljs"} j ^{:end-column 16, :end-line 5464, :column 15, :line 5464, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5460, :column 8, :line 5460, :file "cljs/core.cljs"} clone-and-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 35, :end-line 5366, :column 10, :line 5366, :file "cljs/core.cljs"} array->transient-hash-map ^{:arglists (^{:end-column 43, :end-line 5438, :column 34, :line 5438, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5438, :column 35, :line 5438, :file "cljs/core.cljs"} len ^{:end-column 42, :end-line 5438, :column 39, :line 5438, :file "cljs/core.cljs"} arr]), :private true, :end-column 33, :end-line 5438, :column 8, :line 5438, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj [^{:end-column 38, :end-line 5438, :column 35, :line 5438, :file "cljs/core.cljs"} len ^{:end-column 42, :end-line 5438, :column 39, :line 5438, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5438, :column 34, :line 5438, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5438, :column 35, :line 5438, :file "cljs/core.cljs"} len ^{:end-column 42, :end-line 5438, :column 39, :line 5438, :file "cljs/core.cljs"} arr]), :private true, :end-column 33, :end-line 5438, :column 8, :line 5438, :file "cljs/core.cljs"} array->transient-hash-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1843, :column 4, :line 1843, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1843, :column 5, :line 1843, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1843, :column 7, :line 1843, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1844, :column 4, :line 1844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1844, :column 5, :line 1844, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1844, :column 9, :line 1844, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1844, :column 11, :line 1844, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1839, :column 8, :line 1839, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1839, :column 16, :line 1839, :file "cljs/core.cljs"} >= ^{:arglists (^{:end-column 7, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1843, :column 4, :line 1843, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1843, :column 5, :line 1843, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1843, :column 7, :line 1843, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1844, :column 4, :line 1844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1844, :column 5, :line 1844, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1844, :column 9, :line 1844, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1844, :column 11, :line 1844, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1839, :column 8, :line 1839, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1839, :column 16, :line 1839, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1843, :column 5, :line 1843, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1843, :column 7, :line 1843, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1844, :column 5, :line 1844, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1844, :column 11, :line 1844, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1843, :column 4, :line 1843, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1843, :column 5, :line 1843, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1843, :column 7, :line 1843, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1844, :column 4, :line 1844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1844, :column 5, :line 1844, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1844, :column 9, :line 1844, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1844, :column 11, :line 1844, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1839, :column 8, :line 1839, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1839, :column 16, :line 1839, :file "cljs/core.cljs"} >=, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 26, :end-line 7295, :column 10, :line 7295, :file "cljs/core.cljs"} ->TransientHashSet ^{:arglists ([^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 26, :end-line 7295, :column 10, :line 7295, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientHashSet [^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 26, :end-line 7295, :column 10, :line 7295, :file "cljs/core.cljs"} ->TransientHashSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3705, :column 4, :line 3705, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3705, :column 5, :line 3705, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3706, :column 4, :line 3706, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3706, :column 5, :line 3706, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3706, :column 7, :line 3706, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 16, :end-line 3703, :column 7, :line 3703, :file "cljs/core.cljs"} drop-last ^{:arglists (^{:end-column 7, :end-line 3705, :column 4, :line 3705, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3705, :column 5, :line 3705, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3706, :column 4, :line 3706, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3706, :column 5, :line 3706, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3706, :column 7, :line 3706, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 16, :end-line 3703, :column 7, :line 3703, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3705, :column 5, :line 3705, :file "cljs/core.cljs"} s] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3706, :column 5, :line 3706, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3706, :column 7, :line 3706, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3705, :column 4, :line 3705, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3705, :column 5, :line 3705, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3706, :column 4, :line 3706, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3706, :column 5, :line 3706, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3706, :column 7, :line 3706, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 16, :end-line 3703, :column 7, :line 3703, :file "cljs/core.cljs"} drop-last, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} ->ArrayIter ^{:arglists ([^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} ->ArrayIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object? ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} ->ArrayNodeSeq ^{:arglists ([^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayNodeSeq [^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} ->ArrayNodeSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 6737, :column 24, :line 6737, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6737, :column 25, :line 6737, :file "cljs/core.cljs"} left ^{:end-column 35, :end-line 6737, :column 30, :line 6737, :file "cljs/core.cljs"} right]), :private true, :end-column 23, :end-line 6737, :column 8, :line 6737, :file "cljs/core.cljs"} tree-map-append ^{:arglists (^{:end-column 36, :end-line 6737, :column 24, :line 6737, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6737, :column 25, :line 6737, :file "cljs/core.cljs"} left ^{:end-column 35, :end-line 6737, :column 30, :line 6737, :file "cljs/core.cljs"} right]), :private true, :end-column 23, :end-line 6737, :column 8, :line 6737, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 6737, :column 25, :line 6737, :file "cljs/core.cljs"} left ^{:end-column 35, :end-line 6737, :column 30, :line 6737, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 6737, :column 24, :line 6737, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6737, :column 25, :line 6737, :file "cljs/core.cljs"} left ^{:end-column 35, :end-line 6737, :column 30, :line 6737, :file "cljs/core.cljs"} right]), :private true, :end-column 23, :end-line 6737, :column 8, :line 6737, :file "cljs/core.cljs"} tree-map-append, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2979, :column 3, :line 2979, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 16, :end-line 2977, :column 7, :line 2977, :file "cljs/core.cljs"} not-empty ^{:arglists (^{:end-column 9, :end-line 2979, :column 3, :line 2979, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 16, :end-line 2977, :column 7, :line 2977, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2979, :column 3, :line 2979, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 16, :end-line 2977, :column 7, :line 2977, :file "cljs/core.cljs"} not-empty, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7483, :column 3, :line 7483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 15, :end-line 7481, :column 7, :line 7481, :file "cljs/core.cljs"} distinct ^{:arglists (^{:end-column 9, :end-line 7483, :column 3, :line 7483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 15, :end-line 7481, :column 7, :line 7481, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7483, :column 3, :line 7483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 15, :end-line 7481, :column 7, :line 7481, :file "cljs/core.cljs"} distinct, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3923, :column 4, :line 3923, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3923, :column 5, :line 3923, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3923, :column 7, :line 3923, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3925, :column 4, :line 3925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3925, :column 5, :line 3925, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3925, :column 7, :line 3925, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3925, :column 12, :line 3925, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3931, :column 4, :line 3931, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3931, :column 5, :line 3931, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3931, :column 7, :line 3931, :file "cljs/core.cljs"} step ^{:end-column 15, :end-line 3931, :column 12, :line 3931, :file "cljs/core.cljs"} pad ^{:end-column 20, :end-line 3931, :column 16, :line 3931, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 16, :end-line 3917, :column 7, :line 3917, :file "cljs/core.cljs"} partition ^{:arglists (^{:end-column 12, :end-line 3923, :column 4, :line 3923, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3923, :column 5, :line 3923, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3923, :column 7, :line 3923, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3925, :column 4, :line 3925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3925, :column 5, :line 3925, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3925, :column 7, :line 3925, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3925, :column 12, :line 3925, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3931, :column 4, :line 3931, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3931, :column 5, :line 3931, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3931, :column 7, :line 3931, :file "cljs/core.cljs"} step ^{:end-column 15, :end-line 3931, :column 12, :line 3931, :file "cljs/core.cljs"} pad ^{:end-column 20, :end-line 3931, :column 16, :line 3931, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 16, :end-line 3917, :column 7, :line 3917, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3923, :column 5, :line 3923, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3923, :column 7, :line 3923, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3925, :column 5, :line 3925, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3925, :column 7, :line 3925, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3925, :column 12, :line 3925, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3931, :column 5, :line 3931, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3931, :column 7, :line 3931, :file "cljs/core.cljs"} step ^{:end-column 15, :end-line 3931, :column 12, :line 3931, :file "cljs/core.cljs"} pad ^{:end-column 20, :end-line 3931, :column 16, :line 3931, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3923, :column 4, :line 3923, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3923, :column 5, :line 3923, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3923, :column 7, :line 3923, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3925, :column 4, :line 3925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3925, :column 5, :line 3925, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3925, :column 7, :line 3925, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3925, :column 12, :line 3925, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3931, :column 4, :line 3931, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3931, :column 5, :line 3931, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3931, :column 7, :line 3931, :file "cljs/core.cljs"} step ^{:end-column 15, :end-line 3931, :column 12, :line 3931, :file "cljs/core.cljs"} pad ^{:end-column 20, :end-line 3931, :column 16, :line 3931, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 16, :end-line 3917, :column 7, :line 3917, :file "cljs/core.cljs"} partition, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]], ^{:end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]], ^{:end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]], ^{:end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 22, :end-line 8742, :column 14, :line 8742, :file "cljs/core.cljs"} IMultiFn ^{:impls (cljs.core/MultiFn), :protocol-info {:methods {^{:end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]], ^{:end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]], ^{:end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]], ^{:end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 22, :end-line 8742, :column 14, :line 8742, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]], ^{:end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]], ^{:end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]], ^{:end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 22, :end-line 8742, :column 14, :line 8742, :file "cljs/core.cljs"} IMultiFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1961, :column 20, :line 1961, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1961, :column 21, :line 1961, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1961, :column 16, :line 1961, :file "cljs/core.cljs"} fix ^{:arglists (^{:end-column 23, :end-line 1961, :column 20, :line 1961, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1961, :column 21, :line 1961, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1961, :column 16, :line 1961, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1961, :column 21, :line 1961, :file "cljs/core.cljs"} q]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1961, :column 20, :line 1961, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1961, :column 21, :line 1961, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1961, :column 16, :line 1961, :file "cljs/core.cljs"} fix, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} EmptyList {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} EmptyList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 2266, :column 20, :line 2266, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 26, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} IAssociative ^{:impls (cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 26, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 26, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} IAssociative, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2049, :column 3, :line 2049, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2049, :column 4, :line 2049, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2049, :column 6, :line 2049, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 15, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} bit-flip ^{:arglists (^{:end-column 8, :end-line 2049, :column 3, :line 2049, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2049, :column 4, :line 2049, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2049, :column 6, :line 2049, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 15, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2049, :column 4, :line 2049, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2049, :column 6, :line 2049, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2049, :column 3, :line 2049, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2049, :column 4, :line 2049, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2049, :column 6, :line 2049, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 15, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} bit-flip, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2725, :column 10, :line 2725, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} long-array ^{:arglists (^{:end-column 17, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2725, :column 10, :line 2725, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 9, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2725, :column 10, :line 2725, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2725, :column 10, :line 2725, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} long-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8632, :column 4, :line 8632, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8632, :column 5, :line 8632, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8633, :column 4, :line 8633, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8633, :column 5, :line 8633, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8633, :column 7, :line 8633, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 18, :end-line 8626, :column 7, :line 8626, :file "cljs/core.cljs"} descendants ^{:arglists (^{:end-column 9, :end-line 8632, :column 4, :line 8632, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8632, :column 5, :line 8632, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8633, :column 4, :line 8633, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8633, :column 5, :line 8633, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8633, :column 7, :line 8633, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 18, :end-line 8626, :column 7, :line 8626, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8632, :column 5, :line 8632, :file "cljs/core.cljs"} tag] [^{:end-column 6, :end-line 8633, :column 5, :line 8633, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8633, :column 7, :line 8633, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8632, :column 4, :line 8632, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8632, :column 5, :line 8632, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8633, :column 4, :line 8633, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8633, :column 5, :line 8633, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8633, :column 7, :line 8633, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 18, :end-line 8626, :column 7, :line 8626, :file "cljs/core.cljs"} descendants, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 436, :column 22, :line 436, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 436, :column 23, :line 436, :file "cljs/core.cljs"} a ^{:end-column 26, :end-line 436, :column 25, :line 436, :file "cljs/core.cljs"} b]), :tag ^{:end-column 16, :end-line 436, :column 10, :line 436, :file "cljs/core.cljs"} number, :end-column 21, :end-line 436, :column 17, :line 436, :file "cljs/core.cljs"} imul ^{:arglists (^{:end-column 27, :end-line 437, :column 22, :line 437, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 437, :column 23, :line 437, :file "cljs/core.cljs"} a ^{:end-column 26, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} b]), :tag ^{:end-column 16, :end-line 437, :column 10, :line 437, :file "cljs/core.cljs"} number, :end-column 21, :end-line 437, :column 17, :line 437, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 437, :column 23, :line 437, :file "cljs/core.cljs"} a ^{:end-column 26, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 437, :column 22, :line 437, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 437, :column 23, :line 437, :file "cljs/core.cljs"} a ^{:end-column 26, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} b]), :tag ^{:end-column 16, :end-line 437, :column 10, :line 437, :file "cljs/core.cljs"} number, :end-column 21, :end-line 437, :column 17, :line 437, :file "cljs/core.cljs"} imul, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} ->Delay ^{:arglists ([^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} {:arglists (^cljs.core/Delay [^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} ->Delay, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} pv ^{:end-column 23, :end-line 4082, :column 22, :line 4082, :file "cljs/core.cljs"} i]), :private true, :end-column 17, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} array-for ^{:arglists (^{:end-column 24, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} pv ^{:end-column 23, :end-line 4082, :column 22, :line 4082, :file "cljs/core.cljs"} i]), :private true, :end-column 17, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} pv ^{:end-column 23, :end-line 4082, :column 22, :line 4082, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} pv ^{:end-column 23, :end-line 4082, :column 22, :line 4082, :file "cljs/core.cljs"} i]), :private true, :end-column 17, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} array-for, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7162, :column 3, :line 7162, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7162, :column 4, :line 7162, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 7162, :column 6, :line 7162, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 12, :end-line 7158, :column 7, :line 7158, :file "cljs/core.cljs"} merge ^{:arglists (^{:end-column 11, :end-line 7162, :column 3, :line 7162, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7162, :column 4, :line 7162, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 7162, :column 6, :line 7162, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 12, :end-line 7158, :column 7, :line 7158, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 7162, :column 6, :line 7162, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7162, :column 3, :line 7162, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7162, :column 4, :line 7162, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 7162, :column 6, :line 7162, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 12, :end-line 7158, :column 7, :line 7158, :file "cljs/core.cljs"} merge, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 22, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} ISeqable ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq cljs.core/ES6IteratorSeq), :protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 22, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 22, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} ISeqable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1997, :column 3, :line 1997, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1997, :column 4, :line 1997, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 1997, :column 6, :line 1997, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 13, :end-line 1995, :column 7, :line 1995, :file "cljs/core.cljs"} js-mod ^{:arglists (^{:end-column 8, :end-line 1997, :column 3, :line 1997, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1997, :column 4, :line 1997, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 1997, :column 6, :line 1997, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 13, :end-line 1995, :column 7, :line 1995, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 1997, :column 4, :line 1997, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 1997, :column 6, :line 1997, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1997, :column 3, :line 1997, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1997, :column 4, :line 1997, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 1997, :column 6, :line 1997, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 13, :end-line 1995, :column 7, :line 1995, :file "cljs/core.cljs"} js-mod, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1538, :column 3, :line 1538, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 15, :end-line 1536, :column 8, :line 1536, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1536, :column 16, :line 1536, :file "cljs/core.cljs"} integer? ^{:arglists (^{:end-column 6, :end-line 1538, :column 3, :line 1538, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 15, :end-line 1536, :column 8, :line 1536, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1536, :column 16, :line 1536, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1538, :column 3, :line 1538, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 15, :end-line 1536, :column 8, :line 1536, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1536, :column 16, :line 1536, :file "cljs/core.cljs"} integer?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} MetaFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} MetaFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 27, :end-line 1322, :column 17, :line 1322, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 12, :end-line 3898, :column 4, :line 3898, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3898, :column 5, :line 3898, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3898, :column 7, :line 3898, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3901, :column 4, :line 3901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3901, :column 5, :line 3901, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3901, :column 7, :line 3901, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3901, :column 10, :line 3901, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3903, :column 4, :line 3903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3903, :column 5, :line 3903, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3903, :column 7, :line 3903, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3903, :column 10, :line 3903, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3903, :column 13, :line 3903, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3905, :column 4, :line 3905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3905, :column 5, :line 3905, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3905, :column 7, :line 3905, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3905, :column 10, :line 3905, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3905, :column 13, :line 3905, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3905, :column 16, :line 3905, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3905, :column 18, :line 3905, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 3892, :column 7, :line 3892, :file "cljs/core.cljs"} mapv ^{:arglists (^{:end-column 12, :end-line 3898, :column 4, :line 3898, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3898, :column 5, :line 3898, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3898, :column 7, :line 3898, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3901, :column 4, :line 3901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3901, :column 5, :line 3901, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3901, :column 7, :line 3901, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3901, :column 10, :line 3901, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3903, :column 4, :line 3903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3903, :column 5, :line 3903, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3903, :column 7, :line 3903, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3903, :column 10, :line 3903, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3903, :column 13, :line 3903, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3905, :column 4, :line 3905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3905, :column 5, :line 3905, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3905, :column 7, :line 3905, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3905, :column 10, :line 3905, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3905, :column 13, :line 3905, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3905, :column 16, :line 3905, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3905, :column 18, :line 3905, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 3892, :column 7, :line 3892, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 6, :end-line 3898, :column 5, :line 3898, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3898, :column 7, :line 3898, :file "cljs/core.cljs"} coll] [^{:end-column 6, :end-line 3901, :column 5, :line 3901, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3901, :column 7, :line 3901, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3901, :column 10, :line 3901, :file "cljs/core.cljs"} c2] [^{:end-column 6, :end-line 3903, :column 5, :line 3903, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3903, :column 7, :line 3903, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3903, :column 10, :line 3903, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3903, :column 13, :line 3903, :file "cljs/core.cljs"} c3] [^{:end-column 6, :end-line 3905, :column 5, :line 3905, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3905, :column 7, :line 3905, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3905, :column 10, :line 3905, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3905, :column 13, :line 3905, :file "cljs/core.cljs"} c3 & ^{:end-column 23, :end-line 3905, :column 18, :line 3905, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3898, :column 4, :line 3898, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3898, :column 5, :line 3898, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3898, :column 7, :line 3898, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3901, :column 4, :line 3901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3901, :column 5, :line 3901, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3901, :column 7, :line 3901, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3901, :column 10, :line 3901, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3903, :column 4, :line 3903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3903, :column 5, :line 3903, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3903, :column 7, :line 3903, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3903, :column 10, :line 3903, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3903, :column 13, :line 3903, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3905, :column 4, :line 3905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3905, :column 5, :line 3905, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3905, :column 7, :line 3905, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3905, :column 10, :line 3905, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3905, :column 13, :line 3905, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3905, :column 16, :line 3905, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3905, :column 18, :line 3905, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 3892, :column 7, :line 3892, :file "cljs/core.cljs"} mapv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7551, :column 4, :line 7551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7551, :column 5, :line 7551, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7571, :column 4, :line 7571, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7571, :column 5, :line 7571, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7571, :column 7, :line 7571, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7573, :column 4, :line 7573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7573, :column 5, :line 7573, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7573, :column 7, :line 7573, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 7573, :column 12, :line 7573, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 20, :end-line 7547, :column 7, :line 7547, :file "cljs/core.cljs"} partition-all ^{:arglists (^{:end-column 7, :end-line 7551, :column 4, :line 7551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7551, :column 5, :line 7551, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7571, :column 4, :line 7571, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7571, :column 5, :line 7571, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7571, :column 7, :line 7571, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7573, :column 4, :line 7573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7573, :column 5, :line 7573, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7573, :column 7, :line 7573, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 7573, :column 12, :line 7573, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 20, :end-line 7547, :column 7, :line 7547, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7551, :column 5, :line 7551, :file "cljs/core.cljs"} n] [^{:end-column 6, :end-line 7571, :column 5, :line 7571, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7571, :column 7, :line 7571, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 6, :end-line 7573, :column 5, :line 7573, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7573, :column 7, :line 7573, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 7573, :column 12, :line 7573, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7551, :column 4, :line 7551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7551, :column 5, :line 7551, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7571, :column 4, :line 7571, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7571, :column 5, :line 7571, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7571, :column 7, :line 7571, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7573, :column 4, :line 7573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7573, :column 5, :line 7573, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7573, :column 7, :line 7573, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 7573, :column 12, :line 7573, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 20, :end-line 7547, :column 7, :line 7547, :file "cljs/core.cljs"} partition-all, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7771, :column 4, :line 7771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7771, :column 5, :line 7771, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7800, :column 4, :line 7800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7800, :column 5, :line 7800, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7800, :column 7, :line 7800, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 19, :end-line 7767, :column 7, :line 7767, :file "cljs/core.cljs"} partition-by ^{:arglists (^{:end-column 7, :end-line 7771, :column 4, :line 7771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7771, :column 5, :line 7771, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7800, :column 4, :line 7800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7800, :column 5, :line 7800, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7800, :column 7, :line 7800, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 19, :end-line 7767, :column 7, :line 7767, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7771, :column 5, :line 7771, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 7800, :column 5, :line 7800, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7800, :column 7, :line 7800, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7771, :column 4, :line 7771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7771, :column 5, :line 7771, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7800, :column 4, :line 7800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7800, :column 5, :line 7800, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7800, :column 7, :line 7800, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 19, :end-line 7767, :column 7, :line 7767, :file "cljs/core.cljs"} partition-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 47, :end-line 5073, :column 38, :line 5073, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5073, :column 39, :line 5073, :file "cljs/core.cljs"} arr ^{:end-column 44, :end-line 5073, :column 43, :line 5073, :file "cljs/core.cljs"} m ^{:end-column 46, :end-line 5073, :column 45, :line 5073, :file "cljs/core.cljs"} k]), :private true, :end-column 37, :end-line 5073, :column 8, :line 5073, :file "cljs/core.cljs"} array-map-index-of-identical? ^{:arglists (^{:end-column 47, :end-line 5073, :column 38, :line 5073, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5073, :column 39, :line 5073, :file "cljs/core.cljs"} arr ^{:end-column 44, :end-line 5073, :column 43, :line 5073, :file "cljs/core.cljs"} m ^{:end-column 46, :end-line 5073, :column 45, :line 5073, :file "cljs/core.cljs"} k]), :private true, :end-column 37, :end-line 5073, :column 8, :line 5073, :file "cljs/core.cljs"} {:arglists ([^{:end-column 42, :end-line 5073, :column 39, :line 5073, :file "cljs/core.cljs"} arr ^{:end-column 44, :end-line 5073, :column 43, :line 5073, :file "cljs/core.cljs"} m ^{:end-column 46, :end-line 5073, :column 45, :line 5073, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 47, :end-line 5073, :column 38, :line 5073, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5073, :column 39, :line 5073, :file "cljs/core.cljs"} arr ^{:end-column 44, :end-line 5073, :column 43, :line 5073, :file "cljs/core.cljs"} m ^{:end-column 46, :end-line 5073, :column 45, :line 5073, :file "cljs/core.cljs"} k]), :private true, :end-column 37, :end-line 5073, :column 8, :line 5073, :file "cljs/core.cljs"} array-map-index-of-identical?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 25, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} ISequential ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 25, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 25, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} ISequential, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} ->LazySeq ^{:arglists ([^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} ->LazySeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 4848, :column 3, :line 4848, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 4848, :column 4, :line 4848, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 4848, :column 6, :line 4848, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 17, :end-line 4845, :column 8, :line 4845, :file "cljs/core.cljs"} equiv-map ^{:arglists (^{:end-column 8, :end-line 4848, :column 3, :line 4848, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 4848, :column 4, :line 4848, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 4848, :column 6, :line 4848, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 17, :end-line 4845, :column 8, :line 4845, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 4848, :column 4, :line 4848, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 4848, :column 6, :line 4848, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 4848, :column 3, :line 4848, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 4848, :column 4, :line 4848, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 4848, :column 6, :line 4848, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 17, :end-line 4845, :column 8, :line 4845, :file "cljs/core.cljs"} equiv-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2761, :column 4, :line 2761, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2761, :column 5, :line 2761, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2765, :column 4, :line 2765, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2765, :column 5, :line 2765, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2765, :column 10, :line 2765, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2760, :column 7, :line 2760, :file "cljs/core.cljs"} object-array ^{:arglists (^{:end-column 17, :end-line 2761, :column 4, :line 2761, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2761, :column 5, :line 2761, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2765, :column 4, :line 2765, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2765, :column 5, :line 2765, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2765, :column 10, :line 2765, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2760, :column 7, :line 2760, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2761, :column 5, :line 2761, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 9, :end-line 2765, :column 5, :line 2765, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2765, :column 10, :line 2765, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2761, :column 4, :line 2761, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2761, :column 5, :line 2761, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2765, :column 4, :line 2765, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2765, :column 5, :line 2765, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2765, :column 10, :line 2765, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2760, :column 7, :line 2760, :file "cljs/core.cljs"} object-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 76, :column 20, :line 76, :file "cljs/core.cljs"} Keyword {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 17, :end-line 2413, :column 10, :line 2413, :file "cljs/core.cljs"} Keyword, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 47, :end-line 2413, :column 18, :line 2413, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 16, :end-line 8641, :column 4, :line 8641, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8641, :column 5, :line 8641, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8641, :column 9, :line 8641, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8645, :column 4, :line 8645, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8645, :column 5, :line 8645, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8645, :column 7, :line 8645, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8645, :column 11, :line 8645, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 13, :end-line 8635, :column 7, :line 8635, :file "cljs/core.cljs"} derive ^{:arglists (^{:end-column 16, :end-line 8641, :column 4, :line 8641, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8641, :column 5, :line 8641, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8641, :column 9, :line 8641, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8645, :column 4, :line 8645, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8645, :column 5, :line 8645, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8645, :column 7, :line 8645, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8645, :column 11, :line 8645, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 13, :end-line 8635, :column 7, :line 8635, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 8, :end-line 8641, :column 5, :line 8641, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8641, :column 9, :line 8641, :file "cljs/core.cljs"} parent] [^{:end-column 6, :end-line 8645, :column 5, :line 8645, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8645, :column 7, :line 8645, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8645, :column 11, :line 8645, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8641, :column 4, :line 8641, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8641, :column 5, :line 8641, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8641, :column 9, :line 8641, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8645, :column 4, :line 8645, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8645, :column 5, :line 8645, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8645, :column 7, :line 8645, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8645, :column 11, :line 8645, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 13, :end-line 8635, :column 7, :line 8635, :file "cljs/core.cljs"} derive, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 3033, :column 16, :line 3033, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3033, :column 17, :line 3033, :file "cljs/core.cljs"} coll]), :end-column 15, :end-line 3033, :column 7, :line 3033, :file "cljs/core.cljs"} seq-iter ^{:arglists (^{:end-column 22, :end-line 3033, :column 16, :line 3033, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3033, :column 17, :line 3033, :file "cljs/core.cljs"} coll]), :end-column 15, :end-line 3033, :column 7, :line 3033, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:end-column 21, :end-line 3033, :column 17, :line 3033, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 3033, :column 16, :line 3033, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3033, :column 17, :line 3033, :file "cljs/core.cljs"} coll]), :end-column 15, :end-line 3033, :column 7, :line 3033, :file "cljs/core.cljs"} seq-iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]], ^{:end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} IChunkedSeq ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons), :protocol-info {:methods {^{:end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]], ^{:end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]], ^{:end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} IChunkedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 9036, :column 32, :line 9036, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 9036, :column 33, :line 9036, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 9036, :column 8, :line 9036, :file "cljs/core.cljs"} boolean, :end-column 31, :end-line 9036, :column 16, :line 9036, :file "cljs/core.cljs"} special-symbol? ^{:arglists (^{:end-column 35, :end-line 9036, :column 32, :line 9036, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 9036, :column 33, :line 9036, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 9036, :column 8, :line 9036, :file "cljs/core.cljs"} boolean, :end-column 31, :end-line 9036, :column 16, :line 9036, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 34, :end-line 9036, :column 33, :line 9036, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 9036, :column 32, :line 9036, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 9036, :column 33, :line 9036, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 9036, :column 8, :line 9036, :file "cljs/core.cljs"} boolean, :end-column 31, :end-line 9036, :column 16, :line 9036, :file "cljs/core.cljs"} special-symbol?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8623, :column 5, :line 8623, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8624, :column 5, :line 8624, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8624, :column 7, :line 8624, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 16, :end-line 8618, :column 7, :line 8618, :file "cljs/core.cljs"} ancestors ^{:arglists (^{:end-column 9, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8623, :column 5, :line 8623, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8624, :column 5, :line 8624, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8624, :column 7, :line 8624, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 16, :end-line 8618, :column 7, :line 8618, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8623, :column 5, :line 8623, :file "cljs/core.cljs"} tag] [^{:end-column 6, :end-line 8624, :column 5, :line 8624, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8624, :column 7, :line 8624, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8623, :column 5, :line 8623, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8624, :column 5, :line 8624, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8624, :column 7, :line 8624, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 16, :end-line 8618, :column 7, :line 8618, :file "cljs/core.cljs"} ancestors, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7607, :column 4, :line 7607, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7607, :column 5, :line 7607, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7607, :column 8, :line 7607, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7607, :column 13, :line 7607, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7613, :column 4, :line 7613, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7613, :column 5, :line 7613, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7613, :column 8, :line 7613, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7613, :column 19, :line 7613, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7613, :column 29, :line 7613, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7613, :column 38, :line 7613, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 13, :end-line 7603, :column 7, :line 7603, :file "cljs/core.cljs"} subseq ^{:arglists (^{:end-column 17, :end-line 7607, :column 4, :line 7607, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7607, :column 5, :line 7607, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7607, :column 8, :line 7607, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7607, :column 13, :line 7607, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7613, :column 4, :line 7613, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7613, :column 5, :line 7613, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7613, :column 8, :line 7613, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7613, :column 19, :line 7613, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7613, :column 29, :line 7613, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7613, :column 38, :line 7613, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 13, :end-line 7603, :column 7, :line 7603, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7607, :column 5, :line 7607, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7607, :column 8, :line 7607, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7607, :column 13, :line 7607, :file "cljs/core.cljs"} key] [^{:end-column 7, :end-line 7613, :column 5, :line 7613, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7613, :column 8, :line 7613, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7613, :column 19, :line 7613, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7613, :column 29, :line 7613, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7613, :column 38, :line 7613, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7607, :column 4, :line 7607, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7607, :column 5, :line 7607, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7607, :column 8, :line 7607, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7607, :column 13, :line 7607, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7613, :column 4, :line 7613, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7613, :column 5, :line 7613, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7613, :column 8, :line 7613, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7613, :column 19, :line 7613, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7613, :column 29, :line 7613, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7613, :column 38, :line 7613, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 13, :end-line 7603, :column 7, :line 7603, :file "cljs/core.cljs"} subseq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 25, :end-line 3045, :column 10, :line 3045, :file "cljs/core.cljs"} LazyTransformer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 3124, :column 10, :line 3124, :file "cljs/core.cljs"} LazyTransformer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 81, :end-line 3124, :column 26, :line 3124, :file "cljs/core.cljs"} [^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8332, :column 4, :line 8332, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8333, :column 4, :line 8333, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8333, :column 5, :line 8333, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 13, :end-line 8328, :column 7, :line 8328, :file "cljs/core.cljs"} gensym ^{:arglists (^{:end-column 6, :end-line 8332, :column 4, :line 8332, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8333, :column 4, :line 8333, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8333, :column 5, :line 8333, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 13, :end-line 8328, :column 7, :line 8328, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 18, :end-line 8333, :column 5, :line 8333, :file "cljs/core.cljs"} prefix-string]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8332, :column 4, :line 8332, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8333, :column 4, :line 8333, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8333, :column 5, :line 8333, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 13, :end-line 8328, :column 7, :line 8328, :file "cljs/core.cljs"} gensym, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next ^{:arglists (^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} ->HashCollisionNode ^{:arglists ([^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} {:arglists (^cljs.core/HashCollisionNode [^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} ->HashCollisionNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8359, :column 3, :line 8359, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 15, :end-line 8357, :column 8, :line 8357, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 8357, :column 16, :line 8357, :file "cljs/core.cljs"} delay? ^{:arglists (^{:end-column 6, :end-line 8359, :column 3, :line 8359, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 15, :end-line 8357, :column 8, :line 8357, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 8357, :column 16, :line 8357, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8359, :column 3, :line 8359, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 15, :end-line 8357, :column 8, :line 8357, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 8357, :column 16, :line 8357, :file "cljs/core.cljs"} delay?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 5449, :column 10, :line 5449, :file "cljs/core.cljs"} create-inode-seq ^{:arglists (^{:end-column 11, :end-line 5990, :column 4, :line 5990, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5990, :column 5, :line 5990, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5992, :column 4, :line 5992, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5992, :column 5, :line 5992, :file "cljs/core.cljs"} nodes ^{:end-column 12, :end-line 5992, :column 11, :line 5992, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 5992, :column 13, :line 5992, :file "cljs/core.cljs"} s]), :private true, :end-column 24, :end-line 5989, :column 8, :line 5989, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 5990, :column 5, :line 5990, :file "cljs/core.cljs"} nodes] [^{:end-column 10, :end-line 5992, :column 5, :line 5992, :file "cljs/core.cljs"} nodes ^{:end-column 12, :end-line 5992, :column 11, :line 5992, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 5992, :column 13, :line 5992, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5990, :column 4, :line 5990, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5990, :column 5, :line 5990, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5992, :column 4, :line 5992, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5992, :column 5, :line 5992, :file "cljs/core.cljs"} nodes ^{:end-column 12, :end-line 5992, :column 11, :line 5992, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 5992, :column 13, :line 5992, :file "cljs/core.cljs"} s]), :private true, :end-column 24, :end-line 5989, :column 8, :line 5989, :file "cljs/core.cljs"} create-inode-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3874, :column 3, :line 3874, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3874, :column 4, :line 3874, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 14, :end-line 3870, :column 7, :line 3870, :file "cljs/core.cljs"} flatten ^{:arglists (^{:end-column 6, :end-line 3874, :column 3, :line 3874, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3874, :column 4, :line 3874, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 14, :end-line 3870, :column 7, :line 3870, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 5, :end-line 3874, :column 4, :line 3874, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3874, :column 3, :line 3874, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3874, :column 4, :line 3874, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 14, :end-line 3870, :column 7, :line 3870, :file "cljs/core.cljs"} flatten, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc ^{:arglists (^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1992, :column 15, :line 1992, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1992, :column 16, :line 1992, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1992, :column 7, :line 1992, :file "cljs/core.cljs"} doubles ^{:arglists (^{:end-column 18, :end-line 1992, :column 15, :line 1992, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1992, :column 16, :line 1992, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1992, :column 7, :line 1992, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1992, :column 16, :line 1992, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1992, :column 15, :line 1992, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1992, :column 16, :line 1992, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1992, :column 7, :line 1992, :file "cljs/core.cljs"} doubles, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key? ^{:arglists (^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8321, :column 3, :line 8321, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8321, :column 9, :line 8321, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 19, :end-line 8317, :column 7, :line 8317, :file "cljs/core.cljs"} remove-watch ^{:arglists (^{:end-column 13, :end-line 8321, :column 3, :line 8321, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8321, :column 9, :line 8321, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 19, :end-line 8317, :column 7, :line 8317, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8321, :column 9, :line 8321, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8321, :column 3, :line 8321, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8321, :column 9, :line 8321, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 19, :end-line 8317, :column 7, :line 8317, :file "cljs/core.cljs"} remove-watch, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 9000, :column 4, :line 9000, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9000, :column 5, :line 9000, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9000, :column 9, :line 9000, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 9002, :column 4, :line 9002, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9002, :column 5, :line 9002, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9002, :column 9, :line 9002, :file "cljs/core.cljs"} map ^{:end-column 18, :end-line 9002, :column 13, :line 9002, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 14, :end-line 8996, :column 7, :line 8996, :file "cljs/core.cljs"} ex-info ^{:arglists (^{:end-column 13, :end-line 9000, :column 4, :line 9000, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9000, :column 5, :line 9000, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9000, :column 9, :line 9000, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 9002, :column 4, :line 9002, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9002, :column 5, :line 9002, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9002, :column 9, :line 9002, :file "cljs/core.cljs"} map ^{:end-column 18, :end-line 9002, :column 13, :line 9002, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 14, :end-line 8996, :column 7, :line 8996, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 8, :end-line 9000, :column 5, :line 9000, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9000, :column 9, :line 9000, :file "cljs/core.cljs"} map] ^cljs.core/ExceptionInfo [^{:end-column 8, :end-line 9002, :column 5, :line 9002, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9002, :column 9, :line 9002, :file "cljs/core.cljs"} map ^{:end-column 18, :end-line 9002, :column 13, :line 9002, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 9000, :column 4, :line 9000, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9000, :column 5, :line 9000, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9000, :column 9, :line 9000, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 9002, :column 4, :line 9002, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9002, :column 5, :line 9002, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9002, :column 9, :line 9002, :file "cljs/core.cljs"} map ^{:end-column 18, :end-line 9002, :column 13, :line 9002, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 14, :end-line 8996, :column 7, :line 8996, :file "cljs/core.cljs"} ex-info, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1533, :column 21, :line 1533, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1533, :column 22, :line 1533, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1533, :column 8, :line 1533, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1533, :column 16, :line 1533, :file "cljs/core.cljs"} ifn? ^{:arglists (^{:end-column 24, :end-line 1533, :column 21, :line 1533, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1533, :column 22, :line 1533, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1533, :column 8, :line 1533, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1533, :column 16, :line 1533, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1320, :column 8, :line 1320, :file "cljs/core.cljs"} boolean [^{:end-column 23, :end-line 1533, :column 22, :line 1533, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1533, :column 21, :line 1533, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1533, :column 22, :line 1533, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1533, :column 8, :line 1533, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1533, :column 16, :line 1533, :file "cljs/core.cljs"} ifn?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 397, :column 14, :line 397, :file "cljs/core.cljs"} IAtom ^{:impls (cljs.core/Atom), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 397, :column 14, :line 397, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 397, :column 14, :line 397, :file "cljs/core.cljs"} IAtom, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} ->PersistentQueue ^{:arglists ([^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentQueue [^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} ->PersistentQueue, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]], ^{:end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]], ^{:end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 24, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} IWatchable ^{:impls (cljs.core/Atom), :protocol-info {:methods {^{:end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]], ^{:end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]], ^{:end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 24, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]], ^{:end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]], ^{:end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 24, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} IWatchable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} ->Stepper ^{:arglists ([^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} ->Stepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 4016, :column 22, :line 4016, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4016, :column 23, :line 4016, :file "cljs/core.cljs"} edit]), :private true, :end-column 21, :end-line 4016, :column 8, :line 4016, :file "cljs/core.cljs"} pv-fresh-node ^{:arglists (^{:end-column 28, :end-line 4016, :column 22, :line 4016, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4016, :column 23, :line 4016, :file "cljs/core.cljs"} edit]), :private true, :end-column 21, :end-line 4016, :column 8, :line 4016, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 4016, :column 23, :line 4016, :file "cljs/core.cljs"} edit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 4016, :column 22, :line 4016, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4016, :column 23, :line 4016, :file "cljs/core.cljs"} edit]), :private true, :end-column 21, :end-line 4016, :column 8, :line 4016, :file "cljs/core.cljs"} pv-fresh-node, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 4346, :column 10, :line 4346, :file "cljs/core.cljs"} subvec ^{:arglists (^{:end-column 13, :end-line 4545, :column 4, :line 4545, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4545, :column 5, :line 4545, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4545, :column 7, :line 4545, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4547, :column 4, :line 4547, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4547, :column 5, :line 4547, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4547, :column 7, :line 4547, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 4547, :column 13, :line 4547, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 13, :end-line 4539, :column 7, :line 4539, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 4545, :column 5, :line 4545, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4545, :column 7, :line 4545, :file "cljs/core.cljs"} start] ^cljs.core/Subvec [^{:end-column 6, :end-line 4547, :column 5, :line 4547, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4547, :column 7, :line 4547, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 4547, :column 13, :line 4547, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 4545, :column 4, :line 4545, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4545, :column 5, :line 4545, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4545, :column 7, :line 4545, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4547, :column 4, :line 4547, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4547, :column 5, :line 4547, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4547, :column 7, :line 4547, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 4547, :column 13, :line 4547, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 13, :end-line 4539, :column 7, :line 4539, :file "cljs/core.cljs"} subvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop! ^{:arglists (^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3299, :column 4, :line 3299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3299, :column 5, :line 3299, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3300, :column 4, :line 3300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3300, :column 5, :line 3300, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3300, :column 7, :line 3300, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3302, :column 4, :line 3302, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3302, :column 5, :line 3302, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3302, :column 7, :line 3302, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3302, :column 12, :line 3302, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3304, :column 4, :line 3304, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3304, :column 5, :line 3304, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3304, :column 7, :line 3304, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3304, :column 12, :line 3304, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3304, :column 17, :line 3304, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3306, :column 4, :line 3306, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3306, :column 5, :line 3306, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3306, :column 7, :line 3306, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3306, :column 12, :line 3306, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3306, :column 17, :line 3306, :file "cljs/core.cljs"} arg3 ^{:end-column 23, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} & ^{:end-column 28, :end-line 3306, :column 24, :line 3306, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 14, :end-line 3295, :column 7, :line 3295, :file "cljs/core.cljs"} partial ^{:arglists (^{:end-column 7, :end-line 3299, :column 4, :line 3299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3299, :column 5, :line 3299, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3300, :column 4, :line 3300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3300, :column 5, :line 3300, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3300, :column 7, :line 3300, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3302, :column 4, :line 3302, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3302, :column 5, :line 3302, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3302, :column 7, :line 3302, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3302, :column 12, :line 3302, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3304, :column 4, :line 3304, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3304, :column 5, :line 3304, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3304, :column 7, :line 3304, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3304, :column 12, :line 3304, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3304, :column 17, :line 3304, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3306, :column 4, :line 3306, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3306, :column 5, :line 3306, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3306, :column 7, :line 3306, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3306, :column 12, :line 3306, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3306, :column 17, :line 3306, :file "cljs/core.cljs"} arg3 ^{:end-column 23, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} & ^{:end-column 28, :end-line 3306, :column 24, :line 3306, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 14, :end-line 3295, :column 7, :line 3295, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3299, :column 5, :line 3299, :file "cljs/core.cljs"} f] ^function [^{:end-column 6, :end-line 3300, :column 5, :line 3300, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3300, :column 7, :line 3300, :file "cljs/core.cljs"} arg1] ^function [^{:end-column 6, :end-line 3302, :column 5, :line 3302, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3302, :column 7, :line 3302, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3302, :column 12, :line 3302, :file "cljs/core.cljs"} arg2] ^function [^{:end-column 6, :end-line 3304, :column 5, :line 3304, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3304, :column 7, :line 3304, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3304, :column 12, :line 3304, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3304, :column 17, :line 3304, :file "cljs/core.cljs"} arg3] ^function [^{:end-column 6, :end-line 3306, :column 5, :line 3306, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3306, :column 7, :line 3306, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3306, :column 12, :line 3306, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3306, :column 17, :line 3306, :file "cljs/core.cljs"} arg3 & ^{:end-column 28, :end-line 3306, :column 24, :line 3306, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3299, :column 4, :line 3299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3299, :column 5, :line 3299, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3300, :column 4, :line 3300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3300, :column 5, :line 3300, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3300, :column 7, :line 3300, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3302, :column 4, :line 3302, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3302, :column 5, :line 3302, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3302, :column 7, :line 3302, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3302, :column 12, :line 3302, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3304, :column 4, :line 3304, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3304, :column 5, :line 3304, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3304, :column 7, :line 3304, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3304, :column 12, :line 3304, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3304, :column 17, :line 3304, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3306, :column 4, :line 3306, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3306, :column 5, :line 3306, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3306, :column 7, :line 3306, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3306, :column 12, :line 3306, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3306, :column 17, :line 3306, :file "cljs/core.cljs"} arg3 ^{:end-column 23, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} & ^{:end-column 28, :end-line 3306, :column 24, :line 3306, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 14, :end-line 3295, :column 7, :line 3295, :file "cljs/core.cljs"} partial, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} chunked-seq? ^{:arglists (^{:end-column 6, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} chunked-seq?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3760, :column 3, :line 3760, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3760, :column 4, :line 3760, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 3760, :column 6, :line 3760, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 16, :end-line 3758, :column 7, :line 3758, :file "cljs/core.cljs"} replicate ^{:arglists (^{:end-column 8, :end-line 3760, :column 3, :line 3760, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3760, :column 4, :line 3760, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 3760, :column 6, :line 3760, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 16, :end-line 3758, :column 7, :line 3758, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 5, :end-line 3760, :column 4, :line 3760, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 3760, :column 6, :line 3760, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3760, :column 3, :line 3760, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3760, :column 4, :line 3760, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 3760, :column 6, :line 3760, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 16, :end-line 3758, :column 7, :line 3758, :file "cljs/core.cljs"} replicate, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} PersistentQueue {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} PersistentQueue, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 4778, :column 26, :line 4778, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 9, :end-line 7531, :column 4, :line 7531, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7531, :column 5, :line 7531, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7531, :column 7, :line 7531, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7532, :column 4, :line 7532, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7532, :column 5, :line 7532, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7532, :column 7, :line 7532, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7532, :column 9, :line 7532, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7533, :column 7, :line 7533, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7533, :column 9, :line 7533, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7533, :column 11, :line 7533, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7533, :column 13, :line 7533, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 14, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} min-key ^{:arglists (^{:end-column 9, :end-line 7531, :column 4, :line 7531, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7531, :column 5, :line 7531, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7531, :column 7, :line 7531, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7532, :column 4, :line 7532, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7532, :column 5, :line 7532, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7532, :column 7, :line 7532, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7532, :column 9, :line 7532, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7533, :column 7, :line 7533, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7533, :column 9, :line 7533, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7533, :column 11, :line 7533, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7533, :column 13, :line 7533, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 14, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7531, :column 5, :line 7531, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7531, :column 7, :line 7531, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 7532, :column 5, :line 7532, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7532, :column 7, :line 7532, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7532, :column 9, :line 7532, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7533, :column 7, :line 7533, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7533, :column 9, :line 7533, :file "cljs/core.cljs"} y & ^{:end-column 17, :end-line 7533, :column 13, :line 7533, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7531, :column 4, :line 7531, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7531, :column 5, :line 7531, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7531, :column 7, :line 7531, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7532, :column 4, :line 7532, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7532, :column 5, :line 7532, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7532, :column 7, :line 7532, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7532, :column 9, :line 7532, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7533, :column 7, :line 7533, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7533, :column 9, :line 7533, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7533, :column 11, :line 7533, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7533, :column 13, :line 7533, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 14, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} min-key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2182, :column 18, :line 2182, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2182, :column 19, :line 2182, :file "cljs/core.cljs"} s]), :private true, :end-column 17, :end-line 2182, :column 8, :line 2182, :file "cljs/core.cljs"} hash-iset ^{:arglists (^{:end-column 21, :end-line 2182, :column 18, :line 2182, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2182, :column 19, :line 2182, :file "cljs/core.cljs"} s]), :private true, :end-column 17, :end-line 2182, :column 8, :line 2182, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 20, :end-line 2182, :column 19, :line 2182, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2182, :column 18, :line 2182, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2182, :column 19, :line 2182, :file "cljs/core.cljs"} s]), :private true, :end-column 17, :end-line 2182, :column 8, :line 2182, :file "cljs/core.cljs"} hash-iset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 14, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} reduced ^{:arglists (^{:end-column 6, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 14, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 5, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 14, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7901, :column 3, :line 7901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7901, :column 4, :line 7901, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 17, :end-line 7899, :column 7, :line 7899, :file "cljs/core.cljs"} re-matches ^{:arglists (^{:end-column 9, :end-line 7901, :column 3, :line 7901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7901, :column 4, :line 7901, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 17, :end-line 7899, :column 7, :line 7899, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7901, :column 4, :line 7901, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7901, :column 3, :line 7901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7901, :column 4, :line 7901, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 17, :end-line 7899, :column 7, :line 7899, :file "cljs/core.cljs"} re-matches, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6987, :column 3, :line 6987, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6987, :column 4, :line 6987, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6987, :column 6, :line 6987, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 16, :end-line 6984, :column 7, :line 6984, :file "cljs/core.cljs"} array-map ^{:arglists (^{:end-column 14, :end-line 6987, :column 3, :line 6987, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6987, :column 4, :line 6987, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6987, :column 6, :line 6987, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 16, :end-line 6984, :column 7, :line 6984, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 13, :end-line 6987, :column 6, :line 6987, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6987, :column 3, :line 6987, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6987, :column 4, :line 6987, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6987, :column 6, :line 6987, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 16, :end-line 6984, :column 7, :line 6984, :file "cljs/core.cljs"} array-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} ITransientSet ^{:impls (cljs.core/TransientHashSet), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} ITransientSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 43, :end-line 151, :column 3, :line 151, :file "cljs/core.cljs"} ITER_SYMBOL ^{:end-column 33, :end-line 152, :column 3, :line 152, :file "cljs/core.cljs"} {:tag string, :op :var, :name ^{:end-column 33, :end-line 152, :column 3, :line 152, :file "cljs/core.cljs"} ITER_SYMBOL, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1883, :column 30, :line 1883, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1883, :column 31, :line 1883, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1883, :column 8, :line 1883, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1883, :column 15, :line 1883, :file "cljs/core.cljs"} unchecked-byte ^{:arglists (^{:end-column 33, :end-line 1883, :column 30, :line 1883, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1883, :column 31, :line 1883, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1883, :column 8, :line 1883, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1883, :column 15, :line 1883, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 1883, :column 31, :line 1883, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1883, :column 30, :line 1883, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1883, :column 31, :line 1883, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1883, :column 8, :line 1883, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1883, :column 15, :line 1883, :file "cljs/core.cljs"} unchecked-byte, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 5508, :column 10, :line 5508, :file "cljs/core.cljs"} ArrayNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 5721, :column 10, :line 5721, :file "cljs/core.cljs"} ArrayNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 5721, :column 20, :line 5721, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists ([^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 4348, :column 10, :line 4348, :file "cljs/core.cljs"} ->ChunkedSeq ^{:arglists ([^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 4348, :column 10, :line 4348, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 4348, :column 10, :line 4348, :file "cljs/core.cljs"} ->ChunkedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3535, :column 4, :line 3535, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3535, :column 5, :line 3535, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3543, :column 4, :line 3543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3543, :column 5, :line 3543, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3543, :column 8, :line 3543, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3551, :column 4, :line 3551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3551, :column 5, :line 3551, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3551, :column 8, :line 3551, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3551, :column 11, :line 3551, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3559, :column 4, :line 3559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3559, :column 5, :line 3559, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3559, :column 8, :line 3559, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3559, :column 11, :line 3559, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3559, :column 14, :line 3559, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3559, :column 16, :line 3559, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 17, :end-line 3530, :column 7, :line 3530, :file "cljs/core.cljs"} every-pred ^{:arglists (^{:end-column 7, :end-line 3535, :column 4, :line 3535, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3535, :column 5, :line 3535, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3543, :column 4, :line 3543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3543, :column 5, :line 3543, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3543, :column 8, :line 3543, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3551, :column 4, :line 3551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3551, :column 5, :line 3551, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3551, :column 8, :line 3551, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3551, :column 11, :line 3551, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3559, :column 4, :line 3559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3559, :column 5, :line 3559, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3559, :column 8, :line 3559, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3559, :column 11, :line 3559, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3559, :column 14, :line 3559, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3559, :column 16, :line 3559, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 17, :end-line 3530, :column 7, :line 3530, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3535, :column 5, :line 3535, :file "cljs/core.cljs"} p] ^function [^{:end-column 7, :end-line 3543, :column 5, :line 3543, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3543, :column 8, :line 3543, :file "cljs/core.cljs"} p2] ^function [^{:end-column 7, :end-line 3551, :column 5, :line 3551, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3551, :column 8, :line 3551, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3551, :column 11, :line 3551, :file "cljs/core.cljs"} p3] ^function [^{:end-column 7, :end-line 3559, :column 5, :line 3559, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3559, :column 8, :line 3559, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3559, :column 11, :line 3559, :file "cljs/core.cljs"} p3 & ^{:end-column 18, :end-line 3559, :column 16, :line 3559, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3535, :column 4, :line 3535, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3535, :column 5, :line 3535, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3543, :column 4, :line 3543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3543, :column 5, :line 3543, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3543, :column 8, :line 3543, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3551, :column 4, :line 3551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3551, :column 5, :line 3551, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3551, :column 8, :line 3551, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3551, :column 11, :line 3551, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3559, :column 4, :line 3559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3559, :column 5, :line 3559, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3559, :column 8, :line 3559, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3559, :column 11, :line 3559, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3559, :column 14, :line 3559, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3559, :column 16, :line 3559, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 17, :end-line 3530, :column 7, :line 3530, :file "cljs/core.cljs"} every-pred, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 5177, :column 10, :line 5177, :file "cljs/core.cljs"} keys ^{:arglists (^{:end-column 13, :end-line 7081, :column 3, :line 7081, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7081, :column 4, :line 7081, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 11, :end-line 7079, :column 7, :line 7079, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7081, :column 4, :line 7081, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7081, :column 3, :line 7081, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7081, :column 4, :line 7081, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 11, :end-line 7079, :column 7, :line 7079, :file "cljs/core.cljs"} keys, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 34, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 23, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 34, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 23, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} {:arglists (^js/Error [^{:end-column 30, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 34, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 34, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 23, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} PersistentArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} PersistentArrayMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 5188, :column 29, :line 5188, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 1565, :column 4, :line 1565, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1565, :column 5, :line 1565, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1566, :column 4, :line 1566, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1566, :column 5, :line 1566, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1566, :column 7, :line 1566, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1567, :column 4, :line 1567, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1567, :column 5, :line 1567, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1567, :column 7, :line 1567, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1567, :column 9, :line 1567, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1567, :column 11, :line 1567, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 15, :end-line 1563, :column 8, :line 1563, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1563, :column 16, :line 1563, :file "cljs/core.cljs"} distinct? ^{:arglists (^{:end-column 7, :end-line 1565, :column 4, :line 1565, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1565, :column 5, :line 1565, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1566, :column 4, :line 1566, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1566, :column 5, :line 1566, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1566, :column 7, :line 1566, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1567, :column 4, :line 1567, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1567, :column 5, :line 1567, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1567, :column 7, :line 1567, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1567, :column 9, :line 1567, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1567, :column 11, :line 1567, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 15, :end-line 1563, :column 8, :line 1563, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1563, :column 16, :line 1563, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1565, :column 5, :line 1565, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 6, :end-line 1566, :column 5, :line 1566, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1566, :column 7, :line 1566, :file "cljs/core.cljs"} y] ^boolean [^{:end-column 6, :end-line 1567, :column 5, :line 1567, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1567, :column 7, :line 1567, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1567, :column 11, :line 1567, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1565, :column 4, :line 1565, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1565, :column 5, :line 1565, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1566, :column 4, :line 1566, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1566, :column 5, :line 1566, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1566, :column 7, :line 1566, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1567, :column 4, :line 1567, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1567, :column 5, :line 1567, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1567, :column 7, :line 1567, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1567, :column 9, :line 1567, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1567, :column 11, :line 1567, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 15, :end-line 1563, :column 8, :line 1563, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1563, :column 16, :line 1563, :file "cljs/core.cljs"} distinct?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 42, :end-line 4843, :column 1, :line 4843, :file "cljs/core.cljs"} never-equiv ^{:private true, :end-column 42, :end-line 4843, :column 1, :line 4843, :file "cljs/core.cljs"} {:tag cljs.core/NeverEquiv, :op :var, :name ^{:private true, :end-column 42, :end-line 4843, :column 1, :line 4843, :file "cljs/core.cljs"} never-equiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} Stepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} Stepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 30, :end-line 3050, :column 18, :line 3050, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter], :protocols #{Object}}, ^{:arglists (^{:end-column 34, :end-line 1885, :column 31, :line 1885, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1885, :column 32, :line 1885, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1885, :column 8, :line 1885, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1885, :column 15, :line 1885, :file "cljs/core.cljs"} unchecked-short ^{:arglists (^{:end-column 34, :end-line 1885, :column 31, :line 1885, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1885, :column 32, :line 1885, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1885, :column 8, :line 1885, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1885, :column 15, :line 1885, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1885, :column 32, :line 1885, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1885, :column 31, :line 1885, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1885, :column 32, :line 1885, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1885, :column 8, :line 1885, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1885, :column 15, :line 1885, :file "cljs/core.cljs"} unchecked-short, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} ->Range ^{:arglists ([^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} {:arglists (^cljs.core/Range [^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} ->Range, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8957, :column 3, :line 8957, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8957, :column 4, :line 8957, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 14, :end-line 8955, :column 7, :line 8955, :file "cljs/core.cljs"} methods ^{:arglists (^{:end-column 12, :end-line 8957, :column 3, :line 8957, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8957, :column 4, :line 8957, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 14, :end-line 8955, :column 7, :line 8955, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8957, :column 4, :line 8957, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8957, :column 3, :line 8957, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8957, :column 4, :line 8957, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 14, :end-line 8955, :column 7, :line 8955, :file "cljs/core.cljs"} methods, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3250, :column 3, :line 3250, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3248, :column 8, :line 3248, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 3248, :column 16, :line 3248, :file "cljs/core.cljs"} odd? ^{:arglists (^{:end-column 6, :end-line 3250, :column 3, :line 3250, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3248, :column 8, :line 3248, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 3248, :column 16, :line 3248, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3250, :column 3, :line 3250, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3248, :column 8, :line 3248, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 3248, :column 16, :line 3248, :file "cljs/core.cljs"} odd?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 20, :end-line 2559, :column 10, :line 2559, :file "cljs/core.cljs"} ->ArrayChunk ^{:arglists ([^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 20, :end-line 2559, :column 10, :line 2559, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 20, :end-line 2559, :column 10, :line 2559, :file "cljs/core.cljs"} ->ArrayChunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 3047, :column 24, :line 3047, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3047, :column 25, :line 3047, :file "cljs/core.cljs"} stepper]), :end-column 23, :end-line 3047, :column 7, :line 3047, :file "cljs/core.cljs"} lazy-transformer ^{:arglists (^{:end-column 33, :end-line 3047, :column 24, :line 3047, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3047, :column 25, :line 3047, :file "cljs/core.cljs"} stepper]), :end-column 23, :end-line 3047, :column 7, :line 3047, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:end-column 32, :end-line 3047, :column 25, :line 3047, :file "cljs/core.cljs"} stepper]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 3047, :column 24, :line 3047, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3047, :column 25, :line 3047, :file "cljs/core.cljs"} stepper]), :end-column 23, :end-line 3047, :column 7, :line 3047, :file "cljs/core.cljs"} lazy-transformer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 849, :column 4, :line 849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 849, :column 5, :line 849, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 849, :column 12, :line 849, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 860, :column 4, :line 860, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 860, :column 5, :line 860, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 860, :column 12, :line 860, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 860, :column 14, :line 860, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 869, :column 4, :line 869, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 869, :column 5, :line 869, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 869, :column 12, :line 869, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 869, :column 14, :line 869, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 869, :column 18, :line 869, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 17, :end-line 846, :column 8, :line 846, :file "cljs/core.cljs"} ci-reduce ^{:arglists (^{:end-column 14, :end-line 849, :column 4, :line 849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 849, :column 5, :line 849, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 849, :column 12, :line 849, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 860, :column 4, :line 860, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 860, :column 5, :line 860, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 860, :column 12, :line 860, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 860, :column 14, :line 860, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 869, :column 4, :line 869, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 869, :column 5, :line 869, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 869, :column 12, :line 869, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 869, :column 14, :line 869, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 869, :column 18, :line 869, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 17, :end-line 846, :column 8, :line 846, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 849, :column 5, :line 849, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 849, :column 12, :line 849, :file "cljs/core.cljs"} f] [^{:end-column 11, :end-line 860, :column 5, :line 860, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 860, :column 12, :line 860, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 860, :column 14, :line 860, :file "cljs/core.cljs"} val] [^{:end-column 11, :end-line 869, :column 5, :line 869, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 869, :column 12, :line 869, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 869, :column 14, :line 869, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 869, :column 18, :line 869, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 849, :column 4, :line 849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 849, :column 5, :line 849, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 849, :column 12, :line 849, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 860, :column 4, :line 860, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 860, :column 5, :line 860, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 860, :column 12, :line 860, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 860, :column 14, :line 860, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 869, :column 4, :line 869, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 869, :column 5, :line 869, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 869, :column 12, :line 869, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 869, :column 14, :line 869, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 869, :column 18, :line 869, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 17, :end-line 846, :column 8, :line 846, :file "cljs/core.cljs"} ci-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3 ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method ^{:arglists (^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7811, :column 3, :line 7811, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7811, :column 4, :line 7811, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 18, :end-line 7808, :column 7, :line 7808, :file "cljs/core.cljs"} frequencies ^{:arglists (^{:end-column 9, :end-line 7811, :column 3, :line 7811, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7811, :column 4, :line 7811, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 18, :end-line 7808, :column 7, :line 7808, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 8, :end-line 7811, :column 4, :line 7811, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7811, :column 3, :line 7811, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7811, :column 4, :line 7811, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 18, :end-line 7808, :column 7, :line 7808, :file "cljs/core.cljs"} frequencies, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1454, :column 3, :line 1454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1454, :column 4, :line 1454, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 15, :end-line 1452, :column 8, :line 1452, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1452, :column 16, :line 1452, :file "cljs/core.cljs"} reduceable? ^{:arglists (^{:end-column 6, :end-line 1454, :column 3, :line 1454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1454, :column 4, :line 1454, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 15, :end-line 1452, :column 8, :line 1452, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1452, :column 16, :line 1452, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1454, :column 4, :line 1454, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1454, :column 3, :line 1454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1454, :column 4, :line 1454, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 15, :end-line 1452, :column 8, :line 1452, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1452, :column 16, :line 1452, :file "cljs/core.cljs"} reduceable?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 33, :end-line 493, :column 1, :line 493, :file "cljs/core.cljs"} string-hash-cache ^{:end-column 33, :end-line 493, :column 1, :line 493, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 33, :end-line 493, :column 1, :line 493, :file "cljs/core.cljs"} string-hash-cache, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7622, :column 4, :line 7622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7622, :column 5, :line 7622, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7622, :column 8, :line 7622, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7622, :column 13, :line 7622, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7628, :column 4, :line 7628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7628, :column 5, :line 7628, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7628, :column 8, :line 7628, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7628, :column 19, :line 7628, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7628, :column 29, :line 7628, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7628, :column 38, :line 7628, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7618, :column 7, :line 7618, :file "cljs/core.cljs"} rsubseq ^{:arglists (^{:end-column 17, :end-line 7622, :column 4, :line 7622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7622, :column 5, :line 7622, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7622, :column 8, :line 7622, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7622, :column 13, :line 7622, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7628, :column 4, :line 7628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7628, :column 5, :line 7628, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7628, :column 8, :line 7628, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7628, :column 19, :line 7628, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7628, :column 29, :line 7628, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7628, :column 38, :line 7628, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7618, :column 7, :line 7618, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7622, :column 5, :line 7622, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7622, :column 8, :line 7622, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7622, :column 13, :line 7622, :file "cljs/core.cljs"} key] [^{:end-column 7, :end-line 7628, :column 5, :line 7628, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7628, :column 8, :line 7628, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7628, :column 19, :line 7628, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7628, :column 29, :line 7628, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7628, :column 38, :line 7628, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7622, :column 4, :line 7622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7622, :column 5, :line 7622, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7622, :column 8, :line 7622, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7622, :column 13, :line 7622, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7628, :column 4, :line 7628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7628, :column 5, :line 7628, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7628, :column 8, :line 7628, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7628, :column 19, :line 7628, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7628, :column 29, :line 7628, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7628, :column 38, :line 7628, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7618, :column 7, :line 7618, :file "cljs/core.cljs"} rsubseq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 10, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} inc ^{:arglists (^{:end-column 6, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 10, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 10, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} inc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 16, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 16, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 16, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4895, :column 18, :line 4895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4895, :column 19, :line 4895, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 4895, :column 23, :line 4895, :file "cljs/core.cljs"} ks]), :private true, :end-column 17, :end-line 4895, :column 8, :line 4895, :file "cljs/core.cljs"} obj-clone ^{:arglists (^{:end-column 26, :end-line 4895, :column 18, :line 4895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4895, :column 19, :line 4895, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 4895, :column 23, :line 4895, :file "cljs/core.cljs"} ks]), :private true, :end-column 17, :end-line 4895, :column 8, :line 4895, :file "cljs/core.cljs"} {:arglists (^object [^{:end-column 22, :end-line 4895, :column 19, :line 4895, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 4895, :column 23, :line 4895, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4895, :column 18, :line 4895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4895, :column 19, :line 4895, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 4895, :column 23, :line 4895, :file "cljs/core.cljs"} ks]), :private true, :end-column 17, :end-line 4895, :column 8, :line 4895, :file "cljs/core.cljs"} obj-clone, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 8962, :column 3, :line 8962, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8962, :column 4, :line 8962, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8962, :column 12, :line 8962, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 17, :end-line 8959, :column 7, :line 8959, :file "cljs/core.cljs"} get-method ^{:arglists (^{:end-column 25, :end-line 8962, :column 3, :line 8962, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8962, :column 4, :line 8962, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8962, :column 12, :line 8962, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 17, :end-line 8959, :column 7, :line 8959, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8962, :column 4, :line 8962, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8962, :column 12, :line 8962, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 8962, :column 3, :line 8962, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8962, :column 4, :line 8962, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8962, :column 12, :line 8962, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 17, :end-line 8959, :column 7, :line 8959, :file "cljs/core.cljs"} get-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 4060, :column 35, :line 4060, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4060, :column 36, :line 4060, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 4060, :column 38, :line 4060, :file "cljs/core.cljs"} cnt]), :private true, :end-column 34, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} vector-index-out-of-bounds ^{:arglists (^{:end-column 42, :end-line 4060, :column 35, :line 4060, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4060, :column 36, :line 4060, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 4060, :column 38, :line 4060, :file "cljs/core.cljs"} cnt]), :private true, :end-column 34, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 37, :end-line 4060, :column 36, :line 4060, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 4060, :column 38, :line 4060, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 4060, :column 35, :line 4060, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4060, :column 36, :line 4060, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 4060, :column 38, :line 4060, :file "cljs/core.cljs"} cnt]), :private true, :end-column 34, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} vector-index-out-of-bounds, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 5025, :column 28, :line 5025, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5025, :column 29, :line 5025, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 5025, :column 7, :line 5025, :file "cljs/core.cljs"} es6-entries-iterator ^{:arglists (^{:end-column 34, :end-line 5025, :column 28, :line 5025, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5025, :column 29, :line 5025, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 5025, :column 7, :line 5025, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6EntriesIterator [^{:end-column 33, :end-line 5025, :column 29, :line 5025, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 5025, :column 28, :line 5025, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5025, :column 29, :line 5025, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 5025, :column 7, :line 5025, :file "cljs/core.cljs"} es6-entries-iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2044, :column 6, :line 2044, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 16, :end-line 2042, :column 7, :line 2042, :file "cljs/core.cljs"} bit-clear ^{:arglists (^{:end-column 8, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2044, :column 6, :line 2044, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 16, :end-line 2042, :column 7, :line 2042, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2044, :column 6, :line 2044, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2044, :column 6, :line 2044, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 16, :end-line 2042, :column 7, :line 2042, :file "cljs/core.cljs"} bit-clear, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} Range {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} Range, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 7644, :column 16, :line 7644, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 10, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3831, :column 4, :line 3831, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3831, :column 5, :line 3831, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3831, :column 10, :line 3831, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3818, :column 7, :line 3818, :file "cljs/core.cljs"} filter ^{:arglists (^{:end-column 10, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3831, :column 4, :line 3831, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3831, :column 5, :line 3831, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3831, :column 10, :line 3831, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3818, :column 7, :line 3818, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 9, :end-line 3831, :column 5, :line 3831, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3831, :column 10, :line 3831, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3831, :column 4, :line 3831, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3831, :column 5, :line 3831, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3831, :column 10, :line 3831, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3818, :column 7, :line 3818, :file "cljs/core.cljs"} filter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} ->PersistentTreeMapSeq ^{:arglists ([^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} ->PersistentTreeMapSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 48, :end-line 5449, :column 27, :line 5449, :file "cljs/core.cljs"} create-array-node-seq ^{:arglists (^{:end-column 11, :end-line 6046, :column 4, :line 6046, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6046, :column 5, :line 6046, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 6047, :column 4, :line 6047, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6047, :column 5, :line 6047, :file "cljs/core.cljs"} meta ^{:end-column 15, :end-line 6047, :column 10, :line 6047, :file "cljs/core.cljs"} nodes ^{:end-column 17, :end-line 6047, :column 16, :line 6047, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 6047, :column 18, :line 6047, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 6045, :column 8, :line 6045, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 6046, :column 5, :line 6046, :file "cljs/core.cljs"} nodes] [^{:end-column 9, :end-line 6047, :column 5, :line 6047, :file "cljs/core.cljs"} meta ^{:end-column 15, :end-line 6047, :column 10, :line 6047, :file "cljs/core.cljs"} nodes ^{:end-column 17, :end-line 6047, :column 16, :line 6047, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 6047, :column 18, :line 6047, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6046, :column 4, :line 6046, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6046, :column 5, :line 6046, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 6047, :column 4, :line 6047, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6047, :column 5, :line 6047, :file "cljs/core.cljs"} meta ^{:end-column 15, :end-line 6047, :column 10, :line 6047, :file "cljs/core.cljs"} nodes ^{:end-column 17, :end-line 6047, :column 16, :line 6047, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 6047, :column 18, :line 6047, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 6045, :column 8, :line 6045, :file "cljs/core.cljs"} create-array-node-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n! ^{:arglists (^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 23, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} IWithMeta ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/MetaFn cljs.core/RSeq cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 23, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 23, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} IWithMeta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 490, :column 10, :line 490, :file "cljs/core.cljs"} list ^{:arglists (^{:end-column 18, :end-line 2335, :column 12, :line 2335, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 2335, :column 13, :line 2335, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 2335, :column 15, :line 2335, :file "cljs/core.cljs"} xs]), :end-column 11, :end-line 2335, :column 7, :line 2335, :file "cljs/core.cljs"} {:arglists (^^{:end-column 39, :end-line 2345, :column 29, :line 2345, :file "cljs/core.cljs"} not-native [& ^{:end-column 17, :end-line 2335, :column 15, :line 2335, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2335, :column 12, :line 2335, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 2335, :column 13, :line 2335, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 2335, :column 15, :line 2335, :file "cljs/core.cljs"} xs]), :end-column 11, :end-line 2335, :column 7, :line 2335, :file "cljs/core.cljs"} list, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1772, :column 15, :line 1772, :file "cljs/core.cljs"} + ^{:arglists (^{:end-column 6, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1772, :column 15, :line 1772, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1772, :column 15, :line 1772, :file "cljs/core.cljs"} +, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} IndexedSeqIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} IndexedSeqIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 920, :column 29, :line 920, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 14, :end-line 7764, :column 3, :line 7764, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7764, :column 4, :line 7764, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 7764, :column 9, :line 7764, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 17, :end-line 7762, :column 7, :line 7762, :file "cljs/core.cljs"} split-with ^{:arglists (^{:end-column 14, :end-line 7764, :column 3, :line 7764, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7764, :column 4, :line 7764, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 7764, :column 9, :line 7764, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 17, :end-line 7762, :column 7, :line 7762, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 8, :end-line 7764, :column 4, :line 7764, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 7764, :column 9, :line 7764, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7764, :column 3, :line 7764, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7764, :column 4, :line 7764, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 7764, :column 9, :line 7764, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 17, :end-line 7762, :column 7, :line 7762, :file "cljs/core.cljs"} split-with, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} ->VectorNode ^{:arglists ([^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} ->VectorNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 188, :column 4, :line 188, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 188, :column 5, :line 188, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 188, :column 11, :line 188, :file "cljs/core.cljs"} i ^{:end-column 16, :end-line 188, :column 13, :line 188, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 5, :line 190, :file "cljs/core.cljs"} array ^{:end-column 14, :end-line 190, :column 11, :line 190, :file "cljs/core.cljs"} idx ^{:end-column 19, :end-line 190, :column 15, :line 190, :file "cljs/core.cljs"} idx2 ^{:end-column 21, :end-line 190, :column 20, :line 190, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 190, :column 22, :line 190, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 11, :end-line 186, :column 7, :line 186, :file "cljs/core.cljs"} aset ^{:arglists (^{:end-column 17, :end-line 188, :column 4, :line 188, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 188, :column 5, :line 188, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 188, :column 11, :line 188, :file "cljs/core.cljs"} i ^{:end-column 16, :end-line 188, :column 13, :line 188, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 5, :line 190, :file "cljs/core.cljs"} array ^{:end-column 14, :end-line 190, :column 11, :line 190, :file "cljs/core.cljs"} idx ^{:end-column 19, :end-line 190, :column 15, :line 190, :file "cljs/core.cljs"} idx2 ^{:end-column 21, :end-line 190, :column 20, :line 190, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 190, :column 22, :line 190, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 11, :end-line 186, :column 7, :line 186, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 188, :column 5, :line 188, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 188, :column 11, :line 188, :file "cljs/core.cljs"} i ^{:end-column 16, :end-line 188, :column 13, :line 188, :file "cljs/core.cljs"} val] [^{:end-column 10, :end-line 190, :column 5, :line 190, :file "cljs/core.cljs"} array ^{:end-column 14, :end-line 190, :column 11, :line 190, :file "cljs/core.cljs"} idx ^{:end-column 19, :end-line 190, :column 15, :line 190, :file "cljs/core.cljs"} idx2 & ^{:end-column 26, :end-line 190, :column 22, :line 190, :file "cljs/core.cljs"} idxv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 188, :column 4, :line 188, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 188, :column 5, :line 188, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 188, :column 11, :line 188, :file "cljs/core.cljs"} i ^{:end-column 16, :end-line 188, :column 13, :line 188, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 5, :line 190, :file "cljs/core.cljs"} array ^{:end-column 14, :end-line 190, :column 11, :line 190, :file "cljs/core.cljs"} idx ^{:end-column 19, :end-line 190, :column 15, :line 190, :file "cljs/core.cljs"} idx2 ^{:end-column 21, :end-line 190, :column 20, :line 190, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 190, :column 22, :line 190, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 11, :end-line 186, :column 7, :line 186, :file "cljs/core.cljs"} aset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 428, :column 31, :line 428, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 428, :column 32, :line 428, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 428, :column 34, :line 428, :file "cljs/core.cljs"} n]), :tag ^{:end-column 14, :end-line 428, :column 8, :line 428, :file "cljs/core.cljs"} number, :end-column 30, :end-line 428, :column 15, :line 428, :file "cljs/core.cljs"} int-rotate-left ^{:arglists (^{:end-column 36, :end-line 428, :column 31, :line 428, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 428, :column 32, :line 428, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 428, :column 34, :line 428, :file "cljs/core.cljs"} n]), :tag ^{:end-column 14, :end-line 428, :column 8, :line 428, :file "cljs/core.cljs"} number, :end-column 30, :end-line 428, :column 15, :line 428, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 33, :end-line 428, :column 32, :line 428, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 428, :column 34, :line 428, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 428, :column 31, :line 428, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 428, :column 32, :line 428, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 428, :column 34, :line 428, :file "cljs/core.cljs"} n]), :tag ^{:end-column 14, :end-line 428, :column 8, :line 428, :file "cljs/core.cljs"} number, :end-column 30, :end-line 428, :column 15, :line 428, :file "cljs/core.cljs"} int-rotate-left, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2462, :column 4, :line 2462, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2462, :column 5, :line 2462, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2471, :column 4, :line 2471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2471, :column 5, :line 2471, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 2471, :column 8, :line 2471, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 14, :end-line 2459, :column 7, :line 2459, :file "cljs/core.cljs"} keyword ^{:arglists (^{:end-column 10, :end-line 2462, :column 4, :line 2462, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2462, :column 5, :line 2462, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2471, :column 4, :line 2471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2471, :column 5, :line 2471, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 2471, :column 8, :line 2471, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 14, :end-line 2459, :column 7, :line 2459, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2462, :column 5, :line 2462, :file "cljs/core.cljs"} name] ^cljs.core/Keyword [^{:end-column 7, :end-line 2471, :column 5, :line 2471, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 2471, :column 8, :line 2471, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2462, :column 4, :line 2462, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2462, :column 5, :line 2462, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2471, :column 4, :line 2471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2471, :column 5, :line 2471, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 2471, :column 8, :line 2471, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 14, :end-line 2459, :column 7, :line 2459, :file "cljs/core.cljs"} keyword, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} ->Cons ^{:arglists ([^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} ->Cons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 6365, :column 28, :line 6365, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6365, :column 29, :line 6365, :file "cljs/core.cljs"} tree ^{:end-column 44, :end-line 6365, :column 34, :line 6365, :file "cljs/core.cljs"} ascending? ^{:end-column 48, :end-line 6365, :column 45, :line 6365, :file "cljs/core.cljs"} cnt]), :private true, :end-column 27, :end-line 6365, :column 8, :line 6365, :file "cljs/core.cljs"} create-tree-map-seq ^{:arglists (^{:end-column 49, :end-line 6365, :column 28, :line 6365, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6365, :column 29, :line 6365, :file "cljs/core.cljs"} tree ^{:end-column 44, :end-line 6365, :column 34, :line 6365, :file "cljs/core.cljs"} ascending? ^{:end-column 48, :end-line 6365, :column 45, :line 6365, :file "cljs/core.cljs"} cnt]), :private true, :end-column 27, :end-line 6365, :column 8, :line 6365, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 33, :end-line 6365, :column 29, :line 6365, :file "cljs/core.cljs"} tree ^{:end-column 44, :end-line 6365, :column 34, :line 6365, :file "cljs/core.cljs"} ascending? ^{:end-column 48, :end-line 6365, :column 45, :line 6365, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 6365, :column 28, :line 6365, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6365, :column 29, :line 6365, :file "cljs/core.cljs"} tree ^{:end-column 44, :end-line 6365, :column 34, :line 6365, :file "cljs/core.cljs"} ascending? ^{:end-column 48, :end-line 6365, :column 45, :line 6365, :file "cljs/core.cljs"} cnt]), :private true, :end-column 27, :end-line 6365, :column 8, :line 6365, :file "cljs/core.cljs"} create-tree-map-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 25, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} ICollection ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 25, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 25, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} ICollection, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3105, :column 4, :line 3105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3105, :column 5, :line 3105, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3105, :column 11, :line 3105, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3108, :column 5, :line 3108, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3108, :column 11, :line 3108, :file "cljs/core.cljs"} iters ^{:end-column 22, :end-line 3108, :column 17, :line 3108, :file "cljs/core.cljs"} nexts]), :end-column 20, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} multi-stepper ^{:arglists (^{:end-column 17, :end-line 3105, :column 4, :line 3105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3105, :column 5, :line 3105, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3105, :column 11, :line 3105, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3108, :column 5, :line 3108, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3108, :column 11, :line 3108, :file "cljs/core.cljs"} iters ^{:end-column 22, :end-line 3108, :column 17, :line 3108, :file "cljs/core.cljs"} nexts]), :end-column 20, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 3105, :column 5, :line 3105, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3105, :column 11, :line 3105, :file "cljs/core.cljs"} iters] ^cljs.core/MultiStepper [^{:end-column 10, :end-line 3108, :column 5, :line 3108, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3108, :column 11, :line 3108, :file "cljs/core.cljs"} iters ^{:end-column 22, :end-line 3108, :column 17, :line 3108, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3105, :column 4, :line 3105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3105, :column 5, :line 3105, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3105, :column 11, :line 3105, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3108, :column 5, :line 3108, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3108, :column 11, :line 3108, :file "cljs/core.cljs"} iters ^{:end-column 22, :end-line 3108, :column 17, :line 3108, :file "cljs/core.cljs"} nexts]), :end-column 20, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} multi-stepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1988, :column 13, :line 1988, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1988, :column 14, :line 1988, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1988, :column 7, :line 1988, :file "cljs/core.cljs"} chars ^{:arglists (^{:end-column 16, :end-line 1988, :column 13, :line 1988, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1988, :column 14, :line 1988, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1988, :column 7, :line 1988, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1988, :column 14, :line 1988, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1988, :column 13, :line 1988, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1988, :column 14, :line 1988, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1988, :column 7, :line 1988, :file "cljs/core.cljs"} chars, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2129, :column 4, :line 2129, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2130, :column 4, :line 2130, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2130, :column 5, :line 2130, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2133, :column 4, :line 2133, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2133, :column 5, :line 2133, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2133, :column 7, :line 2133, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 2133, :column 9, :line 2133, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 10, :end-line 2125, :column 7, :line 2125, :file "cljs/core.cljs"} str ^{:arglists (^{:end-column 6, :end-line 2129, :column 4, :line 2129, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2130, :column 4, :line 2130, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2130, :column 5, :line 2130, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2133, :column 4, :line 2133, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2133, :column 5, :line 2133, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2133, :column 7, :line 2133, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 2133, :column 9, :line 2133, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 10, :end-line 2125, :column 7, :line 2125, :file "cljs/core.cljs"} {:arglists (^string [] [^{:end-column 6, :end-line 2130, :column 5, :line 2130, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 2133, :column 5, :line 2133, :file "cljs/core.cljs"} x & ^{:end-column 11, :end-line 2133, :column 9, :line 2133, :file "cljs/core.cljs"} ys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2129, :column 4, :line 2129, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2130, :column 4, :line 2130, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2130, :column 5, :line 2130, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2133, :column 4, :line 2133, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2133, :column 5, :line 2133, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2133, :column 7, :line 2133, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 2133, :column 9, :line 2133, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 10, :end-line 2125, :column 7, :line 2125, :file "cljs/core.cljs"} str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 684, :column 3, :line 684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 684, :column 4, :line 684, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 681, :column 12, :line 681, :file "cljs/core.cljs"} next ^{:arglists (^{:end-column 9, :end-line 684, :column 3, :line 684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 684, :column 4, :line 684, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 681, :column 12, :line 681, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 684, :column 4, :line 684, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 684, :column 3, :line 684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 684, :column 4, :line 684, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 681, :column 12, :line 681, :file "cljs/core.cljs"} next, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 18, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} ASeq ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Cons cljs.core/List cljs.core/IndexedSeq), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 18, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 18, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} ASeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 39, :end-line 8064, :column 21, :line 8064, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 8064, :column 22, :line 8064, :file "cljs/core.cljs"} objs ^{:end-column 33, :end-line 8064, :column 27, :line 8064, :file "cljs/core.cljs"} writer ^{:end-column 38, :end-line 8064, :column 34, :line 8064, :file "cljs/core.cljs"} opts]), :end-column 20, :end-line 8064, :column 7, :line 8064, :file "cljs/core.cljs"} pr-seq-writer ^{:arglists (^{:end-column 39, :end-line 8064, :column 21, :line 8064, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 8064, :column 22, :line 8064, :file "cljs/core.cljs"} objs ^{:end-column 33, :end-line 8064, :column 27, :line 8064, :file "cljs/core.cljs"} writer ^{:end-column 38, :end-line 8064, :column 34, :line 8064, :file "cljs/core.cljs"} opts]), :end-column 20, :end-line 8064, :column 7, :line 8064, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 8064, :column 22, :line 8064, :file "cljs/core.cljs"} objs ^{:end-column 33, :end-line 8064, :column 27, :line 8064, :file "cljs/core.cljs"} writer ^{:end-column 38, :end-line 8064, :column 34, :line 8064, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 39, :end-line 8064, :column 21, :line 8064, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 8064, :column 22, :line 8064, :file "cljs/core.cljs"} objs ^{:end-column 33, :end-line 8064, :column 27, :line 8064, :file "cljs/core.cljs"} writer ^{:end-column 38, :end-line 8064, :column 34, :line 8064, :file "cljs/core.cljs"} opts]), :end-column 20, :end-line 8064, :column 7, :line 8064, :file "cljs/core.cljs"} pr-seq-writer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} SeqIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} SeqIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 50, :end-line 3015, :column 18, :line 3015, :file "cljs/core.cljs"} [^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next], :protocols #{Object}}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 17, :end-line 217, :column 14, :line 217, :file "cljs/core.cljs"} IFn ^{:impls (cljs.core/MultiFn cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/Keyword cljs.core/MetaFn cljs.core/Symbol), :protocol-info {:methods {^{:end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 17, :end-line 217, :column 14, :line 217, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 17, :end-line 217, :column 14, :line 217, :file "cljs/core.cljs"} IFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7896, :column 15, :line 7896, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7896, :column 16, :line 7896, :file "cljs/core.cljs"} o]), :end-column 14, :end-line 7896, :column 7, :line 7896, :file "cljs/core.cljs"} regexp? ^{:arglists (^{:end-column 18, :end-line 7896, :column 15, :line 7896, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7896, :column 16, :line 7896, :file "cljs/core.cljs"} o]), :end-column 14, :end-line 7896, :column 7, :line 7896, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 17, :end-line 7896, :column 16, :line 7896, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7896, :column 15, :line 7896, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7896, :column 16, :line 7896, :file "cljs/core.cljs"} o]), :end-column 14, :end-line 7896, :column 7, :line 7896, :file "cljs/core.cljs"} regexp?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 777, :column 10, :line 777, :file "cljs/core.cljs"} hash-map ^{:arglists (^{:end-column 14, :end-line 6978, :column 3, :line 6978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6978, :column 4, :line 6978, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6978, :column 6, :line 6978, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 15, :end-line 6975, :column 7, :line 6975, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [& ^{:end-column 13, :end-line 6978, :column 6, :line 6978, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6978, :column 3, :line 6978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6978, :column 4, :line 6978, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6978, :column 6, :line 6978, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 15, :end-line 6975, :column 7, :line 6975, :file "cljs/core.cljs"} hash-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8673, :column 4, :line 8673, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8673, :column 5, :line 8673, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8673, :column 9, :line 8673, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8676, :column 4, :line 8676, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8676, :column 5, :line 8676, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8676, :column 7, :line 8676, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8676, :column 11, :line 8676, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 15, :end-line 8669, :column 7, :line 8669, :file "cljs/core.cljs"} underive ^{:arglists (^{:end-column 16, :end-line 8673, :column 4, :line 8673, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8673, :column 5, :line 8673, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8673, :column 9, :line 8673, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8676, :column 4, :line 8676, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8676, :column 5, :line 8676, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8676, :column 7, :line 8676, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8676, :column 11, :line 8676, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 15, :end-line 8669, :column 7, :line 8669, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 8, :end-line 8673, :column 5, :line 8673, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8673, :column 9, :line 8673, :file "cljs/core.cljs"} parent] [^{:end-column 6, :end-line 8676, :column 5, :line 8676, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8676, :column 7, :line 8676, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8676, :column 11, :line 8676, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8673, :column 4, :line 8673, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8673, :column 5, :line 8673, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8673, :column 9, :line 8673, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8676, :column 4, :line 8676, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8676, :column 5, :line 8676, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8676, :column 7, :line 8676, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8676, :column 11, :line 8676, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 15, :end-line 8669, :column 7, :line 8669, :file "cljs/core.cljs"} underive, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1488, :column 4, :line 1488, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1488, :column 5, :line 1488, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1488, :column 10, :line 1488, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1488, :column 12, :line 1488, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1488, :column 15, :line 1488, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1488, :column 17, :line 1488, :file "cljs/core.cljs"} len]), :private true, :end-column 18, :end-line 1487, :column 8, :line 1487, :file "cljs/core.cljs"} array-copy ^{:arglists (^{:end-column 21, :end-line 1488, :column 4, :line 1488, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1488, :column 5, :line 1488, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1488, :column 10, :line 1488, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1488, :column 12, :line 1488, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1488, :column 15, :line 1488, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1488, :column 17, :line 1488, :file "cljs/core.cljs"} len]), :private true, :end-column 18, :end-line 1487, :column 8, :line 1487, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1488, :column 5, :line 1488, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1488, :column 10, :line 1488, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1488, :column 12, :line 1488, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1488, :column 15, :line 1488, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1488, :column 17, :line 1488, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1488, :column 4, :line 1488, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1488, :column 5, :line 1488, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1488, :column 10, :line 1488, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1488, :column 12, :line 1488, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1488, :column 15, :line 1488, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1488, :column 17, :line 1488, :file "cljs/core.cljs"} len]), :private true, :end-column 18, :end-line 1487, :column 8, :line 1487, :file "cljs/core.cljs"} array-copy, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4873, :column 29, :line 4873, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4873, :column 30, :line 4873, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 4873, :column 32, :line 4873, :file "cljs/core.cljs"} b]), :private true, :end-column 28, :end-line 4873, :column 8, :line 4873, :file "cljs/core.cljs"} obj-map-compare-keys ^{:arglists (^{:end-column 34, :end-line 4873, :column 29, :line 4873, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4873, :column 30, :line 4873, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 4873, :column 32, :line 4873, :file "cljs/core.cljs"} b]), :private true, :end-column 28, :end-line 4873, :column 8, :line 4873, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 4873, :column 30, :line 4873, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 4873, :column 32, :line 4873, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4873, :column 29, :line 4873, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4873, :column 30, :line 4873, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 4873, :column 32, :line 4873, :file "cljs/core.cljs"} b]), :private true, :end-column 28, :end-line 4873, :column 8, :line 4873, :file "cljs/core.cljs"} obj-map-compare-keys, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset! ^{:arglists (^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest ^{:arglists (^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2981, :column 16, :line 2981, :file "cljs/core.cljs"} []), :end-column 15, :end-line 2981, :column 7, :line 2981, :file "cljs/core.cljs"} nil-iter ^{:arglists (^{:end-column 18, :end-line 2981, :column 16, :line 2981, :file "cljs/core.cljs"} []), :end-column 15, :end-line 2981, :column 7, :line 2981, :file "cljs/core.cljs"} {:arglists (^cljs.core/t8410 []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2981, :column 16, :line 2981, :file "cljs/core.cljs"} []), :end-column 15, :end-line 2981, :column 7, :line 2981, :file "cljs/core.cljs"} nil-iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 4131, :column 31, :line 4131, :file "cljs/core.cljs"} pr-writer ^{:arglists (^{:end-column 20, :end-line 7997, :column 3, :line 7997, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7997, :column 4, :line 7997, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 7997, :column 8, :line 7997, :file "cljs/core.cljs"} writer ^{:end-column 19, :end-line 7997, :column 15, :line 7997, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 17, :end-line 7993, :column 8, :line 7993, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7997, :column 4, :line 7997, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 7997, :column 8, :line 7997, :file "cljs/core.cljs"} writer ^{:end-column 19, :end-line 7997, :column 15, :line 7997, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7997, :column 3, :line 7997, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7997, :column 4, :line 7997, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 7997, :column 8, :line 7997, :file "cljs/core.cljs"} writer ^{:end-column 19, :end-line 7997, :column 15, :line 7997, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 17, :end-line 7993, :column 8, :line 7993, :file "cljs/core.cljs"} pr-writer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1509, :column 3, :line 1509, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1509, :column 4, :line 1509, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 15, :end-line 1507, :column 8, :line 1507, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1507, :column 16, :line 1507, :file "cljs/core.cljs"} false? ^{:arglists (^{:end-column 6, :end-line 1509, :column 3, :line 1509, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1509, :column 4, :line 1509, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 15, :end-line 1507, :column 8, :line 1507, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1507, :column 16, :line 1507, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1509, :column 4, :line 1509, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1509, :column 3, :line 1509, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1509, :column 4, :line 1509, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 15, :end-line 1507, :column 8, :line 1507, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1507, :column 16, :line 1507, :file "cljs/core.cljs"} false?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} RangedIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} RangedIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 79, :end-line 4111, :column 25, :line 4111, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end], :protocols #{Object}}, ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably* ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1990, :column 12, :line 1990, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 1990, :column 13, :line 1990, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} ints ^{:arglists (^{:end-column 15, :end-line 1990, :column 12, :line 1990, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 1990, :column 13, :line 1990, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 1990, :column 13, :line 1990, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1990, :column 12, :line 1990, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 1990, :column 13, :line 1990, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} ints, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3574, :column 4, :line 3574, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3574, :column 5, :line 3574, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3582, :column 4, :line 3582, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3582, :column 5, :line 3582, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3582, :column 8, :line 3582, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3590, :column 4, :line 3590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3590, :column 5, :line 3590, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3590, :column 8, :line 3590, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3590, :column 11, :line 3590, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3598, :column 8, :line 3598, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3598, :column 11, :line 3598, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3598, :column 14, :line 3598, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3598, :column 16, :line 3598, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 14, :end-line 3569, :column 7, :line 3569, :file "cljs/core.cljs"} some-fn ^{:arglists (^{:end-column 7, :end-line 3574, :column 4, :line 3574, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3574, :column 5, :line 3574, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3582, :column 4, :line 3582, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3582, :column 5, :line 3582, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3582, :column 8, :line 3582, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3590, :column 4, :line 3590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3590, :column 5, :line 3590, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3590, :column 8, :line 3590, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3590, :column 11, :line 3590, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3598, :column 8, :line 3598, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3598, :column 11, :line 3598, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3598, :column 14, :line 3598, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3598, :column 16, :line 3598, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 14, :end-line 3569, :column 7, :line 3569, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3574, :column 5, :line 3574, :file "cljs/core.cljs"} p] ^function [^{:end-column 7, :end-line 3582, :column 5, :line 3582, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3582, :column 8, :line 3582, :file "cljs/core.cljs"} p2] ^function [^{:end-column 7, :end-line 3590, :column 5, :line 3590, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3590, :column 8, :line 3590, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3590, :column 11, :line 3590, :file "cljs/core.cljs"} p3] ^function [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3598, :column 8, :line 3598, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3598, :column 11, :line 3598, :file "cljs/core.cljs"} p3 & ^{:end-column 18, :end-line 3598, :column 16, :line 3598, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3574, :column 4, :line 3574, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3574, :column 5, :line 3574, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3582, :column 4, :line 3582, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3582, :column 5, :line 3582, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3582, :column 8, :line 3582, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3590, :column 4, :line 3590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3590, :column 5, :line 3590, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3590, :column 8, :line 3590, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3590, :column 11, :line 3590, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3598, :column 8, :line 3598, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3598, :column 11, :line 3598, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3598, :column 14, :line 3598, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3598, :column 16, :line 3598, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 14, :end-line 3569, :column 7, :line 3569, :file "cljs/core.cljs"} some-fn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline* ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 1639, :column 10, :line 1639, :file "cljs/core.cljs"} to-array ^{:arglists (^{:end-column 6, :end-line 2681, :column 3, :line 2681, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 15, :end-line 2679, :column 7, :line 2679, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 5, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2681, :column 3, :line 2681, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 15, :end-line 2679, :column 7, :line 2679, :file "cljs/core.cljs"} to-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 4430, :column 10, :line 4430, :file "cljs/core.cljs"} build-subvec ^{:arglists (^{:end-column 46, :end-line 4528, :column 21, :line 4528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4528, :column 22, :line 4528, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4528, :column 27, :line 4528, :file "cljs/core.cljs"} v ^{:end-column 34, :end-line 4528, :column 29, :line 4528, :file "cljs/core.cljs"} start ^{:end-column 38, :end-line 4528, :column 35, :line 4528, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 4528, :column 39, :line 4528, :file "cljs/core.cljs"} __hash]), :private true, :end-column 20, :end-line 4528, :column 8, :line 4528, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 26, :end-line 4528, :column 22, :line 4528, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4528, :column 27, :line 4528, :file "cljs/core.cljs"} v ^{:end-column 34, :end-line 4528, :column 29, :line 4528, :file "cljs/core.cljs"} start ^{:end-column 38, :end-line 4528, :column 35, :line 4528, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 4528, :column 39, :line 4528, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 4528, :column 21, :line 4528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4528, :column 22, :line 4528, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4528, :column 27, :line 4528, :file "cljs/core.cljs"} v ^{:end-column 34, :end-line 4528, :column 29, :line 4528, :file "cljs/core.cljs"} start ^{:end-column 38, :end-line 4528, :column 35, :line 4528, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 4528, :column 39, :line 4528, :file "cljs/core.cljs"} __hash]), :private true, :end-column 20, :end-line 4528, :column 8, :line 4528, :file "cljs/core.cljs"} build-subvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2407, :column 22, :line 2407, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2407, :column 23, :line 2407, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2407, :column 8, :line 2407, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2407, :column 16, :line 2407, :file "cljs/core.cljs"} list? ^{:arglists (^{:end-column 25, :end-line 2407, :column 22, :line 2407, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2407, :column 23, :line 2407, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2407, :column 8, :line 2407, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2407, :column 16, :line 2407, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 24, :end-line 2407, :column 23, :line 2407, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2407, :column 22, :line 2407, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2407, :column 23, :line 2407, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2407, :column 8, :line 2407, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2407, :column 16, :line 2407, :file "cljs/core.cljs"} list?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 6794, :column 24, :line 6794, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6794, :column 25, :line 6794, :file "cljs/core.cljs"} comp ^{:end-column 34, :end-line 6794, :column 30, :line 6794, :file "cljs/core.cljs"} tree ^{:end-column 36, :end-line 6794, :column 35, :line 6794, :file "cljs/core.cljs"} k ^{:end-column 42, :end-line 6794, :column 37, :line 6794, :file "cljs/core.cljs"} found]), :private true, :end-column 23, :end-line 6794, :column 8, :line 6794, :file "cljs/core.cljs"} tree-map-remove ^{:arglists (^{:end-column 43, :end-line 6794, :column 24, :line 6794, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6794, :column 25, :line 6794, :file "cljs/core.cljs"} comp ^{:end-column 34, :end-line 6794, :column 30, :line 6794, :file "cljs/core.cljs"} tree ^{:end-column 36, :end-line 6794, :column 35, :line 6794, :file "cljs/core.cljs"} k ^{:end-column 42, :end-line 6794, :column 37, :line 6794, :file "cljs/core.cljs"} found]), :private true, :end-column 23, :end-line 6794, :column 8, :line 6794, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 6794, :column 25, :line 6794, :file "cljs/core.cljs"} comp ^{:end-column 34, :end-line 6794, :column 30, :line 6794, :file "cljs/core.cljs"} tree ^{:end-column 36, :end-line 6794, :column 35, :line 6794, :file "cljs/core.cljs"} k ^{:end-column 42, :end-line 6794, :column 37, :line 6794, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 6794, :column 24, :line 6794, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6794, :column 25, :line 6794, :file "cljs/core.cljs"} comp ^{:end-column 34, :end-line 6794, :column 30, :line 6794, :file "cljs/core.cljs"} tree ^{:end-column 36, :end-line 6794, :column 35, :line 6794, :file "cljs/core.cljs"} k ^{:end-column 42, :end-line 6794, :column 37, :line 6794, :file "cljs/core.cljs"} found]), :private true, :end-column 23, :end-line 6794, :column 8, :line 6794, :file "cljs/core.cljs"} tree-map-remove, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} HashCollisionNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} HashCollisionNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 43, :end-line 5830, :column 28, :line 5827, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array? ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8696, :column 3, :line 8696, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8696, :column 4, :line 8696, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8696, :column 6, :line 8696, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8696, :column 8, :line 8696, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 16, :end-line 8695, :column 8, :line 8695, :file "cljs/core.cljs"} prefers* ^{:arglists (^{:end-column 21, :end-line 8696, :column 3, :line 8696, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8696, :column 4, :line 8696, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8696, :column 6, :line 8696, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8696, :column 8, :line 8696, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 16, :end-line 8695, :column 8, :line 8695, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 8696, :column 4, :line 8696, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8696, :column 6, :line 8696, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8696, :column 8, :line 8696, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8696, :column 3, :line 8696, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8696, :column 4, :line 8696, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8696, :column 6, :line 8696, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8696, :column 8, :line 8696, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 16, :end-line 8695, :column 8, :line 8695, :file "cljs/core.cljs"} prefers*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 628, :column 13, :line 628, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 628, :column 14, :line 628, :file "cljs/core.cljs"} value]), :end-column 12, :end-line 628, :column 7, :line 628, :file "cljs/core.cljs"} clone ^{:arglists (^{:end-column 20, :end-line 628, :column 13, :line 628, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 628, :column 14, :line 628, :file "cljs/core.cljs"} value]), :end-column 12, :end-line 628, :column 7, :line 628, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj [^{:end-column 19, :end-line 628, :column 14, :line 628, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 628, :column 13, :line 628, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 628, :column 14, :line 628, :file "cljs/core.cljs"} value]), :end-column 12, :end-line 628, :column 7, :line 628, :file "cljs/core.cljs"} clone, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4859, :column 19, :line 4859, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4859, :column 20, :line 4859, :file "cljs/core.cljs"} incr ^{:end-column 26, :end-line 4859, :column 25, :line 4859, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4859, :column 27, :line 4859, :file "cljs/core.cljs"} array]), :private true, :end-column 18, :end-line 4859, :column 8, :line 4859, :file "cljs/core.cljs"} scan-array ^{:arglists (^{:end-column 33, :end-line 4859, :column 19, :line 4859, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4859, :column 20, :line 4859, :file "cljs/core.cljs"} incr ^{:end-column 26, :end-line 4859, :column 25, :line 4859, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4859, :column 27, :line 4859, :file "cljs/core.cljs"} array]), :private true, :end-column 18, :end-line 4859, :column 8, :line 4859, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 4859, :column 20, :line 4859, :file "cljs/core.cljs"} incr ^{:end-column 26, :end-line 4859, :column 25, :line 4859, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4859, :column 27, :line 4859, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4859, :column 19, :line 4859, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4859, :column 20, :line 4859, :file "cljs/core.cljs"} incr ^{:end-column 26, :end-line 4859, :column 25, :line 4859, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4859, :column 27, :line 4859, :file "cljs/core.cljs"} array]), :private true, :end-column 18, :end-line 4859, :column 8, :line 4859, :file "cljs/core.cljs"} scan-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2054, :column 3, :line 2054, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2054, :column 4, :line 2054, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 14, :end-line 2052, :column 7, :line 2052, :file "cljs/core.cljs"} bit-not ^{:arglists (^{:end-column 6, :end-line 2054, :column 3, :line 2054, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2054, :column 4, :line 2054, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 14, :end-line 2052, :column 7, :line 2052, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2054, :column 4, :line 2054, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2054, :column 3, :line 2054, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2054, :column 4, :line 2054, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 14, :end-line 2052, :column 7, :line 2052, :file "cljs/core.cljs"} bit-not, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7985, :column 3, :line 7985, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7985, :column 4, :line 7985, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 7984, :column 17, :line 7984, :file "cljs/core.cljs"} quote-string ^{:arglists (^{:end-column 6, :end-line 7985, :column 3, :line 7985, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7985, :column 4, :line 7985, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 7984, :column 17, :line 7984, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 7985, :column 4, :line 7985, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7985, :column 3, :line 7985, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7985, :column 4, :line 7985, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 7984, :column 17, :line 7984, :file "cljs/core.cljs"} quote-string, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1869, :column 8, :line 1869, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1869, :column 15, :line 1869, :file "cljs/core.cljs"} byte ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1869, :column 8, :line 1869, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1869, :column 15, :line 1869, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1869, :column 8, :line 1869, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1869, :column 15, :line 1869, :file "cljs/core.cljs"} byte, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1857, :column 5, :line 1857, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1858, :column 7, :line 1858, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1859, :column 9, :line 1859, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1859, :column 11, :line 1859, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 14, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} max ^{:arglists (^{:end-column 7, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1857, :column 5, :line 1857, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1858, :column 7, :line 1858, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1859, :column 9, :line 1859, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1859, :column 11, :line 1859, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 14, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1857, :column 5, :line 1857, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1858, :column 7, :line 1858, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1859, :column 11, :line 1859, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1857, :column 5, :line 1857, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1858, :column 7, :line 1858, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1859, :column 9, :line 1859, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1859, :column 11, :line 1859, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 14, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} max, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 25, :end-line 380, :column 14, :line 380, :file "cljs/core.cljs"} IComparable ^{:impls (cljs.core/Symbol cljs.core/Keyword cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 25, :end-line 380, :column 14, :line 380, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 25, :end-line 380, :column 14, :line 380, :file "cljs/core.cljs"} IComparable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2093, :column 4, :line 2093, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2093, :column 5, :line 2093, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2094, :column 4, :line 2094, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2094, :column 5, :line 2094, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2094, :column 7, :line 2094, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2095, :column 4, :line 2095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2095, :column 5, :line 2095, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2095, :column 7, :line 2095, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2095, :column 9, :line 2095, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2095, :column 11, :line 2095, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 15, :end-line 2089, :column 8, :line 2089, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 2089, :column 16, :line 2089, :file "cljs/core.cljs"} == ^{:arglists (^{:end-column 7, :end-line 2093, :column 4, :line 2093, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2093, :column 5, :line 2093, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2094, :column 4, :line 2094, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2094, :column 5, :line 2094, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2094, :column 7, :line 2094, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2095, :column 4, :line 2095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2095, :column 5, :line 2095, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2095, :column 7, :line 2095, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2095, :column 9, :line 2095, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2095, :column 11, :line 2095, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 15, :end-line 2089, :column 8, :line 2089, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 2089, :column 16, :line 2089, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 2093, :column 5, :line 2093, :file "cljs/core.cljs"} x] ^^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean [^{:end-column 6, :end-line 2094, :column 5, :line 2094, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2094, :column 7, :line 2094, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 2095, :column 5, :line 2095, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2095, :column 7, :line 2095, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 2095, :column 11, :line 2095, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2093, :column 4, :line 2093, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2093, :column 5, :line 2093, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2094, :column 4, :line 2094, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2094, :column 5, :line 2094, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2094, :column 7, :line 2094, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2095, :column 4, :line 2095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2095, :column 5, :line 2095, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2095, :column 7, :line 2095, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2095, :column 9, :line 2095, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2095, :column 11, :line 2095, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 15, :end-line 2089, :column 8, :line 2089, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 2089, :column 16, :line 2089, :file "cljs/core.cljs"} ==, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8615, :column 4, :line 8615, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8615, :column 5, :line 8615, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8616, :column 4, :line 8616, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8616, :column 5, :line 8616, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8616, :column 7, :line 8616, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 14, :end-line 8610, :column 7, :line 8610, :file "cljs/core.cljs"} parents ^{:arglists (^{:end-column 9, :end-line 8615, :column 4, :line 8615, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8615, :column 5, :line 8615, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8616, :column 4, :line 8616, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8616, :column 5, :line 8616, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8616, :column 7, :line 8616, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 14, :end-line 8610, :column 7, :line 8610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8615, :column 5, :line 8615, :file "cljs/core.cljs"} tag] [^{:end-column 6, :end-line 8616, :column 5, :line 8616, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8616, :column 7, :line 8616, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8615, :column 4, :line 8615, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8615, :column 5, :line 8615, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8616, :column 4, :line 8616, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8616, :column 5, :line 8616, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8616, :column 7, :line 8616, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 14, :end-line 8610, :column 7, :line 8610, :file "cljs/core.cljs"} parents, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1136, :column 3, :line 1136, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1136, :column 4, :line 1136, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 12, :end-line 1133, :column 7, :line 1133, :file "cljs/core.cljs"} count ^{:arglists (^{:end-column 9, :end-line 1136, :column 3, :line 1136, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1136, :column 4, :line 1136, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 12, :end-line 1133, :column 7, :line 1133, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1136, :column 4, :line 1136, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1136, :column 3, :line 1136, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1136, :column 4, :line 1136, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 12, :end-line 1133, :column 7, :line 1133, :file "cljs/core.cljs"} count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin! ^{:arglists (^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 6200, :column 10, :line 6200, :file "cljs/core.cljs"} ->TransientHashMap ^{:arglists ([^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 6200, :column 10, :line 6200, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientHashMap [^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 6200, :column 10, :line 6200, :file "cljs/core.cljs"} ->TransientHashMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 2540, :column 10, :line 2540, :file "cljs/core.cljs"} ArrayChunk {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 20, :end-line 2559, :column 10, :line 2559, :file "cljs/core.cljs"} ArrayChunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 34, :end-line 2559, :column 21, :line 2559, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end], :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}}, ^{:arglists (^{:end-column 26, :end-line 7015, :column 4, :line 7015, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7015, :column 5, :line 7015, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7015, :column 16, :line 7015, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 7015, :column 18, :line 7015, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 20, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} sorted-map-by ^{:arglists (^{:end-column 26, :end-line 7015, :column 4, :line 7015, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7015, :column 5, :line 7015, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7015, :column 16, :line 7015, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 7015, :column 18, :line 7015, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 20, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 15, :end-line 7015, :column 5, :line 7015, :file "cljs/core.cljs"} comparator & ^{:end-column 25, :end-line 7015, :column 18, :line 7015, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 7015, :column 4, :line 7015, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7015, :column 5, :line 7015, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7015, :column 16, :line 7015, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 7015, :column 18, :line 7015, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 20, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} sorted-map-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 177, :column 10, :line 177, :file "cljs/core.cljs"} apply ^{:arglists (^{:end-column 12, :end-line 2908, :column 4, :line 2908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2908, :column 5, :line 2908, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2908, :column 7, :line 2908, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2916, :column 4, :line 2916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2916, :column 5, :line 2916, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2916, :column 7, :line 2916, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 2916, :column 9, :line 2916, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2925, :column 4, :line 2925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2925, :column 5, :line 2925, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2925, :column 7, :line 2925, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2925, :column 9, :line 2925, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 2925, :column 11, :line 2925, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2934, :column 4, :line 2934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2934, :column 5, :line 2934, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2934, :column 7, :line 2934, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2934, :column 9, :line 2934, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 2934, :column 11, :line 2934, :file "cljs/core.cljs"} z ^{:end-column 17, :end-line 2934, :column 13, :line 2934, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2943, :column 4, :line 2943, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2943, :column 5, :line 2943, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2943, :column 7, :line 2943, :file "cljs/core.cljs"} a ^{:end-column 10, :end-line 2943, :column 9, :line 2943, :file "cljs/core.cljs"} b ^{:end-column 12, :end-line 2943, :column 11, :line 2943, :file "cljs/core.cljs"} c ^{:end-column 14, :end-line 2943, :column 13, :line 2943, :file "cljs/core.cljs"} d ^{:end-column 16, :end-line 2943, :column 15, :line 2943, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2943, :column 17, :line 2943, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 12, :end-line 2905, :column 7, :line 2905, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 2908, :column 5, :line 2908, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2908, :column 7, :line 2908, :file "cljs/core.cljs"} args] [^{:end-column 6, :end-line 2916, :column 5, :line 2916, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2916, :column 7, :line 2916, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 2916, :column 9, :line 2916, :file "cljs/core.cljs"} args] [^{:end-column 6, :end-line 2925, :column 5, :line 2925, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2925, :column 7, :line 2925, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2925, :column 9, :line 2925, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 2925, :column 11, :line 2925, :file "cljs/core.cljs"} args] [^{:end-column 6, :end-line 2934, :column 5, :line 2934, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2934, :column 7, :line 2934, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2934, :column 9, :line 2934, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 2934, :column 11, :line 2934, :file "cljs/core.cljs"} z ^{:end-column 17, :end-line 2934, :column 13, :line 2934, :file "cljs/core.cljs"} args] [^{:end-column 6, :end-line 2943, :column 5, :line 2943, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2943, :column 7, :line 2943, :file "cljs/core.cljs"} a ^{:end-column 10, :end-line 2943, :column 9, :line 2943, :file "cljs/core.cljs"} b ^{:end-column 12, :end-line 2943, :column 11, :line 2943, :file "cljs/core.cljs"} c ^{:end-column 14, :end-line 2943, :column 13, :line 2943, :file "cljs/core.cljs"} d & ^{:end-column 21, :end-line 2943, :column 17, :line 2943, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2908, :column 4, :line 2908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2908, :column 5, :line 2908, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2908, :column 7, :line 2908, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2916, :column 4, :line 2916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2916, :column 5, :line 2916, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2916, :column 7, :line 2916, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 2916, :column 9, :line 2916, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2925, :column 4, :line 2925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2925, :column 5, :line 2925, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2925, :column 7, :line 2925, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2925, :column 9, :line 2925, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 2925, :column 11, :line 2925, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2934, :column 4, :line 2934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2934, :column 5, :line 2934, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2934, :column 7, :line 2934, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2934, :column 9, :line 2934, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 2934, :column 11, :line 2934, :file "cljs/core.cljs"} z ^{:end-column 17, :end-line 2934, :column 13, :line 2934, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2943, :column 4, :line 2943, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2943, :column 5, :line 2943, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2943, :column 7, :line 2943, :file "cljs/core.cljs"} a ^{:end-column 10, :end-line 2943, :column 9, :line 2943, :file "cljs/core.cljs"} b ^{:end-column 12, :end-line 2943, :column 11, :line 2943, :file "cljs/core.cljs"} c ^{:end-column 14, :end-line 2943, :column 13, :line 2943, :file "cljs/core.cljs"} d ^{:end-column 16, :end-line 2943, :column 15, :line 2943, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2943, :column 17, :line 2943, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 12, :end-line 2905, :column 7, :line 2905, :file "cljs/core.cljs"} apply, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 8582, :column 29, :line 8582, :file "cljs/core.cljs"} []), :private true, :end-column 28, :end-line 8582, :column 8, :line 8582, :file "cljs/core.cljs"} get-global-hierarchy ^{:arglists (^{:end-column 31, :end-line 8582, :column 29, :line 8582, :file "cljs/core.cljs"} []), :private true, :end-column 28, :end-line 8582, :column 8, :line 8582, :file "cljs/core.cljs"} {:arglists ([]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 8582, :column 29, :line 8582, :file "cljs/core.cljs"} []), :private true, :end-column 28, :end-line 8582, :column 8, :line 8582, :file "cljs/core.cljs"} get-global-hierarchy, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 508, :column 32, :line 508, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 508, :column 33, :line 508, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} add-to-string-hash-cache ^{:arglists (^{:end-column 35, :end-line 508, :column 32, :line 508, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 508, :column 33, :line 508, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 34, :end-line 508, :column 33, :line 508, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 508, :column 32, :line 508, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 508, :column 33, :line 508, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} add-to-string-hash-cache, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 8450, :column 10, :line 8450, :file "cljs/core.cljs"} clj->js ^{:arglists (^{:end-column 7, :end-line 8466, :column 4, :line 8466, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8466, :column 5, :line 8466, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 14, :end-line 8462, :column 7, :line 8462, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8466, :column 5, :line 8466, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8466, :column 4, :line 8466, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8466, :column 5, :line 8466, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 14, :end-line 8462, :column 7, :line 8462, :file "cljs/core.cljs"} clj->js, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5116, :column 10, :line 5116, :file "cljs/core.cljs"} TransientArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5368, :column 10, :line 5368, :file "cljs/core.cljs"} TransientArrayMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 5370, :column 28, :line 5368, :file "cljs/core.cljs"} [^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr], :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists ([^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 25, :end-line 4605, :column 10, :line 4605, :file "cljs/core.cljs"} ->TransientVector ^{:arglists ([^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 25, :end-line 4605, :column 10, :line 4605, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientVector [^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 25, :end-line 4605, :column 10, :line 4605, :file "cljs/core.cljs"} ->TransientVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} IChunkedNext ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons), :protocol-info {:methods {^{:end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} IChunkedNext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3790, :column 3, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} sep ^{:end-column 12, :end-line 3790, :column 8, :line 3790, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 16, :end-line 3788, :column 7, :line 3788, :file "cljs/core.cljs"} interpose ^{:arglists (^{:end-column 13, :end-line 3790, :column 3, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} sep ^{:end-column 12, :end-line 3790, :column 8, :line 3790, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 16, :end-line 3788, :column 7, :line 3788, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} sep ^{:end-column 12, :end-line 3790, :column 8, :line 3790, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3790, :column 3, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} sep ^{:end-column 12, :end-line 3790, :column 8, :line 3790, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 16, :end-line 3788, :column 7, :line 3788, :file "cljs/core.cljs"} interpose, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 19, :end-line 6471, :column 10, :line 6471, :file "cljs/core.cljs"} ->BlackNode ^{:arglists ([^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 19, :end-line 6471, :column 10, :line 6471, :file "cljs/core.cljs"} {:arglists (^cljs.core/BlackNode [^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 19, :end-line 6471, :column 10, :line 6471, :file "cljs/core.cljs"} ->BlackNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 814, :column 10, :line 814, :file "cljs/core.cljs"} deref ^{:declared true, :end-column 78, :end-line 5449, :column 73, :line 5449, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 78, :end-line 5449, :column 73, :line 5449, :file "cljs/core.cljs"} deref, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4019, :column 16, :line 4019, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4019, :column 17, :line 4019, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4019, :column 22, :line 4019, :file "cljs/core.cljs"} idx]), :private true, :end-column 15, :end-line 4019, :column 8, :line 4019, :file "cljs/core.cljs"} pv-aget ^{:arglists (^{:end-column 26, :end-line 4019, :column 16, :line 4019, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4019, :column 17, :line 4019, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4019, :column 22, :line 4019, :file "cljs/core.cljs"} idx]), :private true, :end-column 15, :end-line 4019, :column 8, :line 4019, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 4019, :column 17, :line 4019, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4019, :column 22, :line 4019, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4019, :column 16, :line 4019, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4019, :column 17, :line 4019, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4019, :column 22, :line 4019, :file "cljs/core.cljs"} idx]), :private true, :end-column 15, :end-line 4019, :column 8, :line 4019, :file "cljs/core.cljs"} pv-aget, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 1295, :column 4, :line 1295, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1295, :column 5, :line 1295, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1295, :column 10, :line 1295, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1295, :column 12, :line 1295, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1299, :column 5, :line 1299, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1299, :column 10, :line 1299, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1299, :column 12, :line 1299, :file "cljs/core.cljs"} v ^{:end-column 15, :end-line 1299, :column 14, :line 1299, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 1299, :column 16, :line 1299, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 12, :end-line 1290, :column 7, :line 1290, :file "cljs/core.cljs"} assoc ^{:arglists (^{:end-column 14, :end-line 1295, :column 4, :line 1295, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1295, :column 5, :line 1295, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1295, :column 10, :line 1295, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1295, :column 12, :line 1295, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1299, :column 5, :line 1299, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1299, :column 10, :line 1299, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1299, :column 12, :line 1299, :file "cljs/core.cljs"} v ^{:end-column 15, :end-line 1299, :column 14, :line 1299, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 1299, :column 16, :line 1299, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 12, :end-line 1290, :column 7, :line 1290, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1295, :column 5, :line 1295, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1295, :column 10, :line 1295, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1295, :column 12, :line 1295, :file "cljs/core.cljs"} v] [^{:end-column 9, :end-line 1299, :column 5, :line 1299, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1299, :column 10, :line 1299, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1299, :column 12, :line 1299, :file "cljs/core.cljs"} v & ^{:end-column 19, :end-line 1299, :column 16, :line 1299, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 1295, :column 4, :line 1295, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1295, :column 5, :line 1295, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1295, :column 10, :line 1295, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1295, :column 12, :line 1295, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1299, :column 5, :line 1299, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1299, :column 10, :line 1299, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1299, :column 12, :line 1299, :file "cljs/core.cljs"} v ^{:end-column 15, :end-line 1299, :column 14, :line 1299, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 1299, :column 16, :line 1299, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 12, :end-line 1290, :column 7, :line 1290, :file "cljs/core.cljs"} assoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2836, :column 3, :line 2836, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2836, :column 4, :line 2836, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 16, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} transient ^{:arglists (^{:end-column 9, :end-line 2836, :column 3, :line 2836, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2836, :column 4, :line 2836, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 16, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj [^{:end-column 8, :end-line 2836, :column 4, :line 2836, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2836, :column 3, :line 2836, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2836, :column 4, :line 2836, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 16, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} transient, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin ^{:arglists (^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2655, :column 18, :line 2655, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2655, :column 19, :line 2655, :file "cljs/core.cljs"} chunk ^{:end-column 29, :end-line 2655, :column 25, :line 2655, :file "cljs/core.cljs"} rest]), :end-column 17, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} chunk-cons ^{:arglists (^{:end-column 30, :end-line 2655, :column 18, :line 2655, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2655, :column 19, :line 2655, :file "cljs/core.cljs"} chunk ^{:end-column 29, :end-line 2655, :column 25, :line 2655, :file "cljs/core.cljs"} rest]), :end-column 17, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 2655, :column 19, :line 2655, :file "cljs/core.cljs"} chunk ^{:end-column 29, :end-line 2655, :column 25, :line 2655, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2655, :column 18, :line 2655, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2655, :column 19, :line 2655, :file "cljs/core.cljs"} chunk ^{:end-column 29, :end-line 2655, :column 25, :line 2655, :file "cljs/core.cljs"} rest]), :end-column 17, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} chunk-cons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} ArrayIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} ArrayIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 37, :end-line 3000, :column 20, :line 3000, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 9, :end-line 9032, :column 3, :line 9032, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9032, :column 4, :line 9032, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 17, :end-line 9030, :column 7, :line 9030, :file "cljs/core.cljs"} comparator ^{:arglists (^{:end-column 9, :end-line 9032, :column 3, :line 9032, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9032, :column 4, :line 9032, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 17, :end-line 9030, :column 7, :line 9030, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 8, :end-line 9032, :column 4, :line 9032, :file "cljs/core.cljs"} pred]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 9032, :column 3, :line 9032, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9032, :column 4, :line 9032, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 17, :end-line 9030, :column 7, :line 9030, :file "cljs/core.cljs"} comparator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7006, :column 4, :line 7006, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7006, :column 5, :line 7006, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7006, :column 7, :line 7006, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 17, :end-line 7003, :column 7, :line 7003, :file "cljs/core.cljs"} sorted-map ^{:arglists (^{:end-column 15, :end-line 7006, :column 4, :line 7006, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7006, :column 5, :line 7006, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7006, :column 7, :line 7006, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 17, :end-line 7003, :column 7, :line 7003, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 14, :end-line 7006, :column 7, :line 7006, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7006, :column 4, :line 7006, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7006, :column 5, :line 7006, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7006, :column 7, :line 7006, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 17, :end-line 7003, :column 7, :line 7003, :file "cljs/core.cljs"} sorted-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3721, :column 4, :line 3721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3721, :column 5, :line 3721, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3734, :column 4, :line 3734, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3734, :column 5, :line 3734, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3734, :column 10, :line 3734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 17, :end-line 3717, :column 7, :line 3717, :file "cljs/core.cljs"} drop-while ^{:arglists (^{:end-column 10, :end-line 3721, :column 4, :line 3721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3721, :column 5, :line 3721, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3734, :column 4, :line 3734, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3734, :column 5, :line 3734, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3734, :column 10, :line 3734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 17, :end-line 3717, :column 7, :line 3717, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 3721, :column 5, :line 3721, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 9, :end-line 3734, :column 5, :line 3734, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3734, :column 10, :line 3734, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3721, :column 4, :line 3721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3721, :column 5, :line 3721, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3734, :column 4, :line 3734, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3734, :column 5, :line 3734, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3734, :column 10, :line 3734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 17, :end-line 3717, :column 7, :line 3717, :file "cljs/core.cljs"} drop-while, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]], ^{:end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 21, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} IWriter ^{:impls (cljs.core/StringBufferWriter), :protocol-info {:methods {^{:end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]], ^{:end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 21, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]], ^{:end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 21, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} IWriter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} KeySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} KeySeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 7022, :column 17, :line 7022, :file "cljs/core.cljs"} [^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8370, :column 3, :line 8370, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8370, :column 4, :line 8370, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 15, :end-line 8368, :column 8, :line 8368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 8368, :column 16, :line 8368, :file "cljs/core.cljs"} realized? ^{:arglists (^{:end-column 6, :end-line 8370, :column 3, :line 8370, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8370, :column 4, :line 8370, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 15, :end-line 8368, :column 8, :line 8368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 8368, :column 16, :line 8368, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean [^{:end-column 5, :end-line 8370, :column 4, :line 8370, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8370, :column 3, :line 8370, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8370, :column 4, :line 8370, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 15, :end-line 8368, :column 8, :line 8368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 8368, :column 16, :line 8368, :file "cljs/core.cljs"} realized?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5051, :column 36, :line 5051, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 5051, :column 37, :line 5051, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 5051, :column 41, :line 5051, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 5051, :column 43, :line 5051, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 5051, :column 8, :line 5051, :file "cljs/core.cljs"} array-map-index-of-keyword? ^{:arglists (^{:end-column 45, :end-line 5051, :column 36, :line 5051, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 5051, :column 37, :line 5051, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 5051, :column 41, :line 5051, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 5051, :column 43, :line 5051, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 5051, :column 8, :line 5051, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 5051, :column 37, :line 5051, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 5051, :column 41, :line 5051, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 5051, :column 43, :line 5051, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5051, :column 36, :line 5051, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 5051, :column 37, :line 5051, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 5051, :column 41, :line 5051, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 5051, :column 43, :line 5051, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 5051, :column 8, :line 5051, :file "cljs/core.cljs"} array-map-index-of-keyword?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn* ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 9, :end-line 25, :column 8, :line 25, :file "cljs/core.cljs"} _]), :tag function, :op :var, :name ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 490, :column 24, :line 490, :file "cljs/core.cljs"} compare ^{:arglists (^{:end-column 8, :end-line 1594, :column 3, :line 1594, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1594, :column 4, :line 1594, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 1594, :column 6, :line 1594, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 14, :end-line 1589, :column 8, :line 1589, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1589, :column 15, :line 1589, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1594, :column 4, :line 1594, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 1594, :column 6, :line 1594, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1594, :column 3, :line 1594, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1594, :column 4, :line 1594, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 1594, :column 6, :line 1594, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 14, :end-line 1589, :column 8, :line 1589, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1589, :column 15, :line 1589, :file "cljs/core.cljs"} compare, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3255, :column 3, :line 3255, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3255, :column 4, :line 3255, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 15, :end-line 3252, :column 8, :line 3252, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3252, :column 16, :line 3252, :file "cljs/core.cljs"} complement ^{:arglists (^{:end-column 6, :end-line 3255, :column 3, :line 3255, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3255, :column 4, :line 3255, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 15, :end-line 3252, :column 8, :line 3252, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3252, :column 16, :line 3252, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 3255, :column 4, :line 3255, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3255, :column 3, :line 3255, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3255, :column 4, :line 3255, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 15, :end-line 3252, :column 8, :line 3252, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3252, :column 16, :line 3252, :file "cljs/core.cljs"} complement, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 41, :end-line 1505, :column 1, :line 1505, :file "cljs/core.cljs"} lookup-sentinel ^{:private true, :end-column 41, :end-line 1505, :column 1, :line 1505, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 41, :end-line 1505, :column 1, :line 1505, :file "cljs/core.cljs"} lookup-sentinel, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc! ^{:arglists (^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup* ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} {:op :var, :name ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2997, :column 19, :line 2997, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2997, :column 20, :line 2997, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} string-iter ^{:arglists (^{:end-column 22, :end-line 2997, :column 19, :line 2997, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2997, :column 20, :line 2997, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 21, :end-line 2997, :column 20, :line 2997, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2997, :column 19, :line 2997, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2997, :column 20, :line 2997, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} string-iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js ^{:arglists (^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} IDeref ^{:impls (cljs.core/Delay cljs.core/Atom cljs.core/Reduced), :protocol-info {:methods {^{:end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} IDeref, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1584, :column 3, :line 1584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 11, :end-line 1581, :column 8, :line 1581, :file "cljs/core.cljs"} seq, :end-column 20, :end-line 1581, :column 12, :line 1581, :file "cljs/core.cljs"} sequence ^{:arglists (^{:end-column 10, :end-line 3205, :column 4, :line 3205, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3205, :column 5, :line 3205, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3209, :column 4, :line 3209, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3209, :column 5, :line 3209, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3209, :column 11, :line 3209, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3211, :column 4, :line 3211, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3211, :column 5, :line 3211, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3211, :column 11, :line 3211, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 3211, :column 16, :line 3211, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3211, :column 18, :line 3211, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 15, :end-line 3196, :column 7, :line 3196, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3205, :column 5, :line 3205, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 3209, :column 5, :line 3209, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3209, :column 11, :line 3209, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 3211, :column 5, :line 3211, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3211, :column 11, :line 3211, :file "cljs/core.cljs"} coll & ^{:end-column 23, :end-line 3211, :column 18, :line 3211, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3205, :column 4, :line 3205, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3205, :column 5, :line 3205, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3209, :column 4, :line 3209, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3209, :column 5, :line 3209, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3209, :column 11, :line 3209, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3211, :column 4, :line 3211, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3211, :column 5, :line 3211, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3211, :column 11, :line 3211, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 3211, :column 16, :line 3211, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3211, :column 18, :line 3211, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 15, :end-line 3196, :column 7, :line 3196, :file "cljs/core.cljs"} sequence, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3264, :column 3, :line 3264, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3264, :column 4, :line 3264, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 17, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} constantly ^{:arglists (^{:end-column 6, :end-line 3264, :column 3, :line 3264, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3264, :column 4, :line 3264, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 17, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 3264, :column 4, :line 3264, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3264, :column 3, :line 3264, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3264, :column 4, :line 3264, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 17, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} constantly, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} ->RangedIterator ^{:arglists ([^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangedIterator [^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} ->RangedIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 52, :end-line 4131, :column 41, :line 4131, :file "cljs/core.cljs"} chunked-seq ^{:arglists (^{:end-column 15, :end-line 4425, :column 4, :line 4425, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4425, :column 5, :line 4425, :file "cljs/core.cljs"} vec ^{:end-column 10, :end-line 4425, :column 9, :line 4425, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 4425, :column 11, :line 4425, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4426, :column 4, :line 4426, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4426, :column 5, :line 4426, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4426, :column 9, :line 4426, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4426, :column 14, :line 4426, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4426, :column 16, :line 4426, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4427, :column 4, :line 4427, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4427, :column 5, :line 4427, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4427, :column 9, :line 4427, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4427, :column 14, :line 4427, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4427, :column 16, :line 4427, :file "cljs/core.cljs"} off ^{:end-column 24, :end-line 4427, :column 20, :line 4427, :file "cljs/core.cljs"} meta]), :end-column 18, :end-line 4424, :column 7, :line 4424, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 8, :end-line 4425, :column 5, :line 4425, :file "cljs/core.cljs"} vec ^{:end-column 10, :end-line 4425, :column 9, :line 4425, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 4425, :column 11, :line 4425, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 8, :end-line 4426, :column 5, :line 4426, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4426, :column 9, :line 4426, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4426, :column 14, :line 4426, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4426, :column 16, :line 4426, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 8, :end-line 4427, :column 5, :line 4427, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4427, :column 9, :line 4427, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4427, :column 14, :line 4427, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4427, :column 16, :line 4427, :file "cljs/core.cljs"} off ^{:end-column 24, :end-line 4427, :column 20, :line 4427, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 4425, :column 4, :line 4425, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4425, :column 5, :line 4425, :file "cljs/core.cljs"} vec ^{:end-column 10, :end-line 4425, :column 9, :line 4425, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 4425, :column 11, :line 4425, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4426, :column 4, :line 4426, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4426, :column 5, :line 4426, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4426, :column 9, :line 4426, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4426, :column 14, :line 4426, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4426, :column 16, :line 4426, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4427, :column 4, :line 4427, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4427, :column 5, :line 4427, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4427, :column 9, :line 4427, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4427, :column 14, :line 4427, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4427, :column 16, :line 4427, :file "cljs/core.cljs"} off ^{:end-column 24, :end-line 4427, :column 20, :line 4427, :file "cljs/core.cljs"} meta]), :end-column 18, :end-line 4424, :column 7, :line 4424, :file "cljs/core.cljs"} chunked-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]], ^{:end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]], ^{:end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 334, :column 14, :line 334, :file "cljs/core.cljs"} ISorted ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]], ^{:end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]], ^{:end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 334, :column 14, :line 334, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]], ^{:end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]], ^{:end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 334, :column 14, :line 334, :file "cljs/core.cljs"} ISorted, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 157, :column 4, :line 157, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 157, :column 5, :line 157, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 159, :column 5, :line 159, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 159, :column 10, :line 159, :file "cljs/core.cljs"} size]), :tag ^{:end-column 13, :end-line 156, :column 8, :line 156, :file "cljs/core.cljs"} array, :end-column 24, :end-line 156, :column 14, :line 156, :file "cljs/core.cljs"} make-array ^{:arglists (^{:end-column 10, :end-line 157, :column 4, :line 157, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 157, :column 5, :line 157, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 159, :column 5, :line 159, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 159, :column 10, :line 159, :file "cljs/core.cljs"} size]), :tag ^{:end-column 13, :end-line 156, :column 8, :line 156, :file "cljs/core.cljs"} array, :end-column 24, :end-line 156, :column 14, :line 156, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 9, :end-line 157, :column 5, :line 157, :file "cljs/core.cljs"} size] ^array [^{:end-column 9, :end-line 159, :column 5, :line 159, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 159, :column 10, :line 159, :file "cljs/core.cljs"} size]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 157, :column 4, :line 157, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 157, :column 5, :line 157, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 159, :column 5, :line 159, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 159, :column 10, :line 159, :file "cljs/core.cljs"} size]), :tag ^{:end-column 13, :end-line 156, :column 8, :line 156, :file "cljs/core.cljs"} array, :end-column 24, :end-line 156, :column 14, :line 156, :file "cljs/core.cljs"} make-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1989, :column 14, :line 1989, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1989, :column 15, :line 1989, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} shorts ^{:arglists (^{:end-column 17, :end-line 1989, :column 14, :line 1989, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1989, :column 15, :line 1989, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1989, :column 15, :line 1989, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1989, :column 14, :line 1989, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1989, :column 15, :line 1989, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} shorts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if* ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} ->RSeq ^{:arglists ([^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} {:arglists (^cljs.core/RSeq [^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} ->RSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 28, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print! ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 28, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} {:arglists (^function []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 28, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush ^{:arglists (^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1747, :column 4, :line 1747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1747, :column 5, :line 1747, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1748, :column 4, :line 1748, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1748, :column 5, :line 1748, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 1748, :column 7, :line 1748, :file "cljs/core.cljs"} cf]), :end-column 17, :end-line 1746, :column 7, :line 1746, :file "cljs/core.cljs"} completing ^{:arglists (^{:end-column 7, :end-line 1747, :column 4, :line 1747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1747, :column 5, :line 1747, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1748, :column 4, :line 1748, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1748, :column 5, :line 1748, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 1748, :column 7, :line 1748, :file "cljs/core.cljs"} cf]), :end-column 17, :end-line 1746, :column 7, :line 1746, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1747, :column 5, :line 1747, :file "cljs/core.cljs"} f] ^function [^{:end-column 6, :end-line 1748, :column 5, :line 1748, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 1748, :column 7, :line 1748, :file "cljs/core.cljs"} cf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1747, :column 4, :line 1747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1747, :column 5, :line 1747, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1748, :column 4, :line 1748, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1748, :column 5, :line 1748, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 1748, :column 7, :line 1748, :file "cljs/core.cljs"} cf]), :end-column 17, :end-line 1746, :column 7, :line 1746, :file "cljs/core.cljs"} completing, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 1939, :column 28, :line 1939, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1939, :column 29, :line 1939, :file "cljs/core.cljs"} x]), :end-column 27, :end-line 1939, :column 7, :line 1939, :file "cljs/core.cljs"} unchecked-negate-int ^{:arglists (^{:end-column 31, :end-line 1939, :column 28, :line 1939, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1939, :column 29, :line 1939, :file "cljs/core.cljs"} x]), :end-column 27, :end-line 1939, :column 7, :line 1939, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 30, :end-line 1939, :column 29, :line 1939, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1939, :column 28, :line 1939, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1939, :column 29, :line 1939, :file "cljs/core.cljs"} x]), :end-column 27, :end-line 1939, :column 7, :line 1939, :file "cljs/core.cljs"} unchecked-negate-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} ->PersistentVector ^{:arglists ([^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentVector [^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} ->PersistentVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 777, :column 24, :line 777, :file "cljs/core.cljs"} equiv-sequential ^{:arglists (^{:end-column 8, :end-line 2150, :column 3, :line 2150, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2150, :column 4, :line 2150, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2150, :column 6, :line 2150, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 24, :end-line 2147, :column 8, :line 2147, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 2150, :column 4, :line 2150, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2150, :column 6, :line 2150, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2150, :column 3, :line 2150, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2150, :column 4, :line 2150, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2150, :column 6, :line 2150, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 24, :end-line 2147, :column 8, :line 2147, :file "cljs/core.cljs"} equiv-sequential, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 764, :column 8, :line 764, :file "cljs/core.cljs"} number, :end-column 34, :end-line 764, :column 15, :line 764, :file "cljs/core.cljs"} hash-unordered-coll ^{:arglists (^{:end-column 9, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 764, :column 8, :line 764, :file "cljs/core.cljs"} number, :end-column 34, :end-line 764, :column 15, :line 764, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 8, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 764, :column 8, :line 764, :file "cljs/core.cljs"} number, :end-column 34, :end-line 764, :column 15, :line 764, :file "cljs/core.cljs"} hash-unordered-coll, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3755, :column 4, :line 3755, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3755, :column 5, :line 3755, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3756, :column 4, :line 3756, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3756, :column 5, :line 3756, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3756, :column 7, :line 3756, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 13, :end-line 3753, :column 7, :line 3753, :file "cljs/core.cljs"} repeat ^{:arglists (^{:end-column 7, :end-line 3755, :column 4, :line 3755, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3755, :column 5, :line 3755, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3756, :column 4, :line 3756, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3756, :column 5, :line 3756, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3756, :column 7, :line 3756, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 13, :end-line 3753, :column 7, :line 3753, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3755, :column 5, :line 3755, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3756, :column 5, :line 3756, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3756, :column 7, :line 3756, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3755, :column 4, :line 3755, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3755, :column 5, :line 3755, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3756, :column 4, :line 3756, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3756, :column 5, :line 3756, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3756, :column 7, :line 3756, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 13, :end-line 3753, :column 7, :line 3753, :file "cljs/core.cljs"} repeat, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1916, :column 21, :line 1916, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1916, :column 22, :line 1916, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1916, :column 7, :line 1916, :file "cljs/core.cljs"} unchecked-inc ^{:arglists (^{:end-column 24, :end-line 1916, :column 21, :line 1916, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1916, :column 22, :line 1916, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1916, :column 7, :line 1916, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 1916, :column 22, :line 1916, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1916, :column 21, :line 1916, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1916, :column 22, :line 1916, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1916, :column 7, :line 1916, :file "cljs/core.cljs"} unchecked-inc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2117, :column 3, :line 2117, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2117, :column 4, :line 2117, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 2117, :column 9, :line 2117, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 14, :end-line 2115, :column 7, :line 2115, :file "cljs/core.cljs"} nthnext ^{:arglists (^{:end-column 11, :end-line 2117, :column 3, :line 2117, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2117, :column 4, :line 2117, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 2117, :column 9, :line 2117, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 14, :end-line 2115, :column 7, :line 2115, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq [^{:end-column 8, :end-line 2117, :column 4, :line 2117, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 2117, :column 9, :line 2117, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2117, :column 3, :line 2117, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2117, :column 4, :line 2117, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 2117, :column 9, :line 2117, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 14, :end-line 2115, :column 7, :line 2115, :file "cljs/core.cljs"} nthnext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8374, :column 3, :line 8374, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8374, :column 4, :line 8374, :file "cljs/core.cljs"} rf]), :private true, :end-column 26, :end-line 8373, :column 8, :line 8373, :file "cljs/core.cljs"} preserving-reduced ^{:arglists (^{:end-column 7, :end-line 8374, :column 3, :line 8374, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8374, :column 4, :line 8374, :file "cljs/core.cljs"} rf]), :private true, :end-column 26, :end-line 8373, :column 8, :line 8373, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 8374, :column 4, :line 8374, :file "cljs/core.cljs"} rf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8374, :column 3, :line 8374, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8374, :column 4, :line 8374, :file "cljs/core.cljs"} rf]), :private true, :end-column 26, :end-line 8373, :column 8, :line 8373, :file "cljs/core.cljs"} preserving-reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3491, :column 3, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 20, :end-line 3489, :column 7, :line 3489, :file "cljs/core.cljs"} get-validator ^{:arglists (^{:end-column 9, :end-line 3491, :column 3, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 20, :end-line 3489, :column 7, :line 3489, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} iref]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3491, :column 3, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 20, :end-line 3489, :column 7, :line 3489, :file "cljs/core.cljs"} get-validator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} StringIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} StringIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 36, :end-line 2988, :column 21, :line 2988, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number? ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj! ^{:arglists (^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} ->PersistentArrayMapSeq ^{:arglists ([^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMapSeq [^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} ->PersistentArrayMapSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2672, :column 18, :line 2672, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2672, :column 19, :line 2672, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2672, :column 7, :line 2672, :file "cljs/core.cljs"} chunk-next ^{:arglists (^{:end-column 21, :end-line 2672, :column 18, :line 2672, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2672, :column 19, :line 2672, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2672, :column 7, :line 2672, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 2672, :column 19, :line 2672, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2672, :column 18, :line 2672, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2672, :column 19, :line 2672, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2672, :column 7, :line 2672, :file "cljs/core.cljs"} chunk-next, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} ArrayList {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} ArrayList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 7536, :column 20, :line 7536, :file "cljs/core.cljs"} [^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 11, :end-line 8132, :column 3, :line 8132, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8132, :column 4, :line 8132, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8132, :column 6, :line 8132, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 16, :end-line 8130, :column 7, :line 8130, :file "cljs/core.cljs"} print-str ^{:arglists (^{:end-column 11, :end-line 8132, :column 3, :line 8132, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8132, :column 4, :line 8132, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8132, :column 6, :line 8132, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 16, :end-line 8130, :column 7, :line 8130, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 8132, :column 6, :line 8132, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8132, :column 3, :line 8132, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8132, :column 4, :line 8132, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8132, :column 6, :line 8132, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 16, :end-line 8130, :column 7, :line 8130, :file "cljs/core.cljs"} print-str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3240, :column 3, :line 3240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3240, :column 4, :line 3240, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3240, :column 9, :line 3240, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 15, :end-line 3237, :column 8, :line 3237, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 3237, :column 16, :line 3237, :file "cljs/core.cljs"} not-any? ^{:arglists (^{:end-column 14, :end-line 3240, :column 3, :line 3240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3240, :column 4, :line 3240, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3240, :column 9, :line 3240, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 15, :end-line 3237, :column 8, :line 3237, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 3237, :column 16, :line 3237, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 8, :end-line 3240, :column 4, :line 3240, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3240, :column 9, :line 3240, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3240, :column 3, :line 3240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3240, :column 4, :line 3240, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3240, :column 9, :line 3240, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 15, :end-line 3237, :column 8, :line 3237, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 3237, :column 16, :line 3237, :file "cljs/core.cljs"} not-any?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 47, :column 10, :line 47, :file "cljs/core.cljs"} into-array ^{:arglists (^{:end-column 10, :end-line 201, :column 4, :line 201, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 201, :column 5, :line 201, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 203, :column 5, :line 203, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 203, :column 10, :line 203, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 13, :end-line 200, :column 8, :line 200, :file "cljs/core.cljs"} array, :end-column 24, :end-line 200, :column 14, :line 200, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 201, :column 5, :line 201, :file "cljs/core.cljs"} aseq] [^{:end-column 9, :end-line 203, :column 5, :line 203, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 203, :column 10, :line 203, :file "cljs/core.cljs"} aseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 201, :column 4, :line 201, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 201, :column 5, :line 201, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 203, :column 5, :line 203, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 203, :column 10, :line 203, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 13, :end-line 200, :column 8, :line 200, :file "cljs/core.cljs"} array, :end-column 24, :end-line 200, :column 14, :line 200, :file "cljs/core.cljs"} into-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash ^{:arglists (^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc! ^{:arglists (^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} ->Reduced ^{:arglists ([^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} ->Reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2556, :column 20, :line 2556, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2556, :column 21, :line 2556, :file "cljs/core.cljs"} capacity]), :end-column 19, :end-line 2556, :column 7, :line 2556, :file "cljs/core.cljs"} chunk-buffer ^{:arglists (^{:end-column 30, :end-line 2556, :column 20, :line 2556, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2556, :column 21, :line 2556, :file "cljs/core.cljs"} capacity]), :end-column 19, :end-line 2556, :column 7, :line 2556, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:end-column 29, :end-line 2556, :column 21, :line 2556, :file "cljs/core.cljs"} capacity]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2556, :column 20, :line 2556, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2556, :column 21, :line 2556, :file "cljs/core.cljs"} capacity]), :end-column 19, :end-line 2556, :column 7, :line 2556, :file "cljs/core.cljs"} chunk-buffer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 15, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1525, :column 16, :line 1525, :file "cljs/core.cljs"} seqable? ^{:arglists (^{:end-column 6, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 15, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1525, :column 16, :line 1525, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 15, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1525, :column 16, :line 1525, :file "cljs/core.cljs"} seqable?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 556, :column 24, :line 556, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 556, :column 25, :line 556, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 556, :column 8, :line 556, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 556, :column 16, :line 556, :file "cljs/core.cljs"} symbol? ^{:arglists (^{:end-column 27, :end-line 556, :column 24, :line 556, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 556, :column 25, :line 556, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 556, :column 8, :line 556, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 556, :column 16, :line 556, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 556, :column 25, :line 556, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 556, :column 24, :line 556, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 556, :column 25, :line 556, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 556, :column 8, :line 556, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 556, :column 16, :line 556, :file "cljs/core.cljs"} symbol?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 474, :column 39, :line 474, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 474, :column 40, :line 474, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 474, :column 8, :line 474, :file "cljs/core.cljs"} number, :end-column 38, :end-line 474, :column 15, :line 474, :file "cljs/core.cljs"} m3-hash-unencoded-chars ^{:arglists (^{:end-column 43, :end-line 474, :column 39, :line 474, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 474, :column 40, :line 474, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 474, :column 8, :line 474, :file "cljs/core.cljs"} number, :end-column 38, :end-line 474, :column 15, :line 474, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 42, :end-line 474, :column 40, :line 474, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 474, :column 39, :line 474, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 474, :column 40, :line 474, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 474, :column 8, :line 474, :file "cljs/core.cljs"} number, :end-column 38, :end-line 474, :column 15, :line 474, :file "cljs/core.cljs"} m3-hash-unencoded-chars, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1884, :column 30, :line 1884, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1884, :column 31, :line 1884, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1884, :column 8, :line 1884, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1884, :column 15, :line 1884, :file "cljs/core.cljs"} unchecked-char ^{:arglists (^{:end-column 33, :end-line 1884, :column 30, :line 1884, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1884, :column 31, :line 1884, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1884, :column 8, :line 1884, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1884, :column 15, :line 1884, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 1884, :column 31, :line 1884, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1884, :column 30, :line 1884, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1884, :column 31, :line 1884, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1884, :column 8, :line 1884, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1884, :column 15, :line 1884, :file "cljs/core.cljs"} unchecked-char, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} NeverEquiv {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} NeverEquiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 4836, :column 21, :line 4836, :file "cljs/core.cljs"} [], :protocols #{Object cljs.core/IEquiv}}, ^{:arglists (^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke ^{:arglists (^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1428, :column 3, :line 1428, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1428, :column 4, :line 1428, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 15, :end-line 1426, :column 8, :line 1426, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1426, :column 16, :line 1426, :file "cljs/core.cljs"} coll? ^{:arglists (^{:end-column 6, :end-line 1428, :column 3, :line 1428, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1428, :column 4, :line 1428, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 15, :end-line 1426, :column 8, :line 1426, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1426, :column 16, :line 1426, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1428, :column 4, :line 1428, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1428, :column 3, :line 1428, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1428, :column 4, :line 1428, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 15, :end-line 1426, :column 8, :line 1426, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1426, :column 16, :line 1426, :file "cljs/core.cljs"} coll?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3945, :column 4, :line 3945, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3945, :column 5, :line 3945, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3945, :column 7, :line 3945, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3947, :column 4, :line 3947, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3947, :column 5, :line 3947, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3947, :column 7, :line 3947, :file "cljs/core.cljs"} ks ^{:end-column 19, :end-line 3947, :column 10, :line 3947, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 13, :end-line 3939, :column 7, :line 3939, :file "cljs/core.cljs"} get-in ^{:arglists (^{:end-column 10, :end-line 3945, :column 4, :line 3945, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3945, :column 5, :line 3945, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3945, :column 7, :line 3945, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3947, :column 4, :line 3947, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3947, :column 5, :line 3947, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3947, :column 7, :line 3947, :file "cljs/core.cljs"} ks ^{:end-column 19, :end-line 3947, :column 10, :line 3947, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 13, :end-line 3939, :column 7, :line 3939, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3945, :column 5, :line 3945, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3945, :column 7, :line 3945, :file "cljs/core.cljs"} ks] [^{:end-column 6, :end-line 3947, :column 5, :line 3947, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3947, :column 7, :line 3947, :file "cljs/core.cljs"} ks ^{:end-column 19, :end-line 3947, :column 10, :line 3947, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3945, :column 4, :line 3945, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3945, :column 5, :line 3945, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3945, :column 7, :line 3945, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3947, :column 4, :line 3947, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3947, :column 5, :line 3947, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3947, :column 7, :line 3947, :file "cljs/core.cljs"} ks ^{:end-column 19, :end-line 3947, :column 10, :line 3947, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 13, :end-line 3939, :column 7, :line 3939, :file "cljs/core.cljs"} get-in, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1086, :column 3, :line 1086, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1086, :column 4, :line 1086, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 12, :end-line 1084, :column 7, :line 1084, :file "cljs/core.cljs"} fnext ^{:arglists (^{:end-column 9, :end-line 1086, :column 3, :line 1086, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1086, :column 4, :line 1086, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 12, :end-line 1084, :column 7, :line 1084, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1086, :column 4, :line 1086, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1086, :column 3, :line 1086, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1086, :column 4, :line 1086, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 12, :end-line 1084, :column 7, :line 1084, :file "cljs/core.cljs"} fnext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 325, :column 14, :line 325, :file "cljs/core.cljs"} IList ^{:impls (cljs.core/Cons cljs.core/EmptyList cljs.core/List), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 325, :column 14, :line 325, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 325, :column 14, :line 325, :file "cljs/core.cljs"} IList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 34, :end-line 910, :column 30, :line 910, :file "cljs/core.cljs"} List {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2205, :column 10, :line 2205, :file "cljs/core.cljs"} List, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 2205, :column 15, :line 2205, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val ^{:arglists (^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1987, :column 13, :line 1987, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1987, :column 14, :line 1987, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1987, :column 7, :line 1987, :file "cljs/core.cljs"} bytes ^{:arglists (^{:end-column 16, :end-line 1987, :column 13, :line 1987, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1987, :column 14, :line 1987, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1987, :column 7, :line 1987, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1987, :column 14, :line 1987, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1987, :column 13, :line 1987, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1987, :column 14, :line 1987, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1987, :column 7, :line 1987, :file "cljs/core.cljs"} bytes, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} ->ObjMap ^{:arglists ([^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} {:arglists (^cljs.core/ObjMap [^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} ->ObjMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 564, :column 24, :line 564, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 564, :column 25, :line 564, :file "cljs/core.cljs"} a ^{:end-column 28, :end-line 564, :column 27, :line 564, :file "cljs/core.cljs"} b]), :private true, :end-column 23, :end-line 564, :column 8, :line 564, :file "cljs/core.cljs"} compare-symbols ^{:arglists (^{:end-column 29, :end-line 564, :column 24, :line 564, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 564, :column 25, :line 564, :file "cljs/core.cljs"} a ^{:end-column 28, :end-line 564, :column 27, :line 564, :file "cljs/core.cljs"} b]), :private true, :end-column 23, :end-line 564, :column 8, :line 564, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 564, :column 25, :line 564, :file "cljs/core.cljs"} a ^{:end-column 28, :end-line 564, :column 27, :line 564, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 564, :column 24, :line 564, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 564, :column 25, :line 564, :file "cljs/core.cljs"} a ^{:end-column 28, :end-line 564, :column 27, :line 564, :file "cljs/core.cljs"} b]), :private true, :end-column 23, :end-line 564, :column 8, :line 564, :file "cljs/core.cljs"} compare-symbols, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq ^{:arglists (^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}}, :aliases {^{:end-column 37, :end-line 10, :column 30, :line 10, :file "cljs/core.cljs"} gstring ^{:end-column 25, :end-line 10, :column 14, :line 10, :file "cljs/core.cljs"} goog.string, ^{:end-column 37, :end-line 11, :column 30, :line 11, :file "cljs/core.cljs"} gobject ^{:end-column 25, :end-line 11, :column 14, :line 11, :file "cljs/core.cljs"} goog.object, ^{:end-column 35, :end-line 12, :column 29, :line 12, :file "cljs/core.cljs"} garray ^{:end-column 24, :end-line 12, :column 14, :line 12, :file "cljs/core.cljs"} goog.array}, :macro-mappings {unsafe-bit-and #=(var clojure.tools.analyzer.js.cljs.core/unsafe-bit-and), unchecked-remainder-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-remainder-int), when-first #=(var clojure.tools.analyzer.js.cljs.core/when-first), cond->> #=(var clojure.tools.analyzer.js.cljs.core/cond->>), bit-set #=(var clojure.tools.analyzer.js.cljs.core/bit-set), import-macros #=(var clojure.tools.analyzer.js.cljs.core/import-macros), while #=(var clojure.tools.analyzer.js.cljs.core/while), satisfies? #=(var clojure.tools.analyzer.js.cljs.core/satisfies?), unchecked-subtract-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-subtract-int), bit-shift-right #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-right), aget #=(var clojure.tools.analyzer.js.cljs.core/aget), specify #=(var clojure.tools.analyzer.js.cljs.core/specify), caching-hash #=(var clojure.tools.analyzer.js.cljs.core/caching-hash), bit-shift-left #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-left), coercive-not #=(var clojure.tools.analyzer.js.cljs.core/coercive-not), dec #=(var clojure.tools.analyzer.js.cljs.core/dec), < #=(var clojure.tools.analyzer.js.cljs.core/<), this-as #=(var clojure.tools.analyzer.js.cljs.core/this-as), .. #=(var clojure.tools.analyzer.js.cljs.core/..), delay #=(var clojure.tools.analyzer.js.cljs.core/delay), unchecked-negate #=(var clojure.tools.analyzer.js.cljs.core/unchecked-negate), simple-benchmark #=(var clojure.tools.analyzer.js.cljs.core/simple-benchmark), unchecked-inc-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-inc-int), js-str #=(var clojure.tools.analyzer.js.cljs.core/js-str), bit-shift-right-zero-fill #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-right-zero-fill), implements? #=(var clojure.tools.analyzer.js.cljs.core/implements?), pos? #=(var clojure.tools.analyzer.js.cljs.core/pos?), specify! #=(var clojure.tools.analyzer.js.cljs.core/specify!), if-not #=(var clojure.tools.analyzer.js.cljs.core/if-not), alength #=(var clojure.tools.analyzer.js.cljs.core/alength), bit-xor #=(var clojure.tools.analyzer.js.cljs.core/bit-xor), doseq #=(var clojure.tools.analyzer.js.cljs.core/doseq), unsigned-bit-shift-right #=(var clojure.tools.analyzer.js.cljs.core/unsigned-bit-shift-right), neg? #=(var clojure.tools.analyzer.js.cljs.core/neg?), unchecked-float #=(var clojure.tools.analyzer.js.cljs.core/unchecked-float), undefined? #=(var clojure.tools.analyzer.js.cljs.core/undefined?), deftype #=(var clojure.tools.analyzer.js.cljs.core/deftype), mask #=(var clojure.tools.analyzer.js.cljs.core/mask), when-let #=(var clojure.tools.analyzer.js.cljs.core/when-let), divide #=(var clojure.tools.analyzer.js.cljs.core/divide), coercive-boolean #=(var clojure.tools.analyzer.js.cljs.core/coercive-boolean), <= #=(var clojure.tools.analyzer.js.cljs.core/<=), if-some #=(var clojure.tools.analyzer.js.cljs.core/if-some), * #=(var clojure.tools.analyzer.js.cljs.core/*), min #=(var clojure.tools.analyzer.js.cljs.core/min), lazy-seq #=(var clojure.tools.analyzer.js.cljs.core/lazy-seq), js-delete #=(var clojure.tools.analyzer.js.cljs.core/js-delete), truth_ #=(var clojure.tools.analyzer.js.cljs.core/truth_), defcurried #=(var clojure.tools.analyzer.js.cljs.core/defcurried), let #=(var clojure.tools.analyzer.js.cljs.core/let), -> #=(var clojure.tools.analyzer.js.cljs.core/->), coercive-not= #=(var clojure.tools.analyzer.js.cljs.core/coercive-not=), doto #=(var clojure.tools.analyzer.js.cljs.core/doto), areduce #=(var clojure.tools.analyzer.js.cljs.core/areduce), double #=(var clojure.tools.analyzer.js.cljs.core/double), bit-and-not #=(var clojure.tools.analyzer.js.cljs.core/bit-and-not), unchecked-add-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-add-int), fn #=(var clojure.tools.analyzer.js.cljs.core/fn), short #=(var clojure.tools.analyzer.js.cljs.core/short), js-this #=(var clojure.tools.analyzer.js.cljs.core/js-this), unchecked-double #=(var clojure.tools.analyzer.js.cljs.core/unchecked-double), string? #=(var clojure.tools.analyzer.js.cljs.core/string?), js-arguments #=(var clojure.tools.analyzer.js.cljs.core/js-arguments), unchecked-multiply-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-multiply-int), as-> #=(var clojure.tools.analyzer.js.cljs.core/as->), when-not #=(var clojure.tools.analyzer.js.cljs.core/when-not), when #=(var clojure.tools.analyzer.js.cljs.core/when), int #=(var clojure.tools.analyzer.js.cljs.core/int), > #=(var clojure.tools.analyzer.js.cljs.core/>), keyword? #=(var clojure.tools.analyzer.js.cljs.core/keyword?), unchecked-multiply #=(var clojure.tools.analyzer.js.cljs.core/unchecked-multiply), gen-apply-to #=(var clojure.tools.analyzer.js.cljs.core/gen-apply-to), some->> #=(var clojure.tools.analyzer.js.cljs.core/some->>), unchecked-dec #=(var clojure.tools.analyzer.js.cljs.core/unchecked-dec), defn #=(var clojure.tools.analyzer.js.cljs.core/defn), float #=(var clojure.tools.analyzer.js.cljs.core/float), js-in #=(var clojure.tools.analyzer.js.cljs.core/js-in), es6-iterable #=(var clojure.tools.analyzer.js.cljs.core/es6-iterable), amap #=(var clojure.tools.analyzer.js.cljs.core/amap), declare #=(var clojure.tools.analyzer.js.cljs.core/declare), - #=(var clojure.tools.analyzer.js.cljs.core/-), hash-set #=(var clojure.tools.analyzer.js.cljs.core/hash-set), or #=(var clojure.tools.analyzer.js.cljs.core/or), assert-args #=(var clojure.tools.analyzer.js.cljs.core/assert-args), extend-type #=(var clojure.tools.analyzer.js.cljs.core/extend-type), bit-test #=(var clojure.tools.analyzer.js.cljs.core/bit-test), defmethod #=(var clojure.tools.analyzer.js.cljs.core/defmethod), time #=(var clojure.tools.analyzer.js.cljs.core/time), zero? #=(var clojure.tools.analyzer.js.cljs.core/zero?), unchecked-dec-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-dec-int), memfn #=(var clojure.tools.analyzer.js.cljs.core/memfn), js-obj #=(var clojure.tools.analyzer.js.cljs.core/js-obj), nil? #=(var clojure.tools.analyzer.js.cljs.core/nil?), extend-protocol #=(var clojure.tools.analyzer.js.cljs.core/extend-protocol), cond-> #=(var clojure.tools.analyzer.js.cljs.core/cond->), dotimes #=(var clojure.tools.analyzer.js.cljs.core/dotimes), bit-and #=(var clojure.tools.analyzer.js.cljs.core/bit-and), reify #=(var clojure.tools.analyzer.js.cljs.core/reify), instance? #=(var clojure.tools.analyzer.js.cljs.core/instance?), defonce #=(var clojure.tools.analyzer.js.cljs.core/defonce), unchecked-add #=(var clojure.tools.analyzer.js.cljs.core/unchecked-add), rfn #=(var clojure.tools.analyzer.js.cljs.core/rfn), identical? #=(var clojure.tools.analyzer.js.cljs.core/identical?), unchecked-divide-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-divide-int), defn- #=(var clojure.tools.analyzer.js.cljs.core/defn-), defprotocol #=(var clojure.tools.analyzer.js.cljs.core/defprotocol), unchecked-subtract #=(var clojure.tools.analyzer.js.cljs.core/unchecked-subtract), assert #=(var clojure.tools.analyzer.js.cljs.core/assert), true? #=(var clojure.tools.analyzer.js.cljs.core/true?), array #=(var clojure.tools.analyzer.js.cljs.core/array), letfn #=(var clojure.tools.analyzer.js.cljs.core/letfn), / #=(var clojure.tools.analyzer.js.cljs.core//), bitpos #=(var clojure.tools.analyzer.js.cljs.core/bitpos), bit-or #=(var clojure.tools.analyzer.js.cljs.core/bit-or), vector #=(var clojure.tools.analyzer.js.cljs.core/vector), >= #=(var clojure.tools.analyzer.js.cljs.core/>=), loop #=(var clojure.tools.analyzer.js.cljs.core/loop), bit-flip #=(var clojure.tools.analyzer.js.cljs.core/bit-flip), js-mod #=(var clojure.tools.analyzer.js.cljs.core/js-mod), with-out-str #=(var clojure.tools.analyzer.js.cljs.core/with-out-str), condp #=(var clojure.tools.analyzer.js.cljs.core/condp), cond #=(var clojure.tools.analyzer.js.cljs.core/cond), some-> #=(var clojure.tools.analyzer.js.cljs.core/some->), for #=(var clojure.tools.analyzer.js.cljs.core/for), binding #=(var clojure.tools.analyzer.js.cljs.core/binding), array-map #=(var clojure.tools.analyzer.js.cljs.core/array-map), unchecked-byte #=(var clojure.tools.analyzer.js.cljs.core/unchecked-byte), unchecked-short #=(var clojure.tools.analyzer.js.cljs.core/unchecked-short), inc #=(var clojure.tools.analyzer.js.cljs.core/inc), with-redefs #=(var clojure.tools.analyzer.js.cljs.core/with-redefs), bit-clear #=(var clojure.tools.analyzer.js.cljs.core/bit-clear), list #=(var clojure.tools.analyzer.js.cljs.core/list), + #=(var clojure.tools.analyzer.js.cljs.core/+), aset #=(var clojure.tools.analyzer.js.cljs.core/aset), defmulti #=(var clojure.tools.analyzer.js.cljs.core/defmulti), str #=(var clojure.tools.analyzer.js.cljs.core/str), coercive-= #=(var clojure.tools.analyzer.js.cljs.core/coercive-=), hash-map #=(var clojure.tools.analyzer.js.cljs.core/hash-map), if-let #=(var clojure.tools.analyzer.js.cljs.core/if-let), false? #=(var clojure.tools.analyzer.js.cljs.core/false?), case #=(var clojure.tools.analyzer.js.cljs.core/case), array? #=(var clojure.tools.analyzer.js.cljs.core/array?), exists? #=(var clojure.tools.analyzer.js.cljs.core/exists?), bit-not #=(var clojure.tools.analyzer.js.cljs.core/bit-not), byte #=(var clojure.tools.analyzer.js.cljs.core/byte), max #=(var clojure.tools.analyzer.js.cljs.core/max), == #=(var clojure.tools.analyzer.js.cljs.core/==), lazy-cat #=(var clojure.tools.analyzer.js.cljs.core/lazy-cat), comment #=(var clojure.tools.analyzer.js.cljs.core/comment), defrecord #=(var clojure.tools.analyzer.js.cljs.core/defrecord), make-array #=(var clojure.tools.analyzer.js.cljs.core/make-array), unchecked-negate-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-negate-int), unchecked-inc #=(var clojure.tools.analyzer.js.cljs.core/unchecked-inc), and #=(var clojure.tools.analyzer.js.cljs.core/and), number? #=(var clojure.tools.analyzer.js.cljs.core/number?), symbol? #=(var clojure.tools.analyzer.js.cljs.core/symbol?), when-some #=(var clojure.tools.analyzer.js.cljs.core/when-some), unchecked-char #=(var clojure.tools.analyzer.js.cljs.core/unchecked-char), ->> #=(var clojure.tools.analyzer.js.cljs.core/->>)}, :macro-aliases {}}, cljs.user {:ns cljs.user, :mappings {^{:arglists ([^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} ->PersistentHashSet ^{:arglists ([^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentHashSet [^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} ->PersistentHashSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} ->ExceptionInfo ^{:arglists ([^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} ->ExceptionInfo, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8491, :column 4, :line 8491, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8491, :column 5, :line 8491, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8492, :column 7, :line 8492, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8492, :column 9, :line 8492, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 14, :end-line 8486, :column 7, :line 8486, :file "cljs/core.cljs"} js->clj ^{:arglists (^{:end-column 7, :end-line 8491, :column 4, :line 8491, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8491, :column 5, :line 8491, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8492, :column 7, :line 8492, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8492, :column 9, :line 8492, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 14, :end-line 8486, :column 7, :line 8486, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8491, :column 5, :line 8491, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} x & ^{:end-column 13, :end-line 8492, :column 9, :line 8492, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8491, :column 4, :line 8491, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8491, :column 5, :line 8491, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8492, :column 7, :line 8492, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8492, :column 9, :line 8492, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 14, :end-line 8486, :column 7, :line 8486, :file "cljs/core.cljs"} js->clj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1660, :column 4, :line 1660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1660, :column 5, :line 1660, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1660, :column 11, :line 1660, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1662, :column 5, :line 1662, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1662, :column 11, :line 1662, :file "cljs/core.cljs"} comp ^{:end-column 20, :end-line 1662, :column 16, :line 1662, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 14, :end-line 1655, :column 7, :line 1655, :file "cljs/core.cljs"} sort-by ^{:arglists (^{:end-column 16, :end-line 1660, :column 4, :line 1660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1660, :column 5, :line 1660, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1660, :column 11, :line 1660, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1662, :column 5, :line 1662, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1662, :column 11, :line 1662, :file "cljs/core.cljs"} comp ^{:end-column 20, :end-line 1662, :column 16, :line 1662, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 14, :end-line 1655, :column 7, :line 1655, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1660, :column 5, :line 1660, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1660, :column 11, :line 1660, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1662, :column 5, :line 1662, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1662, :column 11, :line 1662, :file "cljs/core.cljs"} comp ^{:end-column 20, :end-line 1662, :column 16, :line 1662, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1660, :column 4, :line 1660, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1660, :column 5, :line 1660, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1660, :column 11, :line 1660, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1662, :column 4, :line 1662, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1662, :column 5, :line 1662, :file "cljs/core.cljs"} keyfn ^{:end-column 15, :end-line 1662, :column 11, :line 1662, :file "cljs/core.cljs"} comp ^{:end-column 20, :end-line 1662, :column 16, :line 1662, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 14, :end-line 1655, :column 7, :line 1655, :file "cljs/core.cljs"} sort-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 35, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} ITransientAssociative ^{:impls (cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 35, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 35, :end-line 367, :column 14, :line 367, :file "cljs/core.cljs"} ITransientAssociative, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 2191, :column 15, :line 2191, :file "cljs/core.cljs"} chunk-first ^{:arglists (^{:end-column 22, :end-line 2666, :column 19, :line 2666, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2666, :column 20, :line 2666, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2666, :column 7, :line 2666, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2666, :column 20, :line 2666, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2666, :column 19, :line 2666, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2666, :column 20, :line 2666, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2666, :column 7, :line 2666, :file "cljs/core.cljs"} chunk-first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 467, :column 27, :line 467, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 467, :column 28, :line 467, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 467, :column 8, :line 467, :file "cljs/core.cljs"} number, :end-column 26, :end-line 467, :column 15, :line 467, :file "cljs/core.cljs"} m3-hash-int ^{:arglists (^{:end-column 31, :end-line 467, :column 27, :line 467, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 467, :column 28, :line 467, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 467, :column 8, :line 467, :file "cljs/core.cljs"} number, :end-column 26, :end-line 467, :column 15, :line 467, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 467, :column 28, :line 467, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 467, :column 27, :line 467, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 467, :column 28, :line 467, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 467, :column 8, :line 467, :file "cljs/core.cljs"} number, :end-column 26, :end-line 467, :column 15, :line 467, :file "cljs/core.cljs"} m3-hash-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3063, :column 15, :line 3063, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3063, :column 16, :line 3063, :file "cljs/core.cljs"} xform ^{:end-column 26, :end-line 3063, :column 22, :line 3063, :file "cljs/core.cljs"} iter]), :end-column 14, :end-line 3063, :column 7, :line 3063, :file "cljs/core.cljs"} stepper ^{:arglists (^{:end-column 27, :end-line 3063, :column 15, :line 3063, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3063, :column 16, :line 3063, :file "cljs/core.cljs"} xform ^{:end-column 26, :end-line 3063, :column 22, :line 3063, :file "cljs/core.cljs"} iter]), :end-column 14, :end-line 3063, :column 7, :line 3063, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 21, :end-line 3063, :column 16, :line 3063, :file "cljs/core.cljs"} xform ^{:end-column 26, :end-line 3063, :column 22, :line 3063, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3063, :column 15, :line 3063, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3063, :column 16, :line 3063, :file "cljs/core.cljs"} xform ^{:end-column 26, :end-line 3063, :column 22, :line 3063, :file "cljs/core.cljs"} iter]), :end-column 14, :end-line 3063, :column 7, :line 3063, :file "cljs/core.cljs"} stepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 418, :column 3, :line 418, :file "cljs/core.cljs"} [^{:tag ^{:end-column 15, :end-line 418, :column 5, :line 418, :file "cljs/core.cljs"} not-native, :end-column 19, :end-line 418, :column 16, :line 418, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 14, :end-line 415, :column 7, :line 415, :file "cljs/core.cljs"} pr-str* ^{:arglists (^{:end-column 20, :end-line 418, :column 3, :line 418, :file "cljs/core.cljs"} [^{:tag ^{:end-column 15, :end-line 418, :column 5, :line 418, :file "cljs/core.cljs"} not-native, :end-column 19, :end-line 418, :column 16, :line 418, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 14, :end-line 415, :column 7, :line 415, :file "cljs/core.cljs"} {:arglists ([^{:tag ^{:end-column 15, :end-line 418, :column 5, :line 418, :file "cljs/core.cljs"} not-native, :end-column 19, :end-line 418, :column 16, :line 418, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 418, :column 3, :line 418, :file "cljs/core.cljs"} [^{:tag ^{:end-column 15, :end-line 418, :column 5, :line 418, :file "cljs/core.cljs"} not-native, :end-column 19, :end-line 418, :column 16, :line 418, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 14, :end-line 415, :column 7, :line 415, :file "cljs/core.cljs"} pr-str*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8436, :column 3, :line 8436, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8436, :column 4, :line 8436, :file "cljs/core.cljs"} xform ^{:end-column 14, :end-line 8436, :column 10, :line 8436, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 15, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} eduction ^{:arglists (^{:end-column 15, :end-line 8436, :column 3, :line 8436, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8436, :column 4, :line 8436, :file "cljs/core.cljs"} xform ^{:end-column 14, :end-line 8436, :column 10, :line 8436, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 15, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} {:arglists (^cljs.core/Eduction [^{:end-column 9, :end-line 8436, :column 4, :line 8436, :file "cljs/core.cljs"} xform ^{:end-column 14, :end-line 8436, :column 10, :line 8436, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8436, :column 3, :line 8436, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8436, :column 4, :line 8436, :file "cljs/core.cljs"} xform ^{:end-column 14, :end-line 8436, :column 10, :line 8436, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 15, :end-line 8432, :column 7, :line 8432, :file "cljs/core.cljs"} eduction, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3862, :column 4, :line 3862, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 3862, :column 5, :line 3862, :file "cljs/core.cljs"} branch? ^{:end-column 21, :end-line 3862, :column 13, :line 3862, :file "cljs/core.cljs"} children ^{:end-column 26, :end-line 3862, :column 22, :line 3862, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 15, :end-line 3855, :column 7, :line 3855, :file "cljs/core.cljs"} tree-seq ^{:arglists (^{:end-column 27, :end-line 3862, :column 4, :line 3862, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 3862, :column 5, :line 3862, :file "cljs/core.cljs"} branch? ^{:end-column 21, :end-line 3862, :column 13, :line 3862, :file "cljs/core.cljs"} children ^{:end-column 26, :end-line 3862, :column 22, :line 3862, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 15, :end-line 3855, :column 7, :line 3855, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 12, :end-line 3862, :column 5, :line 3862, :file "cljs/core.cljs"} branch? ^{:end-column 21, :end-line 3862, :column 13, :line 3862, :file "cljs/core.cljs"} children ^{:end-column 26, :end-line 3862, :column 22, :line 3862, :file "cljs/core.cljs"} root]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3862, :column 4, :line 3862, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 3862, :column 5, :line 3862, :file "cljs/core.cljs"} branch? ^{:end-column 21, :end-line 3862, :column 13, :line 3862, :file "cljs/core.cljs"} children ^{:end-column 26, :end-line 3862, :column 22, :line 3862, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 15, :end-line 3855, :column 7, :line 3855, :file "cljs/core.cljs"} tree-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 1944, :column 31, :line 1944, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1944, :column 32, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 1944, :column 34, :line 1944, :file "cljs/core.cljs"} n]), :end-column 30, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} unchecked-remainder-int ^{:arglists (^{:end-column 36, :end-line 1944, :column 31, :line 1944, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1944, :column 32, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 1944, :column 34, :line 1944, :file "cljs/core.cljs"} n]), :end-column 30, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1944, :column 32, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 1944, :column 34, :line 1944, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 1944, :column 31, :line 1944, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1944, :column 32, :line 1944, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 1944, :column 34, :line 1944, :file "cljs/core.cljs"} n]), :end-column 30, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} unchecked-remainder-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 638, :column 3, :line 638, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 638, :column 4, :line 638, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq, :end-column 15, :end-line 634, :column 12, :line 634, :file "cljs/core.cljs"} seq ^{:arglists (^{:end-column 9, :end-line 638, :column 3, :line 638, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 638, :column 4, :line 638, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq, :end-column 15, :end-line 634, :column 12, :line 634, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 638, :column 4, :line 638, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 638, :column 3, :line 638, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 638, :column 4, :line 638, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq, :end-column 15, :end-line 634, :column 12, :line 634, :file "cljs/core.cljs"} seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} reduce ^{:arglists (^{:end-column 12, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1715, :column 11, :line 1715, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 13, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} coll] [^{:end-column 6, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1715, :column 11, :line 1715, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1699, :column 4, :line 1699, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1699, :column 5, :line 1699, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1699, :column 7, :line 1699, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1715, :column 4, :line 1715, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1715, :column 5, :line 1715, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1715, :column 7, :line 1715, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1715, :column 11, :line 1715, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 13, :end-line 1689, :column 7, :line 1689, :file "cljs/core.cljs"} reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 18, :end-line 3012, :column 1, :line 3012, :file "cljs/core.cljs"} INIT ^{:end-column 18, :end-line 3012, :column 1, :line 3012, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 18, :end-line 3012, :column 1, :line 3012, :file "cljs/core.cljs"} INIT, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1550, :column 3, :line 1550, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1550, :column 9, :line 1550, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 15, :end-line 1544, :column 8, :line 1544, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1544, :column 16, :line 1544, :file "cljs/core.cljs"} contains? ^{:arglists (^{:end-column 11, :end-line 1550, :column 3, :line 1550, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1550, :column 9, :line 1550, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 15, :end-line 1544, :column 8, :line 1544, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1544, :column 16, :line 1544, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 8, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1550, :column 9, :line 1550, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1550, :column 3, :line 1550, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1550, :column 4, :line 1550, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1550, :column 9, :line 1550, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 15, :end-line 1544, :column 8, :line 1544, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1544, :column 16, :line 1544, :file "cljs/core.cljs"} contains?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3217, :column 3, :line 3217, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3217, :column 4, :line 3217, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3217, :column 9, :line 3217, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 15, :end-line 3214, :column 8, :line 3214, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3214, :column 16, :line 3214, :file "cljs/core.cljs"} every? ^{:arglists (^{:end-column 14, :end-line 3217, :column 3, :line 3217, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3217, :column 4, :line 3217, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3217, :column 9, :line 3217, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 15, :end-line 3214, :column 8, :line 3214, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3214, :column 16, :line 3214, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3217, :column 4, :line 3217, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3217, :column 9, :line 3217, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3217, :column 3, :line 3217, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3217, :column 4, :line 3217, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3217, :column 9, :line 3217, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 15, :end-line 3214, :column 8, :line 3214, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3214, :column 16, :line 3214, :file "cljs/core.cljs"} every?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} ->ES6IteratorSeq ^{:arglists ([^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6IteratorSeq [^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} ->ES6IteratorSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3499, :column 4, :line 3499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3499, :column 5, :line 3499, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3511, :column 7, :line 3511, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 19, :end-line 3494, :column 7, :line 3494, :file "cljs/core.cljs"} keep-indexed ^{:arglists (^{:end-column 7, :end-line 3499, :column 4, :line 3499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3499, :column 5, :line 3499, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3511, :column 7, :line 3511, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 19, :end-line 3494, :column 7, :line 3494, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3499, :column 5, :line 3499, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3511, :column 7, :line 3511, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3499, :column 4, :line 3499, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3499, :column 5, :line 3499, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3511, :column 7, :line 3511, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 19, :end-line 3494, :column 7, :line 3494, :file "cljs/core.cljs"} keep-indexed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} ->PersistentQueueSeq ^{:arglists ([^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentQueueSeq [^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} ->PersistentQueueSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 2142, :column 4, :line 2142, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2142, :column 5, :line 2142, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2142, :column 7, :line 2142, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2143, :column 4, :line 2143, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2143, :column 5, :line 2143, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2143, :column 7, :line 2143, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 2143, :column 13, :line 2143, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 11, :end-line 2139, :column 7, :line 2139, :file "cljs/core.cljs"} subs ^{:arglists (^{:end-column 13, :end-line 2142, :column 4, :line 2142, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2142, :column 5, :line 2142, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2142, :column 7, :line 2142, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2143, :column 4, :line 2143, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2143, :column 5, :line 2143, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2143, :column 7, :line 2143, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 2143, :column 13, :line 2143, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 11, :end-line 2139, :column 7, :line 2139, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 2142, :column 5, :line 2142, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2142, :column 7, :line 2142, :file "cljs/core.cljs"} start] [^{:end-column 6, :end-line 2143, :column 5, :line 2143, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2143, :column 7, :line 2143, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 2143, :column 13, :line 2143, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 2142, :column 4, :line 2142, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2142, :column 5, :line 2142, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2142, :column 7, :line 2142, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2143, :column 4, :line 2143, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2143, :column 5, :line 2143, :file "cljs/core.cljs"} s ^{:end-column 12, :end-line 2143, :column 7, :line 2143, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 2143, :column 13, :line 2143, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 11, :end-line 2139, :column 7, :line 2139, :file "cljs/core.cljs"} subs, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7433, :column 3, :line 7433, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 10, :end-line 7431, :column 7, :line 7431, :file "cljs/core.cljs"} set ^{:arglists (^{:end-column 9, :end-line 7433, :column 3, :line 7433, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 10, :end-line 7431, :column 7, :line 7431, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7433, :column 3, :line 7433, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 10, :end-line 7431, :column 7, :line 7431, :file "cljs/core.cljs"} set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1619, :column 4, :line 1619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1619, :column 5, :line 1619, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1619, :column 8, :line 1619, :file "cljs/core.cljs"} ys ^{:end-column 14, :end-line 1619, :column 11, :line 1619, :file "cljs/core.cljs"} len ^{:end-column 16, :end-line 1619, :column 15, :line 1619, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 32, :end-line 1610, :column 17, :line 1610, :file "cljs/core.cljs"} compare-indexed ^{:arglists (^{:end-column 11, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1619, :column 4, :line 1619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1619, :column 5, :line 1619, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1619, :column 8, :line 1619, :file "cljs/core.cljs"} ys ^{:end-column 14, :end-line 1619, :column 11, :line 1619, :file "cljs/core.cljs"} len ^{:end-column 16, :end-line 1619, :column 15, :line 1619, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 32, :end-line 1610, :column 17, :line 1610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} ys] ^^{:end-column 14, :end-line 1589, :column 8, :line 1589, :file "cljs/core.cljs"} number [^{:end-column 7, :end-line 1619, :column 5, :line 1619, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1619, :column 8, :line 1619, :file "cljs/core.cljs"} ys ^{:end-column 14, :end-line 1619, :column 11, :line 1619, :file "cljs/core.cljs"} len ^{:end-column 16, :end-line 1619, :column 15, :line 1619, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1612, :column 4, :line 1612, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1612, :column 5, :line 1612, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1612, :column 8, :line 1612, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1619, :column 4, :line 1619, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1619, :column 5, :line 1619, :file "cljs/core.cljs"} xs ^{:end-column 10, :end-line 1619, :column 8, :line 1619, :file "cljs/core.cljs"} ys ^{:end-column 14, :end-line 1619, :column 11, :line 1619, :file "cljs/core.cljs"} len ^{:end-column 16, :end-line 1619, :column 15, :line 1619, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 32, :end-line 1610, :column 17, :line 1610, :file "cljs/core.cljs"} compare-indexed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3711, :column 6, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 16, :end-line 3708, :column 7, :line 3708, :file "cljs/core.cljs"} take-last ^{:arglists (^{:end-column 11, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3711, :column 6, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 16, :end-line 3708, :column 7, :line 3708, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq [^{:end-column 5, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3711, :column 6, :line 3711, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3711, :column 6, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 16, :end-line 3708, :column 7, :line 3708, :file "cljs/core.cljs"} take-last, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 39, :end-line 623, :column 29, :line 623, :file "cljs/core.cljs"} IndexedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 929, :column 10, :line 929, :file "cljs/core.cljs"} IndexedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 28, :end-line 929, :column 21, :line 929, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i], :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 14, :end-line 2056, :column 7, :line 2056, :file "cljs/core.cljs"} bit-set ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 14, :end-line 2056, :column 7, :line 2056, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2058, :column 3, :line 2058, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2058, :column 4, :line 2058, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2058, :column 6, :line 2058, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 14, :end-line 2056, :column 7, :line 2056, :file "cljs/core.cljs"} bit-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 32, :end-line 494, :column 1, :line 494, :file "cljs/core.cljs"} string-hash-cache-count ^{:end-column 32, :end-line 494, :column 1, :line 494, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 32, :end-line 494, :column 1, :line 494, :file "cljs/core.cljs"} string-hash-cache-count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} ->Eduction ^{:arglists ([^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} {:arglists (^cljs.core/Eduction [^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} ->Eduction, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 6718, :column 21, :line 6718, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6718, :column 22, :line 6718, :file "cljs/core.cljs"} comp ^{:end-column 31, :end-line 6718, :column 27, :line 6718, :file "cljs/core.cljs"} tree ^{:end-column 33, :end-line 6718, :column 32, :line 6718, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 6718, :column 34, :line 6718, :file "cljs/core.cljs"} v ^{:end-column 41, :end-line 6718, :column 36, :line 6718, :file "cljs/core.cljs"} found]), :private true, :end-column 20, :end-line 6718, :column 8, :line 6718, :file "cljs/core.cljs"} tree-map-add ^{:arglists (^{:end-column 42, :end-line 6718, :column 21, :line 6718, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6718, :column 22, :line 6718, :file "cljs/core.cljs"} comp ^{:end-column 31, :end-line 6718, :column 27, :line 6718, :file "cljs/core.cljs"} tree ^{:end-column 33, :end-line 6718, :column 32, :line 6718, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 6718, :column 34, :line 6718, :file "cljs/core.cljs"} v ^{:end-column 41, :end-line 6718, :column 36, :line 6718, :file "cljs/core.cljs"} found]), :private true, :end-column 20, :end-line 6718, :column 8, :line 6718, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 6718, :column 22, :line 6718, :file "cljs/core.cljs"} comp ^{:end-column 31, :end-line 6718, :column 27, :line 6718, :file "cljs/core.cljs"} tree ^{:end-column 33, :end-line 6718, :column 32, :line 6718, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 6718, :column 34, :line 6718, :file "cljs/core.cljs"} v ^{:end-column 41, :end-line 6718, :column 36, :line 6718, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 6718, :column 21, :line 6718, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6718, :column 22, :line 6718, :file "cljs/core.cljs"} comp ^{:end-column 31, :end-line 6718, :column 27, :line 6718, :file "cljs/core.cljs"} tree ^{:end-column 33, :end-line 6718, :column 32, :line 6718, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 6718, :column 34, :line 6718, :file "cljs/core.cljs"} v ^{:end-column 41, :end-line 6718, :column 36, :line 6718, :file "cljs/core.cljs"} found]), :private true, :end-column 20, :end-line 6718, :column 8, :line 6718, :file "cljs/core.cljs"} tree-map-add, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} ->ES6SetEntriesIterator ^{:arglists ([^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6SetEntriesIterator [^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} ->ES6SetEntriesIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta ^{:arglists (^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 57, :end-line 8691, :column 3, :line 8691, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8691, :column 4, :line 8691, :file "cljs/core.cljs"} method-cache ^{:end-column 29, :end-line 8691, :column 17, :line 8691, :file "cljs/core.cljs"} method-table ^{:end-column 46, :end-line 8691, :column 30, :line 8691, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 56, :end-line 8691, :column 47, :line 8691, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 19, :end-line 8690, :column 8, :line 8690, :file "cljs/core.cljs"} reset-cache ^{:arglists (^{:end-column 57, :end-line 8691, :column 3, :line 8691, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8691, :column 4, :line 8691, :file "cljs/core.cljs"} method-cache ^{:end-column 29, :end-line 8691, :column 17, :line 8691, :file "cljs/core.cljs"} method-table ^{:end-column 46, :end-line 8691, :column 30, :line 8691, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 56, :end-line 8691, :column 47, :line 8691, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 19, :end-line 8690, :column 8, :line 8690, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8691, :column 4, :line 8691, :file "cljs/core.cljs"} method-cache ^{:end-column 29, :end-line 8691, :column 17, :line 8691, :file "cljs/core.cljs"} method-table ^{:end-column 46, :end-line 8691, :column 30, :line 8691, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 56, :end-line 8691, :column 47, :line 8691, :file "cljs/core.cljs"} hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 57, :end-line 8691, :column 3, :line 8691, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8691, :column 4, :line 8691, :file "cljs/core.cljs"} method-cache ^{:end-column 29, :end-line 8691, :column 17, :line 8691, :file "cljs/core.cljs"} method-table ^{:end-column 46, :end-line 8691, :column 30, :line 8691, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 56, :end-line 8691, :column 47, :line 8691, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 19, :end-line 8690, :column 8, :line 8690, :file "cljs/core.cljs"} reset-cache, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} ->PersistentArrayMapIterator ^{:arglists ([^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMapIterator [^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} ->PersistentArrayMapIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} PersistentArrayMapIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 36, :end-line 5179, :column 10, :line 5179, :file "cljs/core.cljs"} PersistentArrayMapIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 58, :end-line 5179, :column 37, :line 5179, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 5179, :column 38, :line 5179, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 53, :end-line 5179, :column 52, :line 5179, :file "cljs/core.cljs"} i ^{:end-column 57, :end-line 5179, :column 54, :line 5179, :file "cljs/core.cljs"} cnt], :protocols #{Object}}, ^{:arglists (^{:end-column 18, :end-line 7495, :column 15, :line 7495, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7495, :column 16, :line 7495, :file "cljs/core.cljs"} s]), :end-column 14, :end-line 7495, :column 7, :line 7495, :file "cljs/core.cljs"} butlast ^{:arglists (^{:end-column 18, :end-line 7495, :column 15, :line 7495, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7495, :column 16, :line 7495, :file "cljs/core.cljs"} s]), :end-column 14, :end-line 7495, :column 7, :line 7495, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq [^{:end-column 17, :end-line 7495, :column 16, :line 7495, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7495, :column 15, :line 7495, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7495, :column 16, :line 7495, :file "cljs/core.cljs"} s]), :end-column 14, :end-line 7495, :column 7, :line 7495, :file "cljs/core.cljs"} butlast, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 4028, :column 17, :line 4028, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4028, :column 18, :line 4028, :file "cljs/core.cljs"} pv]), :private true, :end-column 16, :end-line 4028, :column 8, :line 4028, :file "cljs/core.cljs"} tail-off ^{:arglists (^{:end-column 21, :end-line 4028, :column 17, :line 4028, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4028, :column 18, :line 4028, :file "cljs/core.cljs"} pv]), :private true, :end-column 16, :end-line 4028, :column 8, :line 4028, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 20, :end-line 4028, :column 18, :line 4028, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 4028, :column 17, :line 4028, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4028, :column 18, :line 4028, :file "cljs/core.cljs"} pv]), :private true, :end-column 16, :end-line 4028, :column 8, :line 4028, :file "cljs/core.cljs"} tail-off, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 5, :line 1957, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1958, :column 4, :line 1958, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1958, :column 5, :line 1958, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1958, :column 7, :line 1958, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1959, :column 4, :line 1959, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1959, :column 5, :line 1959, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1959, :column 9, :line 1959, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1959, :column 11, :line 1959, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1954, :column 8, :line 1954, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1954, :column 15, :line 1954, :file "cljs/core.cljs"} unchecked-subtract-int ^{:arglists (^{:end-column 7, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 5, :line 1957, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1958, :column 4, :line 1958, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1958, :column 5, :line 1958, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1958, :column 7, :line 1958, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1959, :column 4, :line 1959, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1959, :column 5, :line 1959, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1959, :column 9, :line 1959, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1959, :column 11, :line 1959, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1954, :column 8, :line 1954, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1954, :column 15, :line 1954, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1957, :column 5, :line 1957, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1958, :column 5, :line 1958, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1958, :column 7, :line 1958, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1959, :column 5, :line 1959, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1959, :column 11, :line 1959, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 5, :line 1957, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1958, :column 4, :line 1958, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1958, :column 5, :line 1958, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1958, :column 7, :line 1958, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1959, :column 4, :line 1959, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1959, :column 5, :line 1959, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1959, :column 9, :line 1959, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1959, :column 11, :line 1959, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1954, :column 8, :line 1954, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1954, :column 15, :line 1954, :file "cljs/core.cljs"} unchecked-subtract-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator ^{:arglists (^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7746, :column 4, :line 7746, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7746, :column 5, :line 7746, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7757, :column 4, :line 7757, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7757, :column 5, :line 7757, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7757, :column 7, :line 7757, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 15, :end-line 7743, :column 7, :line 7743, :file "cljs/core.cljs"} take-nth ^{:arglists (^{:end-column 7, :end-line 7746, :column 4, :line 7746, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7746, :column 5, :line 7746, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7757, :column 4, :line 7757, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7757, :column 5, :line 7757, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7757, :column 7, :line 7757, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 15, :end-line 7743, :column 7, :line 7743, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7746, :column 5, :line 7746, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 6, :end-line 7757, :column 5, :line 7757, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7757, :column 7, :line 7757, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7746, :column 4, :line 7746, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7746, :column 5, :line 7746, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7757, :column 4, :line 7757, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7757, :column 5, :line 7757, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7757, :column 7, :line 7757, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 15, :end-line 7743, :column 7, :line 7743, :file "cljs/core.cljs"} take-nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 660, :column 3, :line 660, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 660, :column 4, :line 660, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 12, :end-line 657, :column 7, :line 657, :file "cljs/core.cljs"} first ^{:arglists (^{:end-column 9, :end-line 660, :column 3, :line 660, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 660, :column 4, :line 660, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 12, :end-line 657, :column 7, :line 657, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 660, :column 4, :line 660, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 660, :column 3, :line 660, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 660, :column 4, :line 660, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 12, :end-line 657, :column 7, :line 657, :file "cljs/core.cljs"} first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 7, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 15, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 33, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies? ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 7, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 15, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 33, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 7, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 7, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 15, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 33, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1520, :column 3, :line 1520, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1518, :column 16, :line 1518, :file "cljs/core.cljs"} seq? ^{:arglists (^{:end-column 6, :end-line 1520, :column 3, :line 1520, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1518, :column 16, :line 1518, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1520, :column 3, :line 1520, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1520, :column 4, :line 1520, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 15, :end-line 1518, :column 8, :line 1518, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1518, :column 16, :line 1518, :file "cljs/core.cljs"} seq?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 38, :end-line 8580, :column 1, :line 8580, :file "cljs/core.cljs"} -global-hierarchy ^{:private true, :end-column 38, :end-line 8580, :column 1, :line 8580, :file "cljs/core.cljs"} {:op :var, :name ^{:private true, :end-column 38, :end-line 8580, :column 1, :line 8580, :file "cljs/core.cljs"} -global-hierarchy, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} UUID {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} UUID, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 21, :end-line 8970, :column 15, :line 8970, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from ^{:arglists (^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8144, :column 3, :line 8144, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8144, :column 4, :line 8144, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8144, :column 6, :line 8144, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 18, :end-line 8142, :column 7, :line 8142, :file "cljs/core.cljs"} println-str ^{:arglists (^{:end-column 11, :end-line 8144, :column 3, :line 8144, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8144, :column 4, :line 8144, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8144, :column 6, :line 8144, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 18, :end-line 8142, :column 7, :line 8142, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 8144, :column 6, :line 8144, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8144, :column 3, :line 8144, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8144, :column 4, :line 8144, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8144, :column 6, :line 8144, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 18, :end-line 8142, :column 7, :line 8142, :file "cljs/core.cljs"} println-str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 1155, :column 4, :line 1155, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1155, :column 5, :line 1155, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1155, :column 10, :line 1155, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1164, :column 4, :line 1164, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1164, :column 5, :line 1164, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1164, :column 10, :line 1164, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1164, :column 12, :line 1164, :file "cljs/core.cljs"} not-found]), :private true, :end-column 28, :end-line 1154, :column 8, :line 1154, :file "cljs/core.cljs"} linear-traversal-nth ^{:arglists (^{:end-column 12, :end-line 1155, :column 4, :line 1155, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1155, :column 5, :line 1155, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1155, :column 10, :line 1155, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1164, :column 4, :line 1164, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1164, :column 5, :line 1164, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1164, :column 10, :line 1164, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1164, :column 12, :line 1164, :file "cljs/core.cljs"} not-found]), :private true, :end-column 28, :end-line 1154, :column 8, :line 1154, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1155, :column 5, :line 1155, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1155, :column 10, :line 1155, :file "cljs/core.cljs"} n] [^{:end-column 9, :end-line 1164, :column 5, :line 1164, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1164, :column 10, :line 1164, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1164, :column 12, :line 1164, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1155, :column 4, :line 1155, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1155, :column 5, :line 1155, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1155, :column 10, :line 1155, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1164, :column 4, :line 1164, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1164, :column 5, :line 1164, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1164, :column 10, :line 1164, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1164, :column 12, :line 1164, :file "cljs/core.cljs"} not-found]), :private true, :end-column 28, :end-line 1154, :column 8, :line 1154, :file "cljs/core.cljs"} linear-traversal-nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3772, :column 3, :line 3772, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 3772, :column 6, :line 3772, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 14, :end-line 3769, :column 7, :line 3769, :file "cljs/core.cljs"} iterate ^{:arglists (^{:end-column 8, :end-line 3772, :column 3, :line 3772, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 3772, :column 6, :line 3772, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 14, :end-line 3769, :column 7, :line 3769, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 5, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 3772, :column 6, :line 3772, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3772, :column 3, :line 3772, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 3772, :column 6, :line 3772, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 14, :end-line 3769, :column 7, :line 3769, :file "cljs/core.cljs"} iterate, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty ^{:arglists (^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8100, :column 15, :line 8100, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8100, :column 16, :line 8100, :file "cljs/core.cljs"} opts]), :end-column 14, :end-line 8100, :column 7, :line 8100, :file "cljs/core.cljs"} newline ^{:arglists (^{:end-column 21, :end-line 8100, :column 15, :line 8100, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8100, :column 16, :line 8100, :file "cljs/core.cljs"} opts]), :end-column 14, :end-line 8100, :column 7, :line 8100, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 20, :end-line 8100, :column 16, :line 8100, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8100, :column 15, :line 8100, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8100, :column 16, :line 8100, :file "cljs/core.cljs"} opts]), :end-column 14, :end-line 8100, :column 7, :line 8100, :file "cljs/core.cljs"} newline, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 21, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} ILookup ^{:impls (cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/TransientHashMap cljs.core/PersistentHashMap cljs.core/TransientArrayMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 21, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 21, :end-line 269, :column 14, :line 269, :file "cljs/core.cljs"} ILookup, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest ^{:arglists (^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 7963, :column 17, :line 7963, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 7963, :column 18, :line 7963, :file "cljs/core.cljs"} writer ^{:end-column 26, :end-line 7963, :column 25, :line 7963, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 7963, :column 27, :line 7963, :file "cljs/core.cljs"} ss]), :end-column 16, :end-line 7963, :column 7, :line 7963, :file "cljs/core.cljs"} write-all ^{:arglists (^{:end-column 30, :end-line 7963, :column 17, :line 7963, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 7963, :column 18, :line 7963, :file "cljs/core.cljs"} writer ^{:end-column 26, :end-line 7963, :column 25, :line 7963, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 7963, :column 27, :line 7963, :file "cljs/core.cljs"} ss]), :end-column 16, :end-line 7963, :column 7, :line 7963, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 7963, :column 18, :line 7963, :file "cljs/core.cljs"} writer & ^{:end-column 29, :end-line 7963, :column 27, :line 7963, :file "cljs/core.cljs"} ss]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 7963, :column 17, :line 7963, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 7963, :column 18, :line 7963, :file "cljs/core.cljs"} writer ^{:end-column 26, :end-line 7963, :column 25, :line 7963, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 7963, :column 27, :line 7963, :file "cljs/core.cljs"} ss]), :end-column 16, :end-line 7963, :column 7, :line 7963, :file "cljs/core.cljs"} write-all, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1319, :column 20, :line 1319, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1319, :column 21, :line 1319, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} fn? ^{:arglists (^{:end-column 23, :end-line 1319, :column 20, :line 1319, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1319, :column 21, :line 1319, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1320, :column 8, :line 1320, :file "cljs/core.cljs"} boolean [^{:end-column 22, :end-line 1319, :column 21, :line 1319, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1319, :column 20, :line 1319, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1319, :column 21, :line 1319, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1319, :column 8, :line 1319, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1319, :column 16, :line 1319, :file "cljs/core.cljs"} fn?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method ^{:arglists (^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc ^{:arglists (^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7887, :column 4, :line 7887, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7887, :column 5, :line 7887, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7890, :column 5, :line 7890, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7890, :column 7, :line 7890, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 12, :end-line 7880, :column 7, :line 7880, :file "cljs/core.cljs"} doall ^{:arglists (^{:end-column 10, :end-line 7887, :column 4, :line 7887, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7887, :column 5, :line 7887, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7890, :column 5, :line 7890, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7890, :column 7, :line 7890, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 12, :end-line 7880, :column 7, :line 7880, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7887, :column 5, :line 7887, :file "cljs/core.cljs"} coll] [^{:end-column 6, :end-line 7890, :column 5, :line 7890, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7890, :column 7, :line 7890, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7887, :column 4, :line 7887, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7887, :column 5, :line 7887, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7890, :column 4, :line 7890, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7890, :column 5, :line 7890, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7890, :column 7, :line 7890, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 12, :end-line 7880, :column 7, :line 7880, :file "cljs/core.cljs"} doall, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 2444, :column 35, :line 2444, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 2444, :column 36, :line 2444, :file "cljs/core.cljs"} x ^{:end-column 39, :end-line 2444, :column 38, :line 2444, :file "cljs/core.cljs"} y]), :tag ^{:end-column 15, :end-line 2444, :column 8, :line 2444, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 2444, :column 16, :line 2444, :file "cljs/core.cljs"} keyword-identical? ^{:arglists (^{:end-column 40, :end-line 2444, :column 35, :line 2444, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 2444, :column 36, :line 2444, :file "cljs/core.cljs"} x ^{:end-column 39, :end-line 2444, :column 38, :line 2444, :file "cljs/core.cljs"} y]), :tag ^{:end-column 15, :end-line 2444, :column 8, :line 2444, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 2444, :column 16, :line 2444, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 37, :end-line 2444, :column 36, :line 2444, :file "cljs/core.cljs"} x ^{:end-column 39, :end-line 2444, :column 38, :line 2444, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 2444, :column 35, :line 2444, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 2444, :column 36, :line 2444, :file "cljs/core.cljs"} x ^{:end-column 39, :end-line 2444, :column 38, :line 2444, :file "cljs/core.cljs"} y]), :tag ^{:end-column 15, :end-line 2444, :column 8, :line 2444, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 2444, :column 16, :line 2444, :file "cljs/core.cljs"} keyword-identical?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 4022, :column 16, :line 4022, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4022, :column 17, :line 4022, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4022, :column 22, :line 4022, :file "cljs/core.cljs"} idx ^{:end-column 29, :end-line 4022, :column 26, :line 4022, :file "cljs/core.cljs"} val]), :private true, :end-column 15, :end-line 4022, :column 8, :line 4022, :file "cljs/core.cljs"} pv-aset ^{:arglists (^{:end-column 30, :end-line 4022, :column 16, :line 4022, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4022, :column 17, :line 4022, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4022, :column 22, :line 4022, :file "cljs/core.cljs"} idx ^{:end-column 29, :end-line 4022, :column 26, :line 4022, :file "cljs/core.cljs"} val]), :private true, :end-column 15, :end-line 4022, :column 8, :line 4022, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 4022, :column 17, :line 4022, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4022, :column 22, :line 4022, :file "cljs/core.cljs"} idx ^{:end-column 29, :end-line 4022, :column 26, :line 4022, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 4022, :column 16, :line 4022, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4022, :column 17, :line 4022, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4022, :column 22, :line 4022, :file "cljs/core.cljs"} idx ^{:end-column 29, :end-line 4022, :column 26, :line 4022, :file "cljs/core.cljs"} val]), :private true, :end-column 15, :end-line 4022, :column 8, :line 4022, :file "cljs/core.cljs"} pv-aset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8966, :column 3, :line 8966, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8966, :column 4, :line 8966, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 14, :end-line 8964, :column 7, :line 8964, :file "cljs/core.cljs"} prefers ^{:arglists (^{:end-column 12, :end-line 8966, :column 3, :line 8966, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8966, :column 4, :line 8966, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 14, :end-line 8964, :column 7, :line 8964, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8966, :column 4, :line 8966, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8966, :column 3, :line 8966, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8966, :column 4, :line 8966, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 14, :end-line 8964, :column 7, :line 8964, :file "cljs/core.cljs"} prefers, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj ^{:arglists (^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} LazySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} LazySeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 2474, :column 18, :line 2474, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8395, :column 4, :line 8395, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8407, :column 4, :line 8407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8407, :column 5, :line 8407, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 8392, :column 7, :line 8392, :file "cljs/core.cljs"} dedupe ^{:arglists (^{:end-column 6, :end-line 8395, :column 4, :line 8395, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8407, :column 4, :line 8407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8407, :column 5, :line 8407, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 8392, :column 7, :line 8392, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 9, :end-line 8407, :column 5, :line 8407, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8395, :column 4, :line 8395, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8407, :column 4, :line 8407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8407, :column 5, :line 8407, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 8392, :column 7, :line 8392, :file "cljs/core.cljs"} dedupe, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4589, :column 37, :line 4589, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4589, :column 38, :line 4589, :file "cljs/core.cljs"} tv ^{:end-column 42, :end-line 4589, :column 41, :line 4589, :file "cljs/core.cljs"} i]), :private true, :end-column 36, :end-line 4589, :column 8, :line 4589, :file "cljs/core.cljs"} unchecked-editable-array-for ^{:arglists (^{:end-column 43, :end-line 4589, :column 37, :line 4589, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4589, :column 38, :line 4589, :file "cljs/core.cljs"} tv ^{:end-column 42, :end-line 4589, :column 41, :line 4589, :file "cljs/core.cljs"} i]), :private true, :end-column 36, :end-line 4589, :column 8, :line 4589, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 4589, :column 38, :line 4589, :file "cljs/core.cljs"} tv ^{:end-column 42, :end-line 4589, :column 41, :line 4589, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4589, :column 37, :line 4589, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4589, :column 38, :line 4589, :file "cljs/core.cljs"} tv ^{:end-column 42, :end-line 4589, :column 41, :line 4589, :file "cljs/core.cljs"} i]), :private true, :end-column 36, :end-line 4589, :column 8, :line 4589, :file "cljs/core.cljs"} unchecked-editable-array-for, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} ->ES6Iterator ^{:arglists ([^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6Iterator [^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} ->ES6Iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} VectorNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} VectorNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 4014, :column 21, :line 4014, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr], :protocols #{}}, ^{:arglists (^{:end-column 10, :end-line 1308, :column 4, :line 1308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1308, :column 5, :line 1308, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1309, :column 4, :line 1309, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1309, :column 5, :line 1309, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1309, :column 10, :line 1309, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1312, :column 4, :line 1312, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1312, :column 5, :line 1312, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1312, :column 10, :line 1312, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1312, :column 12, :line 1312, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1312, :column 14, :line 1312, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 13, :end-line 1305, :column 7, :line 1305, :file "cljs/core.cljs"} dissoc ^{:arglists (^{:end-column 10, :end-line 1308, :column 4, :line 1308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1308, :column 5, :line 1308, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1309, :column 4, :line 1309, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1309, :column 5, :line 1309, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1309, :column 10, :line 1309, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1312, :column 4, :line 1312, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1312, :column 5, :line 1312, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1312, :column 10, :line 1312, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1312, :column 12, :line 1312, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1312, :column 14, :line 1312, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 13, :end-line 1305, :column 7, :line 1305, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1308, :column 5, :line 1308, :file "cljs/core.cljs"} coll] [^{:end-column 9, :end-line 1309, :column 5, :line 1309, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1309, :column 10, :line 1309, :file "cljs/core.cljs"} k] [^{:end-column 9, :end-line 1312, :column 5, :line 1312, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1312, :column 10, :line 1312, :file "cljs/core.cljs"} k & ^{:end-column 16, :end-line 1312, :column 14, :line 1312, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1308, :column 4, :line 1308, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1308, :column 5, :line 1308, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1309, :column 4, :line 1309, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1309, :column 5, :line 1309, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1309, :column 10, :line 1309, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1312, :column 4, :line 1312, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1312, :column 5, :line 1312, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1312, :column 10, :line 1312, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1312, :column 12, :line 1312, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1312, :column 14, :line 1312, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 13, :end-line 1305, :column 7, :line 1305, :file "cljs/core.cljs"} dissoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3428, :column 4, :line 3428, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3428, :column 5, :line 3428, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 3429, :column 4, :line 3429, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3429, :column 5, :line 3429, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 3429, :column 7, :line 3429, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 3429, :column 9, :line 3429, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 3429, :column 16, :line 3429, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3429, :column 17, :line 3429, :file "cljs/core.cljs"} meta ^{:end-column 31, :end-line 3429, :column 22, :line 3429, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 11, :end-line 3414, :column 7, :line 3414, :file "cljs/core.cljs"} atom ^{:declared true, :end-column 72, :end-line 5449, :column 68, :line 5449, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 72, :end-line 5449, :column 68, :line 5449, :file "cljs/core.cljs"} atom, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2072, :column 3, :line 2072, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2072, :column 4, :line 2072, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2072, :column 6, :line 2072, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 22, :end-line 2070, :column 7, :line 2070, :file "cljs/core.cljs"} bit-shift-right ^{:arglists (^{:end-column 8, :end-line 2072, :column 3, :line 2072, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2072, :column 4, :line 2072, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2072, :column 6, :line 2072, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 22, :end-line 2070, :column 7, :line 2070, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2072, :column 4, :line 2072, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2072, :column 6, :line 2072, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2072, :column 3, :line 2072, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2072, :column 4, :line 2072, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2072, :column 6, :line 2072, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 22, :end-line 2070, :column 7, :line 2070, :file "cljs/core.cljs"} bit-shift-right, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version* ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 30, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first ^{:arglists (^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1394, :column 3, :line 1394, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1394, :column 4, :line 1394, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 11, :end-line 1391, :column 7, :line 1391, :file "cljs/core.cljs"} peek ^{:arglists (^{:end-column 9, :end-line 1394, :column 3, :line 1394, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1394, :column 4, :line 1394, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 11, :end-line 1391, :column 7, :line 1391, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1394, :column 4, :line 1394, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1394, :column 3, :line 1394, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1394, :column 4, :line 1394, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 11, :end-line 1391, :column 7, :line 1391, :file "cljs/core.cljs"} peek, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 23, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} IKVReduce ^{:impls (cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 23, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 23, :end-line 310, :column 14, :line 310, :file "cljs/core.cljs"} IKVReduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 183, :column 15, :line 183, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 11, :end-line 179, :column 7, :line 179, :file "cljs/core.cljs"} aget ^{:arglists (^{:end-column 13, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 183, :column 15, :line 183, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 11, :end-line 179, :column 7, :line 179, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} i] [^{:end-column 10, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i & ^{:end-column 19, :end-line 183, :column 15, :line 183, :file "cljs/core.cljs"} idxs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 181, :column 4, :line 181, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 181, :column 5, :line 181, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 181, :column 11, :line 181, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 183, :column 15, :line 183, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 11, :end-line 179, :column 7, :line 179, :file "cljs/core.cljs"} aget, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} PersistentTreeMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} PersistentTreeMapSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 84, :end-line 6312, :column 31, :line 6312, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write ^{:arglists (^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3036, :column 12, :line 3036, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3036, :column 13, :line 3036, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3036, :column 7, :line 3036, :file "cljs/core.cljs"} iter ^{:arglists (^{:end-column 18, :end-line 3036, :column 12, :line 3036, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3036, :column 13, :line 3036, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3036, :column 7, :line 3036, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 3036, :column 13, :line 3036, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3036, :column 12, :line 3036, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 3036, :column 13, :line 3036, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 3036, :column 7, :line 3036, :file "cljs/core.cljs"} iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7598, :column 3, :line 7598, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} sc ^{:end-column 11, :end-line 7598, :column 7, :line 7598, :file "cljs/core.cljs"} test ^{:end-column 15, :end-line 7598, :column 12, :line 7598, :file "cljs/core.cljs"} key]), :end-column 18, :end-line 7597, :column 7, :line 7597, :file "cljs/core.cljs"} mk-bound-fn ^{:arglists (^{:end-column 16, :end-line 7598, :column 3, :line 7598, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} sc ^{:end-column 11, :end-line 7598, :column 7, :line 7598, :file "cljs/core.cljs"} test ^{:end-column 15, :end-line 7598, :column 12, :line 7598, :file "cljs/core.cljs"} key]), :end-column 18, :end-line 7597, :column 7, :line 7597, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} sc ^{:end-column 11, :end-line 7598, :column 7, :line 7598, :file "cljs/core.cljs"} test ^{:end-column 15, :end-line 7598, :column 12, :line 7598, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7598, :column 3, :line 7598, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7598, :column 4, :line 7598, :file "cljs/core.cljs"} sc ^{:end-column 11, :end-line 7598, :column 7, :line 7598, :file "cljs/core.cljs"} test ^{:end-column 15, :end-line 7598, :column 12, :line 7598, :file "cljs/core.cljs"} key]), :end-column 18, :end-line 7597, :column 7, :line 7597, :file "cljs/core.cljs"} mk-bound-fn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1096, :column 3, :line 1096, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 11, :end-line 1094, :column 7, :line 1094, :file "cljs/core.cljs"} last ^{:arglists (^{:end-column 6, :end-line 1096, :column 3, :line 1096, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 11, :end-line 1094, :column 7, :line 1094, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1096, :column 3, :line 1096, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 11, :end-line 1094, :column 7, :line 1094, :file "cljs/core.cljs"} last, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8120, :column 3, :line 8120, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8120, :column 4, :line 8120, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8120, :column 6, :line 8120, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 9, :end-line 8115, :column 7, :line 8115, :file "cljs/core.cljs"} pr ^{:arglists (^{:end-column 11, :end-line 8120, :column 3, :line 8120, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8120, :column 4, :line 8120, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8120, :column 6, :line 8120, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 9, :end-line 8115, :column 7, :line 8115, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 10, :end-line 8120, :column 6, :line 8120, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8120, :column 3, :line 8120, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8120, :column 4, :line 8120, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8120, :column 6, :line 8120, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 9, :end-line 8115, :column 7, :line 8115, :file "cljs/core.cljs"} pr, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 58, :end-line 6305, :column 26, :line 6305, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6305, :column 27, :line 6305, :file "cljs/core.cljs"} node ^{:end-column 37, :end-line 6305, :column 32, :line 6305, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 46, :end-line 6305, :column 39, :line 6305, :file "cljs/core.cljs"} boolean, :end-column 57, :end-line 6305, :column 47, :line 6305, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 25, :end-line 6305, :column 8, :line 6305, :file "cljs/core.cljs"} tree-map-seq-push ^{:arglists (^{:end-column 58, :end-line 6305, :column 26, :line 6305, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6305, :column 27, :line 6305, :file "cljs/core.cljs"} node ^{:end-column 37, :end-line 6305, :column 32, :line 6305, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 46, :end-line 6305, :column 39, :line 6305, :file "cljs/core.cljs"} boolean, :end-column 57, :end-line 6305, :column 47, :line 6305, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 25, :end-line 6305, :column 8, :line 6305, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6305, :column 27, :line 6305, :file "cljs/core.cljs"} node ^{:end-column 37, :end-line 6305, :column 32, :line 6305, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 46, :end-line 6305, :column 39, :line 6305, :file "cljs/core.cljs"} boolean, :end-column 57, :end-line 6305, :column 47, :line 6305, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 58, :end-line 6305, :column 26, :line 6305, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6305, :column 27, :line 6305, :file "cljs/core.cljs"} node ^{:end-column 37, :end-line 6305, :column 32, :line 6305, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 46, :end-line 6305, :column 39, :line 6305, :file "cljs/core.cljs"} boolean, :end-column 57, :end-line 6305, :column 47, :line 6305, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 25, :end-line 6305, :column 8, :line 6305, :file "cljs/core.cljs"} tree-map-seq-push, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2454, :column 3, :line 2454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2454, :column 4, :line 2454, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 16, :end-line 2452, :column 7, :line 2452, :file "cljs/core.cljs"} namespace ^{:arglists (^{:end-column 6, :end-line 2454, :column 3, :line 2454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2454, :column 4, :line 2454, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 16, :end-line 2452, :column 7, :line 2452, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string [^{:end-column 5, :end-line 2454, :column 4, :line 2454, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2454, :column 3, :line 2454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2454, :column 4, :line 2454, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 16, :end-line 2452, :column 7, :line 2452, :file "cljs/core.cljs"} namespace, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6993, :column 3, :line 6993, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6993, :column 4, :line 6993, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6993, :column 6, :line 6993, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 14, :end-line 6990, :column 7, :line 6990, :file "cljs/core.cljs"} obj-map ^{:arglists (^{:end-column 14, :end-line 6993, :column 3, :line 6993, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6993, :column 4, :line 6993, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6993, :column 6, :line 6993, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 14, :end-line 6990, :column 7, :line 6990, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 13, :end-line 6993, :column 6, :line 6993, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6993, :column 3, :line 6993, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6993, :column 4, :line 6993, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6993, :column 6, :line 6993, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 14, :end-line 6990, :column 7, :line 6990, :file "cljs/core.cljs"} obj-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} Reduced {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} Reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 816, :column 18, :line 816, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val], :protocols #{cljs.core/IDeref}}, ^{:arglists (^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj ^{:arglists (^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} NodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} NodeSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 5943, :column 18, :line 5943, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:declared true, :end-column 23, :end-line 490, :column 22, :line 490, :file "cljs/core.cljs"} = ^{:arglists (^{:end-column 7, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 695, :column 5, :line 695, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 696, :column 4, :line 696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 696, :column 5, :line 696, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 696, :column 7, :line 696, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 701, :column 4, :line 701, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 701, :column 5, :line 701, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 701, :column 7, :line 701, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 701, :column 9, :line 701, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 701, :column 11, :line 701, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 15, :end-line 690, :column 8, :line 690, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 690, :column 16, :line 690, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 695, :column 5, :line 695, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 6, :end-line 696, :column 5, :line 696, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 696, :column 7, :line 696, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 701, :column 5, :line 701, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 701, :column 7, :line 701, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 701, :column 11, :line 701, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 695, :column 4, :line 695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 695, :column 5, :line 695, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 696, :column 4, :line 696, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 696, :column 5, :line 696, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 696, :column 7, :line 696, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 701, :column 4, :line 701, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 701, :column 5, :line 701, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 701, :column 7, :line 701, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 701, :column 9, :line 701, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 701, :column 11, :line 701, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 15, :end-line 690, :column 8, :line 690, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 690, :column 16, :line 690, :file "cljs/core.cljs"} =, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 27, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} ITransientMap ^{:impls (cljs.core/TransientHashMap cljs.core/TransientArrayMap), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 27, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 27, :end-line 370, :column 14, :line 370, :file "cljs/core.cljs"} ITransientMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 4044, :column 18, :line 4044, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4044, :column 19, :line 4044, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4044, :column 22, :line 4044, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4044, :column 28, :line 4044, :file "cljs/core.cljs"} parent ^{:end-column 43, :end-line 4044, :column 35, :line 4044, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 17, :end-line 4044, :column 8, :line 4044, :file "cljs/core.cljs"} push-tail ^{:arglists (^{:end-column 44, :end-line 4044, :column 18, :line 4044, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4044, :column 19, :line 4044, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4044, :column 22, :line 4044, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4044, :column 28, :line 4044, :file "cljs/core.cljs"} parent ^{:end-column 43, :end-line 4044, :column 35, :line 4044, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 17, :end-line 4044, :column 8, :line 4044, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 21, :end-line 4044, :column 19, :line 4044, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4044, :column 22, :line 4044, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4044, :column 28, :line 4044, :file "cljs/core.cljs"} parent ^{:end-column 43, :end-line 4044, :column 35, :line 4044, :file "cljs/core.cljs"} tailnode]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 4044, :column 18, :line 4044, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4044, :column 19, :line 4044, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4044, :column 22, :line 4044, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4044, :column 28, :line 4044, :file "cljs/core.cljs"} parent ^{:end-column 43, :end-line 4044, :column 35, :line 4044, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 17, :end-line 4044, :column 8, :line 4044, :file "cljs/core.cljs"} push-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3674, :column 4, :line 3674, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3674, :column 5, :line 3674, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 11, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} take ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3674, :column 4, :line 3674, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3674, :column 5, :line 3674, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 11, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3674, :column 5, :line 3674, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3659, :column 4, :line 3659, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3659, :column 5, :line 3659, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3674, :column 4, :line 3674, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3674, :column 5, :line 3674, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 11, :end-line 3655, :column 7, :line 3655, :file "cljs/core.cljs"} take, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1465, :column 3, :line 1465, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1465, :column 4, :line 1465, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 15, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} vector? ^{:arglists (^{:end-column 6, :end-line 1465, :column 3, :line 1465, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1465, :column 4, :line 1465, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 15, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1465, :column 4, :line 1465, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1465, :column 3, :line 1465, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1465, :column 4, :line 1465, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 15, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} vector?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 46, :end-line 5475, :column 34, :line 5475, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 5475, :column 35, :line 5475, :file "cljs/core.cljs"} bitmap ^{:end-column 45, :end-line 5475, :column 42, :line 5475, :file "cljs/core.cljs"} bit]), :private true, :end-column 33, :end-line 5475, :column 8, :line 5475, :file "cljs/core.cljs"} bitmap-indexed-node-index ^{:arglists (^{:end-column 46, :end-line 5475, :column 34, :line 5475, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 5475, :column 35, :line 5475, :file "cljs/core.cljs"} bitmap ^{:end-column 45, :end-line 5475, :column 42, :line 5475, :file "cljs/core.cljs"} bit]), :private true, :end-column 33, :end-line 5475, :column 8, :line 5475, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 41, :end-line 5475, :column 35, :line 5475, :file "cljs/core.cljs"} bitmap ^{:end-column 45, :end-line 5475, :column 42, :line 5475, :file "cljs/core.cljs"} bit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 5475, :column 34, :line 5475, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 5475, :column 35, :line 5475, :file "cljs/core.cljs"} bitmap ^{:end-column 45, :end-line 5475, :column 42, :line 5475, :file "cljs/core.cljs"} bit]), :private true, :end-column 33, :end-line 5475, :column 8, :line 5475, :file "cljs/core.cljs"} bitmap-indexed-node-index, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1530, :column 24, :line 1530, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1530, :column 25, :line 1530, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1530, :column 8, :line 1530, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1530, :column 16, :line 1530, :file "cljs/core.cljs"} boolean ^{:arglists (^{:end-column 27, :end-line 1530, :column 24, :line 1530, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1530, :column 25, :line 1530, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1530, :column 8, :line 1530, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1530, :column 16, :line 1530, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 1530, :column 25, :line 1530, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1530, :column 24, :line 1530, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1530, :column 25, :line 1530, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1530, :column 8, :line 1530, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1530, :column 16, :line 1530, :file "cljs/core.cljs"} boolean, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 383, :column 14, :line 383, :file "cljs/core.cljs"} IChunk ^{:impls (cljs.core/ArrayChunk), :protocol-info {:methods {^{:end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 383, :column 14, :line 383, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 383, :column 14, :line 383, :file "cljs/core.cljs"} IChunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2068, :column 3, :line 2068, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2068, :column 4, :line 2068, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2068, :column 6, :line 2068, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 21, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} bit-shift-left ^{:arglists (^{:end-column 8, :end-line 2068, :column 3, :line 2068, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2068, :column 4, :line 2068, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2068, :column 6, :line 2068, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 21, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2068, :column 4, :line 2068, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2068, :column 6, :line 2068, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2068, :column 3, :line 2068, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2068, :column 4, :line 2068, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2068, :column 6, :line 2068, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 21, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} bit-shift-left, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2024, :column 3, :line 2024, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2024, :column 4, :line 2024, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 15, :end-line 2022, :column 7, :line 2022, :file "cljs/core.cljs"} rand-int ^{:arglists (^{:end-column 6, :end-line 8555, :column 3, :line 8555, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8555, :column 4, :line 8555, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 15, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 8555, :column 4, :line 8555, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8555, :column 3, :line 8555, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8555, :column 4, :line 8555, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 15, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} rand-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 164, :column 3, :line 164, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 164, :column 4, :line 164, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 13, :end-line 162, :column 7, :line 162, :file "cljs/core.cljs"} aclone ^{:arglists (^{:end-column 8, :end-line 164, :column 3, :line 164, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 164, :column 4, :line 164, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 13, :end-line 162, :column 7, :line 162, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 7, :end-line 164, :column 4, :line 164, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 164, :column 3, :line 164, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 164, :column 4, :line 164, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 13, :end-line 162, :column 7, :line 162, :file "cljs/core.cljs"} aclone, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 6368, :column 18, :line 6368, :file "cljs/core.cljs"} BlackNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 19, :end-line 6471, :column 10, :line 6471, :file "cljs/core.cljs"} BlackNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 57, :end-line 6471, :column 20, :line 6471, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 16, :end-line 2663, :column 13, :line 2663, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2663, :column 14, :line 2663, :file "cljs/core.cljs"} b]), :end-column 12, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} chunk ^{:arglists (^{:end-column 16, :end-line 2663, :column 13, :line 2663, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2663, :column 14, :line 2663, :file "cljs/core.cljs"} b]), :end-column 12, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 2663, :column 14, :line 2663, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 2663, :column 13, :line 2663, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2663, :column 14, :line 2663, :file "cljs/core.cljs"} b]), :end-column 12, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} chunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1853, :column 3, :line 1853, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1853, :column 4, :line 1853, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 10, :end-line 1851, :column 7, :line 1851, :file "cljs/core.cljs"} dec ^{:arglists (^{:end-column 6, :end-line 1853, :column 3, :line 1853, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1853, :column 4, :line 1853, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 10, :end-line 1851, :column 7, :line 1851, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 1853, :column 4, :line 1853, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1853, :column 3, :line 1853, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1853, :column 4, :line 1853, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 10, :end-line 1851, :column 7, :line 1851, :file "cljs/core.cljs"} dec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 13, :end-line 2145, :column 10, :line 2145, :file "cljs/core.cljs"} map ^{:arglists (^{:end-column 7, :end-line 3615, :column 4, :line 3615, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3615, :column 5, :line 3615, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3624, :column 4, :line 3624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3624, :column 5, :line 3624, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3635, :column 4, :line 3635, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3635, :column 5, :line 3635, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3635, :column 10, :line 3635, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3641, :column 4, :line 3641, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3641, :column 5, :line 3641, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3641, :column 10, :line 3641, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3641, :column 13, :line 3641, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3647, :column 4, :line 3647, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3647, :column 5, :line 3647, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3647, :column 7, :line 3647, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3647, :column 10, :line 3647, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3647, :column 13, :line 3647, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3647, :column 16, :line 3647, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3647, :column 18, :line 3647, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 10, :end-line 3608, :column 7, :line 3608, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3615, :column 5, :line 3615, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3624, :column 5, :line 3624, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3635, :column 5, :line 3635, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3635, :column 10, :line 3635, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3641, :column 5, :line 3641, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3641, :column 10, :line 3641, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3641, :column 13, :line 3641, :file "cljs/core.cljs"} c3] [^{:end-column 6, :end-line 3647, :column 5, :line 3647, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3647, :column 7, :line 3647, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3647, :column 10, :line 3647, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3647, :column 13, :line 3647, :file "cljs/core.cljs"} c3 & ^{:end-column 23, :end-line 3647, :column 18, :line 3647, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3615, :column 4, :line 3615, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3615, :column 5, :line 3615, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3624, :column 4, :line 3624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3624, :column 5, :line 3624, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3635, :column 4, :line 3635, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3635, :column 5, :line 3635, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3635, :column 7, :line 3635, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3635, :column 10, :line 3635, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3641, :column 4, :line 3641, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3641, :column 5, :line 3641, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3641, :column 7, :line 3641, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3641, :column 10, :line 3641, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3641, :column 13, :line 3641, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3647, :column 4, :line 3647, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3647, :column 5, :line 3647, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3647, :column 7, :line 3647, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3647, :column 10, :line 3647, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3647, :column 13, :line 3647, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3647, :column 16, :line 3647, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3647, :column 18, :line 3647, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 10, :end-line 3608, :column 7, :line 3608, :file "cljs/core.cljs"} map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7837, :column 4, :line 7837, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7837, :column 5, :line 7837, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7844, :column 4, :line 7844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7844, :column 5, :line 7844, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7851, :column 4, :line 7851, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7851, :column 5, :line 7851, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7851, :column 9, :line 7851, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7858, :column 4, :line 7858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7858, :column 5, :line 7858, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7858, :column 7, :line 7858, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7858, :column 9, :line 7858, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 7858, :column 11, :line 7858, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 7858, :column 13, :line 7858, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 11, :end-line 7831, :column 7, :line 7831, :file "cljs/core.cljs"} juxt ^{:arglists (^{:end-column 7, :end-line 7837, :column 4, :line 7837, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7837, :column 5, :line 7837, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7844, :column 4, :line 7844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7844, :column 5, :line 7844, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7851, :column 4, :line 7851, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7851, :column 5, :line 7851, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7851, :column 9, :line 7851, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7858, :column 4, :line 7858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7858, :column 5, :line 7858, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7858, :column 7, :line 7858, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7858, :column 9, :line 7858, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 7858, :column 11, :line 7858, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 7858, :column 13, :line 7858, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 11, :end-line 7831, :column 7, :line 7831, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7837, :column 5, :line 7837, :file "cljs/core.cljs"} f] ^function [^{:end-column 6, :end-line 7844, :column 5, :line 7844, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} g] ^function [^{:end-column 6, :end-line 7851, :column 5, :line 7851, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7851, :column 9, :line 7851, :file "cljs/core.cljs"} h] ^function [^{:end-column 6, :end-line 7858, :column 5, :line 7858, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7858, :column 7, :line 7858, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7858, :column 9, :line 7858, :file "cljs/core.cljs"} h & ^{:end-column 15, :end-line 7858, :column 13, :line 7858, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7837, :column 4, :line 7837, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7837, :column 5, :line 7837, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7844, :column 4, :line 7844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7844, :column 5, :line 7844, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7844, :column 7, :line 7844, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7851, :column 4, :line 7851, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7851, :column 5, :line 7851, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7851, :column 9, :line 7851, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7858, :column 4, :line 7858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7858, :column 5, :line 7858, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7858, :column 7, :line 7858, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 7858, :column 9, :line 7858, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 7858, :column 11, :line 7858, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 7858, :column 13, :line 7858, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 11, :end-line 7831, :column 7, :line 7831, :file "cljs/core.cljs"} juxt, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 5, :line 1806, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 7, :line 1807, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1808, :column 9, :line 1808, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1808, :column 11, :line 1808, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1803, :column 8, :line 1803, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1803, :column 16, :line 1803, :file "cljs/core.cljs"} < ^{:arglists (^{:end-column 7, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 5, :line 1806, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 7, :line 1807, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1808, :column 9, :line 1808, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1808, :column 11, :line 1808, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1803, :column 8, :line 1803, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1803, :column 16, :line 1803, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1806, :column 5, :line 1806, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 7, :line 1807, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1808, :column 11, :line 1808, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 5, :line 1806, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1807, :column 4, :line 1807, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1807, :column 5, :line 1807, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1807, :column 7, :line 1807, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1808, :column 4, :line 1808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1808, :column 5, :line 1808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1808, :column 7, :line 1808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1808, :column 9, :line 1808, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1808, :column 11, :line 1808, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1803, :column 8, :line 1803, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1803, :column 16, :line 1803, :file "cljs/core.cljs"} <, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5492, :column 24, :line 5492, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 5492, :column 25, :line 5492, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 5492, :column 29, :line 5492, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 5492, :column 31, :line 5492, :file "cljs/core.cljs"} init]), :private true, :end-column 23, :end-line 5492, :column 8, :line 5492, :file "cljs/core.cljs"} inode-kv-reduce ^{:arglists (^{:end-column 36, :end-line 5492, :column 24, :line 5492, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 5492, :column 25, :line 5492, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 5492, :column 29, :line 5492, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 5492, :column 31, :line 5492, :file "cljs/core.cljs"} init]), :private true, :end-column 23, :end-line 5492, :column 8, :line 5492, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 5492, :column 25, :line 5492, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 5492, :column 29, :line 5492, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 5492, :column 31, :line 5492, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5492, :column 24, :line 5492, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 5492, :column 25, :line 5492, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 5492, :column 29, :line 5492, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 5492, :column 31, :line 5492, :file "cljs/core.cljs"} init]), :private true, :end-column 23, :end-line 5492, :column 8, :line 5492, :file "cljs/core.cljs"} inode-kv-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4881, :column 26, :line 4881, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4881, :column 27, :line 4881, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 4881, :column 29, :line 4881, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4881, :column 31, :line 4881, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 4881, :column 8, :line 4881, :file "cljs/core.cljs"} obj-map->hash-map ^{:arglists (^{:end-column 33, :end-line 4881, :column 26, :line 4881, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4881, :column 27, :line 4881, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 4881, :column 29, :line 4881, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4881, :column 31, :line 4881, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 4881, :column 8, :line 4881, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 4881, :column 27, :line 4881, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 4881, :column 29, :line 4881, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4881, :column 31, :line 4881, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4881, :column 26, :line 4881, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4881, :column 27, :line 4881, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 4881, :column 29, :line 4881, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4881, :column 31, :line 4881, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 4881, :column 8, :line 4881, :file "cljs/core.cljs"} obj-map->hash-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 671, :column 3, :line 671, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 671, :column 4, :line 671, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 11, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 668, :column 12, :line 668, :file "cljs/core.cljs"} rest ^{:arglists (^{:end-column 9, :end-line 671, :column 3, :line 671, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 671, :column 4, :line 671, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 11, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 668, :column 12, :line 668, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 671, :column 4, :line 671, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 671, :column 3, :line 671, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 671, :column 4, :line 671, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 11, :end-line 668, :column 8, :line 668, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 668, :column 12, :line 668, :file "cljs/core.cljs"} rest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 9009, :column 3, :line 9009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9009, :column 4, :line 9009, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 14, :end-line 9005, :column 7, :line 9005, :file "cljs/core.cljs"} ex-data ^{:arglists (^{:end-column 7, :end-line 9009, :column 3, :line 9009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9009, :column 4, :line 9009, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 14, :end-line 9005, :column 7, :line 9005, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 9009, :column 4, :line 9009, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 9009, :column 3, :line 9009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9009, :column 4, :line 9009, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 14, :end-line 9005, :column 7, :line 9005, :file "cljs/core.cljs"} ex-data, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} PersistentArrayMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} PersistentArrayMapSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 5118, :column 32, :line 5118, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first ^{:arglists (^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 384, :column 16, :line 384, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 384, :column 17, :line 384, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 15, :end-line 384, :column 4, :line 384, :file "cljs/core.cljs"} -drop-first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8596, :column 4, :line 8596, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8596, :column 5, :line 8596, :file "cljs/core.cljs"} child ^{:end-column 17, :end-line 8596, :column 11, :line 8596, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8597, :column 4, :line 8597, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8597, :column 5, :line 8597, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 8597, :column 7, :line 8597, :file "cljs/core.cljs"} child ^{:end-column 19, :end-line 8597, :column 13, :line 8597, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 15, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 8590, :column 16, :line 8590, :file "cljs/core.cljs"} isa? ^{:arglists (^{:end-column 18, :end-line 8596, :column 4, :line 8596, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8596, :column 5, :line 8596, :file "cljs/core.cljs"} child ^{:end-column 17, :end-line 8596, :column 11, :line 8596, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8597, :column 4, :line 8597, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8597, :column 5, :line 8597, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 8597, :column 7, :line 8597, :file "cljs/core.cljs"} child ^{:end-column 19, :end-line 8597, :column 13, :line 8597, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 15, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 8590, :column 16, :line 8590, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 8596, :column 5, :line 8596, :file "cljs/core.cljs"} child ^{:end-column 17, :end-line 8596, :column 11, :line 8596, :file "cljs/core.cljs"} parent] [^{:end-column 6, :end-line 8597, :column 5, :line 8597, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 8597, :column 7, :line 8597, :file "cljs/core.cljs"} child ^{:end-column 19, :end-line 8597, :column 13, :line 8597, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8596, :column 4, :line 8596, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8596, :column 5, :line 8596, :file "cljs/core.cljs"} child ^{:end-column 17, :end-line 8596, :column 11, :line 8596, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8597, :column 4, :line 8597, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8597, :column 5, :line 8597, :file "cljs/core.cljs"} h ^{:end-column 12, :end-line 8597, :column 7, :line 8597, :file "cljs/core.cljs"} child ^{:end-column 19, :end-line 8597, :column 13, :line 8597, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 15, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 8590, :column 16, :line 8590, :file "cljs/core.cljs"} isa?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone ^{:arglists (^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([meta8411]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} ->t8410 ^{:file "cljs/core.cljs", :arglists ([meta8411]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} {:arglists (^cljs.core/t8410 [meta8411]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([meta8411]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} ->t8410, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} ES6IteratorSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ISeq cljs.core/ISeqable}, :protocols #{cljs.core/ISeq cljs.core/ISeqable}, :end-column 24, :end-line 723, :column 10, :line 723, :file "cljs/core.cljs"} ES6IteratorSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 53, :end-line 723, :column 25, :line 723, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 723, :column 26, :line 723, :file "cljs/core.cljs"} value ^{:end-column 36, :end-line 723, :column 32, :line 723, :file "cljs/core.cljs"} iter ^{:mutable true, :end-column 52, :end-line 723, :column 47, :line 723, :file "cljs/core.cljs"} _rest], :protocols #{cljs.core/ISeq cljs.core/ISeqable}}, ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} ->NeverEquiv ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} {:arglists (^cljs.core/NeverEquiv []), :tag function, :op :var, :name ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} ->NeverEquiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7927, :column 3, :line 7927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7927, :column 4, :line 7927, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 13, :end-line 7925, :column 7, :line 7925, :file "cljs/core.cljs"} re-seq ^{:arglists (^{:end-column 9, :end-line 7927, :column 3, :line 7927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7927, :column 4, :line 7927, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 13, :end-line 7925, :column 7, :line 7925, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7927, :column 4, :line 7927, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7927, :column 3, :line 7927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7927, :column 4, :line 7927, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7927, :column 7, :line 7927, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 13, :end-line 7925, :column 7, :line 7925, :file "cljs/core.cljs"} re-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 8578, :column 3, :line 8578, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 21, :end-line 8576, :column 7, :line 8576, :file "cljs/core.cljs"} make-hierarchy ^{:arglists (^{:end-column 5, :end-line 8578, :column 3, :line 8578, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 21, :end-line 8576, :column 7, :line 8576, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 8578, :column 3, :line 8578, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 21, :end-line 8576, :column 7, :line 8576, :file "cljs/core.cljs"} make-hierarchy, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 490, :column 15, :line 490, :file "cljs/core.cljs"} Symbol {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 16, :end-line 576, :column 10, :line 576, :file "cljs/core.cljs"} Symbol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 576, :column 17, :line 576, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 48, :end-line 4563, :column 21, :line 4563, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4563, :column 22, :line 4563, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4563, :column 25, :line 4563, :file "cljs/core.cljs"} level ^{:end-column 37, :end-line 4563, :column 31, :line 4563, :file "cljs/core.cljs"} parent ^{:end-column 47, :end-line 4563, :column 38, :line 4563, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 20, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} tv-push-tail ^{:arglists (^{:end-column 48, :end-line 4563, :column 21, :line 4563, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4563, :column 22, :line 4563, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4563, :column 25, :line 4563, :file "cljs/core.cljs"} level ^{:end-column 37, :end-line 4563, :column 31, :line 4563, :file "cljs/core.cljs"} parent ^{:end-column 47, :end-line 4563, :column 38, :line 4563, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 20, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 4563, :column 22, :line 4563, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4563, :column 25, :line 4563, :file "cljs/core.cljs"} level ^{:end-column 37, :end-line 4563, :column 31, :line 4563, :file "cljs/core.cljs"} parent ^{:end-column 47, :end-line 4563, :column 38, :line 4563, :file "cljs/core.cljs"} tail-node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 48, :end-line 4563, :column 21, :line 4563, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4563, :column 22, :line 4563, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4563, :column 25, :line 4563, :file "cljs/core.cljs"} level ^{:end-column 37, :end-line 4563, :column 31, :line 4563, :file "cljs/core.cljs"} parent ^{:end-column 47, :end-line 4563, :column 38, :line 4563, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 20, :end-line 4563, :column 8, :line 4563, :file "cljs/core.cljs"} tv-push-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce ^{:arglists (^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count ^{:arglists (^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3355, :column 4, :line 3355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3355, :column 5, :line 3355, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3365, :column 4, :line 3365, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3365, :column 5, :line 3365, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3365, :column 7, :line 3365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 11, :end-line 3351, :column 7, :line 3351, :file "cljs/core.cljs"} keep ^{:arglists (^{:end-column 7, :end-line 3355, :column 4, :line 3355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3355, :column 5, :line 3355, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3365, :column 4, :line 3365, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3365, :column 5, :line 3365, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3365, :column 7, :line 3365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 11, :end-line 3351, :column 7, :line 3351, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3355, :column 5, :line 3355, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3365, :column 5, :line 3365, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3365, :column 7, :line 3365, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3355, :column 4, :line 3355, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3355, :column 5, :line 3355, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3365, :column 4, :line 3365, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3365, :column 5, :line 3365, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3365, :column 7, :line 3365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 11, :end-line 3351, :column 7, :line 3351, :file "cljs/core.cljs"} keep, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1873, :column 3, :line 1873, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 11, :end-line 1871, :column 7, :line 1871, :file "cljs/core.cljs"} char ^{:arglists (^{:end-column 6, :end-line 1873, :column 3, :line 1873, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 11, :end-line 1871, :column 7, :line 1871, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1873, :column 3, :line 1873, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1873, :column 4, :line 1873, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 11, :end-line 1871, :column 7, :line 1871, :file "cljs/core.cljs"} char, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3815, :column 4, :line 3815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3815, :column 5, :line 3815, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3815, :column 7, :line 3815, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3815, :column 9, :line 3815, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 13, :end-line 3808, :column 7, :line 3808, :file "cljs/core.cljs"} mapcat ^{:arglists (^{:end-column 7, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3815, :column 4, :line 3815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3815, :column 5, :line 3815, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3815, :column 7, :line 3815, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3815, :column 9, :line 3815, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 13, :end-line 3808, :column 7, :line 3808, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 3815, :column 5, :line 3815, :file "cljs/core.cljs"} f & ^{:end-column 14, :end-line 3815, :column 9, :line 3815, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3814, :column 4, :line 3814, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3814, :column 5, :line 3814, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3815, :column 4, :line 3815, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3815, :column 5, :line 3815, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3815, :column 7, :line 3815, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3815, :column 9, :line 3815, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 13, :end-line 3808, :column 7, :line 3808, :file "cljs/core.cljs"} mapcat, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1983, :column 3, :line 1983, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1983, :column 4, :line 1983, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 21, :end-line 1981, :column 7, :line 1981, :file "cljs/core.cljs"} unchecked-long ^{:arglists (^{:end-column 6, :end-line 1983, :column 3, :line 1983, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1983, :column 4, :line 1983, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 21, :end-line 1981, :column 7, :line 1981, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number [^{:end-column 5, :end-line 1983, :column 4, :line 1983, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1983, :column 3, :line 1983, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1983, :column 4, :line 1983, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 21, :end-line 1981, :column 7, :line 1981, :file "cljs/core.cljs"} unchecked-long, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 16, :end-line 448, :column 1, :line 448, :file "cljs/core.cljs"} m3-seed ^{:end-column 16, :end-line 448, :column 1, :line 448, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 16, :end-line 448, :column 1, :line 448, :file "cljs/core.cljs"} m3-seed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 15, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some? ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 15, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 15, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1936, :column 24, :line 1936, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1936, :column 25, :line 1936, :file "cljs/core.cljs"} x]), :end-column 23, :end-line 1936, :column 7, :line 1936, :file "cljs/core.cljs"} unchecked-negate ^{:arglists (^{:end-column 27, :end-line 1936, :column 24, :line 1936, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1936, :column 25, :line 1936, :file "cljs/core.cljs"} x]), :end-column 23, :end-line 1936, :column 7, :line 1936, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 1936, :column 25, :line 1936, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1936, :column 24, :line 1936, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 1936, :column 25, :line 1936, :file "cljs/core.cljs"} x]), :end-column 23, :end-line 1936, :column 7, :line 1936, :file "cljs/core.cljs"} unchecked-negate, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2330, :column 3, :line 2330, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2330, :column 4, :line 2330, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 14, :end-line 2328, :column 7, :line 2328, :file "cljs/core.cljs"} reverse ^{:arglists (^{:end-column 9, :end-line 2330, :column 3, :line 2330, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2330, :column 4, :line 2330, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 14, :end-line 2328, :column 7, :line 2328, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2330, :column 4, :line 2330, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2330, :column 3, :line 2330, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2330, :column 4, :line 2330, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 14, :end-line 2328, :column 7, :line 2328, :file "cljs/core.cljs"} reverse, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7739, :column 4, :line 7739, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7739, :column 5, :line 7739, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7740, :column 4, :line 7740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7740, :column 5, :line 7740, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7740, :column 11, :line 7740, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7741, :column 4, :line 7741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7741, :column 5, :line 7741, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7741, :column 11, :line 7741, :file "cljs/core.cljs"} end ^{:end-column 19, :end-line 7741, :column 15, :line 7741, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 12, :end-line 7734, :column 7, :line 7734, :file "cljs/core.cljs"} range ^{:arglists (^{:end-column 6, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7739, :column 4, :line 7739, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7739, :column 5, :line 7739, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7740, :column 4, :line 7740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7740, :column 5, :line 7740, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7740, :column 11, :line 7740, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7741, :column 4, :line 7741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7741, :column 5, :line 7741, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7741, :column 11, :line 7741, :file "cljs/core.cljs"} end ^{:end-column 19, :end-line 7741, :column 15, :line 7741, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 12, :end-line 7734, :column 7, :line 7734, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 8, :end-line 7739, :column 5, :line 7739, :file "cljs/core.cljs"} end] [^{:end-column 10, :end-line 7740, :column 5, :line 7740, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7740, :column 11, :line 7740, :file "cljs/core.cljs"} end] ^cljs.core/Range [^{:end-column 10, :end-line 7741, :column 5, :line 7741, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7741, :column 11, :line 7741, :file "cljs/core.cljs"} end ^{:end-column 19, :end-line 7741, :column 15, :line 7741, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7739, :column 4, :line 7739, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7739, :column 5, :line 7739, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7740, :column 4, :line 7740, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7740, :column 5, :line 7740, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7740, :column 11, :line 7740, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7741, :column 4, :line 7741, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7741, :column 5, :line 7741, :file "cljs/core.cljs"} start ^{:end-column 14, :end-line 7741, :column 11, :line 7741, :file "cljs/core.cljs"} end ^{:end-column 19, :end-line 7741, :column 15, :line 7741, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 12, :end-line 7734, :column 7, :line 7734, :file "cljs/core.cljs"} range, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2084, :column 3, :line 2084, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2084, :column 4, :line 2084, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 16, :end-line 2082, :column 7, :line 2082, :file "cljs/core.cljs"} bit-count ^{:arglists (^{:end-column 6, :end-line 2084, :column 3, :line 2084, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2084, :column 4, :line 2084, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 16, :end-line 2082, :column 7, :line 2082, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2084, :column 4, :line 2084, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2084, :column 3, :line 2084, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2084, :column 4, :line 2084, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 16, :end-line 2082, :column 7, :line 2082, :file "cljs/core.cljs"} bit-count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 67, :end-line 5449, :column 56, :line 5449, :file "cljs/core.cljs"} create-node ^{:arglists (^{:end-column 40, :end-line 5926, :column 4, :line 5926, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5926, :column 5, :line 5926, :file "cljs/core.cljs"} shift ^{:end-column 15, :end-line 5926, :column 11, :line 5926, :file "cljs/core.cljs"} key1 ^{:end-column 20, :end-line 5926, :column 16, :line 5926, :file "cljs/core.cljs"} val1 ^{:end-column 29, :end-line 5926, :column 21, :line 5926, :file "cljs/core.cljs"} key2hash ^{:end-column 34, :end-line 5926, :column 30, :line 5926, :file "cljs/core.cljs"} key2 ^{:end-column 39, :end-line 5926, :column 35, :line 5926, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5934, :column 4, :line 5934, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5934, :column 5, :line 5934, :file "cljs/core.cljs"} edit ^{:end-column 15, :end-line 5934, :column 10, :line 5934, :file "cljs/core.cljs"} shift ^{:end-column 20, :end-line 5934, :column 16, :line 5934, :file "cljs/core.cljs"} key1 ^{:end-column 25, :end-line 5934, :column 21, :line 5934, :file "cljs/core.cljs"} val1 ^{:end-column 34, :end-line 5934, :column 26, :line 5934, :file "cljs/core.cljs"} key2hash ^{:end-column 39, :end-line 5934, :column 35, :line 5934, :file "cljs/core.cljs"} key2 ^{:end-column 44, :end-line 5934, :column 40, :line 5934, :file "cljs/core.cljs"} val2]), :private true, :end-column 19, :end-line 5925, :column 8, :line 5925, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 5926, :column 5, :line 5926, :file "cljs/core.cljs"} shift ^{:end-column 15, :end-line 5926, :column 11, :line 5926, :file "cljs/core.cljs"} key1 ^{:end-column 20, :end-line 5926, :column 16, :line 5926, :file "cljs/core.cljs"} val1 ^{:end-column 29, :end-line 5926, :column 21, :line 5926, :file "cljs/core.cljs"} key2hash ^{:end-column 34, :end-line 5926, :column 30, :line 5926, :file "cljs/core.cljs"} key2 ^{:end-column 39, :end-line 5926, :column 35, :line 5926, :file "cljs/core.cljs"} val2] [^{:end-column 9, :end-line 5934, :column 5, :line 5934, :file "cljs/core.cljs"} edit ^{:end-column 15, :end-line 5934, :column 10, :line 5934, :file "cljs/core.cljs"} shift ^{:end-column 20, :end-line 5934, :column 16, :line 5934, :file "cljs/core.cljs"} key1 ^{:end-column 25, :end-line 5934, :column 21, :line 5934, :file "cljs/core.cljs"} val1 ^{:end-column 34, :end-line 5934, :column 26, :line 5934, :file "cljs/core.cljs"} key2hash ^{:end-column 39, :end-line 5934, :column 35, :line 5934, :file "cljs/core.cljs"} key2 ^{:end-column 44, :end-line 5934, :column 40, :line 5934, :file "cljs/core.cljs"} val2]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5926, :column 4, :line 5926, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5926, :column 5, :line 5926, :file "cljs/core.cljs"} shift ^{:end-column 15, :end-line 5926, :column 11, :line 5926, :file "cljs/core.cljs"} key1 ^{:end-column 20, :end-line 5926, :column 16, :line 5926, :file "cljs/core.cljs"} val1 ^{:end-column 29, :end-line 5926, :column 21, :line 5926, :file "cljs/core.cljs"} key2hash ^{:end-column 34, :end-line 5926, :column 30, :line 5926, :file "cljs/core.cljs"} key2 ^{:end-column 39, :end-line 5926, :column 35, :line 5926, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5934, :column 4, :line 5934, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5934, :column 5, :line 5934, :file "cljs/core.cljs"} edit ^{:end-column 15, :end-line 5934, :column 10, :line 5934, :file "cljs/core.cljs"} shift ^{:end-column 20, :end-line 5934, :column 16, :line 5934, :file "cljs/core.cljs"} key1 ^{:end-column 25, :end-line 5934, :column 21, :line 5934, :file "cljs/core.cljs"} val1 ^{:end-column 34, :end-line 5934, :column 26, :line 5934, :file "cljs/core.cljs"} key2hash ^{:end-column 39, :end-line 5934, :column 35, :line 5934, :file "cljs/core.cljs"} key2 ^{:end-column 44, :end-line 5934, :column 40, :line 5934, :file "cljs/core.cljs"} val2]), :private true, :end-column 19, :end-line 5925, :column 8, :line 5925, :file "cljs/core.cljs"} create-node, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1647, :column 4, :line 1647, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1647, :column 5, :line 1647, :file "cljs/core.cljs"} comp ^{:end-column 14, :end-line 1647, :column 10, :line 1647, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 11, :end-line 1641, :column 7, :line 1641, :file "cljs/core.cljs"} sort ^{:arglists (^{:end-column 10, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1647, :column 4, :line 1647, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1647, :column 5, :line 1647, :file "cljs/core.cljs"} comp ^{:end-column 14, :end-line 1647, :column 10, :line 1647, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 11, :end-line 1641, :column 7, :line 1641, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} coll] [^{:end-column 9, :end-line 1647, :column 5, :line 1647, :file "cljs/core.cljs"} comp ^{:end-column 14, :end-line 1647, :column 10, :line 1647, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1645, :column 4, :line 1645, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1645, :column 5, :line 1645, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1647, :column 4, :line 1647, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1647, :column 5, :line 1647, :file "cljs/core.cljs"} comp ^{:end-column 14, :end-line 1647, :column 10, :line 1647, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 11, :end-line 1641, :column 7, :line 1641, :file "cljs/core.cljs"} sort, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} ->MetaFn ^{:arglists ([^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} {:arglists (^cljs.core/MetaFn [^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} ->MetaFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1919, :column 25, :line 1919, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1919, :column 26, :line 1919, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} unchecked-inc-int ^{:arglists (^{:end-column 28, :end-line 1919, :column 25, :line 1919, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1919, :column 26, :line 1919, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1919, :column 26, :line 1919, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1919, :column 25, :line 1919, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1919, :column 26, :line 1919, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} unchecked-inc-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare ^{:arglists (^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3337, :column 3, :line 3337, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3337, :column 4, :line 3337, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3337, :column 6, :line 3337, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 18, :end-line 3332, :column 7, :line 3332, :file "cljs/core.cljs"} map-indexed ^{:arglists (^{:end-column 11, :end-line 3337, :column 3, :line 3337, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3337, :column 4, :line 3337, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3337, :column 6, :line 3337, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 18, :end-line 3332, :column 7, :line 3332, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 5, :end-line 3337, :column 4, :line 3337, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3337, :column 6, :line 3337, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3337, :column 3, :line 3337, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3337, :column 4, :line 3337, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3337, :column 6, :line 3337, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 18, :end-line 3332, :column 7, :line 3332, :file "cljs/core.cljs"} map-indexed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 7544, :column 18, :line 7544, :file "cljs/core.cljs"} []), :end-column 17, :end-line 7544, :column 7, :line 7544, :file "cljs/core.cljs"} array-list ^{:arglists (^{:end-column 20, :end-line 7544, :column 18, :line 7544, :file "cljs/core.cljs"} []), :end-column 17, :end-line 7544, :column 7, :line 7544, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList []), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7544, :column 18, :line 7544, :file "cljs/core.cljs"} []), :end-column 17, :end-line 7544, :column 7, :line 7544, :file "cljs/core.cljs"} array-list, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8561, :column 3, :line 8561, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8561, :column 4, :line 8561, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 15, :end-line 8557, :column 7, :line 8557, :file "cljs/core.cljs"} rand-nth ^{:arglists (^{:end-column 9, :end-line 8561, :column 3, :line 8561, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8561, :column 4, :line 8561, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 15, :end-line 8557, :column 7, :line 8557, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8561, :column 4, :line 8561, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8561, :column 3, :line 8561, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8561, :column 4, :line 8561, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 15, :end-line 8557, :column 7, :line 8557, :file "cljs/core.cljs"} rand-nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3271, :column 4, :line 3271, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3272, :column 4, :line 3272, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3272, :column 5, :line 3272, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3273, :column 4, :line 3273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3273, :column 5, :line 3273, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3273, :column 7, :line 3273, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3280, :column 4, :line 3280, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3280, :column 5, :line 3280, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3280, :column 7, :line 3280, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 3280, :column 9, :line 3280, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3287, :column 4, :line 3287, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3287, :column 5, :line 3287, :file "cljs/core.cljs"} f1 ^{:end-column 10, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} f2 ^{:end-column 13, :end-line 3287, :column 11, :line 3287, :file "cljs/core.cljs"} f3 ^{:end-column 15, :end-line 3287, :column 14, :line 3287, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3287, :column 16, :line 3287, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 11, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} comp ^{:arglists (^{:end-column 6, :end-line 3271, :column 4, :line 3271, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3272, :column 4, :line 3272, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3272, :column 5, :line 3272, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3273, :column 4, :line 3273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3273, :column 5, :line 3273, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3273, :column 7, :line 3273, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3280, :column 4, :line 3280, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3280, :column 5, :line 3280, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3280, :column 7, :line 3280, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 3280, :column 9, :line 3280, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3287, :column 4, :line 3287, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3287, :column 5, :line 3287, :file "cljs/core.cljs"} f1 ^{:end-column 10, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} f2 ^{:end-column 13, :end-line 3287, :column 11, :line 3287, :file "cljs/core.cljs"} f3 ^{:end-column 15, :end-line 3287, :column 14, :line 3287, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3287, :column 16, :line 3287, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 11, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 6, :end-line 3272, :column 5, :line 3272, :file "cljs/core.cljs"} f] ^function [^{:end-column 6, :end-line 3273, :column 5, :line 3273, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3273, :column 7, :line 3273, :file "cljs/core.cljs"} g] ^function [^{:end-column 6, :end-line 3280, :column 5, :line 3280, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3280, :column 7, :line 3280, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 3280, :column 9, :line 3280, :file "cljs/core.cljs"} h] ^function [^{:end-column 7, :end-line 3287, :column 5, :line 3287, :file "cljs/core.cljs"} f1 ^{:end-column 10, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} f2 ^{:end-column 13, :end-line 3287, :column 11, :line 3287, :file "cljs/core.cljs"} f3 & ^{:end-column 18, :end-line 3287, :column 16, :line 3287, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3271, :column 4, :line 3271, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3272, :column 4, :line 3272, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3272, :column 5, :line 3272, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3273, :column 4, :line 3273, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3273, :column 5, :line 3273, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3273, :column 7, :line 3273, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3280, :column 4, :line 3280, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3280, :column 5, :line 3280, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3280, :column 7, :line 3280, :file "cljs/core.cljs"} g ^{:end-column 10, :end-line 3280, :column 9, :line 3280, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3287, :column 4, :line 3287, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3287, :column 5, :line 3287, :file "cljs/core.cljs"} f1 ^{:end-column 10, :end-line 3287, :column 8, :line 3287, :file "cljs/core.cljs"} f2 ^{:end-column 13, :end-line 3287, :column 11, :line 3287, :file "cljs/core.cljs"} f3 ^{:end-column 15, :end-line 3287, :column 14, :line 3287, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3287, :column 16, :line 3287, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 11, :end-line 3266, :column 7, :line 3266, :file "cljs/core.cljs"} comp, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2584, :column 4, :line 2584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2584, :column 5, :line 2584, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2586, :column 4, :line 2586, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2586, :column 5, :line 2586, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2586, :column 9, :line 2586, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2588, :column 4, :line 2588, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2588, :column 5, :line 2588, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2588, :column 9, :line 2588, :file "cljs/core.cljs"} off ^{:end-column 16, :end-line 2588, :column 13, :line 2588, :file "cljs/core.cljs"} end]), :end-column 18, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} array-chunk ^{:arglists (^{:end-column 9, :end-line 2584, :column 4, :line 2584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2584, :column 5, :line 2584, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2586, :column 4, :line 2586, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2586, :column 5, :line 2586, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2586, :column 9, :line 2586, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2588, :column 4, :line 2588, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2588, :column 5, :line 2588, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2588, :column 9, :line 2588, :file "cljs/core.cljs"} off ^{:end-column 16, :end-line 2588, :column 13, :line 2588, :file "cljs/core.cljs"} end]), :end-column 18, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 8, :end-line 2584, :column 5, :line 2584, :file "cljs/core.cljs"} arr] ^cljs.core/ArrayChunk [^{:end-column 8, :end-line 2586, :column 5, :line 2586, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2586, :column 9, :line 2586, :file "cljs/core.cljs"} off] ^cljs.core/ArrayChunk [^{:end-column 8, :end-line 2588, :column 5, :line 2588, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2588, :column 9, :line 2588, :file "cljs/core.cljs"} off ^{:end-column 16, :end-line 2588, :column 13, :line 2588, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2584, :column 4, :line 2584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2584, :column 5, :line 2584, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2586, :column 4, :line 2586, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2586, :column 5, :line 2586, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2586, :column 9, :line 2586, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2588, :column 4, :line 2588, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2588, :column 5, :line 2588, :file "cljs/core.cljs"} arr ^{:end-column 12, :end-line 2588, :column 9, :line 2588, :file "cljs/core.cljs"} off ^{:end-column 16, :end-line 2588, :column 13, :line 2588, :file "cljs/core.cljs"} end]), :end-column 18, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} array-chunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2076, :column 3, :line 2076, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2076, :column 6, :line 2076, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 32, :end-line 2074, :column 7, :line 2074, :file "cljs/core.cljs"} bit-shift-right-zero-fill ^{:arglists (^{:end-column 8, :end-line 2076, :column 3, :line 2076, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2076, :column 6, :line 2076, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 32, :end-line 2074, :column 7, :line 2074, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2076, :column 6, :line 2076, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2076, :column 3, :line 2076, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2076, :column 6, :line 2076, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 32, :end-line 2074, :column 7, :line 2074, :file "cljs/core.cljs"} bit-shift-right-zero-fill, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient ^{:arglists (^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7873, :column 4, :line 7873, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7873, :column 5, :line 7873, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7876, :column 4, :line 7876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7876, :column 5, :line 7876, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7876, :column 7, :line 7876, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 12, :end-line 7867, :column 7, :line 7867, :file "cljs/core.cljs"} dorun ^{:arglists (^{:end-column 10, :end-line 7873, :column 4, :line 7873, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7873, :column 5, :line 7873, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7876, :column 4, :line 7876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7876, :column 5, :line 7876, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7876, :column 7, :line 7876, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 12, :end-line 7867, :column 7, :line 7867, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7873, :column 5, :line 7873, :file "cljs/core.cljs"} coll] ^clj-nil [^{:end-column 6, :end-line 7876, :column 5, :line 7876, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7876, :column 7, :line 7876, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7873, :column 4, :line 7873, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7873, :column 5, :line 7873, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7876, :column 4, :line 7876, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7876, :column 5, :line 7876, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7876, :column 7, :line 7876, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 12, :end-line 7867, :column 7, :line 7867, :file "cljs/core.cljs"} dorun, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 4131, :column 10, :line 4131, :file "cljs/core.cljs"} pr-sequential-writer ^{:arglists (^{:end-column 70, :end-line 7944, :column 28, :line 7944, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7944, :column 29, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 45, :end-line 7944, :column 36, :line 7944, :file "cljs/core.cljs"} print-one ^{:end-column 51, :end-line 7944, :column 46, :line 7944, :file "cljs/core.cljs"} begin ^{:end-column 55, :end-line 7944, :column 52, :line 7944, :file "cljs/core.cljs"} sep ^{:end-column 59, :end-line 7944, :column 56, :line 7944, :file "cljs/core.cljs"} end ^{:end-column 64, :end-line 7944, :column 60, :line 7944, :file "cljs/core.cljs"} opts ^{:end-column 69, :end-line 7944, :column 65, :line 7944, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 7944, :column 29, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 45, :end-line 7944, :column 36, :line 7944, :file "cljs/core.cljs"} print-one ^{:end-column 51, :end-line 7944, :column 46, :line 7944, :file "cljs/core.cljs"} begin ^{:end-column 55, :end-line 7944, :column 52, :line 7944, :file "cljs/core.cljs"} sep ^{:end-column 59, :end-line 7944, :column 56, :line 7944, :file "cljs/core.cljs"} end ^{:end-column 64, :end-line 7944, :column 60, :line 7944, :file "cljs/core.cljs"} opts ^{:end-column 69, :end-line 7944, :column 65, :line 7944, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 70, :end-line 7944, :column 28, :line 7944, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 7944, :column 29, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 45, :end-line 7944, :column 36, :line 7944, :file "cljs/core.cljs"} print-one ^{:end-column 51, :end-line 7944, :column 46, :line 7944, :file "cljs/core.cljs"} begin ^{:end-column 55, :end-line 7944, :column 52, :line 7944, :file "cljs/core.cljs"} sep ^{:end-column 59, :end-line 7944, :column 56, :line 7944, :file "cljs/core.cljs"} end ^{:end-column 64, :end-line 7944, :column 60, :line 7944, :file "cljs/core.cljs"} opts ^{:end-column 69, :end-line 7944, :column 65, :line 7944, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} pr-sequential-writer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 37, :end-line 1127, :column 31, :line 1127, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 1127, :column 32, :line 1127, :file "cljs/core.cljs"} coll]), :private true, :end-column 30, :end-line 1127, :column 8, :line 1127, :file "cljs/core.cljs"} accumulating-seq-count ^{:arglists (^{:end-column 37, :end-line 1127, :column 31, :line 1127, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 1127, :column 32, :line 1127, :file "cljs/core.cljs"} coll]), :private true, :end-column 30, :end-line 1127, :column 8, :line 1127, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 36, :end-line 1127, :column 32, :line 1127, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 37, :end-line 1127, :column 31, :line 1127, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 1127, :column 32, :line 1127, :file "cljs/core.cljs"} coll]), :private true, :end-column 30, :end-line 1127, :column 8, :line 1127, :file "cljs/core.cljs"} accumulating-seq-count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} IIndexed ^{:impls (cljs.core/Range cljs.core/RedNode cljs.core/BlackNode cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 257, :column 14, :line 257, :file "cljs/core.cljs"} IIndexed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1410, :column 4, :line 1410, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1410, :column 5, :line 1410, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1410, :column 10, :line 1410, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1413, :column 4, :line 1413, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1413, :column 5, :line 1413, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1413, :column 10, :line 1413, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1413, :column 12, :line 1413, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1413, :column 14, :line 1413, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 11, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} disj ^{:arglists (^{:end-column 10, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1410, :column 4, :line 1410, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1410, :column 5, :line 1410, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1410, :column 10, :line 1410, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1413, :column 4, :line 1413, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1413, :column 5, :line 1413, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1413, :column 10, :line 1413, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1413, :column 12, :line 1413, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1413, :column 14, :line 1413, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 11, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} coll] [^{:end-column 9, :end-line 1410, :column 5, :line 1410, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1410, :column 10, :line 1410, :file "cljs/core.cljs"} k] [^{:end-column 9, :end-line 1413, :column 5, :line 1413, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1413, :column 10, :line 1413, :file "cljs/core.cljs"} k & ^{:end-column 16, :end-line 1413, :column 14, :line 1413, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1410, :column 4, :line 1410, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1410, :column 5, :line 1410, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1410, :column 10, :line 1410, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1413, :column 4, :line 1413, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1413, :column 5, :line 1413, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1413, :column 10, :line 1413, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1413, :column 12, :line 1413, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1413, :column 14, :line 1413, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 11, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} disj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 30, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IPrintWithWriter ^{:impls (cljs.core/UUID cljs.core/Eduction cljs.core/List cljs.core/KeySeq cljs.core/Range cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/LazyTransformer cljs.core/EmptyList cljs.core/PersistentQueueSeq cljs.core/PersistentVector cljs.core/RedNode cljs.core/ValSeq cljs.core/Atom cljs.core/ChunkedCons cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/Subvec cljs.core/ArrayNodeSeq cljs.core/PersistentHashMap cljs.core/RSeq cljs.core/Cons cljs.core/ObjMap cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/ES6IteratorSeq cljs.core/PersistentArrayMapSeq cljs.core/BlackNode cljs.core/NodeSeq cljs.core/PersistentTreeMapSeq cljs.core/LazySeq cljs.core/IndexedSeq cljs.core/Keyword cljs.core/Symbol), :protocol-info {:methods {^{:end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 30, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 30, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IPrintWithWriter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} ->UUID ^{:arglists ([^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} {:arglists (^cljs.core/UUID [^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 20, :end-line 8970, :column 16, :line 8970, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 14, :end-line 8970, :column 10, :line 8970, :file "cljs/core.cljs"} ->UUID, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 21, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} IVector ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 21, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 21, :end-line 292, :column 14, :line 292, :file "cljs/core.cljs"} IVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 405, :column 14, :line 405, :file "cljs/core.cljs"} IIterable ^{:impls (cljs.core/Range cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 405, :column 14, :line 405, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 13, :end-line 406, :column 4, :line 406, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 406, :column 14, :line 406, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 406, :column 15, :line 406, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 405, :column 14, :line 405, :file "cljs/core.cljs"} IIterable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2 ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} Eduction {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 18, :end-line 8417, :column 10, :line 8417, :file "cljs/core.cljs"} Eduction, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 8417, :column 19, :line 8417, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 8417, :column 20, :line 8417, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 8417, :column 26, :line 8417, :file "cljs/core.cljs"} coll], :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 28, :end-line 4025, :column 22, :line 4025, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4025, :column 23, :line 4025, :file "cljs/core.cljs"} node]), :private true, :end-column 21, :end-line 4025, :column 8, :line 4025, :file "cljs/core.cljs"} pv-clone-node ^{:arglists (^{:end-column 28, :end-line 4025, :column 22, :line 4025, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4025, :column 23, :line 4025, :file "cljs/core.cljs"} node]), :private true, :end-column 21, :end-line 4025, :column 8, :line 4025, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 4025, :column 23, :line 4025, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 4025, :column 22, :line 4025, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4025, :column 23, :line 4025, :file "cljs/core.cljs"} node]), :private true, :end-column 21, :end-line 4025, :column 8, :line 4025, :file "cljs/core.cljs"} pv-clone-node, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 24, :end-line 910, :column 20, :line 910, :file "cljs/core.cljs"} cons ^{:arglists (^{:end-column 11, :end-line 2401, :column 3, :line 2401, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2401, :column 4, :line 2401, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2401, :column 6, :line 2401, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 11, :end-line 2399, :column 7, :line 2399, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 5, :end-line 2401, :column 4, :line 2401, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2401, :column 6, :line 2401, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2401, :column 3, :line 2401, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2401, :column 4, :line 2401, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2401, :column 6, :line 2401, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 11, :end-line 2399, :column 7, :line 2399, :file "cljs/core.cljs"} cons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} PersistentTreeSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} PersistentTreeSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7332, :column 28, :line 7332, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 17, :end-line 1991, :column 14, :line 1991, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1991, :column 15, :line 1991, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1991, :column 7, :line 1991, :file "cljs/core.cljs"} floats ^{:arglists (^{:end-column 17, :end-line 1991, :column 14, :line 1991, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1991, :column 15, :line 1991, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1991, :column 7, :line 1991, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1991, :column 15, :line 1991, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1991, :column 14, :line 1991, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1991, :column 15, :line 1991, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1991, :column 7, :line 1991, :file "cljs/core.cljs"} floats, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 59, :end-line 4130, :column 44, :line 4130, :file "cljs/core.cljs"} TransientVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 25, :end-line 4605, :column 10, :line 4605, :file "cljs/core.cljs"} TransientVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4608, :column 26, :line 4605, :file "cljs/core.cljs"} [^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail], :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 2104, :column 3, :line 2104, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2104, :column 4, :line 2104, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 15, :end-line 2102, :column 8, :line 2102, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2102, :column 16, :line 2102, :file "cljs/core.cljs"} pos? ^{:arglists (^{:end-column 6, :end-line 2104, :column 3, :line 2104, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2104, :column 4, :line 2104, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 15, :end-line 2102, :column 8, :line 2102, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2102, :column 16, :line 2102, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2104, :column 4, :line 2104, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2104, :column 3, :line 2104, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2104, :column 4, :line 2104, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 15, :end-line 2102, :column 8, :line 2102, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2102, :column 16, :line 2102, :file "cljs/core.cljs"} pos?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3315, :column 4, :line 3315, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3315, :column 5, :line 3315, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3315, :column 7, :line 3315, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3321, :column 4, :line 3321, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3321, :column 7, :line 3321, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3321, :column 9, :line 3321, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3326, :column 4, :line 3326, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3326, :column 5, :line 3326, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3326, :column 9, :line 3326, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 3326, :column 11, :line 3326, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 11, :end-line 3309, :column 7, :line 3309, :file "cljs/core.cljs"} fnil ^{:arglists (^{:end-column 9, :end-line 3315, :column 4, :line 3315, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3315, :column 5, :line 3315, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3315, :column 7, :line 3315, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3321, :column 4, :line 3321, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3321, :column 7, :line 3321, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3321, :column 9, :line 3321, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3326, :column 4, :line 3326, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3326, :column 5, :line 3326, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3326, :column 9, :line 3326, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 3326, :column 11, :line 3326, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 11, :end-line 3309, :column 7, :line 3309, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3315, :column 5, :line 3315, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3315, :column 7, :line 3315, :file "cljs/core.cljs"} x] ^function [^{:end-column 6, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3321, :column 7, :line 3321, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3321, :column 9, :line 3321, :file "cljs/core.cljs"} y] ^function [^{:end-column 6, :end-line 3326, :column 5, :line 3326, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3326, :column 9, :line 3326, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 3326, :column 11, :line 3326, :file "cljs/core.cljs"} z]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3315, :column 4, :line 3315, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3315, :column 5, :line 3315, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3315, :column 7, :line 3315, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3321, :column 4, :line 3321, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3321, :column 5, :line 3321, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3321, :column 7, :line 3321, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3321, :column 9, :line 3321, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3326, :column 4, :line 3326, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3326, :column 5, :line 3326, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3326, :column 7, :line 3326, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 3326, :column 9, :line 3326, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 3326, :column 11, :line 3326, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 11, :end-line 3309, :column 7, :line 3309, :file "cljs/core.cljs"} fnil, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7171, :column 3, :line 7171, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7171, :column 4, :line 7171, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 7171, :column 6, :line 7171, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7171, :column 8, :line 7171, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 17, :end-line 7166, :column 7, :line 7166, :file "cljs/core.cljs"} merge-with ^{:arglists (^{:end-column 13, :end-line 7171, :column 3, :line 7171, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7171, :column 4, :line 7171, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 7171, :column 6, :line 7171, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7171, :column 8, :line 7171, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 17, :end-line 7166, :column 7, :line 7166, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 7171, :column 4, :line 7171, :file "cljs/core.cljs"} f & ^{:end-column 12, :end-line 7171, :column 8, :line 7171, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7171, :column 3, :line 7171, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7171, :column 4, :line 7171, :file "cljs/core.cljs"} f ^{:end-column 7, :end-line 7171, :column 6, :line 7171, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7171, :column 8, :line 7171, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 17, :end-line 7166, :column 7, :line 7166, :file "cljs/core.cljs"} merge-with, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1240, :column 3, :line 1240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1240, :column 4, :line 1240, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1240, :column 9, :line 1240, :file "cljs/core.cljs"} n]), :doc "Returns the nth rest of coll, coll when n is 0.", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} nthrest ^{:arglists (^{:end-column 11, :end-line 1240, :column 3, :line 1240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1240, :column 4, :line 1240, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1240, :column 9, :line 1240, :file "cljs/core.cljs"} n]), :doc "Returns the nth rest of coll, coll when n is 0.", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1240, :column 4, :line 1240, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1240, :column 9, :line 1240, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1240, :column 3, :line 1240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1240, :column 4, :line 1240, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1240, :column 9, :line 1240, :file "cljs/core.cljs"} n]), :doc "Returns the nth rest of coll, coll when n is 0.", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} nthrest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 15, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} sequential? ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 15, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 15, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} sequential?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6816, :column 25, :line 6816, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6816, :column 26, :line 6816, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6816, :column 31, :line 6816, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6816, :column 36, :line 6816, :file "cljs/core.cljs"} k ^{:end-column 39, :end-line 6816, :column 38, :line 6816, :file "cljs/core.cljs"} v]), :private true, :end-column 24, :end-line 6816, :column 8, :line 6816, :file "cljs/core.cljs"} tree-map-replace ^{:arglists (^{:end-column 40, :end-line 6816, :column 25, :line 6816, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6816, :column 26, :line 6816, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6816, :column 31, :line 6816, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6816, :column 36, :line 6816, :file "cljs/core.cljs"} k ^{:end-column 39, :end-line 6816, :column 38, :line 6816, :file "cljs/core.cljs"} v]), :private true, :end-column 24, :end-line 6816, :column 8, :line 6816, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6816, :column 26, :line 6816, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6816, :column 31, :line 6816, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6816, :column 36, :line 6816, :file "cljs/core.cljs"} k ^{:end-column 39, :end-line 6816, :column 38, :line 6816, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6816, :column 25, :line 6816, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6816, :column 26, :line 6816, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6816, :column 31, :line 6816, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6816, :column 36, :line 6816, :file "cljs/core.cljs"} k ^{:end-column 39, :end-line 6816, :column 38, :line 6816, :file "cljs/core.cljs"} v]), :private true, :end-column 24, :end-line 6816, :column 8, :line 6816, :file "cljs/core.cljs"} tree-map-replace, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 455, :column 25, :line 455, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 455, :column 26, :line 455, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 455, :column 29, :line 455, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 455, :column 8, :line 455, :file "cljs/core.cljs"} number, :end-column 24, :end-line 455, :column 15, :line 455, :file "cljs/core.cljs"} m3-mix-H1 ^{:arglists (^{:end-column 32, :end-line 455, :column 25, :line 455, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 455, :column 26, :line 455, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 455, :column 29, :line 455, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 455, :column 8, :line 455, :file "cljs/core.cljs"} number, :end-column 24, :end-line 455, :column 15, :line 455, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 455, :column 26, :line 455, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 455, :column 29, :line 455, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 455, :column 25, :line 455, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 455, :column 26, :line 455, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 455, :column 29, :line 455, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 455, :column 8, :line 455, :file "cljs/core.cljs"} number, :end-column 24, :end-line 455, :column 15, :line 455, :file "cljs/core.cljs"} m3-mix-H1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5368, :column 10, :line 5368, :file "cljs/core.cljs"} ->TransientArrayMap ^{:arglists ([^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5368, :column 10, :line 5368, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientArrayMap [^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5368, :column 10, :line 5368, :file "cljs/core.cljs"} ->TransientArrayMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 623, :column 20, :line 623, :file "cljs/core.cljs"} prim-seq ^{:arglists (^{:end-column 10, :end-line 1000, :column 4, :line 1000, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1000, :column 5, :line 1000, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 5, :line 1002, :file "cljs/core.cljs"} prim ^{:end-column 11, :end-line 1002, :column 10, :line 1002, :file "cljs/core.cljs"} i]), :end-column 15, :end-line 999, :column 7, :line 999, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1000, :column 5, :line 1000, :file "cljs/core.cljs"} prim] [^{:end-column 9, :end-line 1002, :column 5, :line 1002, :file "cljs/core.cljs"} prim ^{:end-column 11, :end-line 1002, :column 10, :line 1002, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1000, :column 4, :line 1000, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1000, :column 5, :line 1000, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 1002, :column 4, :line 1002, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1002, :column 5, :line 1002, :file "cljs/core.cljs"} prim ^{:end-column 11, :end-line 1002, :column 10, :line 1002, :file "cljs/core.cljs"} i]), :end-column 15, :end-line 999, :column 7, :line 999, :file "cljs/core.cljs"} prim-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level* ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} {:op :var, :name ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1684, :column 3, :line 1684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 14, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} shuffle ^{:arglists (^{:end-column 9, :end-line 1684, :column 3, :line 1684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 14, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1684, :column 3, :line 1684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1684, :column 4, :line 1684, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 14, :end-line 1682, :column 7, :line 1682, :file "cljs/core.cljs"} shuffle, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 32, :end-line 1467, :column 22, :line 1467, :file "cljs/core.cljs"} ChunkedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 4348, :column 10, :line 4348, :file "cljs/core.cljs"} ChunkedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 59, :end-line 4348, :column 21, :line 4348, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 23, :end-line 2410, :column 20, :line 2410, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2410, :column 21, :line 2410, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 2410, :column 7, :line 2410, :file "cljs/core.cljs"} hash-keyword ^{:arglists (^{:end-column 23, :end-line 2410, :column 20, :line 2410, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2410, :column 21, :line 2410, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 2410, :column 7, :line 2410, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 22, :end-line 2410, :column 21, :line 2410, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2410, :column 20, :line 2410, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2410, :column 21, :line 2410, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 2410, :column 7, :line 2410, :file "cljs/core.cljs"} hash-keyword, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1557, :column 3, :line 1557, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1557, :column 4, :line 1557, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1557, :column 9, :line 1557, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 11, :end-line 1555, :column 7, :line 1555, :file "cljs/core.cljs"} find ^{:arglists (^{:end-column 11, :end-line 1557, :column 3, :line 1557, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1557, :column 4, :line 1557, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1557, :column 9, :line 1557, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 11, :end-line 1555, :column 7, :line 1555, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1557, :column 4, :line 1557, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1557, :column 9, :line 1557, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1557, :column 3, :line 1557, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1557, :column 4, :line 1557, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 1557, :column 9, :line 1557, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 11, :end-line 1555, :column 7, :line 1555, :file "cljs/core.cljs"} find, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 195, :column 3, :line 195, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 195, :column 4, :line 195, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 14, :end-line 193, :column 8, :line 193, :file "cljs/core.cljs"} number, :end-column 22, :end-line 193, :column 15, :line 193, :file "cljs/core.cljs"} alength ^{:arglists (^{:end-column 10, :end-line 195, :column 3, :line 195, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 195, :column 4, :line 195, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 14, :end-line 193, :column 8, :line 193, :file "cljs/core.cljs"} number, :end-column 22, :end-line 193, :column 15, :line 193, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 195, :column 4, :line 195, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 195, :column 3, :line 195, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 195, :column 4, :line 195, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 14, :end-line 193, :column 8, :line 193, :file "cljs/core.cljs"} number, :end-column 22, :end-line 193, :column 15, :line 193, :file "cljs/core.cljs"} alength, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2028, :column 3, :line 2028, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2028, :column 6, :line 2028, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 14, :end-line 2026, :column 7, :line 2026, :file "cljs/core.cljs"} bit-xor ^{:arglists (^{:end-column 8, :end-line 2028, :column 3, :line 2028, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2028, :column 6, :line 2028, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 14, :end-line 2026, :column 7, :line 2026, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2028, :column 6, :line 2028, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2028, :column 3, :line 2028, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2028, :column 6, :line 2028, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 14, :end-line 2026, :column 7, :line 2026, :file "cljs/core.cljs"} bit-xor, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 929, :column 10, :line 929, :file "cljs/core.cljs"} ->IndexedSeq ^{:arglists ([^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 929, :column 10, :line 929, :file "cljs/core.cljs"} {:arglists (^cljs.core/IndexedSeq [^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 929, :column 22, :line 929, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 929, :column 26, :line 929, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 20, :end-line 929, :column 10, :line 929, :file "cljs/core.cljs"} ->IndexedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} ObjMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} ObjMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4905, :column 17, :line 4905, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 2080, :column 3, :line 2080, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2080, :column 4, :line 2080, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2080, :column 6, :line 2080, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 31, :end-line 2078, :column 7, :line 2078, :file "cljs/core.cljs"} unsigned-bit-shift-right ^{:arglists (^{:end-column 8, :end-line 2080, :column 3, :line 2080, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2080, :column 4, :line 2080, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2080, :column 6, :line 2080, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 31, :end-line 2078, :column 7, :line 2078, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2080, :column 4, :line 2080, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2080, :column 6, :line 2080, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2080, :column 3, :line 2080, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2080, :column 4, :line 2080, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2080, :column 6, :line 2080, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 31, :end-line 2078, :column 7, :line 2078, :file "cljs/core.cljs"} unsigned-bit-shift-right, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} ES6SetEntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 31, :end-line 5029, :column 10, :line 5029, :file "cljs/core.cljs"} ES6SetEntriesIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 5029, :column 32, :line 5029, :file "cljs/core.cljs"} [^{:mutable true, :end-column 44, :end-line 5029, :column 43, :line 5029, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 6, :end-line 2111, :column 3, :line 2111, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2111, :column 4, :line 2111, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 15, :end-line 2109, :column 8, :line 2109, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2109, :column 16, :line 2109, :file "cljs/core.cljs"} neg? ^{:arglists (^{:end-column 6, :end-line 2111, :column 3, :line 2111, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2111, :column 4, :line 2111, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 15, :end-line 2109, :column 8, :line 2109, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2109, :column 16, :line 2109, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2111, :column 4, :line 2111, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2111, :column 3, :line 2111, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2111, :column 4, :line 2111, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 15, :end-line 2109, :column 8, :line 2109, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2109, :column 16, :line 2109, :file "cljs/core.cljs"} neg?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} Cons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} Cons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 49, :end-line 2350, :column 15, :line 2350, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method ^{:arglists (^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} ->StringIter ^{:arglists ([^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} ->StringIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 209, :column 3, :line 209, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 209, :column 4, :line 209, :file "cljs/core.cljs"} obj ^{:end-column 9, :end-line 209, :column 8, :line 209, :file "cljs/core.cljs"} s ^{:end-column 11, :end-line 209, :column 10, :line 209, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 209, :column 12, :line 209, :file "cljs/core.cljs"} args]), :doc "Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.", :end-column 16, :end-line 206, :column 7, :line 206, :file "cljs/core.cljs"} js-invoke ^{:arglists (^{:end-column 17, :end-line 209, :column 3, :line 209, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 209, :column 4, :line 209, :file "cljs/core.cljs"} obj ^{:end-column 9, :end-line 209, :column 8, :line 209, :file "cljs/core.cljs"} s ^{:end-column 11, :end-line 209, :column 10, :line 209, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 209, :column 12, :line 209, :file "cljs/core.cljs"} args]), :doc "Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.", :end-column 16, :end-line 206, :column 7, :line 206, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 209, :column 4, :line 209, :file "cljs/core.cljs"} obj ^{:end-column 9, :end-line 209, :column 8, :line 209, :file "cljs/core.cljs"} s & ^{:end-column 16, :end-line 209, :column 12, :line 209, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 209, :column 3, :line 209, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 209, :column 4, :line 209, :file "cljs/core.cljs"} obj ^{:end-column 9, :end-line 209, :column 8, :line 209, :file "cljs/core.cljs"} s ^{:end-column 11, :end-line 209, :column 10, :line 209, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 209, :column 12, :line 209, :file "cljs/core.cljs"} args]), :doc "Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.", :end-column 16, :end-line 206, :column 7, :line 206, :file "cljs/core.cljs"} js-invoke, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2205, :column 10, :line 2205, :file "cljs/core.cljs"} ->List ^{:arglists ([^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2205, :column 10, :line 2205, :file "cljs/core.cljs"} {:arglists (^cljs.core/List [^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2205, :column 10, :line 2205, :file "cljs/core.cljs"} ->List, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 452, :column 25, :line 452, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 452, :column 26, :line 452, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 24, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} m3-mix-K1 ^{:arglists (^{:end-column 29, :end-line 452, :column 25, :line 452, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 452, :column 26, :line 452, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 24, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 452, :column 26, :line 452, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 452, :column 25, :line 452, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 452, :column 26, :line 452, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 14, :end-line 452, :column 8, :line 452, :file "cljs/core.cljs"} number, :end-column 24, :end-line 452, :column 15, :line 452, :file "cljs/core.cljs"} m3-mix-K1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1886, :column 31, :line 1886, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1886, :column 32, :line 1886, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1886, :column 8, :line 1886, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1886, :column 15, :line 1886, :file "cljs/core.cljs"} unchecked-float ^{:arglists (^{:end-column 34, :end-line 1886, :column 31, :line 1886, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1886, :column 32, :line 1886, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1886, :column 8, :line 1886, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1886, :column 15, :line 1886, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1886, :column 32, :line 1886, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1886, :column 31, :line 1886, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1886, :column 32, :line 1886, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1886, :column 8, :line 1886, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1886, :column 15, :line 1886, :file "cljs/core.cljs"} unchecked-float, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 1515, :column 27, :line 1515, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 1515, :column 28, :line 1515, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1515, :column 8, :line 1515, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1515, :column 16, :line 1515, :file "cljs/core.cljs"} undefined? ^{:arglists (^{:end-column 30, :end-line 1515, :column 27, :line 1515, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 1515, :column 28, :line 1515, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1515, :column 8, :line 1515, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1515, :column 16, :line 1515, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 29, :end-line 1515, :column 28, :line 1515, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 1515, :column 27, :line 1515, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 1515, :column 28, :line 1515, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1515, :column 8, :line 1515, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1515, :column 16, :line 1515, :file "cljs/core.cljs"} undefined?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} IMeta ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/MetaFn cljs.core/RSeq ^{:end-column 22, :end-line 799, :column 14, :line 799, :file "cljs/core.cljs"} function cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 301, :column 14, :line 301, :file "cljs/core.cljs"} IMeta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 15, :end-line 825, :column 8, :line 825, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 825, :column 16, :line 825, :file "cljs/core.cljs"} reduced? ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 15, :end-line 825, :column 8, :line 825, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 825, :column 16, :line 825, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} r]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 827, :column 3, :line 827, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 827, :column 4, :line 827, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 15, :end-line 825, :column 8, :line 825, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 825, :column 16, :line 825, :file "cljs/core.cljs"} reduced?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to ^{:file "cljs/core.cljs", :arglists ([f argc args])} {:arglists ([f argc args]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2892, :column 4, :line 2892, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2892, :column 5, :line 2892, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2892, :column 11, :line 2892, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2892, :column 15, :line 2892, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2892, :column 17, :line 2892, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 2887, :column 7, :line 2887, :file "cljs/core.cljs"} disj! ^{:arglists (^{:end-column 15, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2892, :column 4, :line 2892, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2892, :column 5, :line 2892, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2892, :column 11, :line 2892, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2892, :column 15, :line 2892, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2892, :column 17, :line 2892, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 2887, :column 7, :line 2887, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} val] ^^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2892, :column 5, :line 2892, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2892, :column 11, :line 2892, :file "cljs/core.cljs"} val & ^{:end-column 21, :end-line 2892, :column 17, :line 2892, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2892, :column 4, :line 2892, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2892, :column 5, :line 2892, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2892, :column 11, :line 2892, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2892, :column 15, :line 2892, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2892, :column 17, :line 2892, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 2887, :column 7, :line 2887, :file "cljs/core.cljs"} disj!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup ^{:arglists (^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 270, :column 12, :line 270, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 270, :column 13, :line 270, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 270, :column 15, :line 270, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 270, :column 18, :line 270, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 270, :column 19, :line 270, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 270, :column 21, :line 270, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 270, :column 23, :line 270, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 11, :end-line 270, :column 4, :line 270, :file "cljs/core.cljs"} -lookup, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 24, :end-line 242, :column 14, :line 242, :file "cljs/core.cljs"} ICloneable ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/Subvec cljs.core/PersistentVector cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 24, :end-line 242, :column 14, :line 242, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 243, :column 9, :line 243, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 243, :column 16, :line 243, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 243, :column 17, :line 243, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 24, :end-line 242, :column 14, :line 242, :file "cljs/core.cljs"} ICloneable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 28, :end-line 8483, :column 14, :line 8483, :file "cljs/core.cljs"} IEncodeClojure ^{:protocol-info {:methods {^{:end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 28, :end-line 8483, :column 14, :line 8483, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 8484, :column 4, :line 8484, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8484, :column 13, :line 8484, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8484, :column 14, :line 8484, :file "cljs/core.cljs"} x ^{:end-column 23, :end-line 8484, :column 16, :line 8484, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 28, :end-line 8483, :column 14, :line 8483, :file "cljs/core.cljs"} IEncodeClojure, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1986, :column 16, :line 1986, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1986, :column 17, :line 1986, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} booleans ^{:arglists (^{:end-column 19, :end-line 1986, :column 16, :line 1986, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1986, :column 17, :line 1986, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1986, :column 17, :line 1986, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1986, :column 16, :line 1986, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1986, :column 17, :line 1986, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1986, :column 7, :line 1986, :file "cljs/core.cljs"} booleans, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 5062, :column 35, :line 5062, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5062, :column 36, :line 5062, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 5062, :column 40, :line 5062, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 5062, :column 42, :line 5062, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 5062, :column 8, :line 5062, :file "cljs/core.cljs"} array-map-index-of-symbol? ^{:arglists (^{:end-column 44, :end-line 5062, :column 35, :line 5062, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5062, :column 36, :line 5062, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 5062, :column 40, :line 5062, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 5062, :column 42, :line 5062, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 5062, :column 8, :line 5062, :file "cljs/core.cljs"} {:arglists ([^{:end-column 39, :end-line 5062, :column 36, :line 5062, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 5062, :column 40, :line 5062, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 5062, :column 42, :line 5062, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 5062, :column 35, :line 5062, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5062, :column 36, :line 5062, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 5062, :column 40, :line 5062, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 5062, :column 42, :line 5062, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 5062, :column 8, :line 5062, :file "cljs/core.cljs"} array-map-index-of-symbol?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} ->ArrayList ^{:arglists ([^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList [^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} ->ArrayList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 29, :end-line 910, :column 25, :line 910, :file "cljs/core.cljs"} RSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} RSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 1014, :column 15, :line 1014, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 5457, :column 13, :line 5457, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 5457, :column 14, :line 5457, :file "cljs/core.cljs"} hash ^{:end-column 24, :end-line 5457, :column 19, :line 5457, :file "cljs/core.cljs"} shift]), :private true, :end-column 12, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} mask ^{:arglists (^{:end-column 25, :end-line 5457, :column 13, :line 5457, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 5457, :column 14, :line 5457, :file "cljs/core.cljs"} hash ^{:end-column 24, :end-line 5457, :column 19, :line 5457, :file "cljs/core.cljs"} shift]), :private true, :end-column 12, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 18, :end-line 5457, :column 14, :line 5457, :file "cljs/core.cljs"} hash ^{:end-column 24, :end-line 5457, :column 19, :line 5457, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 5457, :column 13, :line 5457, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 5457, :column 14, :line 5457, :file "cljs/core.cljs"} hash ^{:end-column 24, :end-line 5457, :column 19, :line 5457, :file "cljs/core.cljs"} shift]), :private true, :end-column 12, :end-line 5457, :column 8, :line 5457, :file "cljs/core.cljs"} mask, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2701, :column 4, :line 2701, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2701, :column 5, :line 2701, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2705, :column 4, :line 2705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2705, :column 5, :line 2705, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2705, :column 10, :line 2705, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 16, :end-line 2700, :column 7, :line 2700, :file "cljs/core.cljs"} int-array ^{:arglists (^{:end-column 17, :end-line 2701, :column 4, :line 2701, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2701, :column 5, :line 2701, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2705, :column 4, :line 2705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2705, :column 5, :line 2705, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2705, :column 10, :line 2705, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 16, :end-line 2700, :column 7, :line 2700, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2701, :column 5, :line 2701, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 9, :end-line 2705, :column 5, :line 2705, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2705, :column 10, :line 2705, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2701, :column 4, :line 2701, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2701, :column 5, :line 2701, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2705, :column 4, :line 2705, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2705, :column 5, :line 2705, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2705, :column 10, :line 2705, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 16, :end-line 2700, :column 7, :line 2700, :file "cljs/core.cljs"} int-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 88, :end-line 8718, :column 3, :line 8718, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8718, :column 4, :line 8718, :file "cljs/core.cljs"} name ^{:end-column 21, :end-line 8718, :column 9, :line 8718, :file "cljs/core.cljs"} dispatch-val ^{:end-column 31, :end-line 8718, :column 22, :line 8718, :file "cljs/core.cljs"} hierarchy ^{:end-column 44, :end-line 8718, :column 32, :line 8718, :file "cljs/core.cljs"} method-table ^{:end-column 57, :end-line 8718, :column 45, :line 8718, :file "cljs/core.cljs"} prefer-table ^{:end-column 70, :end-line 8718, :column 58, :line 8718, :file "cljs/core.cljs"} method-cache ^{:end-column 87, :end-line 8718, :column 71, :line 8718, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 34, :end-line 8717, :column 8, :line 8717, :file "cljs/core.cljs"} find-and-cache-best-method ^{:arglists (^{:end-column 88, :end-line 8718, :column 3, :line 8718, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8718, :column 4, :line 8718, :file "cljs/core.cljs"} name ^{:end-column 21, :end-line 8718, :column 9, :line 8718, :file "cljs/core.cljs"} dispatch-val ^{:end-column 31, :end-line 8718, :column 22, :line 8718, :file "cljs/core.cljs"} hierarchy ^{:end-column 44, :end-line 8718, :column 32, :line 8718, :file "cljs/core.cljs"} method-table ^{:end-column 57, :end-line 8718, :column 45, :line 8718, :file "cljs/core.cljs"} prefer-table ^{:end-column 70, :end-line 8718, :column 58, :line 8718, :file "cljs/core.cljs"} method-cache ^{:end-column 87, :end-line 8718, :column 71, :line 8718, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 34, :end-line 8717, :column 8, :line 8717, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8718, :column 4, :line 8718, :file "cljs/core.cljs"} name ^{:end-column 21, :end-line 8718, :column 9, :line 8718, :file "cljs/core.cljs"} dispatch-val ^{:end-column 31, :end-line 8718, :column 22, :line 8718, :file "cljs/core.cljs"} hierarchy ^{:end-column 44, :end-line 8718, :column 32, :line 8718, :file "cljs/core.cljs"} method-table ^{:end-column 57, :end-line 8718, :column 45, :line 8718, :file "cljs/core.cljs"} prefer-table ^{:end-column 70, :end-line 8718, :column 58, :line 8718, :file "cljs/core.cljs"} method-cache ^{:end-column 87, :end-line 8718, :column 71, :line 8718, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 88, :end-line 8718, :column 3, :line 8718, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8718, :column 4, :line 8718, :file "cljs/core.cljs"} name ^{:end-column 21, :end-line 8718, :column 9, :line 8718, :file "cljs/core.cljs"} dispatch-val ^{:end-column 31, :end-line 8718, :column 22, :line 8718, :file "cljs/core.cljs"} hierarchy ^{:end-column 44, :end-line 8718, :column 32, :line 8718, :file "cljs/core.cljs"} method-table ^{:end-column 57, :end-line 8718, :column 45, :line 8718, :file "cljs/core.cljs"} prefer-table ^{:end-column 70, :end-line 8718, :column 58, :line 8718, :file "cljs/core.cljs"} method-cache ^{:end-column 87, :end-line 8718, :column 71, :line 8718, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 34, :end-line 8717, :column 8, :line 8717, :file "cljs/core.cljs"} find-and-cache-best-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1435, :column 3, :line 1435, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1435, :column 4, :line 1435, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 15, :end-line 1433, :column 8, :line 1433, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1433, :column 16, :line 1433, :file "cljs/core.cljs"} set? ^{:arglists (^{:end-column 6, :end-line 1435, :column 3, :line 1435, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1435, :column 4, :line 1435, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 15, :end-line 1433, :column 8, :line 1433, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1433, :column 16, :line 1433, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1435, :column 4, :line 1435, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1435, :column 3, :line 1435, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1435, :column 4, :line 1435, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 15, :end-line 1433, :column 8, :line 1433, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1433, :column 16, :line 1433, :file "cljs/core.cljs"} set?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 625, :column 17, :line 625, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 625, :column 18, :line 625, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 625, :column 7, :line 625, :file "cljs/core.cljs"} iterable? ^{:arglists (^{:end-column 20, :end-line 625, :column 17, :line 625, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 625, :column 18, :line 625, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 625, :column 7, :line 625, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 19, :end-line 625, :column 18, :line 625, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 625, :column 17, :line 625, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 625, :column 18, :line 625, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 625, :column 7, :line 625, :file "cljs/core.cljs"} iterable?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 13, :end-line 3806, :column 10, :line 3806, :file "cljs/core.cljs"} cat ^{:arglists (^{:end-column 7, :end-line 8384, :column 3, :line 8384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8384, :column 4, :line 8384, :file "cljs/core.cljs"} rf]), :added "1.7", :doc "A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.", :end-column 10, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 8384, :column 4, :line 8384, :file "cljs/core.cljs"} rf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8384, :column 3, :line 8384, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8384, :column 4, :line 8384, :file "cljs/core.cljs"} rf]), :added "1.7", :doc "A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.", :end-column 10, :end-line 8380, :column 7, :line 8380, :file "cljs/core.cljs"} cat, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} ->ES6EntriesIterator ^{:arglists ([^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6EntriesIterator [^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} ->ES6EntriesIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 1794, :column 10, :line 1794, :file "cljs/core.cljs"} divide ^{:declared true, :end-column 16, :end-line 1794, :column 10, :line 1794, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 16, :end-line 1794, :column 10, :line 1794, :file "cljs/core.cljs"} divide, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer ^{:arglists (^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 350, :column 15, :line 350, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 350, :column 16, :line 350, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 350, :column 18, :line 350, :file "cljs/core.cljs"} writer ^{:end-column 29, :end-line 350, :column 25, :line 350, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 14, :end-line 350, :column 4, :line 350, :file "cljs/core.cljs"} -pr-writer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7971, :column 13, :line 7971, :file "cljs/core.cljs"} []), :end-column 12, :end-line 7971, :column 7, :line 7971, :file "cljs/core.cljs"} flush ^{:arglists (^{:end-column 15, :end-line 7971, :column 13, :line 7971, :file "cljs/core.cljs"} []), :end-column 12, :end-line 7971, :column 7, :line 7971, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7971, :column 13, :line 7971, :file "cljs/core.cljs"} []), :end-column 12, :end-line 7971, :column 7, :line 7971, :file "cljs/core.cljs"} flush, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 7425, :column 28, :line 7425, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7425, :column 29, :line 7425, :file "cljs/core.cljs"} iseq]), :end-column 27, :end-line 7425, :column 7, :line 7425, :file "cljs/core.cljs"} set-from-indexed-seq ^{:arglists (^{:end-column 34, :end-line 7425, :column 28, :line 7425, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7425, :column 29, :line 7425, :file "cljs/core.cljs"} iseq]), :end-column 27, :end-line 7425, :column 7, :line 7425, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 33, :end-line 7425, :column 29, :line 7425, :file "cljs/core.cljs"} iseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 7425, :column 28, :line 7425, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7425, :column 29, :line 7425, :file "cljs/core.cljs"} iseq]), :end-column 27, :end-line 7425, :column 7, :line 7425, :file "cljs/core.cljs"} set-from-indexed-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7582, :column 4, :line 7582, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7582, :column 5, :line 7582, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7591, :column 4, :line 7591, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7591, :column 5, :line 7591, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7591, :column 10, :line 7591, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 17, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} take-while ^{:arglists (^{:end-column 10, :end-line 7582, :column 4, :line 7582, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7582, :column 5, :line 7582, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7591, :column 4, :line 7591, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7591, :column 5, :line 7591, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7591, :column 10, :line 7591, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 17, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 7582, :column 5, :line 7582, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 9, :end-line 7591, :column 5, :line 7591, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7591, :column 10, :line 7591, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7582, :column 4, :line 7582, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7582, :column 5, :line 7582, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7591, :column 4, :line 7591, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7591, :column 5, :line 7591, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7591, :column 10, :line 7591, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 17, :end-line 7578, :column 7, :line 7578, :file "cljs/core.cljs"} take-while, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2957, :column 4, :line 2957, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2957, :column 5, :line 2957, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2957, :column 9, :line 2957, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2959, :column 4, :line 2959, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2959, :column 5, :line 2959, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2959, :column 9, :line 2959, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2959, :column 11, :line 2959, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2961, :column 4, :line 2961, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2961, :column 5, :line 2961, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2961, :column 9, :line 2961, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2961, :column 11, :line 2961, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2961, :column 13, :line 2961, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2963, :column 4, :line 2963, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2963, :column 5, :line 2963, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2963, :column 9, :line 2963, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2963, :column 11, :line 2963, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2963, :column 13, :line 2963, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2963, :column 15, :line 2963, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2965, :column 4, :line 2965, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2965, :column 5, :line 2965, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2965, :column 9, :line 2965, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2965, :column 11, :line 2965, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2965, :column 13, :line 2965, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2965, :column 15, :line 2965, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2965, :column 17, :line 2965, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2967, :column 4, :line 2967, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2967, :column 5, :line 2967, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2967, :column 9, :line 2967, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2967, :column 11, :line 2967, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2967, :column 13, :line 2967, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2967, :column 15, :line 2967, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2967, :column 17, :line 2967, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 2967, :column 19, :line 2967, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2967, :column 21, :line 2967, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 16, :end-line 2954, :column 7, :line 2954, :file "cljs/core.cljs"} vary-meta ^{:arglists (^{:end-column 11, :end-line 2957, :column 4, :line 2957, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2957, :column 5, :line 2957, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2957, :column 9, :line 2957, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2959, :column 4, :line 2959, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2959, :column 5, :line 2959, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2959, :column 9, :line 2959, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2959, :column 11, :line 2959, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2961, :column 4, :line 2961, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2961, :column 5, :line 2961, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2961, :column 9, :line 2961, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2961, :column 11, :line 2961, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2961, :column 13, :line 2961, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2963, :column 4, :line 2963, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2963, :column 5, :line 2963, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2963, :column 9, :line 2963, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2963, :column 11, :line 2963, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2963, :column 13, :line 2963, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2963, :column 15, :line 2963, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2965, :column 4, :line 2965, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2965, :column 5, :line 2965, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2965, :column 9, :line 2965, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2965, :column 11, :line 2965, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2965, :column 13, :line 2965, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2965, :column 15, :line 2965, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2965, :column 17, :line 2965, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2967, :column 4, :line 2967, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2967, :column 5, :line 2967, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2967, :column 9, :line 2967, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2967, :column 11, :line 2967, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2967, :column 13, :line 2967, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2967, :column 15, :line 2967, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2967, :column 17, :line 2967, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 2967, :column 19, :line 2967, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2967, :column 21, :line 2967, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 16, :end-line 2954, :column 7, :line 2954, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2957, :column 5, :line 2957, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2957, :column 9, :line 2957, :file "cljs/core.cljs"} f] [^{:end-column 8, :end-line 2959, :column 5, :line 2959, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2959, :column 9, :line 2959, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2959, :column 11, :line 2959, :file "cljs/core.cljs"} a] [^{:end-column 8, :end-line 2961, :column 5, :line 2961, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2961, :column 9, :line 2961, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2961, :column 11, :line 2961, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2961, :column 13, :line 2961, :file "cljs/core.cljs"} b] [^{:end-column 8, :end-line 2963, :column 5, :line 2963, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2963, :column 9, :line 2963, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2963, :column 11, :line 2963, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2963, :column 13, :line 2963, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2963, :column 15, :line 2963, :file "cljs/core.cljs"} c] [^{:end-column 8, :end-line 2965, :column 5, :line 2965, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2965, :column 9, :line 2965, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2965, :column 11, :line 2965, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2965, :column 13, :line 2965, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2965, :column 15, :line 2965, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2965, :column 17, :line 2965, :file "cljs/core.cljs"} d] [^{:end-column 8, :end-line 2967, :column 5, :line 2967, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2967, :column 9, :line 2967, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2967, :column 11, :line 2967, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2967, :column 13, :line 2967, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2967, :column 15, :line 2967, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2967, :column 17, :line 2967, :file "cljs/core.cljs"} d & ^{:end-column 25, :end-line 2967, :column 21, :line 2967, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2957, :column 4, :line 2957, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2957, :column 5, :line 2957, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2957, :column 9, :line 2957, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2959, :column 4, :line 2959, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2959, :column 5, :line 2959, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2959, :column 9, :line 2959, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2959, :column 11, :line 2959, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2961, :column 4, :line 2961, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2961, :column 5, :line 2961, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2961, :column 9, :line 2961, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2961, :column 11, :line 2961, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2961, :column 13, :line 2961, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2963, :column 4, :line 2963, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2963, :column 5, :line 2963, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2963, :column 9, :line 2963, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2963, :column 11, :line 2963, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2963, :column 13, :line 2963, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2963, :column 15, :line 2963, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2965, :column 4, :line 2965, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2965, :column 5, :line 2965, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2965, :column 9, :line 2965, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2965, :column 11, :line 2965, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2965, :column 13, :line 2965, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2965, :column 15, :line 2965, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2965, :column 17, :line 2965, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2967, :column 4, :line 2967, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2967, :column 5, :line 2967, :file "cljs/core.cljs"} obj ^{:end-column 10, :end-line 2967, :column 9, :line 2967, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2967, :column 11, :line 2967, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 2967, :column 13, :line 2967, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 2967, :column 15, :line 2967, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 2967, :column 17, :line 2967, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 2967, :column 19, :line 2967, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2967, :column 21, :line 2967, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 16, :end-line 2954, :column 7, :line 2954, :file "cljs/core.cljs"} vary-meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} INext ^{:impls (cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentArrayMapSeq cljs.core/ChunkedSeq cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} INext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_ ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 19, :end-line 3013, :column 1, :line 3013, :file "cljs/core.cljs"} START ^{:end-column 19, :end-line 3013, :column 1, :line 3013, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 19, :end-line 3013, :column 1, :line 3013, :file "cljs/core.cljs"} START, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} ICounted ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/TransientHashMap cljs.core/PersistentHashMap cljs.core/TransientArrayMap cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/ChunkBuffer cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq nil), :protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 246, :column 5, :line 246, :file "cljs/core.cljs"} number, :end-column 18, :end-line 246, :column 12, :line 246, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 246, :column 19, :line 246, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 246, :column 20, :line 246, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 245, :column 14, :line 245, :file "cljs/core.cljs"} ICounted, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]], ^{:end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} IMapEntry ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]], ^{:end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]], ^{:end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} IMapEntry, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1818, :column 4, :line 1818, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1818, :column 5, :line 1818, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1819, :column 4, :line 1819, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1819, :column 5, :line 1819, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1819, :column 7, :line 1819, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1820, :column 7, :line 1820, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1820, :column 9, :line 1820, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1820, :column 11, :line 1820, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1815, :column 8, :line 1815, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1815, :column 16, :line 1815, :file "cljs/core.cljs"} <= ^{:arglists (^{:end-column 7, :end-line 1818, :column 4, :line 1818, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1818, :column 5, :line 1818, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1819, :column 4, :line 1819, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1819, :column 5, :line 1819, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1819, :column 7, :line 1819, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1820, :column 7, :line 1820, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1820, :column 9, :line 1820, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1820, :column 11, :line 1820, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1815, :column 8, :line 1815, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1815, :column 16, :line 1815, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1818, :column 5, :line 1818, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1819, :column 5, :line 1819, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1819, :column 7, :line 1819, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1820, :column 7, :line 1820, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1820, :column 11, :line 1820, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1818, :column 4, :line 1818, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1818, :column 5, :line 1818, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1819, :column 4, :line 1819, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1819, :column 5, :line 1819, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1819, :column 7, :line 1819, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1820, :column 4, :line 1820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1820, :column 5, :line 1820, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1820, :column 7, :line 1820, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1820, :column 9, :line 1820, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1820, :column 11, :line 1820, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1815, :column 8, :line 1815, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1815, :column 16, :line 1815, :file "cljs/core.cljs"} <=, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2849, :column 4, :line 2849, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2850, :column 4, :line 2850, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2850, :column 5, :line 2850, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2851, :column 4, :line 2851, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2851, :column 5, :line 2851, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2851, :column 11, :line 2851, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2853, :column 4, :line 2853, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2853, :column 5, :line 2853, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2853, :column 11, :line 2853, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2853, :column 15, :line 2853, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2853, :column 17, :line 2853, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 2846, :column 7, :line 2846, :file "cljs/core.cljs"} conj! ^{:arglists (^{:end-column 6, :end-line 2849, :column 4, :line 2849, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2850, :column 4, :line 2850, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2850, :column 5, :line 2850, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2851, :column 4, :line 2851, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2851, :column 5, :line 2851, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2851, :column 11, :line 2851, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2853, :column 4, :line 2853, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2853, :column 5, :line 2853, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2853, :column 11, :line 2853, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2853, :column 15, :line 2853, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2853, :column 17, :line 2853, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 2846, :column 7, :line 2846, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj [] [^{:end-column 9, :end-line 2850, :column 5, :line 2850, :file "cljs/core.cljs"} coll] ^^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2851, :column 5, :line 2851, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2851, :column 11, :line 2851, :file "cljs/core.cljs"} val] ^^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2853, :column 5, :line 2853, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2853, :column 11, :line 2853, :file "cljs/core.cljs"} val & ^{:end-column 21, :end-line 2853, :column 17, :line 2853, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2849, :column 4, :line 2849, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2850, :column 4, :line 2850, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2850, :column 5, :line 2850, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2851, :column 4, :line 2851, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2851, :column 5, :line 2851, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2851, :column 11, :line 2851, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2853, :column 4, :line 2853, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2853, :column 5, :line 2853, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2853, :column 11, :line 2853, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 2853, :column 15, :line 2853, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2853, :column 17, :line 2853, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 2846, :column 7, :line 2846, :file "cljs/core.cljs"} conj!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop ^{:arglists (^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3766, :column 4, :line 3766, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3766, :column 5, :line 3766, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3767, :column 4, :line 3767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3767, :column 5, :line 3767, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 17, :end-line 3762, :column 7, :line 3762, :file "cljs/core.cljs"} repeatedly ^{:arglists (^{:end-column 7, :end-line 3766, :column 4, :line 3766, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3766, :column 5, :line 3766, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3767, :column 4, :line 3767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3767, :column 5, :line 3767, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 17, :end-line 3762, :column 7, :line 3762, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3766, :column 5, :line 3766, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3767, :column 5, :line 3767, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3766, :column 4, :line 3766, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3766, :column 5, :line 3766, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3767, :column 4, :line 3767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3767, :column 5, :line 3767, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3767, :column 7, :line 3767, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 17, :end-line 3762, :column 7, :line 3762, :file "cljs/core.cljs"} repeatedly, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} keys ^{:end-column 13, :end-line 7512, :column 9, :line 7512, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 13, :end-line 7510, :column 7, :line 7510, :file "cljs/core.cljs"} zipmap ^{:arglists (^{:end-column 14, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} keys ^{:end-column 13, :end-line 7512, :column 9, :line 7512, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 13, :end-line 7510, :column 7, :line 7510, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 8, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} keys ^{:end-column 13, :end-line 7512, :column 9, :line 7512, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7512, :column 3, :line 7512, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7512, :column 4, :line 7512, :file "cljs/core.cljs"} keys ^{:end-column 13, :end-line 7512, :column 9, :line 7512, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 13, :end-line 7510, :column 7, :line 7510, :file "cljs/core.cljs"} zipmap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} IStack ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentQueue cljs.core/Subvec cljs.core/PersistentVector cljs.core/EmptyList cljs.core/List), :protocol-info {:methods {^{:end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 290, :column 5, :line 290, :file "cljs/core.cljs"} clj, :end-column 13, :end-line 290, :column 9, :line 290, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 290, :column 15, :line 290, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 288, :column 14, :line 288, :file "cljs/core.cljs"} IStack, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch ^{:arglists (^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3851, :column 4, :line 3851, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3851, :column 5, :line 3851, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3852, :column 10, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3847, :column 7, :line 3847, :file "cljs/core.cljs"} remove ^{:arglists (^{:end-column 10, :end-line 3851, :column 4, :line 3851, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3851, :column 5, :line 3851, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3852, :column 10, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3847, :column 7, :line 3847, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 3851, :column 5, :line 3851, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 9, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3852, :column 10, :line 3852, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3851, :column 4, :line 3851, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3851, :column 5, :line 3851, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3852, :column 10, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3847, :column 7, :line 3847, :file "cljs/core.cljs"} remove, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} ->BitmapIndexedNode ^{:arglists ([^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} {:arglists (^cljs.core/BitmapIndexedNode [^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} ->BitmapIndexedNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} * ^{:arglists (^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1789, :column 4, :line 1789, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1787, :column 8, :line 1787, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1787, :column 15, :line 1787, :file "cljs/core.cljs"} *, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7936, :column 3, :line 7936, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7936, :column 4, :line 7936, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 17, :end-line 7934, :column 7, :line 7934, :file "cljs/core.cljs"} re-pattern ^{:arglists (^{:end-column 6, :end-line 7936, :column 3, :line 7936, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7936, :column 4, :line 7936, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 17, :end-line 7934, :column 7, :line 7934, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 7936, :column 4, :line 7936, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7936, :column 3, :line 7936, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7936, :column 4, :line 7936, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 17, :end-line 7934, :column 7, :line 7934, :file "cljs/core.cljs"} re-pattern, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1865, :column 7, :line 1865, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1866, :column 9, :line 1866, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1866, :column 11, :line 1866, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 14, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} min ^{:arglists (^{:end-column 7, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1865, :column 7, :line 1865, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1866, :column 9, :line 1866, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1866, :column 11, :line 1866, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 14, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1865, :column 7, :line 1865, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1866, :column 11, :line 1866, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1864, :column 5, :line 1864, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1865, :column 7, :line 1865, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1866, :column 9, :line 1866, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1866, :column 11, :line 1866, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 14, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} min, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 5043, :column 32, :line 5043, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5043, :column 33, :line 5043, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5043, :column 37, :line 5043, :file "cljs/core.cljs"} m ^{:end-column 40, :end-line 5043, :column 39, :line 5043, :file "cljs/core.cljs"} k]), :private true, :end-column 31, :end-line 5043, :column 8, :line 5043, :file "cljs/core.cljs"} array-map-index-of-nil? ^{:arglists (^{:end-column 41, :end-line 5043, :column 32, :line 5043, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5043, :column 33, :line 5043, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5043, :column 37, :line 5043, :file "cljs/core.cljs"} m ^{:end-column 40, :end-line 5043, :column 39, :line 5043, :file "cljs/core.cljs"} k]), :private true, :end-column 31, :end-line 5043, :column 8, :line 5043, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 5043, :column 33, :line 5043, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5043, :column 37, :line 5043, :file "cljs/core.cljs"} m ^{:end-column 40, :end-line 5043, :column 39, :line 5043, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 5043, :column 32, :line 5043, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5043, :column 33, :line 5043, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5043, :column 37, :line 5043, :file "cljs/core.cljs"} m ^{:end-column 40, :end-line 5043, :column 39, :line 5043, :file "cljs/core.cljs"} k]), :private true, :end-column 31, :end-line 5043, :column 8, :line 5043, :file "cljs/core.cljs"} array-map-index-of-nil?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent! ^{:arglists (^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth ^{:arglists (^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 258, :column 9, :line 258, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 258, :column 10, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 16, :end-line 258, :column 15, :line 258, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 258, :column 18, :line 258, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 258, :column 19, :line 258, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 258, :column 24, :line 258, :file "cljs/core.cljs"} n ^{:end-column 35, :end-line 258, :column 26, :line 258, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 8, :end-line 258, :column 4, :line 258, :file "cljs/core.cljs"} -nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2884, :column 3, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 11, :end-line 2881, :column 7, :line 2881, :file "cljs/core.cljs"} pop! ^{:arglists (^{:end-column 10, :end-line 2884, :column 3, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 11, :end-line 2881, :column 7, :line 2881, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2884, :column 3, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 11, :end-line 2881, :column 7, :line 2881, :file "cljs/core.cljs"} pop!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2660, :column 20, :line 2660, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2660, :column 21, :line 2660, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 2660, :column 23, :line 2660, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2660, :column 7, :line 2660, :file "cljs/core.cljs"} chunk-append ^{:arglists (^{:end-column 25, :end-line 2660, :column 20, :line 2660, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2660, :column 21, :line 2660, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 2660, :column 23, :line 2660, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2660, :column 7, :line 2660, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 2660, :column 21, :line 2660, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 2660, :column 23, :line 2660, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2660, :column 20, :line 2660, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2660, :column 21, :line 2660, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 2660, :column 23, :line 2660, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2660, :column 7, :line 2660, :file "cljs/core.cljs"} chunk-append, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8112, :column 3, :line 8112, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8112, :column 4, :line 8112, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8112, :column 6, :line 8112, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 14, :end-line 8110, :column 7, :line 8110, :file "cljs/core.cljs"} prn-str ^{:arglists (^{:end-column 11, :end-line 8112, :column 3, :line 8112, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8112, :column 4, :line 8112, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8112, :column 6, :line 8112, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 14, :end-line 8110, :column 7, :line 8110, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 8112, :column 6, :line 8112, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8112, :column 3, :line 8112, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8112, :column 4, :line 8112, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8112, :column 6, :line 8112, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 14, :end-line 8110, :column 7, :line 8110, :file "cljs/core.cljs"} prn-str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 331, :column 14, :line 331, :file "cljs/core.cljs"} IReversible ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap cljs.core/Subvec cljs.core/PersistentVector cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 331, :column 14, :line 331, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 331, :column 14, :line 331, :file "cljs/core.cljs"} IReversible, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 2322, :column 28, :line 2322, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2322, :column 29, :line 2322, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 15, :end-line 2322, :column 8, :line 2322, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2322, :column 16, :line 2322, :file "cljs/core.cljs"} reversible? ^{:arglists (^{:end-column 34, :end-line 2322, :column 28, :line 2322, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2322, :column 29, :line 2322, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 15, :end-line 2322, :column 8, :line 2322, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2322, :column 16, :line 2322, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 33, :end-line 2322, :column 29, :line 2322, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 2322, :column 28, :line 2322, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2322, :column 29, :line 2322, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 15, :end-line 2322, :column 8, :line 2322, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 2322, :column 16, :line 2322, :file "cljs/core.cljs"} reversible?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized? ^{:arglists (^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch ^{:arglists (^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout ^{:arglists (^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1110, :column 4, :line 1110, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 5, :line 1111, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1112, :column 4, :line 1112, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1112, :column 5, :line 1112, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1112, :column 10, :line 1112, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1116, :column 4, :line 1116, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1116, :column 5, :line 1116, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1116, :column 10, :line 1116, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 1116, :column 12, :line 1116, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1116, :column 14, :line 1116, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 11, :end-line 1106, :column 7, :line 1106, :file "cljs/core.cljs"} conj ^{:arglists (^{:end-column 6, :end-line 1110, :column 4, :line 1110, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 5, :line 1111, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1112, :column 4, :line 1112, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1112, :column 5, :line 1112, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1112, :column 10, :line 1112, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1116, :column 4, :line 1116, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1116, :column 5, :line 1116, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1116, :column 10, :line 1116, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 1116, :column 12, :line 1116, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1116, :column 14, :line 1116, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 11, :end-line 1106, :column 7, :line 1106, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [] [^{:end-column 9, :end-line 1111, :column 5, :line 1111, :file "cljs/core.cljs"} coll] ^^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 1112, :column 5, :line 1112, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1112, :column 10, :line 1112, :file "cljs/core.cljs"} x] [^{:end-column 9, :end-line 1116, :column 5, :line 1116, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1116, :column 10, :line 1116, :file "cljs/core.cljs"} x & ^{:end-column 16, :end-line 1116, :column 14, :line 1116, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1110, :column 4, :line 1110, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1111, :column 4, :line 1111, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1111, :column 5, :line 1111, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1112, :column 4, :line 1112, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1112, :column 5, :line 1112, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1112, :column 10, :line 1112, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1116, :column 4, :line 1116, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1116, :column 5, :line 1116, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1116, :column 10, :line 1116, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 1116, :column 12, :line 1116, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1116, :column 14, :line 1116, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 11, :end-line 1106, :column 7, :line 1106, :file "cljs/core.cljs"} conj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq ^{:arglists (^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3797, :column 3, :line 3797, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3797, :column 4, :line 3797, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 16, :end-line 3794, :column 8, :line 3794, :file "cljs/core.cljs"} flatten1 ^{:arglists (^{:end-column 10, :end-line 3797, :column 3, :line 3797, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3797, :column 4, :line 3797, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 16, :end-line 3794, :column 8, :line 3794, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3797, :column 4, :line 3797, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3797, :column 3, :line 3797, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3797, :column 4, :line 3797, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 16, :end-line 3794, :column 8, :line 3794, :file "cljs/core.cljs"} flatten1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1763, :column 11, :line 1763, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1763, :column 13, :line 1763, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1764, :column 11, :line 1764, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1764, :column 13, :line 1764, :file "cljs/core.cljs"} init ^{:end-column 22, :end-line 1764, :column 18, :line 1764, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 16, :end-line 1754, :column 7, :line 1754, :file "cljs/core.cljs"} transduce ^{:arglists (^{:end-column 18, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1763, :column 11, :line 1763, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1763, :column 13, :line 1763, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1764, :column 11, :line 1764, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1764, :column 13, :line 1764, :file "cljs/core.cljs"} init ^{:end-column 22, :end-line 1764, :column 18, :line 1764, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 16, :end-line 1754, :column 7, :line 1754, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1763, :column 11, :line 1763, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1763, :column 13, :line 1763, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1764, :column 11, :line 1764, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1764, :column 13, :line 1764, :file "cljs/core.cljs"} init ^{:end-column 22, :end-line 1764, :column 18, :line 1764, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1763, :column 11, :line 1763, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1763, :column 13, :line 1763, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} xform ^{:end-column 12, :end-line 1764, :column 11, :line 1764, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 1764, :column 13, :line 1764, :file "cljs/core.cljs"} init ^{:end-column 22, :end-line 1764, :column 18, :line 1764, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 16, :end-line 1754, :column 7, :line 1754, :file "cljs/core.cljs"} transduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8340, :column 1, :line 8340, :file "cljs/core.cljs"} fixture1 ^{:end-column 17, :end-line 8340, :column 1, :line 8340, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8340, :column 1, :line 8340, :file "cljs/core.cljs"} fixture1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap! ^{:arglists (^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length* ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} {:op :var, :name ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 1484, :column 17, :line 1484, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1484, :column 18, :line 1484, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 1484, :column 22, :line 1484, :file "cljs/core.cljs"} key]), :end-column 16, :end-line 1484, :column 7, :line 1484, :file "cljs/core.cljs"} js-delete ^{:arglists (^{:end-column 26, :end-line 1484, :column 17, :line 1484, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1484, :column 18, :line 1484, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 1484, :column 22, :line 1484, :file "cljs/core.cljs"} key]), :end-column 16, :end-line 1484, :column 7, :line 1484, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 1484, :column 18, :line 1484, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 1484, :column 22, :line 1484, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 1484, :column 17, :line 1484, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1484, :column 18, :line 1484, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 1484, :column 22, :line 1484, :file "cljs/core.cljs"} key]), :end-column 16, :end-line 1484, :column 7, :line 1484, :file "cljs/core.cljs"} js-delete, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 13, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_ ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 13, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 13, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} ->MultiFn ^{:arglists ([^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} {:arglists (^cljs.core/MultiFn [^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} ->MultiFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8452, :column 15, :line 8452, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8452, :column 16, :line 8452, :file "cljs/core.cljs"} k]), :end-column 14, :end-line 8452, :column 7, :line 8452, :file "cljs/core.cljs"} key->js ^{:arglists (^{:end-column 18, :end-line 8452, :column 15, :line 8452, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8452, :column 16, :line 8452, :file "cljs/core.cljs"} k]), :end-column 14, :end-line 8452, :column 7, :line 8452, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8452, :column 16, :line 8452, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8452, :column 15, :line 8452, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8452, :column 16, :line 8452, :file "cljs/core.cljs"} k]), :end-column 14, :end-line 8452, :column 7, :line 8452, :file "cljs/core.cljs"} key->js, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} ->MultiStepper ^{:arglists ([^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} {:arglists (^cljs.core/MultiStepper [^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} ->MultiStepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]], ^{:end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 23, :end-line 8445, :column 14, :line 8445, :file "cljs/core.cljs"} IEncodeJS ^{:protocol-info {:methods {^{:end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]], ^{:end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 23, :end-line 8445, :column 14, :line 8445, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]], ^{:end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 23, :end-line 8445, :column 14, :line 8445, :file "cljs/core.cljs"} IEncodeJS, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4034, :column 17, :line 4034, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4034, :column 18, :line 4034, :file "cljs/core.cljs"} edit ^{:end-column 28, :end-line 4034, :column 23, :line 4034, :file "cljs/core.cljs"} level ^{:end-column 33, :end-line 4034, :column 29, :line 4034, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4034, :column 8, :line 4034, :file "cljs/core.cljs"} new-path ^{:arglists (^{:end-column 34, :end-line 4034, :column 17, :line 4034, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4034, :column 18, :line 4034, :file "cljs/core.cljs"} edit ^{:end-column 28, :end-line 4034, :column 23, :line 4034, :file "cljs/core.cljs"} level ^{:end-column 33, :end-line 4034, :column 29, :line 4034, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4034, :column 8, :line 4034, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 4034, :column 18, :line 4034, :file "cljs/core.cljs"} edit ^{:end-column 28, :end-line 4034, :column 23, :line 4034, :file "cljs/core.cljs"} level ^{:end-column 33, :end-line 4034, :column 29, :line 4034, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4034, :column 17, :line 4034, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4034, :column 18, :line 4034, :file "cljs/core.cljs"} edit ^{:end-column 28, :end-line 4034, :column 23, :line 4034, :file "cljs/core.cljs"} level ^{:end-column 33, :end-line 4034, :column 29, :line 4034, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4034, :column 8, :line 4034, :file "cljs/core.cljs"} new-path, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 3474, :column 3, :line 3474, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3474, :column 4, :line 3474, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 3474, :column 6, :line 3474, :file "cljs/core.cljs"} oldval ^{:end-column 19, :end-line 3474, :column 13, :line 3474, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 23, :end-line 3470, :column 7, :line 3470, :file "cljs/core.cljs"} compare-and-set! ^{:arglists (^{:end-column 20, :end-line 3474, :column 3, :line 3474, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3474, :column 4, :line 3474, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 3474, :column 6, :line 3474, :file "cljs/core.cljs"} oldval ^{:end-column 19, :end-line 3474, :column 13, :line 3474, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 23, :end-line 3470, :column 7, :line 3470, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 3474, :column 4, :line 3474, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 3474, :column 6, :line 3474, :file "cljs/core.cljs"} oldval ^{:end-column 19, :end-line 3474, :column 13, :line 3474, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 3474, :column 3, :line 3474, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3474, :column 4, :line 3474, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 3474, :column 6, :line 3474, :file "cljs/core.cljs"} oldval ^{:end-column 19, :end-line 3474, :column 13, :line 3474, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 23, :end-line 3470, :column 7, :line 3470, :file "cljs/core.cljs"} compare-and-set!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 623, :column 10, :line 623, :file "cljs/core.cljs"} array-seq ^{:arglists (^{:end-column 11, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1007, :column 5, :line 1007, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 1009, :column 4, :line 1009, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1009, :column 5, :line 1009, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 1009, :column 11, :line 1009, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 1006, :column 7, :line 1006, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1007, :column 5, :line 1007, :file "cljs/core.cljs"} array] [^{:end-column 10, :end-line 1009, :column 5, :line 1009, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 1009, :column 11, :line 1009, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1007, :column 4, :line 1007, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1007, :column 5, :line 1007, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 1009, :column 4, :line 1009, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1009, :column 5, :line 1009, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 1009, :column 11, :line 1009, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 1006, :column 7, :line 1006, :file "cljs/core.cljs"} array-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1496, :column 4, :line 1496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1496, :column 5, :line 1496, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1496, :column 10, :line 1496, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1496, :column 12, :line 1496, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1496, :column 15, :line 1496, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1496, :column 17, :line 1496, :file "cljs/core.cljs"} len]), :private true, :end-column 27, :end-line 1495, :column 8, :line 1495, :file "cljs/core.cljs"} array-copy-downward ^{:arglists (^{:end-column 21, :end-line 1496, :column 4, :line 1496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1496, :column 5, :line 1496, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1496, :column 10, :line 1496, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1496, :column 12, :line 1496, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1496, :column 15, :line 1496, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1496, :column 17, :line 1496, :file "cljs/core.cljs"} len]), :private true, :end-column 27, :end-line 1495, :column 8, :line 1495, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1496, :column 5, :line 1496, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1496, :column 10, :line 1496, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1496, :column 12, :line 1496, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1496, :column 15, :line 1496, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1496, :column 17, :line 1496, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1496, :column 4, :line 1496, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1496, :column 5, :line 1496, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1496, :column 10, :line 1496, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1496, :column 12, :line 1496, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1496, :column 15, :line 1496, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1496, :column 17, :line 1496, :file "cljs/core.cljs"} len]), :private true, :end-column 27, :end-line 1495, :column 8, :line 1495, :file "cljs/core.cljs"} array-copy-downward, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5708, :column 24, :line 5708, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5708, :column 25, :line 5708, :file "cljs/core.cljs"} array-node ^{:end-column 40, :end-line 5708, :column 36, :line 5708, :file "cljs/core.cljs"} edit ^{:end-column 44, :end-line 5708, :column 41, :line 5708, :file "cljs/core.cljs"} idx]), :private true, :end-column 23, :end-line 5708, :column 8, :line 5708, :file "cljs/core.cljs"} pack-array-node ^{:arglists (^{:end-column 45, :end-line 5708, :column 24, :line 5708, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5708, :column 25, :line 5708, :file "cljs/core.cljs"} array-node ^{:end-column 40, :end-line 5708, :column 36, :line 5708, :file "cljs/core.cljs"} edit ^{:end-column 44, :end-line 5708, :column 41, :line 5708, :file "cljs/core.cljs"} idx]), :private true, :end-column 23, :end-line 5708, :column 8, :line 5708, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 5708, :column 25, :line 5708, :file "cljs/core.cljs"} array-node ^{:end-column 40, :end-line 5708, :column 36, :line 5708, :file "cljs/core.cljs"} edit ^{:end-column 44, :end-line 5708, :column 41, :line 5708, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5708, :column 24, :line 5708, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5708, :column 25, :line 5708, :file "cljs/core.cljs"} array-node ^{:end-column 40, :end-line 5708, :column 36, :line 5708, :file "cljs/core.cljs"} edit ^{:end-column 44, :end-line 5708, :column 41, :line 5708, :file "cljs/core.cljs"} idx]), :private true, :end-column 23, :end-line 5708, :column 8, :line 5708, :file "cljs/core.cljs"} pack-array-node, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3782, :column 4, :line 3782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3782, :column 5, :line 3782, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3782, :column 8, :line 3782, :file "cljs/core.cljs"} c2 ^{:end-column 12, :end-line 3782, :column 11, :line 3782, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3782, :column 13, :line 3782, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 17, :end-line 3774, :column 7, :line 3774, :file "cljs/core.cljs"} interleave ^{:arglists (^{:end-column 11, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3782, :column 4, :line 3782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3782, :column 5, :line 3782, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3782, :column 8, :line 3782, :file "cljs/core.cljs"} c2 ^{:end-column 12, :end-line 3782, :column 11, :line 3782, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3782, :column 13, :line 3782, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 17, :end-line 3774, :column 7, :line 3774, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3782, :column 5, :line 3782, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3782, :column 8, :line 3782, :file "cljs/core.cljs"} c2 & ^{:end-column 18, :end-line 3782, :column 13, :line 3782, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3776, :column 4, :line 3776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3776, :column 5, :line 3776, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3776, :column 8, :line 3776, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3782, :column 4, :line 3782, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3782, :column 5, :line 3782, :file "cljs/core.cljs"} c1 ^{:end-column 10, :end-line 3782, :column 8, :line 3782, :file "cljs/core.cljs"} c2 ^{:end-column 12, :end-line 3782, :column 11, :line 3782, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3782, :column 13, :line 3782, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 17, :end-line 3774, :column 7, :line 3774, :file "cljs/core.cljs"} interleave, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 7991, :column 10, :line 7991, :file "cljs/core.cljs"} print-map ^{:arglists (^{:end-column 42, :end-line 8154, :column 17, :line 8154, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8154, :column 18, :line 8154, :file "cljs/core.cljs"} m ^{:end-column 29, :end-line 8154, :column 20, :line 8154, :file "cljs/core.cljs"} print-one ^{:end-column 36, :end-line 8154, :column 30, :line 8154, :file "cljs/core.cljs"} writer ^{:end-column 41, :end-line 8154, :column 37, :line 8154, :file "cljs/core.cljs"} opts]), :end-column 16, :end-line 8154, :column 7, :line 8154, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 8154, :column 18, :line 8154, :file "cljs/core.cljs"} m ^{:end-column 29, :end-line 8154, :column 20, :line 8154, :file "cljs/core.cljs"} print-one ^{:end-column 36, :end-line 8154, :column 30, :line 8154, :file "cljs/core.cljs"} writer ^{:end-column 41, :end-line 8154, :column 37, :line 8154, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8154, :column 17, :line 8154, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8154, :column 18, :line 8154, :file "cljs/core.cljs"} m ^{:end-column 29, :end-line 8154, :column 20, :line 8154, :file "cljs/core.cljs"} print-one ^{:end-column 36, :end-line 8154, :column 30, :line 8154, :file "cljs/core.cljs"} writer ^{:end-column 41, :end-line 8154, :column 37, :line 8154, :file "cljs/core.cljs"} opts]), :end-column 16, :end-line 8154, :column 7, :line 8154, :file "cljs/core.cljs"} print-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1458, :column 3, :line 1458, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1458, :column 4, :line 1458, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 15, :end-line 1456, :column 8, :line 1456, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1456, :column 16, :line 1456, :file "cljs/core.cljs"} map? ^{:arglists (^{:end-column 6, :end-line 1458, :column 3, :line 1458, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1458, :column 4, :line 1458, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 15, :end-line 1456, :column 8, :line 1456, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1456, :column 16, :line 1456, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1458, :column 4, :line 1458, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1458, :column 3, :line 1458, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1458, :column 4, :line 1458, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 15, :end-line 1456, :column 8, :line 1456, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1456, :column 16, :line 1456, :file "cljs/core.cljs"} map?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 449, :column 1, :line 449, :file "cljs/core.cljs"} m3-C1 ^{:end-column 23, :end-line 449, :column 1, :line 449, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 449, :column 1, :line 449, :file "cljs/core.cljs"} m3-C1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1248, :column 4, :line 1248, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1248, :column 5, :line 1248, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1248, :column 7, :line 1248, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1266, :column 4, :line 1266, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1266, :column 5, :line 1266, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1266, :column 7, :line 1266, :file "cljs/core.cljs"} k ^{:end-column 18, :end-line 1266, :column 9, :line 1266, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 10, :end-line 1246, :column 7, :line 1246, :file "cljs/core.cljs"} get ^{:arglists (^{:end-column 9, :end-line 1248, :column 4, :line 1248, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1248, :column 5, :line 1248, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1248, :column 7, :line 1248, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1266, :column 4, :line 1266, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1266, :column 5, :line 1266, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1266, :column 7, :line 1266, :file "cljs/core.cljs"} k ^{:end-column 18, :end-line 1266, :column 9, :line 1266, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 10, :end-line 1246, :column 7, :line 1246, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1248, :column 5, :line 1248, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1248, :column 7, :line 1248, :file "cljs/core.cljs"} k] [^{:end-column 6, :end-line 1266, :column 5, :line 1266, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1266, :column 7, :line 1266, :file "cljs/core.cljs"} k ^{:end-column 18, :end-line 1266, :column 9, :line 1266, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1248, :column 4, :line 1248, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1248, :column 5, :line 1248, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1248, :column 7, :line 1248, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1266, :column 4, :line 1266, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1266, :column 5, :line 1266, :file "cljs/core.cljs"} o ^{:end-column 8, :end-line 1266, :column 7, :line 1266, :file "cljs/core.cljs"} k ^{:end-column 18, :end-line 1266, :column 9, :line 1266, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 10, :end-line 1246, :column 7, :line 1246, :file "cljs/core.cljs"} get, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1744, :column 16, :line 1744, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1744, :column 17, :line 1744, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1744, :column 7, :line 1744, :file "cljs/core.cljs"} identity ^{:arglists (^{:end-column 19, :end-line 1744, :column 16, :line 1744, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1744, :column 17, :line 1744, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1744, :column 7, :line 1744, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1744, :column 17, :line 1744, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1744, :column 16, :line 1744, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1744, :column 17, :line 1744, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1744, :column 7, :line 1744, :file "cljs/core.cljs"} identity, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3881, :column 4, :line 3881, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3881, :column 5, :line 3881, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3881, :column 8, :line 3881, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3887, :column 4, :line 3887, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3887, :column 5, :line 3887, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3887, :column 8, :line 3887, :file "cljs/core.cljs"} xform ^{:end-column 18, :end-line 3887, :column 14, :line 3887, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 11, :end-line 3878, :column 7, :line 3878, :file "cljs/core.cljs"} into ^{:arglists (^{:end-column 13, :end-line 3881, :column 4, :line 3881, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3881, :column 5, :line 3881, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3881, :column 8, :line 3881, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3887, :column 4, :line 3887, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3887, :column 5, :line 3887, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3887, :column 8, :line 3887, :file "cljs/core.cljs"} xform ^{:end-column 18, :end-line 3887, :column 14, :line 3887, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 11, :end-line 3878, :column 7, :line 3878, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3881, :column 5, :line 3881, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3881, :column 8, :line 3881, :file "cljs/core.cljs"} from] [^{:end-column 7, :end-line 3887, :column 5, :line 3887, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3887, :column 8, :line 3887, :file "cljs/core.cljs"} xform ^{:end-column 18, :end-line 3887, :column 14, :line 3887, :file "cljs/core.cljs"} from]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3881, :column 4, :line 3881, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3881, :column 5, :line 3881, :file "cljs/core.cljs"} to ^{:end-column 12, :end-line 3881, :column 8, :line 3881, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3887, :column 4, :line 3887, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3887, :column 5, :line 3887, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3887, :column 8, :line 3887, :file "cljs/core.cljs"} xform ^{:end-column 18, :end-line 3887, :column 14, :line 3887, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 11, :end-line 3878, :column 7, :line 3878, :file "cljs/core.cljs"} into, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1978, :column 3, :line 1978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1978, :column 4, :line 1978, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 11, :end-line 1976, :column 7, :line 1976, :file "cljs/core.cljs"} long ^{:arglists (^{:end-column 6, :end-line 1978, :column 3, :line 1978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1978, :column 4, :line 1978, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 11, :end-line 1976, :column 7, :line 1976, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number [^{:end-column 5, :end-line 1978, :column 4, :line 1978, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1978, :column 3, :line 1978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1978, :column 4, :line 1978, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 11, :end-line 1976, :column 7, :line 1976, :file "cljs/core.cljs"} long, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1881, :column 22, :line 1881, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1881, :column 23, :line 1881, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1881, :column 8, :line 1881, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1881, :column 15, :line 1881, :file "cljs/core.cljs"} double ^{:arglists (^{:end-column 25, :end-line 1881, :column 22, :line 1881, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1881, :column 23, :line 1881, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1881, :column 8, :line 1881, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1881, :column 15, :line 1881, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1881, :column 23, :line 1881, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1881, :column 22, :line 1881, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1881, :column 23, :line 1881, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1881, :column 8, :line 1881, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1881, :column 15, :line 1881, :file "cljs/core.cljs"} double, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} ChunkBuffer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} ChunkBuffer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 2542, :column 22, :line 2542, :file "cljs/core.cljs"} [^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end], :protocols #{Object cljs.core/ICounted}}, ^{:arglists (^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key ^{:arglists (^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 282, :column 10, :line 282, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 282, :column 4, :line 282, :file "cljs/core.cljs"} -key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1081, :column 3, :line 1081, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1081, :column 4, :line 1081, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 13, :end-line 1079, :column 7, :line 1079, :file "cljs/core.cljs"} nfirst ^{:arglists (^{:end-column 9, :end-line 1081, :column 3, :line 1081, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1081, :column 4, :line 1081, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 13, :end-line 1079, :column 7, :line 1079, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq [^{:end-column 8, :end-line 1081, :column 4, :line 1081, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1081, :column 3, :line 1081, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1081, :column 4, :line 1081, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 13, :end-line 1079, :column 7, :line 1079, :file "cljs/core.cljs"} nfirst, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} StringBufferWriter {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} StringBufferWriter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 410, :column 29, :line 410, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb], :protocols #{cljs.core/IWriter}}, ^{:arglists (^{:end-column 6, :end-line 1386, :column 3, :line 1386, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1386, :column 4, :line 1386, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 11, :end-line 1384, :column 7, :line 1384, :file "cljs/core.cljs"} meta ^{:arglists (^{:end-column 6, :end-line 1386, :column 3, :line 1386, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1386, :column 4, :line 1386, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 11, :end-line 1384, :column 7, :line 1384, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1386, :column 4, :line 1386, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1386, :column 3, :line 1386, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1386, :column 4, :line 1386, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 11, :end-line 1384, :column 7, :line 1384, :file "cljs/core.cljs"} meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 43, :end-line 4130, :column 27, :line 4130, :file "cljs/core.cljs"} tv-editable-tail ^{:arglists (^{:end-column 29, :end-line 4558, :column 25, :line 4558, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4558, :column 26, :line 4558, :file "cljs/core.cljs"} tl]), :private true, :end-column 24, :end-line 4558, :column 8, :line 4558, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 28, :end-line 4558, :column 26, :line 4558, :file "cljs/core.cljs"} tl]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 4558, :column 25, :line 4558, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 4558, :column 26, :line 4558, :file "cljs/core.cljs"} tl]), :private true, :end-column 24, :end-line 4558, :column 8, :line 4558, :file "cljs/core.cljs"} tv-editable-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce ^{:arglists (^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 311, :column 15, :line 311, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 311, :column 16, :line 311, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 311, :column 21, :line 311, :file "cljs/core.cljs"} f ^{:end-column 27, :end-line 311, :column 23, :line 311, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 14, :end-line 311, :column 4, :line 311, :file "cljs/core.cljs"} -kv-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} IHash ^{:impls (cljs.core/UUID cljs.core/MultiFn cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Keyword cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq ^{:end-column 21, :end-line 804, :column 14, :line 804, :file "cljs/core.cljs"} default cljs.core/Symbol), :protocol-info {:methods {^{:end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 19, :end-line 316, :column 14, :line 316, :file "cljs/core.cljs"} IHash, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2040, :column 3, :line 2040, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2040, :column 4, :line 2040, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2040, :column 6, :line 2040, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 18, :end-line 2038, :column 7, :line 2038, :file "cljs/core.cljs"} bit-and-not ^{:arglists (^{:end-column 8, :end-line 2040, :column 3, :line 2040, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2040, :column 4, :line 2040, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2040, :column 6, :line 2040, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 18, :end-line 2038, :column 7, :line 2038, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2040, :column 4, :line 2040, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2040, :column 6, :line 2040, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2040, :column 3, :line 2040, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2040, :column 4, :line 2040, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2040, :column 6, :line 2040, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 18, :end-line 2038, :column 7, :line 2038, :file "cljs/core.cljs"} bit-and-not, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator ^{:arglists (^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1898, :column 4, :line 1898, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1899, :column 4, :line 1899, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1899, :column 5, :line 1899, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1900, :column 4, :line 1900, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1900, :column 5, :line 1900, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 5, :line 1901, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1901, :column 9, :line 1901, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1901, :column 11, :line 1901, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1896, :column 15, :line 1896, :file "cljs/core.cljs"} unchecked-add-int ^{:arglists (^{:end-column 6, :end-line 1898, :column 4, :line 1898, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1899, :column 4, :line 1899, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1899, :column 5, :line 1899, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1900, :column 4, :line 1900, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1900, :column 5, :line 1900, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 5, :line 1901, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1901, :column 9, :line 1901, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1901, :column 11, :line 1901, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1896, :column 15, :line 1896, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1899, :column 5, :line 1899, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1900, :column 5, :line 1900, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1901, :column 5, :line 1901, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1901, :column 11, :line 1901, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1898, :column 4, :line 1898, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1899, :column 4, :line 1899, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1899, :column 5, :line 1899, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1900, :column 4, :line 1900, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1900, :column 5, :line 1900, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1900, :column 7, :line 1900, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 5, :line 1901, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1901, :column 7, :line 1901, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1901, :column 9, :line 1901, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1901, :column 11, :line 1901, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1896, :column 8, :line 1896, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1896, :column 15, :line 1896, :file "cljs/core.cljs"} unchecked-add-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 757, :column 3, :line 757, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 757, :column 4, :line 757, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 753, :column 8, :line 753, :file "cljs/core.cljs"} number, :end-column 32, :end-line 753, :column 15, :line 753, :file "cljs/core.cljs"} hash-ordered-coll ^{:arglists (^{:end-column 9, :end-line 757, :column 3, :line 757, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 757, :column 4, :line 757, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 753, :column 8, :line 753, :file "cljs/core.cljs"} number, :end-column 32, :end-line 753, :column 15, :line 753, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 8, :end-line 757, :column 4, :line 757, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 757, :column 3, :line 757, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 757, :column 4, :line 757, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 753, :column 8, :line 753, :file "cljs/core.cljs"} number, :end-column 32, :end-line 753, :column 15, :line 753, :file "cljs/core.cljs"} hash-ordered-coll, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2198, :column 3, :line 2198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2198, :column 4, :line 2198, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 2198, :column 8, :line 2198, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 22, :end-line 2193, :column 8, :line 2193, :file "cljs/core.cljs"} extend-object! ^{:arglists (^{:end-column 15, :end-line 2198, :column 3, :line 2198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2198, :column 4, :line 2198, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 2198, :column 8, :line 2198, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 22, :end-line 2193, :column 8, :line 2193, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2198, :column 4, :line 2198, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 2198, :column 8, :line 2198, :file "cljs/core.cljs"} fn-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2198, :column 3, :line 2198, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2198, :column 4, :line 2198, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 2198, :column 8, :line 2198, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 22, :end-line 2193, :column 8, :line 2193, :file "cljs/core.cljs"} extend-object!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4087, :column 17, :line 4087, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4087, :column 18, :line 4087, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4087, :column 21, :line 4087, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4087, :column 27, :line 4087, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4087, :column 32, :line 4087, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4087, :column 34, :line 4087, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 4087, :column 8, :line 4087, :file "cljs/core.cljs"} do-assoc ^{:arglists (^{:end-column 38, :end-line 4087, :column 17, :line 4087, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4087, :column 18, :line 4087, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4087, :column 21, :line 4087, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4087, :column 27, :line 4087, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4087, :column 32, :line 4087, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4087, :column 34, :line 4087, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 4087, :column 8, :line 4087, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 20, :end-line 4087, :column 18, :line 4087, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4087, :column 21, :line 4087, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4087, :column 27, :line 4087, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4087, :column 32, :line 4087, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4087, :column 34, :line 4087, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4087, :column 17, :line 4087, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4087, :column 18, :line 4087, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4087, :column 21, :line 4087, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4087, :column 27, :line 4087, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4087, :column 32, :line 4087, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4087, :column 34, :line 4087, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 4087, :column 8, :line 4087, :file "cljs/core.cljs"} do-assoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8290, :column 3, :line 8290, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8290, :column 4, :line 8290, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8290, :column 9, :line 8290, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} reset-meta! ^{:arglists (^{:end-column 11, :end-line 8290, :column 3, :line 8290, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8290, :column 4, :line 8290, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8290, :column 9, :line 8290, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8290, :column 4, :line 8290, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8290, :column 9, :line 8290, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8290, :column 3, :line 8290, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8290, :column 4, :line 8290, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8290, :column 9, :line 8290, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 18, :end-line 8288, :column 7, :line 8288, :file "cljs/core.cljs"} reset-meta!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} ->KeySeq ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} {:arglists (^cljs.core/KeySeq [^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} ->KeySeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} IEquiv ^{:impls (cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/NeverEquiv cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Keyword cljs.core/Cons cljs.core/EmptyList cljs.core/List ^{:end-column 21, :end-line 1102, :column 14, :line 1102, :file "cljs/core.cljs"} default cljs.core/RSeq cljs.core/IndexedSeq ^{:end-column 20, :end-line 793, :column 14, :line 793, :file "cljs/core.cljs"} number Date cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 20, :end-line 313, :column 14, :line 313, :file "cljs/core.cljs"} IEquiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6455, :column 27, :line 6455, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6455, :column 28, :line 6455, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 6455, :column 33, :line 6455, :file "cljs/core.cljs"} f ^{:end-column 39, :end-line 6455, :column 35, :line 6455, :file "cljs/core.cljs"} init]), :private true, :end-column 26, :end-line 6455, :column 8, :line 6455, :file "cljs/core.cljs"} tree-map-kv-reduce ^{:arglists (^{:end-column 40, :end-line 6455, :column 27, :line 6455, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6455, :column 28, :line 6455, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 6455, :column 33, :line 6455, :file "cljs/core.cljs"} f ^{:end-column 39, :end-line 6455, :column 35, :line 6455, :file "cljs/core.cljs"} init]), :private true, :end-column 26, :end-line 6455, :column 8, :line 6455, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 6455, :column 28, :line 6455, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 6455, :column 33, :line 6455, :file "cljs/core.cljs"} f ^{:end-column 39, :end-line 6455, :column 35, :line 6455, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6455, :column 27, :line 6455, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6455, :column 28, :line 6455, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 6455, :column 33, :line 6455, :file "cljs/core.cljs"} f ^{:end-column 39, :end-line 6455, :column 35, :line 6455, :file "cljs/core.cljs"} init]), :private true, :end-column 26, :end-line 6455, :column 8, :line 6455, :file "cljs/core.cljs"} tree-map-kv-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3744, :column 3, :line 3744, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3744, :column 4, :line 3744, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 12, :end-line 3742, :column 7, :line 3742, :file "cljs/core.cljs"} cycle ^{:arglists (^{:end-column 9, :end-line 3744, :column 3, :line 3744, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3744, :column 4, :line 3744, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 12, :end-line 3742, :column 7, :line 3742, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3744, :column 4, :line 3744, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3744, :column 3, :line 3744, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3744, :column 4, :line 3744, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 12, :end-line 3742, :column 7, :line 3742, :file "cljs/core.cljs"} cycle, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref ^{:arglists (^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1423, :column 3, :line 1423, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 15, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} empty? ^{:arglists (^{:end-column 9, :end-line 1423, :column 3, :line 1423, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 15, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 8, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1423, :column 3, :line 1423, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1423, :column 4, :line 1423, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 15, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1420, :column 16, :line 1420, :file "cljs/core.cljs"} empty?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1879, :column 21, :line 1879, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1879, :column 22, :line 1879, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1879, :column 8, :line 1879, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1879, :column 15, :line 1879, :file "cljs/core.cljs"} short ^{:arglists (^{:end-column 24, :end-line 1879, :column 21, :line 1879, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1879, :column 22, :line 1879, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1879, :column 8, :line 1879, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1879, :column 15, :line 1879, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1879, :column 22, :line 1879, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1879, :column 21, :line 1879, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1879, :column 22, :line 1879, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1879, :column 8, :line 1879, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1879, :column 15, :line 1879, :file "cljs/core.cljs"} short, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js ^{:arglists (^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8446, :column 13, :line 8446, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8446, :column 14, :line 8446, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8446, :column 4, :line 8446, :file "cljs/core.cljs"} -clj->js, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first ^{:arglists (^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3911, :column 3, :line 3911, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3911, :column 4, :line 3911, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3911, :column 9, :line 3911, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} filterv ^{:arglists (^{:end-column 14, :end-line 3911, :column 3, :line 3911, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3911, :column 4, :line 3911, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3911, :column 9, :line 3911, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 8, :end-line 3911, :column 4, :line 3911, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3911, :column 9, :line 3911, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3911, :column 3, :line 3911, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3911, :column 4, :line 3911, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3911, :column 9, :line 3911, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 14, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} filterv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 4130, :column 10, :line 4130, :file "cljs/core.cljs"} tv-editable-root ^{:arglists (^{:end-column 31, :end-line 4555, :column 25, :line 4555, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4555, :column 26, :line 4555, :file "cljs/core.cljs"} node]), :private true, :end-column 24, :end-line 4555, :column 8, :line 4555, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 30, :end-line 4555, :column 26, :line 4555, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 4555, :column 25, :line 4555, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4555, :column 26, :line 4555, :file "cljs/core.cljs"} node]), :private true, :end-column 24, :end-line 4555, :column 8, :line 4555, :file "cljs/core.cljs"} tv-editable-root, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 523, :column 12, :line 523, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 523, :column 13, :line 523, :file "cljs/core.cljs"} o]), :end-column 11, :end-line 523, :column 7, :line 523, :file "cljs/core.cljs"} hash ^{:arglists (^{:end-column 15, :end-line 523, :column 12, :line 523, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 523, :column 13, :line 523, :file "cljs/core.cljs"} o]), :end-column 11, :end-line 523, :column 7, :line 523, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 523, :column 13, :line 523, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 523, :column 12, :line 523, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 523, :column 13, :line 523, :file "cljs/core.cljs"} o]), :end-column 11, :end-line 523, :column 7, :line 523, :file "cljs/core.cljs"} hash, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2007, :column 3, :line 2007, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2007, :column 4, :line 2007, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2007, :column 6, :line 2007, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 11, :end-line 2005, :column 7, :line 2005, :file "cljs/core.cljs"} quot ^{:arglists (^{:end-column 8, :end-line 2007, :column 3, :line 2007, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2007, :column 4, :line 2007, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2007, :column 6, :line 2007, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 11, :end-line 2005, :column 7, :line 2005, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number [^{:end-column 5, :end-line 2007, :column 4, :line 2007, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2007, :column 6, :line 2007, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2007, :column 3, :line 2007, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2007, :column 4, :line 2007, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2007, :column 6, :line 2007, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 11, :end-line 2005, :column 7, :line 2005, :file "cljs/core.cljs"} quot, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1887, :column 32, :line 1887, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1887, :column 33, :line 1887, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} unchecked-double ^{:arglists (^{:end-column 35, :end-line 1887, :column 32, :line 1887, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1887, :column 33, :line 1887, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1887, :column 33, :line 1887, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1887, :column 32, :line 1887, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1887, :column 33, :line 1887, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} unchecked-double, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 21, :end-line 2591, :column 10, :line 2591, :file "cljs/core.cljs"} ->ChunkedCons ^{:arglists ([^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 21, :end-line 2591, :column 10, :line 2591, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedCons [^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 21, :end-line 2591, :column 10, :line 2591, :file "cljs/core.cljs"} ->ChunkedCons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4123, :column 23, :line 4123, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4123, :column 24, :line 4123, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4123, :column 26, :line 4123, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4123, :column 32, :line 4123, :file "cljs/core.cljs"} end]), :end-column 22, :end-line 4123, :column 7, :line 4123, :file "cljs/core.cljs"} ranged-iterator ^{:arglists (^{:end-column 36, :end-line 4123, :column 23, :line 4123, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4123, :column 24, :line 4123, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4123, :column 26, :line 4123, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4123, :column 32, :line 4123, :file "cljs/core.cljs"} end]), :end-column 22, :end-line 4123, :column 7, :line 4123, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangedIterator [^{:end-column 25, :end-line 4123, :column 24, :line 4123, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4123, :column 26, :line 4123, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4123, :column 32, :line 4123, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4123, :column 23, :line 4123, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4123, :column 24, :line 4123, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4123, :column 26, :line 4123, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4123, :column 32, :line 4123, :file "cljs/core.cljs"} end]), :end-column 22, :end-line 4123, :column 7, :line 4123, :file "cljs/core.cljs"} ranged-iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 30, :end-line 373, :column 14, :line 373, :file "cljs/core.cljs"} ITransientVector ^{:impls (cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 30, :end-line 373, :column 14, :line 373, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 30, :end-line 373, :column 14, :line 373, :file "cljs/core.cljs"} ITransientVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 13, :end-line 2170, :column 10, :line 2170, :file "cljs/core.cljs"} key ^{:arglists (^{:end-column 14, :end-line 7087, :column 3, :line 7087, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7087, :column 4, :line 7087, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 10, :end-line 7085, :column 7, :line 7085, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 7087, :column 4, :line 7087, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7087, :column 3, :line 7087, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7087, :column 4, :line 7087, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 10, :end-line 7085, :column 7, :line 7085, :file "cljs/core.cljs"} key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1993, :column 13, :line 1993, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1993, :column 14, :line 1993, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1993, :column 7, :line 1993, :file "cljs/core.cljs"} longs ^{:arglists (^{:end-column 16, :end-line 1993, :column 13, :line 1993, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1993, :column 14, :line 1993, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1993, :column 7, :line 1993, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1993, :column 14, :line 1993, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1993, :column 13, :line 1993, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1993, :column 14, :line 1993, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1993, :column 7, :line 1993, :file "cljs/core.cljs"} longs, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2972, :column 4, :line 2972, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2972, :column 5, :line 2972, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2974, :column 4, :line 2974, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2974, :column 5, :line 2974, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2974, :column 7, :line 2974, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2974, :column 9, :line 2974, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2974, :column 11, :line 2974, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 15, :end-line 2970, :column 8, :line 2970, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2970, :column 16, :line 2970, :file "cljs/core.cljs"} not= ^{:arglists (^{:end-column 7, :end-line 2972, :column 4, :line 2972, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2972, :column 5, :line 2972, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2974, :column 4, :line 2974, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2974, :column 5, :line 2974, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2974, :column 7, :line 2974, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2974, :column 9, :line 2974, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2974, :column 11, :line 2974, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 15, :end-line 2970, :column 8, :line 2970, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2970, :column 16, :line 2970, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 2972, :column 5, :line 2972, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 6, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} y] ^boolean [^{:end-column 6, :end-line 2974, :column 5, :line 2974, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2974, :column 7, :line 2974, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 2974, :column 11, :line 2974, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2972, :column 4, :line 2972, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2972, :column 5, :line 2972, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2973, :column 4, :line 2973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2973, :column 5, :line 2973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2973, :column 7, :line 2973, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2974, :column 4, :line 2974, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2974, :column 5, :line 2974, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2974, :column 7, :line 2974, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2974, :column 9, :line 2974, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2974, :column 11, :line 2974, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 15, :end-line 2970, :column 8, :line 2970, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 2970, :column 16, :line 2970, :file "cljs/core.cljs"} not=, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string? ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 718, :column 20, :line 718, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 718, :column 21, :line 718, :file "cljs/core.cljs"} coll]), :end-column 19, :end-line 718, :column 7, :line 718, :file "cljs/core.cljs"} es6-iterator ^{:arglists (^{:end-column 26, :end-line 718, :column 20, :line 718, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 718, :column 21, :line 718, :file "cljs/core.cljs"} coll]), :end-column 19, :end-line 718, :column 7, :line 718, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6Iterator [^{:end-column 25, :end-line 718, :column 21, :line 718, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 718, :column 20, :line 718, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 718, :column 21, :line 718, :file "cljs/core.cljs"} coll]), :end-column 19, :end-line 718, :column 7, :line 718, :file "cljs/core.cljs"} es6-iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} Delay {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} Delay, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 8345, :column 16, :line 8345, :file "cljs/core.cljs"} [^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value], :protocols #{cljs.core/IPending cljs.core/IDeref}}, ^{:arglists (^{:end-column 14, :end-line 8080, :column 3, :line 8080, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8080, :column 4, :line 8080, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8080, :column 9, :line 8080, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 23, :end-line 8077, :column 7, :line 8077, :file "cljs/core.cljs"} pr-str-with-opts ^{:arglists (^{:end-column 14, :end-line 8080, :column 3, :line 8080, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8080, :column 4, :line 8080, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8080, :column 9, :line 8080, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 23, :end-line 8077, :column 7, :line 8077, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8080, :column 4, :line 8080, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8080, :column 9, :line 8080, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8080, :column 3, :line 8080, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8080, :column 4, :line 8080, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8080, :column 9, :line 8080, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 23, :end-line 8077, :column 7, :line 8077, :file "cljs/core.cljs"} pr-str-with-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 450, :column 1, :line 450, :file "cljs/core.cljs"} m3-C2 ^{:end-column 23, :end-line 450, :column 1, :line 450, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 450, :column 1, :line 450, :file "cljs/core.cljs"} m3-C2, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 16, :end-line 576, :column 10, :line 576, :file "cljs/core.cljs"} ->Symbol ^{:arglists ([^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 16, :end-line 576, :column 10, :line 576, :file "cljs/core.cljs"} {:arglists (^cljs.core/Symbol [^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 20, :end-line 576, :column 18, :line 576, :file "cljs/core.cljs"} ns ^{:end-column 25, :end-line 576, :column 21, :line 576, :file "cljs/core.cljs"} name ^{:end-column 29, :end-line 576, :column 26, :line 576, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 45, :end-line 576, :column 40, :line 576, :file "cljs/core.cljs"} _hash ^{:end-column 51, :end-line 576, :column 46, :line 576, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 16, :end-line 576, :column 10, :line 576, :file "cljs/core.cljs"} ->Symbol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline* ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1931, :column 4, :line 1931, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1932, :column 5, :line 1932, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1933, :column 4, :line 1933, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1933, :column 5, :line 1933, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1934, :column 4, :line 1934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1934, :column 5, :line 1934, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1934, :column 9, :line 1934, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1934, :column 11, :line 1934, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1929, :column 8, :line 1929, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1929, :column 15, :line 1929, :file "cljs/core.cljs"} unchecked-multiply-int ^{:arglists (^{:end-column 6, :end-line 1931, :column 4, :line 1931, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1932, :column 5, :line 1932, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1933, :column 4, :line 1933, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1933, :column 5, :line 1933, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1934, :column 4, :line 1934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1934, :column 5, :line 1934, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1934, :column 9, :line 1934, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1934, :column 11, :line 1934, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1929, :column 8, :line 1929, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1929, :column 15, :line 1929, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1932, :column 5, :line 1932, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1933, :column 5, :line 1933, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1934, :column 5, :line 1934, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1934, :column 11, :line 1934, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1931, :column 4, :line 1931, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1932, :column 4, :line 1932, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1932, :column 5, :line 1932, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1933, :column 4, :line 1933, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1933, :column 5, :line 1933, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1934, :column 4, :line 1934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1934, :column 5, :line 1934, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1934, :column 7, :line 1934, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1934, :column 9, :line 1934, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1934, :column 11, :line 1934, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1929, :column 8, :line 1929, :file "cljs/core.cljs"} number, :end-column 37, :end-line 1929, :column 15, :line 1929, :file "cljs/core.cljs"} unchecked-multiply-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 37, :end-line 2191, :column 27, :line 2191, :file "cljs/core.cljs"} chunk-rest ^{:arglists (^{:end-column 21, :end-line 2669, :column 18, :line 2669, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2669, :column 19, :line 2669, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2669, :column 7, :line 2669, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 2669, :column 19, :line 2669, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2669, :column 18, :line 2669, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2669, :column 19, :line 2669, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2669, :column 7, :line 2669, :file "cljs/core.cljs"} chunk-rest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8941, :column 2, :line 8941, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8941, :column 3, :line 8941, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 25, :end-line 8939, :column 7, :line 8939, :file "cljs/core.cljs"} remove-all-methods ^{:arglists (^{:end-column 11, :end-line 8941, :column 2, :line 8941, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8941, :column 3, :line 8941, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 25, :end-line 8939, :column 7, :line 8939, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 8941, :column 3, :line 8941, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8941, :column 2, :line 8941, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8941, :column 3, :line 8941, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 25, :end-line 8939, :column 7, :line 8939, :file "cljs/core.cljs"} remove-all-methods, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8539, :column 4, :line 8539, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8539, :column 5, :line 8539, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8544, :column 4, :line 8544, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8544, :column 5, :line 8544, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 8544, :column 7, :line 8544, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8544, :column 9, :line 8544, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 17, :end-line 8531, :column 7, :line 8531, :file "cljs/core.cljs"} trampoline ^{:arglists (^{:end-column 7, :end-line 8539, :column 4, :line 8539, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8539, :column 5, :line 8539, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8544, :column 4, :line 8544, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8544, :column 5, :line 8544, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 8544, :column 7, :line 8544, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8544, :column 9, :line 8544, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 17, :end-line 8531, :column 7, :line 8531, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8539, :column 5, :line 8539, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 8544, :column 5, :line 8544, :file "cljs/core.cljs"} f & ^{:end-column 13, :end-line 8544, :column 9, :line 8544, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8539, :column 4, :line 8539, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8539, :column 5, :line 8539, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8544, :column 4, :line 8544, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8544, :column 5, :line 8544, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 8544, :column 7, :line 8544, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 8544, :column 9, :line 8544, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 17, :end-line 8531, :column 7, :line 8531, :file "cljs/core.cljs"} trampoline, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 15, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 15, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 15, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1 ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 13, :end-line 1680, :column 10, :line 1680, :file "cljs/core.cljs"} vec ^{:arglists (^{:end-column 17, :end-line 4335, :column 11, :line 4335, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4335, :column 12, :line 4335, :file "cljs/core.cljs"} coll]), :end-column 10, :end-line 4335, :column 7, :line 4335, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 16, :end-line 4335, :column 12, :line 4335, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 4335, :column 11, :line 4335, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4335, :column 12, :line 4335, :file "cljs/core.cljs"} coll]), :end-column 10, :end-line 4335, :column 7, :line 4335, :file "cljs/core.cljs"} vec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta* ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} {:op :var, :name ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches ^{:arglists (^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} MultiFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}, :end-column 17, :end-line 8754, :column 10, :line 8754, :file "cljs/core.cljs"} MultiFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 75, :end-line 8755, :column 18, :line 8754, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8754, :column 19, :line 8754, :file "cljs/core.cljs"} name ^{:end-column 35, :end-line 8754, :column 24, :line 8754, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 56, :end-line 8754, :column 36, :line 8754, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 66, :end-line 8754, :column 57, :line 8754, :file "cljs/core.cljs"} hierarchy ^{:end-column 31, :end-line 8755, :column 19, :line 8755, :file "cljs/core.cljs"} method-table ^{:end-column 44, :end-line 8755, :column 32, :line 8755, :file "cljs/core.cljs"} prefer-table ^{:end-column 57, :end-line 8755, :column 45, :line 8755, :file "cljs/core.cljs"} method-cache ^{:end-column 74, :end-line 8755, :column 58, :line 8755, :file "cljs/core.cljs"} cached-hierarchy], :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn cljs.core/INamed}}, ^{:arglists (^{:end-column 6, :end-line 1968, :column 3, :line 1968, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1968, :column 4, :line 1968, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 10, :end-line 1966, :column 7, :line 1966, :file "cljs/core.cljs"} int ^{:arglists (^{:end-column 6, :end-line 1968, :column 3, :line 1968, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1968, :column 4, :line 1968, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 10, :end-line 1966, :column 7, :line 1966, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 1968, :column 4, :line 1968, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1968, :column 3, :line 1968, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1968, :column 4, :line 1968, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 10, :end-line 1966, :column 7, :line 1966, :file "cljs/core.cljs"} int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} ->ValSeq ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} {:arglists (^cljs.core/ValSeq [^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} ->ValSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2019, :column 4, :line 2019, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2020, :column 4, :line 2020, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2020, :column 5, :line 2020, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).", :tag ^{:end-column 14, :end-line 2017, :column 8, :line 2017, :file "cljs/core.cljs"} number, :end-column 19, :end-line 2017, :column 15, :line 2017, :file "cljs/core.cljs"} rand ^{:arglists (^{:end-column 6, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8551, :column 4, :line 8551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8551, :column 5, :line 8551, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 11, :end-line 8547, :column 7, :line 8547, :file "cljs/core.cljs"} {:arglists ([] ^number [^{:end-column 6, :end-line 8551, :column 5, :line 8551, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8551, :column 4, :line 8551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8551, :column 5, :line 8551, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 11, :end-line 8547, :column 7, :line 8547, :file "cljs/core.cljs"} rand, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1071, :column 3, :line 1071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1071, :column 4, :line 1071, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1069, :column 7, :line 1069, :file "cljs/core.cljs"} second ^{:arglists (^{:end-column 9, :end-line 1071, :column 3, :line 1071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1071, :column 4, :line 1071, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1069, :column 7, :line 1069, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1071, :column 4, :line 1071, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1071, :column 3, :line 1071, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1071, :column 4, :line 1071, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1069, :column 7, :line 1069, :file "cljs/core.cljs"} second, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 33, :end-line 360, :column 14, :line 360, :file "cljs/core.cljs"} IEditableCollection ^{:impls (cljs.core/PersistentHashSet cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 33, :end-line 360, :column 14, :line 360, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 361, :column 9, :line 361, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 361, :column 23, :line 361, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 361, :column 24, :line 361, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 33, :end-line 360, :column 14, :line 360, :file "cljs/core.cljs"} IEditableCollection, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 546, :column 20, :line 546, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 546, :column 21, :line 546, :file "cljs/core.cljs"} seed ^{:end-column 30, :end-line 546, :column 26, :line 546, :file "cljs/core.cljs"} hash]), :end-column 19, :end-line 546, :column 7, :line 546, :file "cljs/core.cljs"} hash-combine ^{:arglists (^{:end-column 31, :end-line 546, :column 20, :line 546, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 546, :column 21, :line 546, :file "cljs/core.cljs"} seed ^{:end-column 30, :end-line 546, :column 26, :line 546, :file "cljs/core.cljs"} hash]), :end-column 19, :end-line 546, :column 7, :line 546, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 546, :column 21, :line 546, :file "cljs/core.cljs"} seed ^{:end-column 30, :end-line 546, :column 26, :line 546, :file "cljs/core.cljs"} hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 546, :column 20, :line 546, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 546, :column 21, :line 546, :file "cljs/core.cljs"} seed ^{:end-column 30, :end-line 546, :column 26, :line 546, :file "cljs/core.cljs"} hash]), :end-column 19, :end-line 546, :column 7, :line 546, :file "cljs/core.cljs"} hash-combine, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1830, :column 4, :line 1830, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1830, :column 5, :line 1830, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1831, :column 5, :line 1831, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1831, :column 7, :line 1831, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1832, :column 7, :line 1832, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1832, :column 9, :line 1832, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1832, :column 11, :line 1832, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1827, :column 8, :line 1827, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1827, :column 16, :line 1827, :file "cljs/core.cljs"} > ^{:arglists (^{:end-column 7, :end-line 1830, :column 4, :line 1830, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1830, :column 5, :line 1830, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1831, :column 5, :line 1831, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1831, :column 7, :line 1831, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1832, :column 7, :line 1832, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1832, :column 9, :line 1832, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1832, :column 11, :line 1832, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1827, :column 8, :line 1827, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1827, :column 16, :line 1827, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1830, :column 5, :line 1830, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1831, :column 5, :line 1831, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1831, :column 7, :line 1831, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1832, :column 7, :line 1832, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1832, :column 11, :line 1832, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1830, :column 4, :line 1830, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1830, :column 5, :line 1830, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1831, :column 5, :line 1831, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1831, :column 7, :line 1831, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1832, :column 7, :line 1832, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1832, :column 9, :line 1832, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1832, :column 11, :line 1832, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1827, :column 8, :line 1827, :file "cljs/core.cljs"} boolean, :end-column 17, :end-line 1827, :column 16, :line 1827, :file "cljs/core.cljs"} >, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name ^{:arglists (^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7469, :column 4, :line 7469, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7469, :column 5, :line 7469, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7471, :column 4, :line 7471, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7471, :column 5, :line 7471, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 7471, :column 10, :line 7471, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 14, :end-line 7464, :column 7, :line 7464, :file "cljs/core.cljs"} replace ^{:arglists (^{:end-column 10, :end-line 7469, :column 4, :line 7469, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7469, :column 5, :line 7469, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7471, :column 4, :line 7471, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7471, :column 5, :line 7471, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 7471, :column 10, :line 7471, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 14, :end-line 7464, :column 7, :line 7464, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 7469, :column 5, :line 7469, :file "cljs/core.cljs"} smap] [^{:end-column 9, :end-line 7471, :column 5, :line 7471, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 7471, :column 10, :line 7471, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7469, :column 4, :line 7469, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7469, :column 5, :line 7469, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7471, :column 4, :line 7471, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7471, :column 5, :line 7471, :file "cljs/core.cljs"} smap ^{:end-column 14, :end-line 7471, :column 10, :line 7471, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 14, :end-line 7464, :column 7, :line 7464, :file "cljs/core.cljs"} replace, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} ->Subvec ^{:arglists ([^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} ->Subvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 15, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} associative? ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 15, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 15, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} associative?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 20, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} unchecked-int ^{:arglists (^{:end-column 6, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 20, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number [^{:end-column 5, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 20, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} unchecked-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 1479, :column 15, :line 1479, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1479, :column 16, :line 1479, :file "cljs/core.cljs"} obj]), :end-column 14, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} js-keys ^{:arglists (^{:end-column 20, :end-line 1479, :column 15, :line 1479, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1479, :column 16, :line 1479, :file "cljs/core.cljs"} obj]), :end-column 14, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 19, :end-line 1479, :column 16, :line 1479, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 1479, :column 15, :line 1479, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1479, :column 16, :line 1479, :file "cljs/core.cljs"} obj]), :end-column 14, :end-line 1479, :column 7, :line 1479, :file "cljs/core.cljs"} js-keys, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} ES6EntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5016, :column 10, :line 5016, :file "cljs/core.cljs"} ES6EntriesIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 5016, :column 29, :line 5016, :file "cljs/core.cljs"} [^{:mutable true, :end-column 41, :end-line 5016, :column 40, :line 5016, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 28, :end-line 2441, :column 25, :line 2441, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 2441, :column 26, :line 2441, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2441, :column 8, :line 2441, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 2441, :column 16, :line 2441, :file "cljs/core.cljs"} keyword? ^{:arglists (^{:end-column 28, :end-line 2441, :column 25, :line 2441, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 2441, :column 26, :line 2441, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2441, :column 8, :line 2441, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 2441, :column 16, :line 2441, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 2441, :column 26, :line 2441, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 2441, :column 25, :line 2441, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 2441, :column 26, :line 2441, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2441, :column 8, :line 2441, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 2441, :column 16, :line 2441, :file "cljs/core.cljs"} keyword?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 3009, :column 18, :line 3009, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 3009, :column 19, :line 3009, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 3009, :column 7, :line 3009, :file "cljs/core.cljs"} array-iter ^{:arglists (^{:end-column 21, :end-line 3009, :column 18, :line 3009, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 3009, :column 19, :line 3009, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 3009, :column 7, :line 3009, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 20, :end-line 3009, :column 19, :line 3009, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 3009, :column 18, :line 3009, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 3009, :column 19, :line 3009, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 3009, :column 7, :line 3009, :file "cljs/core.cljs"} array-iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8363, :column 3, :line 8363, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8363, :column 4, :line 8363, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 12, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} force ^{:arglists (^{:end-column 6, :end-line 8363, :column 3, :line 8363, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8363, :column 4, :line 8363, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 12, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 8363, :column 4, :line 8363, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8363, :column 3, :line 8363, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8363, :column 4, :line 8363, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 12, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} force, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 8568, :column 6, :line 8568, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 15, :end-line 8564, :column 7, :line 8564, :file "cljs/core.cljs"} group-by ^{:arglists (^{:end-column 11, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 8568, :column 6, :line 8568, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 15, :end-line 8564, :column 7, :line 8564, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 5, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 8568, :column 6, :line 8568, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 8568, :column 6, :line 8568, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 15, :end-line 8564, :column 7, :line 8564, :file "cljs/core.cljs"} group-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq ^{:arglists (^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 332, :column 15, :line 332, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 332, :column 16, :line 332, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 332, :column 9, :line 332, :file "cljs/core.cljs"} -rseq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8149, :column 3, :line 8149, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8149, :column 4, :line 8149, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8149, :column 6, :line 8149, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 10, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} prn ^{:arglists (^{:end-column 11, :end-line 8149, :column 3, :line 8149, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8149, :column 4, :line 8149, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8149, :column 6, :line 8149, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 10, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 10, :end-line 8149, :column 6, :line 8149, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8149, :column 3, :line 8149, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8149, :column 4, :line 8149, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8149, :column 6, :line 8149, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 10, :end-line 8147, :column 7, :line 8147, :file "cljs/core.cljs"} prn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} tv ^{:end-column 29, :end-line 4575, :column 24, :line 4575, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4575, :column 30, :line 4575, :file "cljs/core.cljs"} node]), :private true, :end-column 19, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} tv-pop-tail ^{:arglists (^{:end-column 35, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} tv ^{:end-column 29, :end-line 4575, :column 24, :line 4575, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4575, :column 30, :line 4575, :file "cljs/core.cljs"} node]), :private true, :end-column 19, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} tv ^{:end-column 29, :end-line 4575, :column 24, :line 4575, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4575, :column 30, :line 4575, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4575, :column 20, :line 4575, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4575, :column 21, :line 4575, :file "cljs/core.cljs"} tv ^{:end-column 29, :end-line 4575, :column 24, :line 4575, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 4575, :column 30, :line 4575, :file "cljs/core.cljs"} node]), :private true, :end-column 19, :end-line 4575, :column 8, :line 4575, :file "cljs/core.cljs"} tv-pop-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} ->Atom ^{:arglists ([^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} {:arglists (^cljs.core/Atom [^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} ->Atom, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 1288, :column 10, :line 1288, :file "cljs/core.cljs"} PersistentHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6061, :column 10, :line 6061, :file "cljs/core.cljs"} PersistentHashMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 86, :end-line 6061, :column 28, :line 6061, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1924, :column 4, :line 1924, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1925, :column 4, :line 1925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1925, :column 5, :line 1925, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1926, :column 4, :line 1926, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1926, :column 5, :line 1926, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1927, :column 4, :line 1927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1927, :column 5, :line 1927, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1927, :column 7, :line 1927, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1927, :column 9, :line 1927, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1927, :column 11, :line 1927, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1922, :column 8, :line 1922, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} unchecked-multiply ^{:arglists (^{:end-column 6, :end-line 1924, :column 4, :line 1924, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1925, :column 4, :line 1925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1925, :column 5, :line 1925, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1926, :column 4, :line 1926, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1926, :column 5, :line 1926, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1927, :column 4, :line 1927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1927, :column 5, :line 1927, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1927, :column 7, :line 1927, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1927, :column 9, :line 1927, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1927, :column 11, :line 1927, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1922, :column 8, :line 1922, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1925, :column 5, :line 1925, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1926, :column 5, :line 1926, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1927, :column 5, :line 1927, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1927, :column 7, :line 1927, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1927, :column 11, :line 1927, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1924, :column 4, :line 1924, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1925, :column 4, :line 1925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1925, :column 5, :line 1925, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1926, :column 4, :line 1926, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1926, :column 5, :line 1926, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1927, :column 4, :line 1927, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1927, :column 5, :line 1927, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1927, :column 7, :line 1927, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1927, :column 9, :line 1927, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1927, :column 11, :line 1927, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 14, :end-line 1922, :column 8, :line 1922, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} unchecked-multiply, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} ArrayNodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} ArrayNodeSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 6006, :column 23, :line 6006, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 3244, :column 4, :line 3244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3244, :column 5, :line 3244, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3242, :column 8, :line 3242, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3242, :column 16, :line 3242, :file "cljs/core.cljs"} even? ^{:arglists (^{:end-column 7, :end-line 3244, :column 4, :line 3244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3244, :column 5, :line 3244, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3242, :column 8, :line 3242, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3242, :column 16, :line 3242, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 3244, :column 5, :line 3244, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3244, :column 4, :line 3244, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3244, :column 5, :line 3244, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3242, :column 8, :line 3242, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3242, :column 16, :line 3242, :file "cljs/core.cljs"} even?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 721, :column 10, :line 721, :file "cljs/core.cljs"} es6-iterator-seq ^{:arglists (^{:end-column 30, :end-line 733, :column 24, :line 733, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 733, :column 25, :line 733, :file "cljs/core.cljs"} iter]), :end-column 23, :end-line 733, :column 7, :line 733, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 733, :column 25, :line 733, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 733, :column 24, :line 733, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 733, :column 25, :line 733, :file "cljs/core.cljs"} iter]), :end-column 23, :end-line 733, :column 7, :line 733, :file "cljs/core.cljs"} es6-iterator-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1903, :column 21, :line 1903, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1903, :column 22, :line 1903, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} unchecked-dec ^{:arglists (^{:end-column 24, :end-line 1903, :column 21, :line 1903, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1903, :column 22, :line 1903, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 1903, :column 22, :line 1903, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1903, :column 21, :line 1903, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1903, :column 22, :line 1903, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1903, :column 7, :line 1903, :file "cljs/core.cljs"} unchecked-dec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 52, :end-line 5818, :column 39, :line 5818, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 5818, :column 40, :line 5818, :file "cljs/core.cljs"} arr ^{:end-column 47, :end-line 5818, :column 44, :line 5818, :file "cljs/core.cljs"} cnt ^{:end-column 51, :end-line 5818, :column 48, :line 5818, :file "cljs/core.cljs"} key]), :private true, :end-column 38, :end-line 5818, :column 8, :line 5818, :file "cljs/core.cljs"} hash-collision-node-find-index ^{:arglists (^{:end-column 52, :end-line 5818, :column 39, :line 5818, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 5818, :column 40, :line 5818, :file "cljs/core.cljs"} arr ^{:end-column 47, :end-line 5818, :column 44, :line 5818, :file "cljs/core.cljs"} cnt ^{:end-column 51, :end-line 5818, :column 48, :line 5818, :file "cljs/core.cljs"} key]), :private true, :end-column 38, :end-line 5818, :column 8, :line 5818, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 43, :end-line 5818, :column 40, :line 5818, :file "cljs/core.cljs"} arr ^{:end-column 47, :end-line 5818, :column 44, :line 5818, :file "cljs/core.cljs"} cnt ^{:end-column 51, :end-line 5818, :column 48, :line 5818, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 52, :end-line 5818, :column 39, :line 5818, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 5818, :column 40, :line 5818, :file "cljs/core.cljs"} arr ^{:end-column 47, :end-line 5818, :column 44, :line 5818, :file "cljs/core.cljs"} cnt ^{:end-column 51, :end-line 5818, :column 48, :line 5818, :file "cljs/core.cljs"} key]), :private true, :end-column 38, :end-line 5818, :column 8, :line 5818, :file "cljs/core.cljs"} hash-collision-node-find-index, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5173, :column 32, :line 5173, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5173, :column 33, :line 5173, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5173, :column 37, :line 5173, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5173, :column 39, :line 5173, :file "cljs/core.cljs"} _meta]), :end-column 31, :end-line 5173, :column 7, :line 5173, :file "cljs/core.cljs"} persistent-array-map-seq ^{:arglists (^{:end-column 45, :end-line 5173, :column 32, :line 5173, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5173, :column 33, :line 5173, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5173, :column 37, :line 5173, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5173, :column 39, :line 5173, :file "cljs/core.cljs"} _meta]), :end-column 31, :end-line 5173, :column 7, :line 5173, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 5173, :column 33, :line 5173, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5173, :column 37, :line 5173, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5173, :column 39, :line 5173, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5173, :column 32, :line 5173, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5173, :column 33, :line 5173, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5173, :column 37, :line 5173, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5173, :column 39, :line 5173, :file "cljs/core.cljs"} _meta]), :end-column 31, :end-line 5173, :column 7, :line 5173, :file "cljs/core.cljs"} persistent-array-map-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} RangeIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} RangeIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 7633, :column 24, :line 7633, :file "cljs/core.cljs"} [^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step], :protocols #{Object}}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} MultiStepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 3079, :column 10, :line 3079, :file "cljs/core.cljs"} MultiStepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 3079, :column 23, :line 3079, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 3079, :column 24, :line 3079, :file "cljs/core.cljs"} xform ^{:end-column 35, :end-line 3079, :column 30, :line 3079, :file "cljs/core.cljs"} iters ^{:end-column 41, :end-line 3079, :column 36, :line 3079, :file "cljs/core.cljs"} nexts], :protocols #{Object}}, ^{:arglists (^{:end-column 17, :end-line 2741, :column 4, :line 2741, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2741, :column 5, :line 2741, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2745, :column 10, :line 2745, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2740, :column 7, :line 2740, :file "cljs/core.cljs"} double-array ^{:arglists (^{:end-column 17, :end-line 2741, :column 4, :line 2741, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2741, :column 5, :line 2741, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2745, :column 10, :line 2745, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2740, :column 7, :line 2740, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2741, :column 5, :line 2741, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 9, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2745, :column 10, :line 2745, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2741, :column 4, :line 2741, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2741, :column 5, :line 2741, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2745, :column 4, :line 2745, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2745, :column 5, :line 2745, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2745, :column 10, :line 2745, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2740, :column 7, :line 2740, :file "cljs/core.cljs"} double-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} ->EmptyList ^{:arglists ([^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} {:arglists (^cljs.core/EmptyList [^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} ->EmptyList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 1012, :column 20, :line 1012, :file "cljs/core.cljs"} seq-reduce ^{:arglists (^{:end-column 12, :end-line 1667, :column 4, :line 1667, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1667, :column 5, :line 1667, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1671, :column 7, :line 1671, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 1666, :column 8, :line 1666, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1667, :column 5, :line 1667, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} coll] [^{:end-column 6, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1671, :column 7, :line 1671, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1667, :column 4, :line 1667, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1667, :column 5, :line 1667, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1667, :column 7, :line 1667, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1671, :column 4, :line 1671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1671, :column 5, :line 1671, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1671, :column 7, :line 1671, :file "cljs/core.cljs"} val ^{:end-column 15, :end-line 1671, :column 11, :line 1671, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 1666, :column 8, :line 1666, :file "cljs/core.cljs"} seq-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2789, :column 3, :line 2789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} arglist]), :end-column 13, :end-line 2788, :column 7, :line 2788, :file "cljs/core.cljs"} spread ^{:arglists (^{:end-column 12, :end-line 2789, :column 3, :line 2789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} arglist]), :end-column 13, :end-line 2788, :column 7, :line 2788, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} arglist]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2789, :column 3, :line 2789, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2789, :column 4, :line 2789, :file "cljs/core.cljs"} arglist]), :end-column 13, :end-line 2788, :column 7, :line 2788, :file "cljs/core.cljs"} spread, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6370, :column 21, :line 6370, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6370, :column 22, :line 6370, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6370, :column 26, :line 6370, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6370, :column 30, :line 6370, :file "cljs/core.cljs"} ins ^{:end-column 39, :end-line 6370, :column 34, :line 6370, :file "cljs/core.cljs"} right]), :private true, :end-column 20, :end-line 6370, :column 8, :line 6370, :file "cljs/core.cljs"} balance-left ^{:arglists (^{:end-column 40, :end-line 6370, :column 21, :line 6370, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6370, :column 22, :line 6370, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6370, :column 26, :line 6370, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6370, :column 30, :line 6370, :file "cljs/core.cljs"} ins ^{:end-column 39, :end-line 6370, :column 34, :line 6370, :file "cljs/core.cljs"} right]), :private true, :end-column 20, :end-line 6370, :column 8, :line 6370, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 6370, :column 22, :line 6370, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6370, :column 26, :line 6370, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6370, :column 30, :line 6370, :file "cljs/core.cljs"} ins ^{:end-column 39, :end-line 6370, :column 34, :line 6370, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6370, :column 21, :line 6370, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6370, :column 22, :line 6370, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6370, :column 26, :line 6370, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6370, :column 30, :line 6370, :file "cljs/core.cljs"} ins ^{:end-column 39, :end-line 6370, :column 34, :line 6370, :file "cljs/core.cljs"} right]), :private true, :end-column 20, :end-line 6370, :column 8, :line 6370, :file "cljs/core.cljs"} balance-left, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 2325, :column 17, :line 2325, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2325, :column 18, :line 2325, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 11, :end-line 2325, :column 8, :line 2325, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 2325, :column 12, :line 2325, :file "cljs/core.cljs"} rseq ^{:arglists (^{:end-column 23, :end-line 2325, :column 17, :line 2325, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2325, :column 18, :line 2325, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 11, :end-line 2325, :column 8, :line 2325, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 2325, :column 12, :line 2325, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 332, :column 5, :line 332, :file "cljs/core.cljs"} clj [^{:end-column 22, :end-line 2325, :column 18, :line 2325, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2325, :column 17, :line 2325, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2325, :column 18, :line 2325, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 11, :end-line 2325, :column 8, :line 2325, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 2325, :column 12, :line 2325, :file "cljs/core.cljs"} rseq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 9026, :column 3, :line 9026, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9026, :column 4, :line 9026, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 9021, :column 7, :line 9021, :file "cljs/core.cljs"} ex-cause ^{:arglists (^{:end-column 7, :end-line 9026, :column 3, :line 9026, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9026, :column 4, :line 9026, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 9021, :column 7, :line 9021, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 9026, :column 4, :line 9026, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 9026, :column 3, :line 9026, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9026, :column 4, :line 9026, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 9021, :column 7, :line 9021, :file "cljs/core.cljs"} ex-cause, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 20, :end-line 399, :column 14, :line 399, :file "cljs/core.cljs"} IReset ^{:protocol-info {:methods {^{:end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 20, :end-line 399, :column 14, :line 399, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 20, :end-line 399, :column 14, :line 399, :file "cljs/core.cljs"} IReset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} IEmptyableCollection ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 249, :column 4, :line 249, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 249, :column 11, :line 249, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 249, :column 12, :line 249, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 248, :column 14, :line 248, :file "cljs/core.cljs"} IEmptyableCollection, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 5089, :column 27, :line 5089, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5089, :column 28, :line 5089, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 5089, :column 30, :line 5089, :file "cljs/core.cljs"} k]), :private true, :end-column 26, :end-line 5089, :column 8, :line 5089, :file "cljs/core.cljs"} array-map-index-of ^{:arglists (^{:end-column 32, :end-line 5089, :column 27, :line 5089, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5089, :column 28, :line 5089, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 5089, :column 30, :line 5089, :file "cljs/core.cljs"} k]), :private true, :end-column 26, :end-line 5089, :column 8, :line 5089, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 5089, :column 28, :line 5089, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 5089, :column 30, :line 5089, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 5089, :column 27, :line 5089, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5089, :column 28, :line 5089, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 5089, :column 30, :line 5089, :file "cljs/core.cljs"} k]), :private true, :end-column 26, :end-line 5089, :column 8, :line 5089, :file "cljs/core.cljs"} array-map-index-of, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 9017, :column 3, :line 9017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9017, :column 4, :line 9017, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 17, :end-line 9013, :column 7, :line 9013, :file "cljs/core.cljs"} ex-message ^{:arglists (^{:end-column 7, :end-line 9017, :column 3, :line 9017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9017, :column 4, :line 9017, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 17, :end-line 9013, :column 7, :line 9013, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 9017, :column 4, :line 9017, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 9017, :column 3, :line 9017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 9017, :column 4, :line 9017, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 17, :end-line 9013, :column 7, :line 9013, :file "cljs/core.cljs"} ex-message, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7967, :column 20, :line 7967, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7967, :column 21, :line 7967, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 7967, :column 7, :line 7967, :file "cljs/core.cljs"} string-print ^{:arglists (^{:end-column 23, :end-line 7967, :column 20, :line 7967, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7967, :column 21, :line 7967, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 7967, :column 7, :line 7967, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 22, :end-line 7967, :column 21, :line 7967, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7967, :column 20, :line 7967, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7967, :column 21, :line 7967, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 7967, :column 7, :line 7967, :file "cljs/core.cljs"} string-print, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1880, :column 21, :line 1880, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1880, :column 22, :line 1880, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} float ^{:arglists (^{:end-column 24, :end-line 1880, :column 21, :line 1880, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1880, :column 22, :line 1880, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1880, :column 22, :line 1880, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1880, :column 21, :line 1880, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1880, :column 22, :line 1880, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} float, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8341, :column 1, :line 8341, :file "cljs/core.cljs"} fixture2 ^{:end-column 17, :end-line 8341, :column 1, :line 8341, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8341, :column 1, :line 8341, :file "cljs/core.cljs"} fixture2, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 21, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IRecord ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 21, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 21, :end-line 328, :column 14, :line 328, :file "cljs/core.cljs"} IRecord, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 3431, :column 10, :line 3431, :file "cljs/core.cljs"} pr-str ^{:arglists (^{:end-column 11, :end-line 8107, :column 3, :line 8107, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8107, :column 4, :line 8107, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8107, :column 6, :line 8107, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 13, :end-line 8105, :column 7, :line 8105, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 8107, :column 6, :line 8107, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8107, :column 3, :line 8107, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8107, :column 4, :line 8107, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8107, :column 6, :line 8107, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 13, :end-line 8105, :column 7, :line 8105, :file "cljs/core.cljs"} pr-str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4063, :column 32, :line 4063, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4063, :column 33, :line 4063, :file "cljs/core.cljs"} pv]), :private true, :end-column 31, :end-line 4063, :column 8, :line 4063, :file "cljs/core.cljs"} first-array-for-longvec ^{:arglists (^{:end-column 36, :end-line 4063, :column 32, :line 4063, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4063, :column 33, :line 4063, :file "cljs/core.cljs"} pv]), :private true, :end-column 31, :end-line 4063, :column 8, :line 4063, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 4063, :column 33, :line 4063, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4063, :column 32, :line 4063, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4063, :column 33, :line 4063, :file "cljs/core.cljs"} pv]), :private true, :end-column 31, :end-line 4063, :column 8, :line 4063, :file "cljs/core.cljs"} first-array-for-longvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 5038, :column 32, :line 5038, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5038, :column 33, :line 5038, :file "cljs/core.cljs"} coll]), :end-column 31, :end-line 5038, :column 7, :line 5038, :file "cljs/core.cljs"} es6-set-entries-iterator ^{:arglists (^{:end-column 38, :end-line 5038, :column 32, :line 5038, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5038, :column 33, :line 5038, :file "cljs/core.cljs"} coll]), :end-column 31, :end-line 5038, :column 7, :line 5038, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6SetEntriesIterator [^{:end-column 37, :end-line 5038, :column 33, :line 5038, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 5038, :column 32, :line 5038, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5038, :column 33, :line 5038, :file "cljs/core.cljs"} coll]), :end-column 31, :end-line 5038, :column 7, :line 5038, :file "cljs/core.cljs"} es6-set-entries-iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2799, :column 4, :line 2799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2799, :column 5, :line 2799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2800, :column 4, :line 2800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2800, :column 5, :line 2800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2808, :column 4, :line 2808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2808, :column 5, :line 2808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2808, :column 7, :line 2808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2808, :column 9, :line 2808, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 2808, :column 11, :line 2808, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 13, :end-line 2796, :column 7, :line 2796, :file "cljs/core.cljs"} concat ^{:arglists (^{:end-column 6, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2799, :column 4, :line 2799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2799, :column 5, :line 2799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2800, :column 4, :line 2800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2800, :column 5, :line 2800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2808, :column 4, :line 2808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2808, :column 5, :line 2808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2808, :column 7, :line 2808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2808, :column 9, :line 2808, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 2808, :column 11, :line 2808, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 13, :end-line 2796, :column 7, :line 2796, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [] ^cljs.core/LazySeq [^{:end-column 6, :end-line 2799, :column 5, :line 2799, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 6, :end-line 2800, :column 5, :line 2800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} y] ^cljs.core/LazySeq [^{:end-column 6, :end-line 2808, :column 5, :line 2808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2808, :column 7, :line 2808, :file "cljs/core.cljs"} y & ^{:end-column 13, :end-line 2808, :column 11, :line 2808, :file "cljs/core.cljs"} zs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2799, :column 4, :line 2799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2799, :column 5, :line 2799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2800, :column 4, :line 2800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2800, :column 5, :line 2800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2800, :column 7, :line 2800, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2808, :column 4, :line 2808, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2808, :column 5, :line 2808, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2808, :column 7, :line 2808, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2808, :column 9, :line 2808, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 2808, :column 11, :line 2808, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 13, :end-line 2796, :column 7, :line 2796, :file "cljs/core.cljs"} concat, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods ^{:arglists (^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 31, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} IDerefWithTimeout ^{:protocol-info {:methods {^{:end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 31, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 23, :end-line 299, :column 4, :line 299, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 299, :column 24, :line 299, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 299, :column 25, :line 299, :file "cljs/core.cljs"} o ^{:end-column 31, :end-line 299, :column 27, :line 299, :file "cljs/core.cljs"} msec ^{:end-column 43, :end-line 299, :column 32, :line 299, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 31, :end-line 298, :column 14, :line 298, :file "cljs/core.cljs"} IDerefWithTimeout, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 611, :column 4, :line 611, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 611, :column 5, :line 611, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 615, :column 4, :line 615, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 615, :column 5, :line 615, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 615, :column 8, :line 615, :file "cljs/core.cljs"} name]), :end-column 13, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} symbol ^{:arglists (^{:end-column 10, :end-line 611, :column 4, :line 611, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 611, :column 5, :line 611, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 615, :column 4, :line 615, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 615, :column 5, :line 615, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 615, :column 8, :line 615, :file "cljs/core.cljs"} name]), :end-column 13, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 611, :column 5, :line 611, :file "cljs/core.cljs"} name] ^cljs.core/Symbol [^{:end-column 7, :end-line 615, :column 5, :line 615, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 615, :column 8, :line 615, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 611, :column 4, :line 611, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 611, :column 5, :line 611, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 615, :column 4, :line 615, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 615, :column 5, :line 615, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 615, :column 8, :line 615, :file "cljs/core.cljs"} name]), :end-column 13, :end-line 610, :column 7, :line 610, :file "cljs/core.cljs"} symbol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2692, :column 3, :line 2692, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2692, :column 4, :line 2692, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 18, :end-line 2689, :column 7, :line 2689, :file "cljs/core.cljs"} to-array-2d ^{:arglists (^{:end-column 9, :end-line 2692, :column 3, :line 2692, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2692, :column 4, :line 2692, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 18, :end-line 2689, :column 7, :line 2689, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 2692, :column 4, :line 2692, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2692, :column 3, :line 2692, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2692, :column 4, :line 2692, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 18, :end-line 2689, :column 7, :line 2689, :file "cljs/core.cljs"} to-array-2d, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} Subvec {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 16, :end-line 4432, :column 10, :line 4432, :file "cljs/core.cljs"} Subvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 4432, :column 17, :line 4432, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4432, :column 18, :line 4432, :file "cljs/core.cljs"} meta ^{:end-column 24, :end-line 4432, :column 23, :line 4432, :file "cljs/core.cljs"} v ^{:end-column 30, :end-line 4432, :column 25, :line 4432, :file "cljs/core.cljs"} start ^{:end-column 34, :end-line 4432, :column 31, :line 4432, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 51, :end-line 4432, :column 45, :line 4432, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} ExceptionInfo {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 23, :end-line 8990, :column 10, :line 8990, :file "cljs/core.cljs"} ExceptionInfo, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 44, :end-line 8990, :column 24, :line 8990, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 8990, :column 25, :line 8990, :file "cljs/core.cljs"} message ^{:end-column 37, :end-line 8990, :column 33, :line 8990, :file "cljs/core.cljs"} data ^{:end-column 43, :end-line 8990, :column 38, :line 8990, :file "cljs/core.cljs"} cause], :protocols #{}}, ^{:declared true, :end-column 13, :end-line 1942, :column 10, :line 1942, :file "cljs/core.cljs"} mod ^{:arglists (^{:end-column 8, :end-line 2002, :column 3, :line 2002, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2002, :column 6, :line 2002, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 10, :end-line 2000, :column 7, :line 2000, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2002, :column 6, :line 2002, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2002, :column 3, :line 2002, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2002, :column 4, :line 2002, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2002, :column 6, :line 2002, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 10, :end-line 2000, :column 7, :line 2000, :file "cljs/core.cljs"} mod, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 18, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} ISet ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentHashSet), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 18, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 18, :end-line 285, :column 14, :line 285, :file "cljs/core.cljs"} ISet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1402, :column 3, :line 1402, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1402, :column 4, :line 1402, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 10, :end-line 1398, :column 7, :line 1398, :file "cljs/core.cljs"} pop ^{:arglists (^{:end-column 9, :end-line 1402, :column 3, :line 1402, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1402, :column 4, :line 1402, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 10, :end-line 1398, :column 7, :line 1398, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1402, :column 4, :line 1402, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1402, :column 3, :line 1402, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1402, :column 4, :line 1402, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 10, :end-line 1398, :column 7, :line 1398, :file "cljs/core.cljs"} pop, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 22, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} IPending ^{:impls (cljs.core/Delay), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 22, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 353, :column 13, :line 353, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 353, :column 24, :line 353, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 353, :column 25, :line 353, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 22, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} IPending, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key ^{:arglists (^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4097, :column 17, :line 4097, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4097, :column 18, :line 4097, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4097, :column 21, :line 4097, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4097, :column 27, :line 4097, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4097, :column 8, :line 4097, :file "cljs/core.cljs"} pop-tail ^{:arglists (^{:end-column 32, :end-line 4097, :column 17, :line 4097, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4097, :column 18, :line 4097, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4097, :column 21, :line 4097, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4097, :column 27, :line 4097, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4097, :column 8, :line 4097, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 4097, :column 18, :line 4097, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4097, :column 21, :line 4097, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4097, :column 27, :line 4097, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4097, :column 17, :line 4097, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 4097, :column 18, :line 4097, :file "cljs/core.cljs"} pv ^{:end-column 26, :end-line 4097, :column 21, :line 4097, :file "cljs/core.cljs"} level ^{:end-column 31, :end-line 4097, :column 27, :line 4097, :file "cljs/core.cljs"} node]), :private true, :end-column 16, :end-line 4097, :column 8, :line 4097, :file "cljs/core.cljs"} pop-tail, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2873, :column 4, :line 2873, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2873, :column 5, :line 2873, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2873, :column 11, :line 2873, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2875, :column 4, :line 2875, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2875, :column 5, :line 2875, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2875, :column 11, :line 2875, :file "cljs/core.cljs"} key ^{:end-column 16, :end-line 2875, :column 15, :line 2875, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2875, :column 17, :line 2875, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 14, :end-line 2871, :column 7, :line 2871, :file "cljs/core.cljs"} dissoc! ^{:arglists (^{:end-column 15, :end-line 2873, :column 4, :line 2873, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2873, :column 5, :line 2873, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2873, :column 11, :line 2873, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2875, :column 4, :line 2875, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2875, :column 5, :line 2875, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2875, :column 11, :line 2875, :file "cljs/core.cljs"} key ^{:end-column 16, :end-line 2875, :column 15, :line 2875, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2875, :column 17, :line 2875, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 14, :end-line 2871, :column 7, :line 2871, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2873, :column 5, :line 2873, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2873, :column 11, :line 2873, :file "cljs/core.cljs"} key] ^^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2875, :column 5, :line 2875, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2875, :column 11, :line 2875, :file "cljs/core.cljs"} key & ^{:end-column 19, :end-line 2875, :column 17, :line 2875, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2873, :column 4, :line 2873, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2873, :column 5, :line 2873, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2873, :column 11, :line 2873, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2875, :column 4, :line 2875, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2875, :column 5, :line 2875, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2875, :column 11, :line 2875, :file "cljs/core.cljs"} key ^{:end-column 16, :end-line 2875, :column 15, :line 2875, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2875, :column 17, :line 2875, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 14, :end-line 2871, :column 7, :line 2871, :file "cljs/core.cljs"} dissoc!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7820, :column 4, :line 7820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7820, :column 5, :line 7820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7820, :column 7, :line 7820, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7825, :column 4, :line 7825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7825, :column 5, :line 7825, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7825, :column 7, :line 7825, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 7825, :column 12, :line 7825, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 17, :end-line 7817, :column 7, :line 7817, :file "cljs/core.cljs"} reductions ^{:arglists (^{:end-column 12, :end-line 7820, :column 4, :line 7820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7820, :column 5, :line 7820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7820, :column 7, :line 7820, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7825, :column 4, :line 7825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7825, :column 5, :line 7825, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7825, :column 7, :line 7825, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 7825, :column 12, :line 7825, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 17, :end-line 7817, :column 7, :line 7817, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 7820, :column 5, :line 7820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7820, :column 7, :line 7820, :file "cljs/core.cljs"} coll] ^cljs.core/Cons [^{:end-column 6, :end-line 7825, :column 5, :line 7825, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7825, :column 7, :line 7825, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 7825, :column 12, :line 7825, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7820, :column 4, :line 7820, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7820, :column 5, :line 7820, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7820, :column 7, :line 7820, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7825, :column 4, :line 7825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7825, :column 5, :line 7825, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7825, :column 7, :line 7825, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 7825, :column 12, :line 7825, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 17, :end-line 7817, :column 7, :line 7817, :file "cljs/core.cljs"} reductions, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 918, :column 3, :line 918, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 918, :column 4, :line 918, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 15, :end-line 916, :column 8, :line 916, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 916, :column 16, :line 916, :file "cljs/core.cljs"} indexed? ^{:arglists (^{:end-column 6, :end-line 918, :column 3, :line 918, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 918, :column 4, :line 918, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 15, :end-line 916, :column 8, :line 916, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 916, :column 16, :line 916, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 918, :column 4, :line 918, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 918, :column 3, :line 918, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 918, :column 4, :line 918, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 15, :end-line 916, :column 8, :line 916, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 916, :column 16, :line 916, :file "cljs/core.cljs"} indexed?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1783, :column 4, :line 1783, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1783, :column 5, :line 1783, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1784, :column 4, :line 1784, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1784, :column 5, :line 1784, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 5, :line 1785, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1785, :column 7, :line 1785, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1785, :column 9, :line 1785, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1785, :column 11, :line 1785, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1780, :column 8, :line 1780, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1780, :column 15, :line 1780, :file "cljs/core.cljs"} - ^{:arglists (^{:end-column 7, :end-line 1783, :column 4, :line 1783, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1783, :column 5, :line 1783, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1784, :column 4, :line 1784, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1784, :column 5, :line 1784, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 5, :line 1785, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1785, :column 7, :line 1785, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1785, :column 9, :line 1785, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1785, :column 11, :line 1785, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1780, :column 8, :line 1780, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1780, :column 15, :line 1780, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1783, :column 5, :line 1783, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1784, :column 5, :line 1784, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1785, :column 5, :line 1785, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1785, :column 7, :line 1785, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1785, :column 11, :line 1785, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1783, :column 4, :line 1783, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1783, :column 5, :line 1783, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1784, :column 4, :line 1784, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1784, :column 5, :line 1784, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1785, :column 4, :line 1785, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1785, :column 5, :line 1785, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1785, :column 7, :line 1785, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1785, :column 9, :line 1785, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1785, :column 11, :line 1785, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1780, :column 8, :line 1780, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1780, :column 15, :line 1780, :file "cljs/core.cljs"} -, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv ^{:arglists (^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 314, :column 20, :line 314, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 314, :column 21, :line 314, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 314, :column 23, :line 314, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 314, :column 13, :line 314, :file "cljs/core.cljs"} -equiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} ->RangeIterator ^{:arglists ([^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangeIterator [^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 36, :end-line 7633, :column 35, :line 7633, :file "cljs/core.cljs"} i ^{:end-column 40, :end-line 7633, :column 37, :line 7633, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 7633, :column 41, :line 7633, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 7633, :column 10, :line 7633, :file "cljs/core.cljs"} ->RangeIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 5721, :column 10, :line 5721, :file "cljs/core.cljs"} ->ArrayNode ^{:arglists ([^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 5721, :column 10, :line 5721, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayNode [^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 5721, :column 10, :line 5721, :file "cljs/core.cljs"} ->ArrayNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2863, :column 4, :line 2863, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2863, :column 5, :line 2863, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2863, :column 11, :line 2863, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2863, :column 15, :line 2863, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2865, :column 4, :line 2865, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2865, :column 5, :line 2865, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2865, :column 11, :line 2865, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2865, :column 15, :line 2865, :file "cljs/core.cljs"} val ^{:end-column 20, :end-line 2865, :column 19, :line 2865, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2865, :column 21, :line 2865, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 13, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} assoc! ^{:arglists (^{:end-column 19, :end-line 2863, :column 4, :line 2863, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2863, :column 5, :line 2863, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2863, :column 11, :line 2863, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2863, :column 15, :line 2863, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2865, :column 4, :line 2865, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2865, :column 5, :line 2865, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2865, :column 11, :line 2865, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2865, :column 15, :line 2865, :file "cljs/core.cljs"} val ^{:end-column 20, :end-line 2865, :column 19, :line 2865, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2865, :column 21, :line 2865, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 13, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2863, :column 5, :line 2863, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2863, :column 11, :line 2863, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2863, :column 15, :line 2863, :file "cljs/core.cljs"} val] ^^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2865, :column 5, :line 2865, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2865, :column 11, :line 2865, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2865, :column 15, :line 2865, :file "cljs/core.cljs"} val & ^{:end-column 24, :end-line 2865, :column 21, :line 2865, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2863, :column 4, :line 2863, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2863, :column 5, :line 2863, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2863, :column 11, :line 2863, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2863, :column 15, :line 2863, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2865, :column 4, :line 2865, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2865, :column 5, :line 2865, :file "cljs/core.cljs"} tcoll ^{:end-column 14, :end-line 2865, :column 11, :line 2865, :file "cljs/core.cljs"} key ^{:end-column 18, :end-line 2865, :column 15, :line 2865, :file "cljs/core.cljs"} val ^{:end-column 20, :end-line 2865, :column 19, :line 2865, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 2865, :column 21, :line 2865, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 13, :end-line 2859, :column 7, :line 2859, :file "cljs/core.cljs"} assoc!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7449, :column 4, :line 7449, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7450, :column 4, :line 7450, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7450, :column 5, :line 7450, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7450, :column 7, :line 7450, :file "cljs/core.cljs"} keys]), :end-column 15, :end-line 7448, :column 7, :line 7448, :file "cljs/core.cljs"} hash-set ^{:arglists (^{:end-column 6, :end-line 7449, :column 4, :line 7449, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7450, :column 4, :line 7450, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7450, :column 5, :line 7450, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7450, :column 7, :line 7450, :file "cljs/core.cljs"} keys]), :end-column 15, :end-line 7448, :column 7, :line 7448, :file "cljs/core.cljs"} {:arglists (^cljs.core/ISet [] [& ^{:end-column 11, :end-line 7450, :column 7, :line 7450, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7449, :column 4, :line 7449, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7450, :column 4, :line 7450, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7450, :column 5, :line 7450, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7450, :column 7, :line 7450, :file "cljs/core.cljs"} keys]), :end-column 15, :end-line 7448, :column 7, :line 7448, :file "cljs/core.cljs"} hash-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 1739, :column 12, :line 1739, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 16, :end-line 1732, :column 7, :line 1732, :file "cljs/core.cljs"} reduce-kv ^{:arglists (^{:end-column 17, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 1739, :column 12, :line 1739, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 16, :end-line 1732, :column 7, :line 1732, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 1739, :column 12, :line 1739, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1739, :column 7, :line 1739, :file "cljs/core.cljs"} init ^{:end-column 16, :end-line 1739, :column 12, :line 1739, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 16, :end-line 1732, :column 7, :line 1732, :file "cljs/core.cljs"} reduce-kv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 3436, :column 3, :line 3436, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3436, :column 4, :line 3436, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 3436, :column 6, :line 3436, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 13, :end-line 3433, :column 7, :line 3433, :file "cljs/core.cljs"} reset! ^{:declared true, :end-column 55, :end-line 5449, :column 49, :line 5449, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 55, :end-line 5449, :column 49, :line 5449, :file "cljs/core.cljs"} reset!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 2145, :column 14, :line 2145, :file "cljs/core.cljs"} name ^{:arglists (^{:end-column 6, :end-line 7503, :column 3, :line 7503, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 11, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7503, :column 3, :line 7503, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7503, :column 4, :line 7503, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 11, :end-line 7501, :column 7, :line 7501, :file "cljs/core.cljs"} name, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 6575, :column 10, :line 6575, :file "cljs/core.cljs"} ->RedNode ^{:arglists ([^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 6575, :column 10, :line 6575, :file "cljs/core.cljs"} {:arglists (^cljs.core/RedNode [^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 6575, :column 10, :line 6575, :file "cljs/core.cljs"} ->RedNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4071, :column 28, :line 4071, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4071, :column 29, :line 4071, :file "cljs/core.cljs"} pv ^{:end-column 33, :end-line 4071, :column 32, :line 4071, :file "cljs/core.cljs"} i]), :private true, :end-column 27, :end-line 4071, :column 8, :line 4071, :file "cljs/core.cljs"} unchecked-array-for ^{:arglists (^{:end-column 34, :end-line 4071, :column 28, :line 4071, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4071, :column 29, :line 4071, :file "cljs/core.cljs"} pv ^{:end-column 33, :end-line 4071, :column 32, :line 4071, :file "cljs/core.cljs"} i]), :private true, :end-column 27, :end-line 4071, :column 8, :line 4071, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 4071, :column 29, :line 4071, :file "cljs/core.cljs"} pv ^{:end-column 33, :end-line 4071, :column 32, :line 4071, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4071, :column 28, :line 4071, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4071, :column 29, :line 4071, :file "cljs/core.cljs"} pv ^{:end-column 33, :end-line 4071, :column 32, :line 4071, :file "cljs/core.cljs"} i]), :private true, :end-column 27, :end-line 4071, :column 8, :line 4071, :file "cljs/core.cljs"} unchecked-array-for, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 16, :end-line 214, :column 14, :line 214, :file "cljs/core.cljs"} Fn ^{:impls (cljs.core/MetaFn ^{:end-column 22, :end-line 799, :column 14, :line 799, :file "cljs/core.cljs"} function), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 16, :end-line 214, :column 14, :line 214, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 16, :end-line 214, :column 14, :line 214, :file "cljs/core.cljs"} Fn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1076, :column 3, :line 1076, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} ffirst ^{:arglists (^{:end-column 9, :end-line 1076, :column 3, :line 1076, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1076, :column 3, :line 1076, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1076, :column 4, :line 1076, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} ffirst, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7454, :column 4, :line 7454, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7454, :column 5, :line 7454, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7454, :column 7, :line 7454, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 17, :end-line 7452, :column 7, :line 7452, :file "cljs/core.cljs"} sorted-set ^{:arglists (^{:end-column 12, :end-line 7454, :column 4, :line 7454, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7454, :column 5, :line 7454, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7454, :column 7, :line 7454, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 17, :end-line 7452, :column 7, :line 7452, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7454, :column 7, :line 7454, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7454, :column 4, :line 7454, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7454, :column 5, :line 7454, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7454, :column 7, :line 7454, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 17, :end-line 7452, :column 7, :line 7452, :file "cljs/core.cljs"} sorted-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8097, :column 3, :line 8097, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8097, :column 4, :line 8097, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8097, :column 9, :line 8097, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 20, :end-line 8094, :column 8, :line 8094, :file "cljs/core.cljs"} pr-with-opts ^{:arglists (^{:end-column 14, :end-line 8097, :column 3, :line 8097, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8097, :column 4, :line 8097, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8097, :column 9, :line 8097, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 20, :end-line 8094, :column 8, :line 8094, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 8, :end-line 8097, :column 4, :line 8097, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8097, :column 9, :line 8097, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8097, :column 3, :line 8097, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8097, :column 4, :line 8097, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8097, :column 9, :line 8097, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 20, :end-line 8094, :column 8, :line 8094, :file "cljs/core.cljs"} pr-with-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} PersistentTreeMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} PersistentTreeMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 6825, :column 28, :line 6825, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists ([^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} ->PersistentTreeMap ^{:arglists ([^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 6825, :column 29, :line 6825, :file "cljs/core.cljs"} comp ^{:end-column 38, :end-line 6825, :column 34, :line 6825, :file "cljs/core.cljs"} tree ^{:end-column 42, :end-line 6825, :column 39, :line 6825, :file "cljs/core.cljs"} cnt ^{:end-column 47, :end-line 6825, :column 43, :line 6825, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 64, :end-line 6825, :column 58, :line 6825, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6825, :column 10, :line 6825, :file "cljs/core.cljs"} ->PersistentTreeMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 880, :column 4, :line 880, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 880, :column 5, :line 880, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 880, :column 9, :line 880, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 891, :column 4, :line 891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 891, :column 5, :line 891, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 891, :column 9, :line 891, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 891, :column 11, :line 891, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 900, :column 4, :line 900, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 900, :column 5, :line 900, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 900, :column 9, :line 900, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 900, :column 11, :line 900, :file "cljs/core.cljs"} val ^{:end-column 18, :end-line 900, :column 15, :line 900, :file "cljs/core.cljs"} idx]), :private true, :end-column 20, :end-line 879, :column 8, :line 879, :file "cljs/core.cljs"} array-reduce ^{:arglists (^{:end-column 11, :end-line 880, :column 4, :line 880, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 880, :column 5, :line 880, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 880, :column 9, :line 880, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 891, :column 4, :line 891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 891, :column 5, :line 891, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 891, :column 9, :line 891, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 891, :column 11, :line 891, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 900, :column 4, :line 900, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 900, :column 5, :line 900, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 900, :column 9, :line 900, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 900, :column 11, :line 900, :file "cljs/core.cljs"} val ^{:end-column 18, :end-line 900, :column 15, :line 900, :file "cljs/core.cljs"} idx]), :private true, :end-column 20, :end-line 879, :column 8, :line 879, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 880, :column 5, :line 880, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 880, :column 9, :line 880, :file "cljs/core.cljs"} f] [^{:end-column 8, :end-line 891, :column 5, :line 891, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 891, :column 9, :line 891, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 891, :column 11, :line 891, :file "cljs/core.cljs"} val] [^{:end-column 8, :end-line 900, :column 5, :line 900, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 900, :column 9, :line 900, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 900, :column 11, :line 900, :file "cljs/core.cljs"} val ^{:end-column 18, :end-line 900, :column 15, :line 900, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 880, :column 4, :line 880, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 880, :column 5, :line 880, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 880, :column 9, :line 880, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 891, :column 4, :line 891, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 891, :column 5, :line 891, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 891, :column 9, :line 891, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 891, :column 11, :line 891, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 900, :column 4, :line 900, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 900, :column 5, :line 900, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 900, :column 9, :line 900, :file "cljs/core.cljs"} f ^{:end-column 14, :end-line 900, :column 11, :line 900, :file "cljs/core.cljs"} val ^{:end-column 18, :end-line 900, :column 15, :line 900, :file "cljs/core.cljs"} idx]), :private true, :end-column 20, :end-line 879, :column 8, :line 879, :file "cljs/core.cljs"} array-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 914, :column 3, :line 914, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 914, :column 4, :line 914, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 15, :end-line 912, :column 8, :line 912, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 912, :column 16, :line 912, :file "cljs/core.cljs"} counted? ^{:arglists (^{:end-column 6, :end-line 914, :column 3, :line 914, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 914, :column 4, :line 914, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 15, :end-line 912, :column 8, :line 912, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 912, :column 16, :line 912, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 914, :column 4, :line 914, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 914, :column 3, :line 914, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 914, :column 4, :line 914, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 15, :end-line 912, :column 8, :line 912, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 912, :column 16, :line 912, :file "cljs/core.cljs"} counted?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8137, :column 3, :line 8137, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8137, :column 4, :line 8137, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8137, :column 6, :line 8137, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 14, :end-line 8135, :column 7, :line 8135, :file "cljs/core.cljs"} println ^{:arglists (^{:end-column 11, :end-line 8137, :column 3, :line 8137, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8137, :column 4, :line 8137, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8137, :column 6, :line 8137, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 14, :end-line 8135, :column 7, :line 8135, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 10, :end-line 8137, :column 6, :line 8137, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8137, :column 3, :line 8137, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8137, :column 4, :line 8137, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8137, :column 6, :line 8137, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 14, :end-line 8135, :column 7, :line 8135, :file "cljs/core.cljs"} println, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3964, :column 3, :line 3964, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3964, :column 4, :line 3964, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3964, :column 6, :line 3964, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3964, :column 7, :line 3964, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 3964, :column 9, :line 3964, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 3964, :column 11, :line 3964, :file "cljs/core.cljs"} ks] ^{:end-column 16, :end-line 3964, :column 15, :line 3964, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 15, :end-line 3960, :column 7, :line 3960, :file "cljs/core.cljs"} assoc-in ^{:arglists (^{:end-column 17, :end-line 3964, :column 3, :line 3964, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3964, :column 4, :line 3964, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3964, :column 6, :line 3964, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3964, :column 7, :line 3964, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 3964, :column 9, :line 3964, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 3964, :column 11, :line 3964, :file "cljs/core.cljs"} ks] ^{:end-column 16, :end-line 3964, :column 15, :line 3964, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 15, :end-line 3960, :column 7, :line 3960, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 3964, :column 4, :line 3964, :file "cljs/core.cljs"} m p__8759 ^{:end-column 16, :end-line 3964, :column 15, :line 3964, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3964, :column 3, :line 3964, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3964, :column 4, :line 3964, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3964, :column 6, :line 3964, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3964, :column 7, :line 3964, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 3964, :column 9, :line 3964, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 3964, :column 11, :line 3964, :file "cljs/core.cljs"} ks] ^{:end-column 16, :end-line 3964, :column 15, :line 3964, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 15, :end-line 3960, :column 7, :line 3960, :file "cljs/core.cljs"} assoc-in, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} PersistentHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7200, :column 10, :line 7200, :file "cljs/core.cljs"} PersistentHashSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7200, :column 28, :line 7200, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 7200, :column 29, :line 7200, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7200, :column 34, :line 7200, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 59, :end-line 7200, :column 53, :line 7200, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 2063, :column 3, :line 2063, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2063, :column 6, :line 2063, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 15, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} bit-test ^{:arglists (^{:end-column 8, :end-line 2063, :column 3, :line 2063, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2063, :column 6, :line 2063, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 15, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2063, :column 6, :line 2063, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2063, :column 3, :line 2063, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2063, :column 6, :line 2063, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 15, :end-line 2061, :column 7, :line 2061, :file "cljs/core.cljs"} bit-test, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 5436, :column 10, :line 5436, :file "cljs/core.cljs"} TransientHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 6200, :column 10, :line 6200, :file "cljs/core.cljs"} TransientHashMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 6204, :column 27, :line 6200, :file "cljs/core.cljs"} [^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val], :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists ([^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6061, :column 10, :line 6061, :file "cljs/core.cljs"} ->PersistentHashMap ^{:arglists ([^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6061, :column 10, :line 6061, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentHashMap [^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 6061, :column 29, :line 6061, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 6061, :column 34, :line 6061, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 6061, :column 38, :line 6061, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 51, :end-line 6061, :column 44, :line 6061, :file "cljs/core.cljs"} boolean, :end-column 60, :end-line 6061, :column 52, :line 6061, :file "cljs/core.cljs"} has-nil? ^{:end-column 68, :end-line 6061, :column 61, :line 6061, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 85, :end-line 6061, :column 79, :line 6061, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 27, :end-line 6061, :column 10, :line 6061, :file "cljs/core.cljs"} ->PersistentHashMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 19, :end-line 402, :column 14, :line 402, :file "cljs/core.cljs"} ISwap ^{:protocol-info {:methods {^{:end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 19, :end-line 402, :column 14, :line 402, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 403, :column 4, :line 403, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 403, :column 11, :line 403, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 403, :column 12, :line 403, :file "cljs/core.cljs"} o ^{:end-column 15, :end-line 403, :column 14, :line 403, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 403, :column 17, :line 403, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 403, :column 18, :line 403, :file "cljs/core.cljs"} o ^{:end-column 21, :end-line 403, :column 20, :line 403, :file "cljs/core.cljs"} f ^{:end-column 23, :end-line 403, :column 22, :line 403, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 403, :column 25, :line 403, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 403, :column 26, :line 403, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 403, :column 28, :line 403, :file "cljs/core.cljs"} f ^{:end-column 31, :end-line 403, :column 30, :line 403, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 403, :column 32, :line 403, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 403, :column 35, :line 403, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 403, :column 36, :line 403, :file "cljs/core.cljs"} o ^{:end-column 39, :end-line 403, :column 38, :line 403, :file "cljs/core.cljs"} f ^{:end-column 41, :end-line 403, :column 40, :line 403, :file "cljs/core.cljs"} a ^{:end-column 43, :end-line 403, :column 42, :line 403, :file "cljs/core.cljs"} b ^{:end-column 46, :end-line 403, :column 44, :line 403, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 19, :end-line 402, :column 14, :line 402, :file "cljs/core.cljs"} ISwap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 1467, :column 10, :line 1467, :file "cljs/core.cljs"} ChunkedCons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 21, :end-line 2591, :column 10, :line 2591, :file "cljs/core.cljs"} ChunkedCons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 2591, :column 22, :line 2591, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2591, :column 23, :line 2591, :file "cljs/core.cljs"} chunk ^{:end-column 33, :end-line 2591, :column 29, :line 2591, :file "cljs/core.cljs"} more ^{:end-column 38, :end-line 2591, :column 34, :line 2591, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 55, :end-line 2591, :column 49, :line 2591, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8521, :column 3, :line 8521, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8521, :column 4, :line 8521, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 14, :end-line 8516, :column 7, :line 8516, :file "cljs/core.cljs"} memoize ^{:arglists (^{:end-column 6, :end-line 8521, :column 3, :line 8521, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8521, :column 4, :line 8521, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 14, :end-line 8516, :column 7, :line 8516, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 8521, :column 4, :line 8521, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8521, :column 3, :line 8521, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8521, :column 4, :line 8521, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 14, :end-line 8516, :column 7, :line 8516, :file "cljs/core.cljs"} memoize, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8285, :column 3, :line 8285, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8285, :column 4, :line 8285, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8285, :column 9, :line 8285, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8285, :column 11, :line 8285, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 8285, :column 13, :line 8285, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 18, :end-line 8279, :column 7, :line 8279, :file "cljs/core.cljs"} alter-meta! ^{:arglists (^{:end-column 18, :end-line 8285, :column 3, :line 8285, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8285, :column 4, :line 8285, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8285, :column 9, :line 8285, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8285, :column 11, :line 8285, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 8285, :column 13, :line 8285, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 18, :end-line 8279, :column 7, :line 8279, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8285, :column 4, :line 8285, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8285, :column 9, :line 8285, :file "cljs/core.cljs"} f & ^{:end-column 17, :end-line 8285, :column 13, :line 8285, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8285, :column 3, :line 8285, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8285, :column 4, :line 8285, :file "cljs/core.cljs"} iref ^{:end-column 10, :end-line 8285, :column 9, :line 8285, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 8285, :column 11, :line 8285, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 8285, :column 13, :line 8285, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 18, :end-line 8279, :column 7, :line 8279, :file "cljs/core.cljs"} alter-meta!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} ->StringBufferWriter ^{:arglists ([^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringBufferWriter [^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 32, :end-line 410, :column 30, :line 410, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 28, :end-line 410, :column 10, :line 410, :file "cljs/core.cljs"} ->StringBufferWriter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2106, :column 22, :line 2106, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2106, :column 23, :line 2106, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 2106, :column 8, :line 2106, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2106, :column 16, :line 2106, :file "cljs/core.cljs"} zero? ^{:arglists (^{:end-column 25, :end-line 2106, :column 22, :line 2106, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2106, :column 23, :line 2106, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 2106, :column 8, :line 2106, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2106, :column 16, :line 2106, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 2106, :column 23, :line 2106, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2106, :column 22, :line 2106, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2106, :column 23, :line 2106, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 2106, :column 8, :line 2106, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2106, :column 16, :line 2106, :file "cljs/core.cljs"} zero?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4550, :column 27, :line 4550, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4550, :column 28, :line 4550, :file "cljs/core.cljs"} edit ^{:end-column 37, :end-line 4550, :column 33, :line 4550, :file "cljs/core.cljs"} node]), :private true, :end-column 26, :end-line 4550, :column 8, :line 4550, :file "cljs/core.cljs"} tv-ensure-editable ^{:arglists (^{:end-column 38, :end-line 4550, :column 27, :line 4550, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4550, :column 28, :line 4550, :file "cljs/core.cljs"} edit ^{:end-column 37, :end-line 4550, :column 33, :line 4550, :file "cljs/core.cljs"} node]), :private true, :end-column 26, :end-line 4550, :column 8, :line 4550, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 4550, :column 28, :line 4550, :file "cljs/core.cljs"} edit ^{:end-column 37, :end-line 4550, :column 33, :line 4550, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4550, :column 27, :line 4550, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4550, :column 28, :line 4550, :file "cljs/core.cljs"} edit ^{:end-column 37, :end-line 4550, :column 33, :line 4550, :file "cljs/core.cljs"} node]), :private true, :end-column 26, :end-line 4550, :column 8, :line 4550, :file "cljs/core.cljs"} tv-ensure-editable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn* ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n ^{:arglists (^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 293, :column 18, :line 293, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 293, :column 19, :line 293, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 293, :column 24, :line 293, :file "cljs/core.cljs"} n ^{:end-column 29, :end-line 293, :column 26, :line 293, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 8, :end-line 293, :column 5, :line 293, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 293, :column 9, :line 293, :file "cljs/core.cljs"} -assoc-n, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1906, :column 25, :line 1906, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1906, :column 26, :line 1906, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1906, :column 7, :line 1906, :file "cljs/core.cljs"} unchecked-dec-int ^{:arglists (^{:end-column 28, :end-line 1906, :column 25, :line 1906, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1906, :column 26, :line 1906, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1906, :column 7, :line 1906, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1906, :column 26, :line 1906, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1906, :column 25, :line 1906, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1906, :column 26, :line 1906, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1906, :column 7, :line 1906, :file "cljs/core.cljs"} unchecked-dec-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2172, :column 18, :line 2172, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2172, :column 19, :line 2172, :file "cljs/core.cljs"} m]), :private true, :end-column 17, :end-line 2172, :column 8, :line 2172, :file "cljs/core.cljs"} hash-imap ^{:arglists (^{:end-column 21, :end-line 2172, :column 18, :line 2172, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2172, :column 19, :line 2172, :file "cljs/core.cljs"} m]), :private true, :end-column 17, :end-line 2172, :column 8, :line 2172, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 20, :end-line 2172, :column 19, :line 2172, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2172, :column 18, :line 2172, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2172, :column 19, :line 2172, :file "cljs/core.cljs"} m]), :private true, :end-column 17, :end-line 2172, :column 8, :line 2172, :file "cljs/core.cljs"} hash-imap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8714, :column 3, :line 8714, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8714, :column 4, :line 8714, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8714, :column 6, :line 8714, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8714, :column 8, :line 8714, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8713, :column 8, :line 8713, :file "cljs/core.cljs"} dominates ^{:arglists (^{:end-column 21, :end-line 8714, :column 3, :line 8714, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8714, :column 4, :line 8714, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8714, :column 6, :line 8714, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8714, :column 8, :line 8714, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8713, :column 8, :line 8713, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 8714, :column 4, :line 8714, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8714, :column 6, :line 8714, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8714, :column 8, :line 8714, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8714, :column 3, :line 8714, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8714, :column 4, :line 8714, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8714, :column 6, :line 8714, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8714, :column 8, :line 8714, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8713, :column 8, :line 8713, :file "cljs/core.cljs"} dominates, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2843, :column 3, :line 2843, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2843, :column 4, :line 2843, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 18, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} persistent! ^{:arglists (^{:end-column 10, :end-line 2843, :column 3, :line 2843, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2843, :column 4, :line 2843, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 18, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2843, :column 4, :line 2843, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2843, :column 3, :line 2843, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2843, :column 4, :line 2843, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 18, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} persistent!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 20, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn! ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 20, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 20, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1091, :column 3, :line 1091, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1091, :column 4, :line 1091, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 12, :end-line 1089, :column 7, :line 1089, :file "cljs/core.cljs"} nnext ^{:arglists (^{:end-column 9, :end-line 1091, :column 3, :line 1091, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1091, :column 4, :line 1091, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 12, :end-line 1089, :column 7, :line 1089, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq [^{:end-column 8, :end-line 1091, :column 4, :line 1091, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1091, :column 3, :line 1091, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1091, :column 4, :line 1091, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 12, :end-line 1089, :column 7, :line 1089, :file "cljs/core.cljs"} nnext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} Box {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} Box, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 29, :end-line 5447, :column 14, :line 5447, :file "cljs/core.cljs"} [^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val], :protocols #{}}, StringBuffer {:op :js-var, :ns goog.string, :name StringBuffer}, ^{:arglists (^{:end-column 40, :end-line 6395, :column 22, :line 6395, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6395, :column 23, :line 6395, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6395, :column 27, :line 6395, :file "cljs/core.cljs"} val ^{:end-column 35, :end-line 6395, :column 31, :line 6395, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6395, :column 36, :line 6395, :file "cljs/core.cljs"} ins]), :private true, :end-column 21, :end-line 6395, :column 8, :line 6395, :file "cljs/core.cljs"} balance-right ^{:arglists (^{:end-column 40, :end-line 6395, :column 22, :line 6395, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6395, :column 23, :line 6395, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6395, :column 27, :line 6395, :file "cljs/core.cljs"} val ^{:end-column 35, :end-line 6395, :column 31, :line 6395, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6395, :column 36, :line 6395, :file "cljs/core.cljs"} ins]), :private true, :end-column 21, :end-line 6395, :column 8, :line 6395, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 6395, :column 23, :line 6395, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6395, :column 27, :line 6395, :file "cljs/core.cljs"} val ^{:end-column 35, :end-line 6395, :column 31, :line 6395, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6395, :column 36, :line 6395, :file "cljs/core.cljs"} ins]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6395, :column 22, :line 6395, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6395, :column 23, :line 6395, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6395, :column 27, :line 6395, :file "cljs/core.cljs"} val ^{:end-column 35, :end-line 6395, :column 31, :line 6395, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6395, :column 36, :line 6395, :file "cljs/core.cljs"} ins]), :private true, :end-column 21, :end-line 6395, :column 8, :line 6395, :file "cljs/core.cljs"} balance-right, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 8751, :column 30, :line 8751, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8751, :column 31, :line 8751, :file "cljs/core.cljs"} name ^{:end-column 48, :end-line 8751, :column 36, :line 8751, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 29, :end-line 8751, :column 8, :line 8751, :file "cljs/core.cljs"} throw-no-method-error ^{:arglists (^{:end-column 49, :end-line 8751, :column 30, :line 8751, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8751, :column 31, :line 8751, :file "cljs/core.cljs"} name ^{:end-column 48, :end-line 8751, :column 36, :line 8751, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 29, :end-line 8751, :column 8, :line 8751, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 35, :end-line 8751, :column 31, :line 8751, :file "cljs/core.cljs"} name ^{:end-column 48, :end-line 8751, :column 36, :line 8751, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 8751, :column 30, :line 8751, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8751, :column 31, :line 8751, :file "cljs/core.cljs"} name ^{:end-column 48, :end-line 8751, :column 36, :line 8751, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 29, :end-line 8751, :column 8, :line 8751, :file "cljs/core.cljs"} throw-no-method-error, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8314, :column 3, :line 8314, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8314, :column 4, :line 8314, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8314, :column 9, :line 8314, :file "cljs/core.cljs"} key ^{:end-column 14, :end-line 8314, :column 13, :line 8314, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 16, :end-line 8293, :column 7, :line 8293, :file "cljs/core.cljs"} add-watch ^{:arglists (^{:end-column 15, :end-line 8314, :column 3, :line 8314, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8314, :column 4, :line 8314, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8314, :column 9, :line 8314, :file "cljs/core.cljs"} key ^{:end-column 14, :end-line 8314, :column 13, :line 8314, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 16, :end-line 8293, :column 7, :line 8293, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8314, :column 4, :line 8314, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8314, :column 9, :line 8314, :file "cljs/core.cljs"} key ^{:end-column 14, :end-line 8314, :column 13, :line 8314, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8314, :column 3, :line 8314, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8314, :column 4, :line 8314, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8314, :column 9, :line 8314, :file "cljs/core.cljs"} key ^{:end-column 14, :end-line 8314, :column 13, :line 8314, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 16, :end-line 8293, :column 7, :line 8293, :file "cljs/core.cljs"} add-watch, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3226, :column 3, :line 3226, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3226, :column 4, :line 3226, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3226, :column 9, :line 3226, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 15, :end-line 3223, :column 8, :line 3223, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3223, :column 16, :line 3223, :file "cljs/core.cljs"} not-every? ^{:arglists (^{:end-column 14, :end-line 3226, :column 3, :line 3226, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3226, :column 4, :line 3226, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3226, :column 9, :line 3226, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 15, :end-line 3223, :column 8, :line 3223, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3223, :column 16, :line 3223, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 8, :end-line 3226, :column 4, :line 3226, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3226, :column 9, :line 3226, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3226, :column 3, :line 3226, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3226, :column 4, :line 3226, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3226, :column 9, :line 3226, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 15, :end-line 3223, :column 8, :line 3223, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3223, :column 16, :line 3223, :file "cljs/core.cljs"} not-every?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 10, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} rem ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 10, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 10, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} rem, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 8070, :column 24, :line 8070, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 8070, :column 25, :line 8070, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 8070, :column 30, :line 8070, :file "cljs/core.cljs"} opts]), :private true, :end-column 23, :end-line 8070, :column 8, :line 8070, :file "cljs/core.cljs"} pr-sb-with-opts ^{:arglists (^{:end-column 35, :end-line 8070, :column 24, :line 8070, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 8070, :column 25, :line 8070, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 8070, :column 30, :line 8070, :file "cljs/core.cljs"} opts]), :private true, :end-column 23, :end-line 8070, :column 8, :line 8070, :file "cljs/core.cljs"} {:arglists (^goog.string/StringBuffer [^{:end-column 29, :end-line 8070, :column 25, :line 8070, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 8070, :column 30, :line 8070, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 8070, :column 24, :line 8070, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 8070, :column 25, :line 8070, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 8070, :column 30, :line 8070, :file "cljs/core.cljs"} opts]), :private true, :end-column 23, :end-line 8070, :column 8, :line 8070, :file "cljs/core.cljs"} pr-sb-with-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} BitmapIndexedNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5510, :column 10, :line 5510, :file "cljs/core.cljs"} BitmapIndexedNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 5510, :column 28, :line 5510, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5510, :column 29, :line 5510, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 50, :end-line 5510, :column 44, :line 5510, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 64, :end-line 5510, :column 61, :line 5510, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists ([^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} ->NodeSeq ^{:arglists ([^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} {:arglists (^cljs.core/NodeSeq [^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 5943, :column 19, :line 5943, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 5943, :column 24, :line 5943, :file "cljs/core.cljs"} nodes ^{:end-column 31, :end-line 5943, :column 30, :line 5943, :file "cljs/core.cljs"} i ^{:end-column 33, :end-line 5943, :column 32, :line 5943, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 50, :end-line 5943, :column 44, :line 5943, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 5943, :column 10, :line 5943, :file "cljs/core.cljs"} ->NodeSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3233, :column 3, :line 3233, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3233, :column 4, :line 3233, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3233, :column 9, :line 3233, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 11, :end-line 3228, :column 7, :line 3228, :file "cljs/core.cljs"} some ^{:arglists (^{:end-column 14, :end-line 3233, :column 3, :line 3233, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3233, :column 4, :line 3233, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3233, :column 9, :line 3233, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 11, :end-line 3228, :column 7, :line 3228, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3233, :column 4, :line 3233, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3233, :column 9, :line 3233, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3233, :column 3, :line 3233, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3233, :column 4, :line 3233, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3233, :column 9, :line 3233, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 11, :end-line 3228, :column 7, :line 3228, :file "cljs/core.cljs"} some, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 20, :end-line 393, :column 14, :line 393, :file "cljs/core.cljs"} INamed ^{:impls (cljs.core/MultiFn cljs.core/Keyword cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 20, :end-line 393, :column 14, :line 393, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 394, :column 5, :line 394, :file "cljs/core.cljs"} string, :end-column 17, :end-line 394, :column 12, :line 394, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 394, :column 18, :line 394, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 394, :column 19, :line 394, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 20, :end-line 393, :column 14, :line 393, :file "cljs/core.cljs"} INamed, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} ->Box ^{:arglists ([^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} {:arglists (^cljs.core/Box [^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 28, :end-line 5447, :column 25, :line 5447, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 13, :end-line 5447, :column 10, :line 5447, :file "cljs/core.cljs"} ->Box, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 21, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} IReduce ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 21, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 308, :column 4, :line 308, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 308, :column 12, :line 308, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 308, :column 13, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 19, :end-line 308, :column 18, :line 308, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 308, :column 21, :line 308, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 308, :column 22, :line 308, :file "cljs/core.cljs"} coll ^{:end-column 28, :end-line 308, :column 27, :line 308, :file "cljs/core.cljs"} f ^{:end-column 34, :end-line 308, :column 29, :line 308, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 21, :end-line 307, :column 14, :line 307, :file "cljs/core.cljs"} IReduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3683, :column 5, :line 3683, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3695, :column 4, :line 3695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3695, :column 5, :line 3695, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 11, :end-line 3680, :column 7, :line 3680, :file "cljs/core.cljs"} drop ^{:arglists (^{:end-column 7, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3683, :column 5, :line 3683, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3695, :column 4, :line 3695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3695, :column 5, :line 3695, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 11, :end-line 3680, :column 7, :line 3680, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3683, :column 5, :line 3683, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3695, :column 5, :line 3695, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3683, :column 4, :line 3683, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3683, :column 5, :line 3683, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3695, :column 4, :line 3695, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3695, :column 5, :line 3695, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 11, :end-line 3680, :column 7, :line 3680, :file "cljs/core.cljs"} drop, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1474, :column 4, :line 1474, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1476, :column 4, :line 1476, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1476, :column 5, :line 1476, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 1476, :column 7, :line 1476, :file "cljs/core.cljs"} keyvals]), :end-column 13, :end-line 1473, :column 7, :line 1473, :file "cljs/core.cljs"} js-obj ^{:arglists (^{:end-column 6, :end-line 1474, :column 4, :line 1474, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1476, :column 4, :line 1476, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1476, :column 5, :line 1476, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 1476, :column 7, :line 1476, :file "cljs/core.cljs"} keyvals]), :end-column 13, :end-line 1473, :column 7, :line 1473, :file "cljs/core.cljs"} {:arglists (^object [] [& ^{:end-column 14, :end-line 1476, :column 7, :line 1476, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1474, :column 4, :line 1474, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1476, :column 4, :line 1476, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1476, :column 5, :line 1476, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 1476, :column 7, :line 1476, :file "cljs/core.cljs"} keyvals]), :end-column 13, :end-line 1473, :column 7, :line 1473, :file "cljs/core.cljs"} js-obj, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 34, :end-line 363, :column 14, :line 363, :file "cljs/core.cljs"} ITransientCollection ^{:impls (cljs.core/TransientHashSet cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 34, :end-line 363, :column 14, :line 363, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 365, :column 9, :line 365, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 365, :column 22, :line 365, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 365, :column 23, :line 365, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 34, :end-line 363, :column 14, :line 363, :file "cljs/core.cljs"} ITransientCollection, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} Atom {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 14, :end-line 3385, :column 10, :line 3385, :file "cljs/core.cljs"} Atom, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 3385, :column 15, :line 3385, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3385, :column 16, :line 3385, :file "cljs/core.cljs"} state ^{:end-column 26, :end-line 3385, :column 22, :line 3385, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 3385, :column 27, :line 3385, :file "cljs/core.cljs"} validator ^{:end-column 44, :end-line 3385, :column 37, :line 3385, :file "cljs/core.cljs"} watches], :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}}, ^{:arglists (^{:end-column 12, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1179, :column 10, :line 1179, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1207, :column 4, :line 1207, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1207, :column 5, :line 1207, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1207, :column 10, :line 1207, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1207, :column 12, :line 1207, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 10, :end-line 1174, :column 7, :line 1174, :file "cljs/core.cljs"} nth ^{:arglists (^{:end-column 12, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1179, :column 10, :line 1179, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1207, :column 4, :line 1207, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1207, :column 5, :line 1207, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1207, :column 10, :line 1207, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1207, :column 12, :line 1207, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 10, :end-line 1174, :column 7, :line 1174, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1179, :column 10, :line 1179, :file "cljs/core.cljs"} n] [^{:end-column 9, :end-line 1207, :column 5, :line 1207, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1207, :column 10, :line 1207, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1207, :column 12, :line 1207, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1179, :column 4, :line 1179, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1179, :column 5, :line 1179, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1179, :column 10, :line 1179, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1207, :column 4, :line 1207, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1207, :column 5, :line 1207, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1207, :column 10, :line 1207, :file "cljs/core.cljs"} n ^{:end-column 21, :end-line 1207, :column 12, :line 1207, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 10, :end-line 1174, :column 7, :line 1174, :file "cljs/core.cljs"} nth, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1450, :column 3, :line 1450, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1450, :column 4, :line 1450, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 15, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} sorted? ^{:arglists (^{:end-column 6, :end-line 1450, :column 3, :line 1450, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1450, :column 4, :line 1450, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 15, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1450, :column 4, :line 1450, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1450, :column 3, :line 1450, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1450, :column 4, :line 1450, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 15, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} sorted?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 15, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil? ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 15, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 15, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3750, :column 3, :line 3750, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3750, :column 4, :line 3750, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3750, :column 6, :line 3750, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 15, :end-line 3748, :column 7, :line 3748, :file "cljs/core.cljs"} split-at ^{:arglists (^{:end-column 11, :end-line 3750, :column 3, :line 3750, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3750, :column 4, :line 3750, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3750, :column 6, :line 3750, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 15, :end-line 3748, :column 7, :line 3748, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 5, :end-line 3750, :column 4, :line 3750, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3750, :column 6, :line 3750, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3750, :column 3, :line 3750, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3750, :column 4, :line 3750, :file "cljs/core.cljs"} n ^{:end-column 10, :end-line 3750, :column 6, :line 3750, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 15, :end-line 3748, :column 7, :line 3748, :file "cljs/core.cljs"} split-at, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 7198, :column 10, :line 7198, :file "cljs/core.cljs"} TransientHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 26, :end-line 7295, :column 10, :line 7295, :file "cljs/core.cljs"} TransientHashSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 7295, :column 27, :line 7295, :file "cljs/core.cljs"} [^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map], :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, ^{:arglists (^{:end-column 35, :end-line 5104, :column 28, :line 5104, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5104, :column 29, :line 5104, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 5104, :column 31, :line 5104, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 5104, :column 33, :line 5104, :file "cljs/core.cljs"} v]), :private true, :end-column 27, :end-line 5104, :column 8, :line 5104, :file "cljs/core.cljs"} array-map-extend-kv ^{:arglists (^{:end-column 35, :end-line 5104, :column 28, :line 5104, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5104, :column 29, :line 5104, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 5104, :column 31, :line 5104, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 5104, :column 33, :line 5104, :file "cljs/core.cljs"} v]), :private true, :end-column 27, :end-line 5104, :column 8, :line 5104, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 30, :end-line 5104, :column 29, :line 5104, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 5104, :column 31, :line 5104, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 5104, :column 33, :line 5104, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 5104, :column 28, :line 5104, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5104, :column 29, :line 5104, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 5104, :column 31, :line 5104, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 5104, :column 33, :line 5104, :file "cljs/core.cljs"} v]), :private true, :end-column 27, :end-line 5104, :column 8, :line 5104, :file "cljs/core.cljs"} array-map-extend-kv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8087, :column 3, :line 8087, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8087, :column 4, :line 8087, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8087, :column 9, :line 8087, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 24, :end-line 8085, :column 7, :line 8085, :file "cljs/core.cljs"} prn-str-with-opts ^{:arglists (^{:end-column 14, :end-line 8087, :column 3, :line 8087, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8087, :column 4, :line 8087, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8087, :column 9, :line 8087, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 24, :end-line 8085, :column 7, :line 8085, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8087, :column 4, :line 8087, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8087, :column 9, :line 8087, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8087, :column 3, :line 8087, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8087, :column 4, :line 8087, :file "cljs/core.cljs"} objs ^{:end-column 13, :end-line 8087, :column 9, :line 8087, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 24, :end-line 8085, :column 7, :line 8085, :file "cljs/core.cljs"} prn-str-with-opts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 8412, :column 4, :line 8412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8412, :column 5, :line 8412, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8414, :column 4, :line 8414, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8414, :column 5, :line 8414, :file "cljs/core.cljs"} prob ^{:end-column 14, :end-line 8414, :column 10, :line 8414, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 20, :end-line 8409, :column 7, :line 8409, :file "cljs/core.cljs"} random-sample ^{:arglists (^{:end-column 10, :end-line 8412, :column 4, :line 8412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8412, :column 5, :line 8412, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8414, :column 4, :line 8414, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8414, :column 5, :line 8414, :file "cljs/core.cljs"} prob ^{:end-column 14, :end-line 8414, :column 10, :line 8414, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 20, :end-line 8409, :column 7, :line 8409, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 8412, :column 5, :line 8412, :file "cljs/core.cljs"} prob] ^cljs.core/LazySeq [^{:end-column 9, :end-line 8414, :column 5, :line 8414, :file "cljs/core.cljs"} prob ^{:end-column 14, :end-line 8414, :column 10, :line 8414, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 8412, :column 4, :line 8412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8412, :column 5, :line 8412, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8414, :column 4, :line 8414, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8414, :column 5, :line 8414, :file "cljs/core.cljs"} prob ^{:end-column 14, :end-line 8414, :column 10, :line 8414, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 20, :end-line 8409, :column 7, :line 8409, :file "cljs/core.cljs"} random-sample, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7184, :column 3, :line 7184, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7184, :column 4, :line 7184, :file "cljs/core.cljs"} map ^{:end-column 14, :end-line 7184, :column 8, :line 7184, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 18, :end-line 7182, :column 7, :line 7182, :file "cljs/core.cljs"} select-keys ^{:arglists (^{:end-column 15, :end-line 7184, :column 3, :line 7184, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7184, :column 4, :line 7184, :file "cljs/core.cljs"} map ^{:end-column 14, :end-line 7184, :column 8, :line 7184, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 18, :end-line 7182, :column 7, :line 7182, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7184, :column 4, :line 7184, :file "cljs/core.cljs"} map ^{:end-column 14, :end-line 7184, :column 8, :line 7184, :file "cljs/core.cljs"} keyseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7184, :column 3, :line 7184, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7184, :column 4, :line 7184, :file "cljs/core.cljs"} map ^{:end-column 14, :end-line 7184, :column 8, :line 7184, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 18, :end-line 7182, :column 7, :line 7182, :file "cljs/core.cljs"} select-keys, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2032, :column 3, :line 2032, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2032, :column 4, :line 2032, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2032, :column 6, :line 2032, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 14, :end-line 2030, :column 7, :line 2030, :file "cljs/core.cljs"} bit-and ^{:arglists (^{:end-column 8, :end-line 2032, :column 3, :line 2032, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2032, :column 4, :line 2032, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2032, :column 6, :line 2032, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 14, :end-line 2030, :column 7, :line 2030, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2032, :column 4, :line 2032, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2032, :column 6, :line 2032, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2032, :column 3, :line 2032, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2032, :column 4, :line 2032, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2032, :column 6, :line 2032, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 14, :end-line 2030, :column 7, :line 2030, :file "cljs/core.cljs"} bit-and, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2780, :column 22, :line 2780, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2780, :column 23, :line 2780, :file "cljs/core.cljs"} s ^{:end-column 26, :end-line 2780, :column 25, :line 2780, :file "cljs/core.cljs"} n]), :private true, :end-column 21, :end-line 2780, :column 8, :line 2780, :file "cljs/core.cljs"} bounded-count ^{:arglists (^{:end-column 27, :end-line 2780, :column 22, :line 2780, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2780, :column 23, :line 2780, :file "cljs/core.cljs"} s ^{:end-column 26, :end-line 2780, :column 25, :line 2780, :file "cljs/core.cljs"} n]), :private true, :end-column 21, :end-line 2780, :column 8, :line 2780, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 2780, :column 23, :line 2780, :file "cljs/core.cljs"} s ^{:end-column 26, :end-line 2780, :column 25, :line 2780, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2780, :column 22, :line 2780, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2780, :column 23, :line 2780, :file "cljs/core.cljs"} s ^{:end-column 26, :end-line 2780, :column 25, :line 2780, :file "cljs/core.cljs"} n]), :private true, :end-column 21, :end-line 2780, :column 8, :line 2780, :file "cljs/core.cljs"} bounded-count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 4001, :column 4, :line 4001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4001, :column 5, :line 4001, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4001, :column 7, :line 4001, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4001, :column 9, :line 4001, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 4003, :column 4, :line 4003, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4003, :column 5, :line 4003, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4003, :column 7, :line 4003, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4003, :column 9, :line 4003, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4003, :column 11, :line 4003, :file "cljs/core.cljs"} x] ^{:end-column 15, :end-line 4005, :column 4, :line 4005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4005, :column 5, :line 4005, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4005, :column 7, :line 4005, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4005, :column 9, :line 4005, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4005, :column 11, :line 4005, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4005, :column 13, :line 4005, :file "cljs/core.cljs"} y] ^{:end-column 17, :end-line 4007, :column 4, :line 4007, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4007, :column 5, :line 4007, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4007, :column 7, :line 4007, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4007, :column 9, :line 4007, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4007, :column 11, :line 4007, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4007, :column 13, :line 4007, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4007, :column 15, :line 4007, :file "cljs/core.cljs"} z] ^{:end-column 24, :end-line 4009, :column 4, :line 4009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4009, :column 5, :line 4009, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4009, :column 7, :line 4009, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4009, :column 9, :line 4009, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4009, :column 11, :line 4009, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4009, :column 13, :line 4009, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4009, :column 15, :line 4009, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 4009, :column 17, :line 4009, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 4009, :column 19, :line 4009, :file "cljs/core.cljs"} more]), :doc "'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.", :end-column 13, :end-line 3996, :column 7, :line 3996, :file "cljs/core.cljs"} update ^{:arglists (^{:end-column 11, :end-line 4001, :column 4, :line 4001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4001, :column 5, :line 4001, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4001, :column 7, :line 4001, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4001, :column 9, :line 4001, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 4003, :column 4, :line 4003, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4003, :column 5, :line 4003, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4003, :column 7, :line 4003, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4003, :column 9, :line 4003, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4003, :column 11, :line 4003, :file "cljs/core.cljs"} x] ^{:end-column 15, :end-line 4005, :column 4, :line 4005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4005, :column 5, :line 4005, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4005, :column 7, :line 4005, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4005, :column 9, :line 4005, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4005, :column 11, :line 4005, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4005, :column 13, :line 4005, :file "cljs/core.cljs"} y] ^{:end-column 17, :end-line 4007, :column 4, :line 4007, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4007, :column 5, :line 4007, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4007, :column 7, :line 4007, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4007, :column 9, :line 4007, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4007, :column 11, :line 4007, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4007, :column 13, :line 4007, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4007, :column 15, :line 4007, :file "cljs/core.cljs"} z] ^{:end-column 24, :end-line 4009, :column 4, :line 4009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4009, :column 5, :line 4009, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4009, :column 7, :line 4009, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4009, :column 9, :line 4009, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4009, :column 11, :line 4009, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4009, :column 13, :line 4009, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4009, :column 15, :line 4009, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 4009, :column 17, :line 4009, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 4009, :column 19, :line 4009, :file "cljs/core.cljs"} more]), :doc "'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.", :end-column 13, :end-line 3996, :column 7, :line 3996, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 4001, :column 5, :line 4001, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4001, :column 7, :line 4001, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4001, :column 9, :line 4001, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 4003, :column 5, :line 4003, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4003, :column 7, :line 4003, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4003, :column 9, :line 4003, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4003, :column 11, :line 4003, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 4005, :column 5, :line 4005, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4005, :column 7, :line 4005, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4005, :column 9, :line 4005, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4005, :column 11, :line 4005, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4005, :column 13, :line 4005, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 4007, :column 5, :line 4007, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4007, :column 7, :line 4007, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4007, :column 9, :line 4007, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4007, :column 11, :line 4007, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4007, :column 13, :line 4007, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4007, :column 15, :line 4007, :file "cljs/core.cljs"} z] [^{:end-column 6, :end-line 4009, :column 5, :line 4009, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4009, :column 7, :line 4009, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4009, :column 9, :line 4009, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4009, :column 11, :line 4009, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4009, :column 13, :line 4009, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4009, :column 15, :line 4009, :file "cljs/core.cljs"} z & ^{:end-column 23, :end-line 4009, :column 19, :line 4009, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 4001, :column 4, :line 4001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4001, :column 5, :line 4001, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4001, :column 7, :line 4001, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4001, :column 9, :line 4001, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 4003, :column 4, :line 4003, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4003, :column 5, :line 4003, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4003, :column 7, :line 4003, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4003, :column 9, :line 4003, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4003, :column 11, :line 4003, :file "cljs/core.cljs"} x] ^{:end-column 15, :end-line 4005, :column 4, :line 4005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4005, :column 5, :line 4005, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4005, :column 7, :line 4005, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4005, :column 9, :line 4005, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4005, :column 11, :line 4005, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4005, :column 13, :line 4005, :file "cljs/core.cljs"} y] ^{:end-column 17, :end-line 4007, :column 4, :line 4007, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4007, :column 5, :line 4007, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4007, :column 7, :line 4007, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4007, :column 9, :line 4007, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4007, :column 11, :line 4007, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4007, :column 13, :line 4007, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4007, :column 15, :line 4007, :file "cljs/core.cljs"} z] ^{:end-column 24, :end-line 4009, :column 4, :line 4009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4009, :column 5, :line 4009, :file "cljs/core.cljs"} m ^{:end-column 8, :end-line 4009, :column 7, :line 4009, :file "cljs/core.cljs"} k ^{:end-column 10, :end-line 4009, :column 9, :line 4009, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 4009, :column 11, :line 4009, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 4009, :column 13, :line 4009, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 4009, :column 15, :line 4009, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 4009, :column 17, :line 4009, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 4009, :column 19, :line 4009, :file "cljs/core.cljs"} more]), :doc "'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.", :end-column 13, :end-line 3996, :column 7, :line 3996, :file "cljs/core.cljs"} update, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 25, :end-line 8326, :column 1, :line 8326, :file "cljs/core.cljs"} gensym_counter ^{:end-column 25, :end-line 8326, :column 1, :line 8326, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 25, :end-line 8326, :column 1, :line 8326, :file "cljs/core.cljs"} gensym_counter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2824, :column 4, :line 2824, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2824, :column 5, :line 2824, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2825, :column 4, :line 2825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2825, :column 5, :line 2825, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2825, :column 7, :line 2825, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2826, :column 4, :line 2826, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2826, :column 5, :line 2826, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2826, :column 7, :line 2826, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2826, :column 9, :line 2826, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2827, :column 4, :line 2827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2827, :column 5, :line 2827, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2827, :column 7, :line 2827, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2827, :column 9, :line 2827, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2827, :column 11, :line 2827, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2828, :column 4, :line 2828, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2828, :column 5, :line 2828, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2828, :column 9, :line 2828, :file "cljs/core.cljs"} c ^{:end-column 12, :end-line 2828, :column 11, :line 2828, :file "cljs/core.cljs"} d ^{:end-column 14, :end-line 2828, :column 13, :line 2828, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2828, :column 15, :line 2828, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 12, :end-line 2821, :column 7, :line 2821, :file "cljs/core.cljs"} list* ^{:arglists (^{:end-column 10, :end-line 2824, :column 4, :line 2824, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2824, :column 5, :line 2824, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2825, :column 4, :line 2825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2825, :column 5, :line 2825, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2825, :column 7, :line 2825, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2826, :column 4, :line 2826, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2826, :column 5, :line 2826, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2826, :column 7, :line 2826, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2826, :column 9, :line 2826, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2827, :column 4, :line 2827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2827, :column 5, :line 2827, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2827, :column 7, :line 2827, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2827, :column 9, :line 2827, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2827, :column 11, :line 2827, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2828, :column 4, :line 2828, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2828, :column 5, :line 2828, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2828, :column 9, :line 2828, :file "cljs/core.cljs"} c ^{:end-column 12, :end-line 2828, :column 11, :line 2828, :file "cljs/core.cljs"} d ^{:end-column 14, :end-line 2828, :column 13, :line 2828, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2828, :column 15, :line 2828, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 12, :end-line 2821, :column 7, :line 2821, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq [^{:end-column 9, :end-line 2824, :column 5, :line 2824, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 6, :end-line 2825, :column 5, :line 2825, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2825, :column 7, :line 2825, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 6, :end-line 2826, :column 5, :line 2826, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2826, :column 7, :line 2826, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2826, :column 9, :line 2826, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 6, :end-line 2827, :column 5, :line 2827, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2827, :column 7, :line 2827, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2827, :column 9, :line 2827, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2827, :column 11, :line 2827, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 6, :end-line 2828, :column 5, :line 2828, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2828, :column 9, :line 2828, :file "cljs/core.cljs"} c ^{:end-column 12, :end-line 2828, :column 11, :line 2828, :file "cljs/core.cljs"} d & ^{:end-column 19, :end-line 2828, :column 15, :line 2828, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2824, :column 4, :line 2824, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2824, :column 5, :line 2824, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2825, :column 4, :line 2825, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2825, :column 5, :line 2825, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2825, :column 7, :line 2825, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2826, :column 4, :line 2826, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2826, :column 5, :line 2826, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2826, :column 7, :line 2826, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2826, :column 9, :line 2826, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2827, :column 4, :line 2827, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2827, :column 5, :line 2827, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2827, :column 7, :line 2827, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2827, :column 9, :line 2827, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2827, :column 11, :line 2827, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2828, :column 4, :line 2828, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2828, :column 5, :line 2828, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} b ^{:end-column 10, :end-line 2828, :column 9, :line 2828, :file "cljs/core.cljs"} c ^{:end-column 12, :end-line 2828, :column 11, :line 2828, :file "cljs/core.cljs"} d ^{:end-column 14, :end-line 2828, :column 13, :line 2828, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 2828, :column 15, :line 2828, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 12, :end-line 2821, :column 7, :line 2821, :file "cljs/core.cljs"} list*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 17, :end-line 2413, :column 10, :line 2413, :file "cljs/core.cljs"} ->Keyword ^{:arglists ([^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 17, :end-line 2413, :column 10, :line 2413, :file "cljs/core.cljs"} {:arglists (^cljs.core/Keyword [^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 17, :end-line 2413, :column 10, :line 2413, :file "cljs/core.cljs"} ->Keyword, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3975, :column 4, :line 3975, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3975, :column 5, :line 3975, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3975, :column 7, :line 3975, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3975, :column 8, :line 3975, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3975, :column 10, :line 3975, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3975, :column 12, :line 3975, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3975, :column 16, :line 3975, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3979, :column 4, :line 3979, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3979, :column 5, :line 3979, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3979, :column 7, :line 3979, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3979, :column 8, :line 3979, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3979, :column 10, :line 3979, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3979, :column 12, :line 3979, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3979, :column 16, :line 3979, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3979, :column 18, :line 3979, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3983, :column 4, :line 3983, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3983, :column 5, :line 3983, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3983, :column 7, :line 3983, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3983, :column 8, :line 3983, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3983, :column 10, :line 3983, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3983, :column 12, :line 3983, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3983, :column 16, :line 3983, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3983, :column 18, :line 3983, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3983, :column 20, :line 3983, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3987, :column 4, :line 3987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3987, :column 5, :line 3987, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3987, :column 7, :line 3987, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3987, :column 12, :line 3987, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3987, :column 16, :line 3987, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3987, :column 20, :line 3987, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3991, :column 4, :line 3991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3991, :column 5, :line 3991, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3991, :column 7, :line 3991, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3991, :column 8, :line 3991, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3991, :column 10, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3991, :column 12, :line 3991, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3991, :column 16, :line 3991, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3991, :column 18, :line 3991, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3991, :column 20, :line 3991, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3991, :column 22, :line 3991, :file "cljs/core.cljs"} c ^{:end-column 25, :end-line 3991, :column 24, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 3991, :column 26, :line 3991, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 16, :end-line 3969, :column 7, :line 3969, :file "cljs/core.cljs"} update-in ^{:arglists (^{:end-column 18, :end-line 3975, :column 4, :line 3975, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3975, :column 5, :line 3975, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3975, :column 7, :line 3975, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3975, :column 8, :line 3975, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3975, :column 10, :line 3975, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3975, :column 12, :line 3975, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3975, :column 16, :line 3975, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3979, :column 4, :line 3979, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3979, :column 5, :line 3979, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3979, :column 7, :line 3979, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3979, :column 8, :line 3979, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3979, :column 10, :line 3979, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3979, :column 12, :line 3979, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3979, :column 16, :line 3979, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3979, :column 18, :line 3979, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3983, :column 4, :line 3983, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3983, :column 5, :line 3983, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3983, :column 7, :line 3983, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3983, :column 8, :line 3983, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3983, :column 10, :line 3983, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3983, :column 12, :line 3983, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3983, :column 16, :line 3983, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3983, :column 18, :line 3983, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3983, :column 20, :line 3983, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3987, :column 4, :line 3987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3987, :column 5, :line 3987, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3987, :column 7, :line 3987, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3987, :column 12, :line 3987, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3987, :column 16, :line 3987, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3987, :column 20, :line 3987, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3991, :column 4, :line 3991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3991, :column 5, :line 3991, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3991, :column 7, :line 3991, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3991, :column 8, :line 3991, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3991, :column 10, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3991, :column 12, :line 3991, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3991, :column 16, :line 3991, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3991, :column 18, :line 3991, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3991, :column 20, :line 3991, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3991, :column 22, :line 3991, :file "cljs/core.cljs"} c ^{:end-column 25, :end-line 3991, :column 24, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 3991, :column 26, :line 3991, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 16, :end-line 3969, :column 7, :line 3969, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3975, :column 5, :line 3975, :file "cljs/core.cljs"} m p__8762 ^{:end-column 17, :end-line 3975, :column 16, :line 3975, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 3979, :column 5, :line 3979, :file "cljs/core.cljs"} m p__8765 ^{:end-column 17, :end-line 3979, :column 16, :line 3979, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3979, :column 18, :line 3979, :file "cljs/core.cljs"} a] [^{:end-column 6, :end-line 3983, :column 5, :line 3983, :file "cljs/core.cljs"} m p__8768 ^{:end-column 17, :end-line 3983, :column 16, :line 3983, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3983, :column 18, :line 3983, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3983, :column 20, :line 3983, :file "cljs/core.cljs"} b] [^{:end-column 6, :end-line 3987, :column 5, :line 3987, :file "cljs/core.cljs"} m p__8771 ^{:end-column 17, :end-line 3987, :column 16, :line 3987, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3987, :column 20, :line 3987, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} c] [^{:end-column 6, :end-line 3991, :column 5, :line 3991, :file "cljs/core.cljs"} m p__8774 ^{:end-column 17, :end-line 3991, :column 16, :line 3991, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3991, :column 18, :line 3991, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3991, :column 20, :line 3991, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3991, :column 22, :line 3991, :file "cljs/core.cljs"} c & ^{:end-column 30, :end-line 3991, :column 26, :line 3991, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3975, :column 4, :line 3975, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3975, :column 5, :line 3975, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3975, :column 7, :line 3975, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3975, :column 8, :line 3975, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3975, :column 10, :line 3975, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3975, :column 12, :line 3975, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3975, :column 16, :line 3975, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3979, :column 4, :line 3979, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3979, :column 5, :line 3979, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3979, :column 7, :line 3979, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3979, :column 8, :line 3979, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3979, :column 10, :line 3979, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3979, :column 12, :line 3979, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3979, :column 16, :line 3979, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3979, :column 18, :line 3979, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3983, :column 4, :line 3983, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3983, :column 5, :line 3983, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3983, :column 7, :line 3983, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3983, :column 8, :line 3983, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3983, :column 10, :line 3983, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3983, :column 12, :line 3983, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3983, :column 16, :line 3983, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3983, :column 18, :line 3983, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3983, :column 20, :line 3983, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3987, :column 4, :line 3987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3987, :column 5, :line 3987, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3987, :column 7, :line 3987, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3987, :column 10, :line 3987, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3987, :column 12, :line 3987, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3987, :column 16, :line 3987, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3987, :column 20, :line 3987, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3991, :column 4, :line 3991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3991, :column 5, :line 3991, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3991, :column 7, :line 3991, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3991, :column 8, :line 3991, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3991, :column 10, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3991, :column 12, :line 3991, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3991, :column 16, :line 3991, :file "cljs/core.cljs"} f ^{:end-column 19, :end-line 3991, :column 18, :line 3991, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 3991, :column 20, :line 3991, :file "cljs/core.cljs"} b ^{:end-column 23, :end-line 3991, :column 22, :line 3991, :file "cljs/core.cljs"} c ^{:end-column 25, :end-line 3991, :column 24, :line 3991, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 3991, :column 26, :line 3991, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 16, :end-line 3969, :column 7, :line 3969, :file "cljs/core.cljs"} update-in, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 8952, :column 3, :line 8952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8952, :column 4, :line 8952, :file "cljs/core.cljs"} multifn ^{:end-column 26, :end-line 8952, :column 12, :line 8952, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 41, :end-line 8952, :column 27, :line 8952, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 20, :end-line 8949, :column 7, :line 8949, :file "cljs/core.cljs"} prefer-method ^{:arglists (^{:end-column 42, :end-line 8952, :column 3, :line 8952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8952, :column 4, :line 8952, :file "cljs/core.cljs"} multifn ^{:end-column 26, :end-line 8952, :column 12, :line 8952, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 41, :end-line 8952, :column 27, :line 8952, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 20, :end-line 8949, :column 7, :line 8949, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8952, :column 4, :line 8952, :file "cljs/core.cljs"} multifn ^{:end-column 26, :end-line 8952, :column 12, :line 8952, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 41, :end-line 8952, :column 27, :line 8952, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8952, :column 3, :line 8952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8952, :column 4, :line 8952, :file "cljs/core.cljs"} multifn ^{:end-column 26, :end-line 8952, :column 12, :line 8952, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 41, :end-line 8952, :column 27, :line 8952, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 20, :end-line 8949, :column 7, :line 8949, :file "cljs/core.cljs"} prefer-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 559, :column 20, :line 559, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 559, :column 21, :line 559, :file "cljs/core.cljs"} sym]), :private true, :end-column 19, :end-line 559, :column 8, :line 559, :file "cljs/core.cljs"} hash-symbol ^{:arglists (^{:end-column 25, :end-line 559, :column 20, :line 559, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 559, :column 21, :line 559, :file "cljs/core.cljs"} sym]), :private true, :end-column 19, :end-line 559, :column 8, :line 559, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 559, :column 21, :line 559, :file "cljs/core.cljs"} sym]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 559, :column 20, :line 559, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 559, :column 21, :line 559, :file "cljs/core.cljs"} sym]), :private true, :end-column 19, :end-line 559, :column 8, :line 559, :file "cljs/core.cljs"} hash-symbol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 832, :column 3, :line 832, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 832, :column 4, :line 832, :file "cljs/core.cljs"} x]), :doc "If x is already reduced?, returns it, else returns (reduced x)", :end-column 21, :end-line 830, :column 7, :line 830, :file "cljs/core.cljs"} ensure-reduced ^{:arglists (^{:end-column 6, :end-line 832, :column 3, :line 832, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 832, :column 4, :line 832, :file "cljs/core.cljs"} x]), :doc "If x is already reduced?, returns it, else returns (reduced x)", :end-column 21, :end-line 830, :column 7, :line 830, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 832, :column 4, :line 832, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 832, :column 3, :line 832, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 832, :column 4, :line 832, :file "cljs/core.cljs"} x]), :doc "If x is already reduced?, returns it, else returns (reduced x)", :end-column 21, :end-line 830, :column 7, :line 830, :file "cljs/core.cljs"} ensure-reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 5482, :column 4, :line 5482, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5482, :column 5, :line 5482, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5482, :column 11, :line 5482, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5482, :column 16, :line 5482, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5482, :column 18, :line 5482, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5486, :column 4, :line 5486, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5486, :column 5, :line 5486, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5486, :column 11, :line 5486, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5486, :column 16, :line 5486, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5486, :column 18, :line 5486, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 5486, :column 20, :line 5486, :file "cljs/core.cljs"} j ^{:end-column 23, :end-line 5486, :column 22, :line 5486, :file "cljs/core.cljs"} b]), :private true, :end-column 20, :end-line 5481, :column 8, :line 5481, :file "cljs/core.cljs"} edit-and-set ^{:arglists (^{:end-column 20, :end-line 5482, :column 4, :line 5482, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5482, :column 5, :line 5482, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5482, :column 11, :line 5482, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5482, :column 16, :line 5482, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5482, :column 18, :line 5482, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5486, :column 4, :line 5486, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5486, :column 5, :line 5486, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5486, :column 11, :line 5486, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5486, :column 16, :line 5486, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5486, :column 18, :line 5486, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 5486, :column 20, :line 5486, :file "cljs/core.cljs"} j ^{:end-column 23, :end-line 5486, :column 22, :line 5486, :file "cljs/core.cljs"} b]), :private true, :end-column 20, :end-line 5481, :column 8, :line 5481, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 5482, :column 5, :line 5482, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5482, :column 11, :line 5482, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5482, :column 16, :line 5482, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5482, :column 18, :line 5482, :file "cljs/core.cljs"} a] [^{:end-column 10, :end-line 5486, :column 5, :line 5486, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5486, :column 11, :line 5486, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5486, :column 16, :line 5486, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5486, :column 18, :line 5486, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 5486, :column 20, :line 5486, :file "cljs/core.cljs"} j ^{:end-column 23, :end-line 5486, :column 22, :line 5486, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 5482, :column 4, :line 5482, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5482, :column 5, :line 5482, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5482, :column 11, :line 5482, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5482, :column 16, :line 5482, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5482, :column 18, :line 5482, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5486, :column 4, :line 5486, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5486, :column 5, :line 5486, :file "cljs/core.cljs"} inode ^{:end-column 15, :end-line 5486, :column 11, :line 5486, :file "cljs/core.cljs"} edit ^{:end-column 17, :end-line 5486, :column 16, :line 5486, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 5486, :column 18, :line 5486, :file "cljs/core.cljs"} a ^{:end-column 21, :end-line 5486, :column 20, :line 5486, :file "cljs/core.cljs"} j ^{:end-column 23, :end-line 5486, :column 22, :line 5486, :file "cljs/core.cljs"} b]), :private true, :end-column 20, :end-line 5481, :column 8, :line 5481, :file "cljs/core.cljs"} edit-and-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} ->PersistentArrayMap ^{:arglists ([^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} ->PersistentArrayMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 76, :column 10, :line 76, :file "cljs/core.cljs"} instance? ^{:arglists (^{:end-column 31, :end-line 553, :column 26, :line 553, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 553, :column 27, :line 553, :file "cljs/core.cljs"} t ^{:end-column 30, :end-line 553, :column 29, :line 553, :file "cljs/core.cljs"} o]), :tag ^{:end-column 15, :end-line 553, :column 8, :line 553, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 553, :column 16, :line 553, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 28, :end-line 553, :column 27, :line 553, :file "cljs/core.cljs"} t ^{:end-column 30, :end-line 553, :column 29, :line 553, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 553, :column 26, :line 553, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 553, :column 27, :line 553, :file "cljs/core.cljs"} t ^{:end-column 30, :end-line 553, :column 29, :line 553, :file "cljs/core.cljs"} o]), :tag ^{:end-column 15, :end-line 553, :column 8, :line 553, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 553, :column 16, :line 553, :file "cljs/core.cljs"} instance?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 747, :column 3, :line 747, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 747, :column 4, :line 747, :file "cljs/core.cljs"} hash-basis ^{:end-column 20, :end-line 747, :column 15, :line 747, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 741, :column 8, :line 741, :file "cljs/core.cljs"} number, :end-column 34, :end-line 741, :column 15, :line 741, :file "cljs/core.cljs"} mix-collection-hash ^{:arglists (^{:end-column 21, :end-line 747, :column 3, :line 747, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 747, :column 4, :line 747, :file "cljs/core.cljs"} hash-basis ^{:end-column 20, :end-line 747, :column 15, :line 747, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 741, :column 8, :line 741, :file "cljs/core.cljs"} number, :end-column 34, :end-line 741, :column 15, :line 741, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 14, :end-line 747, :column 4, :line 747, :file "cljs/core.cljs"} hash-basis ^{:end-column 20, :end-line 747, :column 15, :line 747, :file "cljs/core.cljs"} count]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 747, :column 3, :line 747, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 747, :column 4, :line 747, :file "cljs/core.cljs"} hash-basis ^{:end-column 20, :end-line 747, :column 15, :line 747, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 741, :column 8, :line 741, :file "cljs/core.cljs"} number, :end-column 34, :end-line 741, :column 15, :line 741, :file "cljs/core.cljs"} mix-collection-hash, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7916, :column 3, :line 7916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7916, :column 4, :line 7916, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7916, :column 7, :line 7916, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 14, :end-line 7911, :column 7, :line 7911, :file "cljs/core.cljs"} re-find ^{:arglists (^{:end-column 9, :end-line 7916, :column 3, :line 7916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7916, :column 4, :line 7916, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7916, :column 7, :line 7916, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 14, :end-line 7911, :column 7, :line 7911, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7916, :column 4, :line 7916, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7916, :column 7, :line 7916, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7916, :column 3, :line 7916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7916, :column 4, :line 7916, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7916, :column 7, :line 7916, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 14, :end-line 7911, :column 7, :line 7911, :file "cljs/core.cljs"} re-find, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8442, :column 3, :line 8442, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8442, :column 4, :line 8442, :file "cljs/core.cljs"} proc ^{:end-column 13, :end-line 8442, :column 9, :line 8442, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 11, :end-line 8439, :column 7, :line 8439, :file "cljs/core.cljs"} run! ^{:arglists (^{:end-column 14, :end-line 8442, :column 3, :line 8442, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8442, :column 4, :line 8442, :file "cljs/core.cljs"} proc ^{:end-column 13, :end-line 8442, :column 9, :line 8442, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 11, :end-line 8439, :column 7, :line 8439, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8442, :column 4, :line 8442, :file "cljs/core.cljs"} proc ^{:end-column 13, :end-line 8442, :column 9, :line 8442, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8442, :column 3, :line 8442, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8442, :column 4, :line 8442, :file "cljs/core.cljs"} proc ^{:end-column 13, :end-line 8442, :column 9, :line 8442, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 11, :end-line 8439, :column 7, :line 8439, :file "cljs/core.cljs"} run!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 17, :end-line 7982, :column 1, :line 7974, :file "cljs/core.cljs"} char-escapes ^{:private true, :end-column 17, :end-line 7982, :column 1, :line 7974, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 17, :end-line 7982, :column 1, :line 7974, :file "cljs/core.cljs"} char-escapes, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} ES6Iterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 709, :column 10, :line 709, :file "cljs/core.cljs"} ES6Iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 709, :column 22, :line 709, :file "cljs/core.cljs"} [^{:mutable true, :end-column 34, :end-line 709, :column 33, :line 709, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:declared true, :end-column 17, :end-line 2170, :column 14, :line 2170, :file "cljs/core.cljs"} val ^{:arglists (^{:end-column 14, :end-line 7155, :column 3, :line 7155, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7155, :column 4, :line 7155, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 10, :end-line 7153, :column 7, :line 7153, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 7155, :column 4, :line 7155, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7155, :column 3, :line 7155, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7155, :column 4, :line 7155, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 10, :end-line 7153, :column 7, :line 7153, :file "cljs/core.cljs"} val, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1893, :column 4, :line 1893, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1893, :column 5, :line 1893, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1893, :column 7, :line 1893, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1894, :column 4, :line 1894, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1894, :column 5, :line 1894, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1894, :column 11, :line 1894, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1889, :column 8, :line 1889, :file "cljs/core.cljs"} number, :end-column 28, :end-line 1889, :column 15, :line 1889, :file "cljs/core.cljs"} unchecked-add ^{:arglists (^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1893, :column 4, :line 1893, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1893, :column 5, :line 1893, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1893, :column 7, :line 1893, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1894, :column 4, :line 1894, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1894, :column 5, :line 1894, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1894, :column 11, :line 1894, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1889, :column 8, :line 1889, :file "cljs/core.cljs"} number, :end-column 28, :end-line 1889, :column 15, :line 1889, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1893, :column 5, :line 1893, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1893, :column 7, :line 1893, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1894, :column 5, :line 1894, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1894, :column 11, :line 1894, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1893, :column 4, :line 1893, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1893, :column 5, :line 1893, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1893, :column 7, :line 1893, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1894, :column 4, :line 1894, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1894, :column 5, :line 1894, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1894, :column 7, :line 1894, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1894, :column 11, :line 1894, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1889, :column 8, :line 1889, :file "cljs/core.cljs"} number, :end-column 28, :end-line 1889, :column 15, :line 1889, :file "cljs/core.cljs"} unchecked-add, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 15, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 15, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 15, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1628, :column 3, :line 1628, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 31, :end-line 1625, :column 17, :line 1625, :file "cljs/core.cljs"} fn->comparator ^{:arglists (^{:end-column 6, :end-line 1628, :column 3, :line 1628, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 31, :end-line 1625, :column 17, :line 1625, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1628, :column 3, :line 1628, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1628, :column 4, :line 1628, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 31, :end-line 1625, :column 17, :line 1625, :file "cljs/core.cljs"} fn->comparator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 797, :column 10, :line 797, :file "cljs/core.cljs"} with-meta ^{:arglists (^{:end-column 11, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} o ^{:end-column 10, :end-line 1378, :column 6, :line 1378, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 16, :end-line 1375, :column 7, :line 1375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} o ^{:end-column 10, :end-line 1378, :column 6, :line 1378, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1378, :column 3, :line 1378, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1378, :column 4, :line 1378, :file "cljs/core.cljs"} o ^{:end-column 10, :end-line 1378, :column 6, :line 1378, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 16, :end-line 1375, :column 7, :line 1375, :file "cljs/core.cljs"} with-meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 837, :column 3, :line 837, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 837, :column 4, :line 837, :file "cljs/core.cljs"} x]), :doc "If x is reduced?, returns (deref x), else returns x", :end-column 16, :end-line 835, :column 7, :line 835, :file "cljs/core.cljs"} unreduced ^{:arglists (^{:end-column 6, :end-line 837, :column 3, :line 837, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 837, :column 4, :line 837, :file "cljs/core.cljs"} x]), :doc "If x is reduced?, returns (deref x), else returns x", :end-column 16, :end-line 835, :column 7, :line 835, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 837, :column 4, :line 837, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 837, :column 3, :line 837, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 837, :column 4, :line 837, :file "cljs/core.cljs"} x]), :doc "If x is reduced?, returns (deref x), else returns x", :end-column 16, :end-line 835, :column 7, :line 835, :file "cljs/core.cljs"} unreduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 15, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical? ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 15, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 15, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace ^{:arglists (^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 395, :column 23, :line 395, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 395, :column 24, :line 395, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 11, :end-line 395, :column 5, :line 395, :file "cljs/core.cljs"} string, :end-column 22, :end-line 395, :column 12, :line 395, :file "cljs/core.cljs"} -namespace, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1912, :column 4, :line 1912, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1912, :column 5, :line 1912, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1913, :column 4, :line 1913, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1913, :column 5, :line 1913, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1914, :column 4, :line 1914, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1914, :column 5, :line 1914, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1914, :column 9, :line 1914, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1914, :column 11, :line 1914, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1909, :column 8, :line 1909, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1909, :column 15, :line 1909, :file "cljs/core.cljs"} unchecked-divide-int ^{:arglists (^{:end-column 7, :end-line 1912, :column 4, :line 1912, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1912, :column 5, :line 1912, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1913, :column 4, :line 1913, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1913, :column 5, :line 1913, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1914, :column 4, :line 1914, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1914, :column 5, :line 1914, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1914, :column 9, :line 1914, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1914, :column 11, :line 1914, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1909, :column 8, :line 1909, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1909, :column 15, :line 1909, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1912, :column 5, :line 1912, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1913, :column 5, :line 1913, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1914, :column 5, :line 1914, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1914, :column 11, :line 1914, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1912, :column 4, :line 1912, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1912, :column 5, :line 1912, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1913, :column 4, :line 1913, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1913, :column 5, :line 1913, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1913, :column 7, :line 1913, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1914, :column 4, :line 1914, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1914, :column 5, :line 1914, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1914, :column 9, :line 1914, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1914, :column 11, :line 1914, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1909, :column 8, :line 1909, :file "cljs/core.cljs"} number, :end-column 35, :end-line 1909, :column 15, :line 1909, :file "cljs/core.cljs"} unchecked-divide-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 8587, :column 31, :line 8587, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8587, :column 32, :line 8587, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 8587, :column 34, :line 8587, :file "cljs/core.cljs"} & ^{:end-column 40, :end-line 8587, :column 36, :line 8587, :file "cljs/core.cljs"} args]), :private true, :end-column 30, :end-line 8587, :column 8, :line 8587, :file "cljs/core.cljs"} swap-global-hierarchy! ^{:arglists (^{:end-column 41, :end-line 8587, :column 31, :line 8587, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8587, :column 32, :line 8587, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 8587, :column 34, :line 8587, :file "cljs/core.cljs"} & ^{:end-column 40, :end-line 8587, :column 36, :line 8587, :file "cljs/core.cljs"} args]), :private true, :end-column 30, :end-line 8587, :column 8, :line 8587, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 8587, :column 32, :line 8587, :file "cljs/core.cljs"} f & ^{:end-column 40, :end-line 8587, :column 36, :line 8587, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 8587, :column 31, :line 8587, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8587, :column 32, :line 8587, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 8587, :column 34, :line 8587, :file "cljs/core.cljs"} & ^{:end-column 40, :end-line 8587, :column 36, :line 8587, :file "cljs/core.cljs"} args]), :private true, :end-column 30, :end-line 8587, :column 8, :line 8587, :file "cljs/core.cljs"} swap-global-hierarchy!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7524, :column 4, :line 7524, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7524, :column 5, :line 7524, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7525, :column 4, :line 7525, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7525, :column 5, :line 7525, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7525, :column 7, :line 7525, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7525, :column 9, :line 7525, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7526, :column 5, :line 7526, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7526, :column 7, :line 7526, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7526, :column 11, :line 7526, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7526, :column 13, :line 7526, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 14, :end-line 7522, :column 7, :line 7522, :file "cljs/core.cljs"} max-key ^{:arglists (^{:end-column 9, :end-line 7524, :column 4, :line 7524, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7524, :column 5, :line 7524, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7525, :column 4, :line 7525, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7525, :column 5, :line 7525, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7525, :column 7, :line 7525, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7525, :column 9, :line 7525, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7526, :column 5, :line 7526, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7526, :column 7, :line 7526, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7526, :column 11, :line 7526, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7526, :column 13, :line 7526, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 14, :end-line 7522, :column 7, :line 7522, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7524, :column 5, :line 7524, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 7525, :column 5, :line 7525, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7525, :column 7, :line 7525, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7525, :column 9, :line 7525, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 7526, :column 5, :line 7526, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7526, :column 7, :line 7526, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} y & ^{:end-column 17, :end-line 7526, :column 13, :line 7526, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7524, :column 4, :line 7524, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7524, :column 5, :line 7524, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7524, :column 7, :line 7524, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7525, :column 4, :line 7525, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7525, :column 5, :line 7525, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7525, :column 7, :line 7525, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7525, :column 9, :line 7525, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7526, :column 4, :line 7526, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7526, :column 5, :line 7526, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7526, :column 7, :line 7526, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7526, :column 9, :line 7526, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7526, :column 11, :line 7526, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7526, :column 13, :line 7526, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 14, :end-line 7522, :column 7, :line 7522, :file "cljs/core.cljs"} max-key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} ->PersistentTreeSet ^{:arglists ([^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeSet [^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 7332, :column 29, :line 7332, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 7332, :column 34, :line 7332, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 59, :end-line 7332, :column 53, :line 7332, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 27, :end-line 7332, :column 10, :line 7332, :file "cljs/core.cljs"} ->PersistentTreeSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} ->ChunkBuffer ^{:arglists ([^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 36, :end-line 2542, :column 33, :line 2542, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 50, :end-line 2542, :column 47, :line 2542, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 21, :end-line 2542, :column 10, :line 2542, :file "cljs/core.cljs"} ->ChunkBuffer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 514, :column 19, :line 514, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 514, :column 20, :line 514, :file "cljs/core.cljs"} k]), :end-column 18, :end-line 514, :column 7, :line 514, :file "cljs/core.cljs"} hash-string ^{:arglists (^{:end-column 22, :end-line 514, :column 19, :line 514, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 514, :column 20, :line 514, :file "cljs/core.cljs"} k]), :end-column 18, :end-line 514, :column 7, :line 514, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 514, :column 20, :line 514, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 514, :column 19, :line 514, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 514, :column 20, :line 514, :file "cljs/core.cljs"} k]), :end-column 18, :end-line 514, :column 7, :line 514, :file "cljs/core.cljs"} hash-string, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} ValSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7090, :column 10, :line 7090, :file "cljs/core.cljs"} ValSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 7090, :column 17, :line 7090, :file "cljs/core.cljs"} [^{:tag ^{:end-column 29, :end-line 7090, :column 19, :line 7090, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7090, :column 30, :line 7090, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7090, :column 35, :line 7090, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers ^{:arglists (^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3486, :column 3, :line 3486, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3486, :column 4, :line 3486, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 3486, :column 9, :line 3486, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 21, :end-line 3479, :column 7, :line 3479, :file "cljs/core.cljs"} set-validator! ^{:arglists (^{:end-column 13, :end-line 3486, :column 3, :line 3486, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3486, :column 4, :line 3486, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 3486, :column 9, :line 3486, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 21, :end-line 3479, :column 7, :line 3479, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3486, :column 4, :line 3486, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 3486, :column 9, :line 3486, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3486, :column 3, :line 3486, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3486, :column 4, :line 3486, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 3486, :column 9, :line 3486, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 21, :end-line 3479, :column 7, :line 3479, :file "cljs/core.cljs"} set-validator!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 5081, :column 34, :line 5081, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5081, :column 35, :line 5081, :file "cljs/core.cljs"} arr ^{:end-column 40, :end-line 5081, :column 39, :line 5081, :file "cljs/core.cljs"} m ^{:end-column 42, :end-line 5081, :column 41, :line 5081, :file "cljs/core.cljs"} k]), :private true, :end-column 33, :end-line 5081, :column 8, :line 5081, :file "cljs/core.cljs"} array-map-index-of-equiv? ^{:arglists (^{:end-column 43, :end-line 5081, :column 34, :line 5081, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5081, :column 35, :line 5081, :file "cljs/core.cljs"} arr ^{:end-column 40, :end-line 5081, :column 39, :line 5081, :file "cljs/core.cljs"} m ^{:end-column 42, :end-line 5081, :column 41, :line 5081, :file "cljs/core.cljs"} k]), :private true, :end-column 33, :end-line 5081, :column 8, :line 5081, :file "cljs/core.cljs"} {:arglists ([^{:end-column 38, :end-line 5081, :column 35, :line 5081, :file "cljs/core.cljs"} arr ^{:end-column 40, :end-line 5081, :column 39, :line 5081, :file "cljs/core.cljs"} m ^{:end-column 42, :end-line 5081, :column 41, :line 5081, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5081, :column 34, :line 5081, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5081, :column 35, :line 5081, :file "cljs/core.cljs"} arr ^{:end-column 40, :end-line 5081, :column 39, :line 5081, :file "cljs/core.cljs"} m ^{:end-column 42, :end-line 5081, :column 41, :line 5081, :file "cljs/core.cljs"} k]), :private true, :end-column 33, :end-line 5081, :column 8, :line 5081, :file "cljs/core.cljs"} array-map-index-of-equiv?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta ^{:arglists (^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 302, :column 22, :line 302, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 302, :column 23, :line 302, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 15, :end-line 302, :column 5, :line 302, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 302, :column 16, :line 302, :file "cljs/core.cljs"} -meta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 6368, :column 10, :line 6368, :file "cljs/core.cljs"} RedNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 6575, :column 10, :line 6575, :file "cljs/core.cljs"} RedNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 6575, :column 18, :line 6575, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 6575, :column 19, :line 6575, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 6575, :column 23, :line 6575, :file "cljs/core.cljs"} val ^{:end-column 31, :end-line 6575, :column 27, :line 6575, :file "cljs/core.cljs"} left ^{:end-column 37, :end-line 6575, :column 32, :line 6575, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 54, :end-line 6575, :column 48, :line 6575, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists ([^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} ->IndexedSeqIterator ^{:arglists ([^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} {:arglists (^cljs.core/IndexedSeqIterator [^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} ->IndexedSeqIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method ^{:arglists (^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 6417, :column 25, :line 6417, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6417, :column 26, :line 6417, :file "cljs/core.cljs"} key ^{:end-column 33, :end-line 6417, :column 30, :line 6417, :file "cljs/core.cljs"} val ^{:end-column 37, :end-line 6417, :column 34, :line 6417, :file "cljs/core.cljs"} del ^{:end-column 43, :end-line 6417, :column 38, :line 6417, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6417, :column 8, :line 6417, :file "cljs/core.cljs"} balance-left-del ^{:arglists (^{:end-column 44, :end-line 6417, :column 25, :line 6417, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6417, :column 26, :line 6417, :file "cljs/core.cljs"} key ^{:end-column 33, :end-line 6417, :column 30, :line 6417, :file "cljs/core.cljs"} val ^{:end-column 37, :end-line 6417, :column 34, :line 6417, :file "cljs/core.cljs"} del ^{:end-column 43, :end-line 6417, :column 38, :line 6417, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6417, :column 8, :line 6417, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 6417, :column 26, :line 6417, :file "cljs/core.cljs"} key ^{:end-column 33, :end-line 6417, :column 30, :line 6417, :file "cljs/core.cljs"} val ^{:end-column 37, :end-line 6417, :column 34, :line 6417, :file "cljs/core.cljs"} del ^{:end-column 43, :end-line 6417, :column 38, :line 6417, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6417, :column 25, :line 6417, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6417, :column 26, :line 6417, :file "cljs/core.cljs"} key ^{:end-column 33, :end-line 6417, :column 30, :line 6417, :file "cljs/core.cljs"} val ^{:end-column 37, :end-line 6417, :column 34, :line 6417, :file "cljs/core.cljs"} del ^{:end-column 43, :end-line 6417, :column 38, :line 6417, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6417, :column 8, :line 6417, :file "cljs/core.cljs"} balance-left-del, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3453, :column 4, :line 3453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3453, :column 5, :line 3453, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3453, :column 7, :line 3453, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3457, :column 4, :line 3457, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3457, :column 5, :line 3457, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3457, :column 7, :line 3457, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3457, :column 9, :line 3457, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3461, :column 4, :line 3461, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3461, :column 5, :line 3461, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3461, :column 7, :line 3461, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3461, :column 9, :line 3461, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3461, :column 11, :line 3461, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3465, :column 4, :line 3465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3465, :column 5, :line 3465, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3465, :column 7, :line 3465, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3465, :column 9, :line 3465, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3465, :column 11, :line 3465, :file "cljs/core.cljs"} y ^{:end-column 14, :end-line 3465, :column 13, :line 3465, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3465, :column 15, :line 3465, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 12, :end-line 3448, :column 7, :line 3448, :file "cljs/core.cljs"} swap! ^{:arglists (^{:end-column 9, :end-line 3453, :column 4, :line 3453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3453, :column 5, :line 3453, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3453, :column 7, :line 3453, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3457, :column 4, :line 3457, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3457, :column 5, :line 3457, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3457, :column 7, :line 3457, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3457, :column 9, :line 3457, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3461, :column 4, :line 3461, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3461, :column 5, :line 3461, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3461, :column 7, :line 3461, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3461, :column 9, :line 3461, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3461, :column 11, :line 3461, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3465, :column 4, :line 3465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3465, :column 5, :line 3465, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3465, :column 7, :line 3465, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3465, :column 9, :line 3465, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3465, :column 11, :line 3465, :file "cljs/core.cljs"} y ^{:end-column 14, :end-line 3465, :column 13, :line 3465, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3465, :column 15, :line 3465, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 12, :end-line 3448, :column 7, :line 3448, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3453, :column 5, :line 3453, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3453, :column 7, :line 3453, :file "cljs/core.cljs"} f] [^{:end-column 6, :end-line 3457, :column 5, :line 3457, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3457, :column 7, :line 3457, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3457, :column 9, :line 3457, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 3461, :column 5, :line 3461, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3461, :column 7, :line 3461, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3461, :column 9, :line 3461, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3461, :column 11, :line 3461, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 3465, :column 5, :line 3465, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3465, :column 7, :line 3465, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3465, :column 9, :line 3465, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3465, :column 11, :line 3465, :file "cljs/core.cljs"} y & ^{:end-column 19, :end-line 3465, :column 15, :line 3465, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3453, :column 4, :line 3453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3453, :column 5, :line 3453, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3453, :column 7, :line 3453, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3457, :column 4, :line 3457, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3457, :column 5, :line 3457, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3457, :column 7, :line 3457, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3457, :column 9, :line 3457, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3461, :column 4, :line 3461, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3461, :column 5, :line 3461, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3461, :column 7, :line 3461, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3461, :column 9, :line 3461, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3461, :column 11, :line 3461, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3465, :column 4, :line 3465, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3465, :column 5, :line 3465, :file "cljs/core.cljs"} a ^{:end-column 8, :end-line 3465, :column 7, :line 3465, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3465, :column 9, :line 3465, :file "cljs/core.cljs"} x ^{:end-column 12, :end-line 3465, :column 11, :line 3465, :file "cljs/core.cljs"} y ^{:end-column 14, :end-line 3465, :column 13, :line 3465, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3465, :column 15, :line 3465, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 12, :end-line 3448, :column 7, :line 3448, :file "cljs/core.cljs"} swap!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 5177, :column 15, :line 5177, :file "cljs/core.cljs"} vals ^{:arglists (^{:end-column 13, :end-line 7149, :column 3, :line 7149, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7149, :column 4, :line 7149, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 11, :end-line 7147, :column 7, :line 7147, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7149, :column 4, :line 7149, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7149, :column 3, :line 7149, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7149, :column 4, :line 7149, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 11, :end-line 7147, :column 7, :line 7147, :file "cljs/core.cljs"} vals, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next ^{:arglists (^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1950, :column 4, :line 1950, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1950, :column 5, :line 1950, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1951, :column 4, :line 1951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1951, :column 5, :line 1951, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1951, :column 7, :line 1951, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 5, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 7, :line 1952, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1952, :column 9, :line 1952, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1952, :column 11, :line 1952, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1947, :column 8, :line 1947, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1947, :column 15, :line 1947, :file "cljs/core.cljs"} unchecked-subtract ^{:arglists (^{:end-column 7, :end-line 1950, :column 4, :line 1950, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1950, :column 5, :line 1950, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1951, :column 4, :line 1951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1951, :column 5, :line 1951, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1951, :column 7, :line 1951, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 5, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 7, :line 1952, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1952, :column 9, :line 1952, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1952, :column 11, :line 1952, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1947, :column 8, :line 1947, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1947, :column 15, :line 1947, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1950, :column 5, :line 1950, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1951, :column 5, :line 1951, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1951, :column 7, :line 1951, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1952, :column 5, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 7, :line 1952, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1952, :column 11, :line 1952, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1950, :column 4, :line 1950, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1950, :column 5, :line 1950, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1951, :column 4, :line 1951, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1951, :column 5, :line 1951, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1951, :column 7, :line 1951, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1952, :column 5, :line 1952, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1952, :column 7, :line 1952, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1952, :column 9, :line 1952, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1952, :column 11, :line 1952, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 14, :end-line 1947, :column 8, :line 1947, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1947, :column 15, :line 1947, :file "cljs/core.cljs"} unchecked-subtract, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5469, :column 20, :line 5469, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5469, :column 21, :line 5469, :file "cljs/core.cljs"} arr ^{:end-column 26, :end-line 5469, :column 25, :line 5469, :file "cljs/core.cljs"} i]), :private true, :end-column 19, :end-line 5469, :column 8, :line 5469, :file "cljs/core.cljs"} remove-pair ^{:arglists (^{:end-column 27, :end-line 5469, :column 20, :line 5469, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5469, :column 21, :line 5469, :file "cljs/core.cljs"} arr ^{:end-column 26, :end-line 5469, :column 25, :line 5469, :file "cljs/core.cljs"} i]), :private true, :end-column 19, :end-line 5469, :column 8, :line 5469, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 24, :end-line 5469, :column 21, :line 5469, :file "cljs/core.cljs"} arr ^{:end-column 26, :end-line 5469, :column 25, :line 5469, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5469, :column 20, :line 5469, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5469, :column 21, :line 5469, :file "cljs/core.cljs"} arr ^{:end-column 26, :end-line 5469, :column 25, :line 5469, :file "cljs/core.cljs"} i]), :private true, :end-column 19, :end-line 5469, :column 8, :line 5469, :file "cljs/core.cljs"} remove-pair, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 18, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} IMap ^{:impls (cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 18, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 18, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} IMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} ->SeqIter ^{:arglists ([^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} ->SeqIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7459, :column 4, :line 7459, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7459, :column 5, :line 7459, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7459, :column 16, :line 7459, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 7459, :column 18, :line 7459, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 20, :end-line 7457, :column 7, :line 7457, :file "cljs/core.cljs"} sorted-set-by ^{:arglists (^{:end-column 23, :end-line 7459, :column 4, :line 7459, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7459, :column 5, :line 7459, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7459, :column 16, :line 7459, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 7459, :column 18, :line 7459, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 20, :end-line 7457, :column 7, :line 7457, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 7459, :column 5, :line 7459, :file "cljs/core.cljs"} comparator & ^{:end-column 22, :end-line 7459, :column 18, :line 7459, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7459, :column 4, :line 7459, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7459, :column 5, :line 7459, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7459, :column 16, :line 7459, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 7459, :column 18, :line 7459, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 20, :end-line 7457, :column 7, :line 7457, :file "cljs/core.cljs"} sorted-set-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} PersistentVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} PersistentVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 70, :end-line 4133, :column 27, :line 4133, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 631, :column 18, :line 631, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 631, :column 19, :line 631, :file "cljs/core.cljs"} value]), :end-column 17, :end-line 631, :column 7, :line 631, :file "cljs/core.cljs"} cloneable? ^{:arglists (^{:end-column 25, :end-line 631, :column 18, :line 631, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 631, :column 19, :line 631, :file "cljs/core.cljs"} value]), :end-column 17, :end-line 631, :column 7, :line 631, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 24, :end-line 631, :column 19, :line 631, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 631, :column 18, :line 631, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 631, :column 19, :line 631, :file "cljs/core.cljs"} value]), :end-column 17, :end-line 631, :column 7, :line 631, :file "cljs/core.cljs"} cloneable?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 497, :column 20, :line 497, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 497, :column 21, :line 497, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} hash-string* ^{:arglists (^{:end-column 23, :end-line 497, :column 20, :line 497, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 497, :column 21, :line 497, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 22, :end-line 497, :column 21, :line 497, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 497, :column 20, :line 497, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 497, :column 21, :line 497, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} hash-string*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5451, :column 25, :line 5451, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5451, :column 26, :line 5451, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5451, :column 30, :line 5451, :file "cljs/core.cljs"} other]), :tag ^{:end-column 15, :end-line 5451, :column 8, :line 5451, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 5451, :column 16, :line 5451, :file "cljs/core.cljs"} key-test ^{:arglists (^{:end-column 36, :end-line 5451, :column 25, :line 5451, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5451, :column 26, :line 5451, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5451, :column 30, :line 5451, :file "cljs/core.cljs"} other]), :tag ^{:end-column 15, :end-line 5451, :column 8, :line 5451, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 5451, :column 16, :line 5451, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 5451, :column 26, :line 5451, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5451, :column 30, :line 5451, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5451, :column 25, :line 5451, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5451, :column 26, :line 5451, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 5451, :column 30, :line 5451, :file "cljs/core.cljs"} other]), :tag ^{:end-column 15, :end-line 5451, :column 8, :line 5451, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 5451, :column 16, :line 5451, :file "cljs/core.cljs"} key-test, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 3124, :column 10, :line 3124, :file "cljs/core.cljs"} ->LazyTransformer ^{:arglists ([^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 3124, :column 10, :line 3124, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 3124, :column 10, :line 3124, :file "cljs/core.cljs"} ->LazyTransformer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset ^{:arglists (^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1513, :column 3, :line 1513, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1513, :column 4, :line 1513, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1511, :column 16, :line 1511, :file "cljs/core.cljs"} true? ^{:arglists (^{:end-column 6, :end-line 1513, :column 3, :line 1513, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1513, :column 4, :line 1513, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1511, :column 16, :line 1511, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1513, :column 4, :line 1513, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1513, :column 3, :line 1513, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1513, :column 4, :line 1513, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 15, :end-line 1511, :column 8, :line 1511, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1511, :column 16, :line 1511, :file "cljs/core.cljs"} true?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 174, :column 3, :line 174, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 13, :end-line 171, :column 8, :line 171, :file "cljs/core.cljs"} array, :end-column 19, :end-line 171, :column 14, :line 171, :file "cljs/core.cljs"} array ^{:arglists (^{:end-column 13, :end-line 174, :column 3, :line 174, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 13, :end-line 171, :column 8, :line 171, :file "cljs/core.cljs"} array, :end-column 19, :end-line 171, :column 14, :line 171, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} var-args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 174, :column 3, :line 174, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 174, :column 4, :line 174, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 13, :end-line 171, :column 8, :line 171, :file "cljs/core.cljs"} array, :end-column 19, :end-line 171, :column 14, :line 171, :file "cljs/core.cljs"} array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8128, :column 1, :line 8123, :file "cljs/core.cljs"} print ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8128, :column 1, :line 8123, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 30, :end-line 8127, :column 26, :line 8127, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8128, :column 1, :line 8123, :file "cljs/core.cljs"} print, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek ^{:arglists (^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 289, :column 10, :line 289, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 289, :column 11, :line 289, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 9, :end-line 289, :column 4, :line 289, :file "cljs/core.cljs"} -peek, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 18, :end-line 262, :column 14, :line 262, :file "cljs/core.cljs"} ISeq ^{:impls (cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/ChunkedSeq cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq cljs.core/ES6IteratorSeq), :protocol-info {:methods {^{:end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 18, :end-line 262, :column 14, :line 262, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 263, :column 4, :line 263, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 263, :column 11, :line 263, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 263, :column 12, :line 263, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 18, :end-line 262, :column 14, :line 262, :file "cljs/core.cljs"} ISeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1123, :column 3, :line 1123, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1123, :column 4, :line 1123, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 12, :end-line 1121, :column 7, :line 1121, :file "cljs/core.cljs"} empty ^{:arglists (^{:end-column 9, :end-line 1123, :column 3, :line 1123, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1123, :column 4, :line 1123, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 12, :end-line 1121, :column 7, :line 1121, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1123, :column 4, :line 1123, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1123, :column 3, :line 1123, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1123, :column 4, :line 1123, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 12, :end-line 1121, :column 7, :line 1121, :file "cljs/core.cljs"} empty, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} t8410 {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} t8410, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields [meta8411], :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 24, :end-line 8946, :column 2, :line 8946, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8946, :column 3, :line 8946, :file "cljs/core.cljs"} multifn ^{:end-column 23, :end-line 8946, :column 11, :line 8946, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 20, :end-line 8944, :column 7, :line 8944, :file "cljs/core.cljs"} remove-method ^{:arglists (^{:end-column 24, :end-line 8946, :column 2, :line 8946, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8946, :column 3, :line 8946, :file "cljs/core.cljs"} multifn ^{:end-column 23, :end-line 8946, :column 11, :line 8946, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 20, :end-line 8944, :column 7, :line 8944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 8946, :column 3, :line 8946, :file "cljs/core.cljs"} multifn ^{:end-column 23, :end-line 8946, :column 11, :line 8946, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8946, :column 2, :line 8946, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8946, :column 3, :line 8946, :file "cljs/core.cljs"} multifn ^{:end-column 23, :end-line 8946, :column 11, :line 8946, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 20, :end-line 8944, :column 7, :line 8944, :file "cljs/core.cljs"} remove-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} PersistentQueueSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 28, :end-line 4738, :column 10, :line 4738, :file "cljs/core.cljs"} PersistentQueueSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 63, :end-line 4738, :column 29, :line 4738, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4738, :column 30, :line 4738, :file "cljs/core.cljs"} meta ^{:end-column 40, :end-line 4738, :column 35, :line 4738, :file "cljs/core.cljs"} front ^{:end-column 45, :end-line 4738, :column 41, :line 4738, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 62, :end-line 4738, :column 56, :line 4738, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 44, :end-line 6436, :column 26, :line 6436, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6436, :column 27, :line 6436, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6436, :column 31, :line 6436, :file "cljs/core.cljs"} val ^{:end-column 39, :end-line 6436, :column 35, :line 6436, :file "cljs/core.cljs"} left ^{:end-column 43, :end-line 6436, :column 40, :line 6436, :file "cljs/core.cljs"} del]), :private true, :end-column 25, :end-line 6436, :column 8, :line 6436, :file "cljs/core.cljs"} balance-right-del ^{:arglists (^{:end-column 44, :end-line 6436, :column 26, :line 6436, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6436, :column 27, :line 6436, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6436, :column 31, :line 6436, :file "cljs/core.cljs"} val ^{:end-column 39, :end-line 6436, :column 35, :line 6436, :file "cljs/core.cljs"} left ^{:end-column 43, :end-line 6436, :column 40, :line 6436, :file "cljs/core.cljs"} del]), :private true, :end-column 25, :end-line 6436, :column 8, :line 6436, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6436, :column 27, :line 6436, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6436, :column 31, :line 6436, :file "cljs/core.cljs"} val ^{:end-column 39, :end-line 6436, :column 35, :line 6436, :file "cljs/core.cljs"} left ^{:end-column 43, :end-line 6436, :column 40, :line 6436, :file "cljs/core.cljs"} del]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6436, :column 26, :line 6436, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6436, :column 27, :line 6436, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6436, :column 31, :line 6436, :file "cljs/core.cljs"} val ^{:end-column 39, :end-line 6436, :column 35, :line 6436, :file "cljs/core.cljs"} left ^{:end-column 43, :end-line 6436, :column 40, :line 6436, :file "cljs/core.cljs"} del]), :private true, :end-column 25, :end-line 6436, :column 8, :line 6436, :file "cljs/core.cljs"} balance-right-del, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1800, :column 7, :line 1800, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1801, :column 9, :line 1801, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1801, :column 11, :line 1801, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1796, :column 8, :line 1796, :file "cljs/core.cljs"} number} / ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1800, :column 7, :line 1800, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1801, :column 9, :line 1801, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1801, :column 11, :line 1801, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1796, :column 8, :line 1796, :file "cljs/core.cljs"} number} {:arglists (^number [^{:end-column 6, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1800, :column 7, :line 1800, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1801, :column 11, :line 1801, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1800, :column 4, :line 1800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1800, :column 5, :line 1800, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1800, :column 7, :line 1800, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1801, :column 4, :line 1801, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1801, :column 5, :line 1801, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1801, :column 7, :line 1801, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1801, :column 9, :line 1801, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1801, :column 11, :line 1801, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 14, :end-line 1796, :column 8, :line 1796, :file "cljs/core.cljs"} number} /, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5478, :column 15, :line 5478, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 5478, :column 16, :line 5478, :file "cljs/core.cljs"} hash ^{:end-column 26, :end-line 5478, :column 21, :line 5478, :file "cljs/core.cljs"} shift]), :private true, :end-column 14, :end-line 5478, :column 8, :line 5478, :file "cljs/core.cljs"} bitpos ^{:arglists (^{:end-column 27, :end-line 5478, :column 15, :line 5478, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 5478, :column 16, :line 5478, :file "cljs/core.cljs"} hash ^{:end-column 26, :end-line 5478, :column 21, :line 5478, :file "cljs/core.cljs"} shift]), :private true, :end-column 14, :end-line 5478, :column 8, :line 5478, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 20, :end-line 5478, :column 16, :line 5478, :file "cljs/core.cljs"} hash ^{:end-column 26, :end-line 5478, :column 21, :line 5478, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5478, :column 15, :line 5478, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 5478, :column 16, :line 5478, :file "cljs/core.cljs"} hash ^{:end-column 26, :end-line 5478, :column 21, :line 5478, :file "cljs/core.cljs"} shift]), :private true, :end-column 14, :end-line 5478, :column 8, :line 5478, :file "cljs/core.cljs"} bitpos, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2036, :column 3, :line 2036, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2036, :column 4, :line 2036, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2036, :column 6, :line 2036, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 13, :end-line 2034, :column 7, :line 2034, :file "cljs/core.cljs"} bit-or ^{:arglists (^{:end-column 8, :end-line 2036, :column 3, :line 2036, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2036, :column 4, :line 2036, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2036, :column 6, :line 2036, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 13, :end-line 2034, :column 7, :line 2034, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2036, :column 4, :line 2036, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2036, :column 6, :line 2036, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2036, :column 3, :line 2036, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2036, :column 4, :line 2036, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2036, :column 6, :line 2036, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 13, :end-line 2034, :column 7, :line 2034, :file "cljs/core.cljs"} bit-or, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 458, :column 23, :line 458, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 458, :column 24, :line 458, :file "cljs/core.cljs"} h1 ^{:end-column 30, :end-line 458, :column 27, :line 458, :file "cljs/core.cljs"} len]), :tag ^{:end-column 14, :end-line 458, :column 8, :line 458, :file "cljs/core.cljs"} number, :end-column 22, :end-line 458, :column 15, :line 458, :file "cljs/core.cljs"} m3-fmix ^{:arglists (^{:end-column 31, :end-line 458, :column 23, :line 458, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 458, :column 24, :line 458, :file "cljs/core.cljs"} h1 ^{:end-column 30, :end-line 458, :column 27, :line 458, :file "cljs/core.cljs"} len]), :tag ^{:end-column 14, :end-line 458, :column 8, :line 458, :file "cljs/core.cljs"} number, :end-column 22, :end-line 458, :column 15, :line 458, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 458, :column 24, :line 458, :file "cljs/core.cljs"} h1 ^{:end-column 30, :end-line 458, :column 27, :line 458, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 458, :column 23, :line 458, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 458, :column 24, :line 458, :file "cljs/core.cljs"} h1 ^{:end-column 30, :end-line 458, :column 27, :line 458, :file "cljs/core.cljs"} len]), :tag ^{:end-column 14, :end-line 458, :column 8, :line 458, :file "cljs/core.cljs"} number, :end-column 22, :end-line 458, :column 15, :line 458, :file "cljs/core.cljs"} m3-fmix, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 4341, :column 14, :line 4341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4341, :column 15, :line 4341, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 4341, :column 17, :line 4341, :file "cljs/core.cljs"} args]), :end-column 13, :end-line 4341, :column 7, :line 4341, :file "cljs/core.cljs"} vector ^{:arglists (^{:end-column 22, :end-line 4341, :column 14, :line 4341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4341, :column 15, :line 4341, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 4341, :column 17, :line 4341, :file "cljs/core.cljs"} args]), :end-column 13, :end-line 4341, :column 7, :line 4341, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 21, :end-line 4341, :column 17, :line 4341, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 4341, :column 14, :line 4341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 4341, :column 15, :line 4341, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 4341, :column 17, :line 4341, :file "cljs/core.cljs"} args]), :end-column 13, :end-line 4341, :column 7, :line 4341, :file "cljs/core.cljs"} vector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 910, :column 10, :line 910, :file "cljs/core.cljs"} hash-coll ^{:arglists (^{:end-column 24, :end-line 2162, :column 18, :line 2162, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2162, :column 19, :line 2162, :file "cljs/core.cljs"} coll]), :private true, :end-column 17, :end-line 2162, :column 8, :line 2162, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 2162, :column 19, :line 2162, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 2162, :column 18, :line 2162, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2162, :column 19, :line 2162, :file "cljs/core.cljs"} coll]), :private true, :end-column 17, :end-line 2162, :column 8, :line 2162, :file "cljs/core.cljs"} hash-coll, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 5461, :column 4, :line 5461, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5461, :column 5, :line 5461, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5461, :column 9, :line 5461, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5461, :column 11, :line 5461, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5464, :column 4, :line 5464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5464, :column 5, :line 5464, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5464, :column 9, :line 5464, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5464, :column 11, :line 5464, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 5464, :column 13, :line 5464, :file "cljs/core.cljs"} j ^{:end-column 16, :end-line 5464, :column 15, :line 5464, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5460, :column 8, :line 5460, :file "cljs/core.cljs"} clone-and-set ^{:arglists (^{:end-column 13, :end-line 5461, :column 4, :line 5461, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5461, :column 5, :line 5461, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5461, :column 9, :line 5461, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5461, :column 11, :line 5461, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5464, :column 4, :line 5464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5464, :column 5, :line 5464, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5464, :column 9, :line 5464, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5464, :column 11, :line 5464, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 5464, :column 13, :line 5464, :file "cljs/core.cljs"} j ^{:end-column 16, :end-line 5464, :column 15, :line 5464, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5460, :column 8, :line 5460, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 5461, :column 5, :line 5461, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5461, :column 9, :line 5461, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5461, :column 11, :line 5461, :file "cljs/core.cljs"} a] ^array [^{:end-column 8, :end-line 5464, :column 5, :line 5464, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5464, :column 9, :line 5464, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5464, :column 11, :line 5464, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 5464, :column 13, :line 5464, :file "cljs/core.cljs"} j ^{:end-column 16, :end-line 5464, :column 15, :line 5464, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 5461, :column 4, :line 5461, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5461, :column 5, :line 5461, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5461, :column 9, :line 5461, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5461, :column 11, :line 5461, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5464, :column 4, :line 5464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 5464, :column 5, :line 5464, :file "cljs/core.cljs"} arr ^{:end-column 10, :end-line 5464, :column 9, :line 5464, :file "cljs/core.cljs"} i ^{:end-column 12, :end-line 5464, :column 11, :line 5464, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 5464, :column 13, :line 5464, :file "cljs/core.cljs"} j ^{:end-column 16, :end-line 5464, :column 15, :line 5464, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5460, :column 8, :line 5460, :file "cljs/core.cljs"} clone-and-set, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 35, :end-line 5366, :column 10, :line 5366, :file "cljs/core.cljs"} array->transient-hash-map ^{:arglists (^{:end-column 43, :end-line 5438, :column 34, :line 5438, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5438, :column 35, :line 5438, :file "cljs/core.cljs"} len ^{:end-column 42, :end-line 5438, :column 39, :line 5438, :file "cljs/core.cljs"} arr]), :private true, :end-column 33, :end-line 5438, :column 8, :line 5438, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj [^{:end-column 38, :end-line 5438, :column 35, :line 5438, :file "cljs/core.cljs"} len ^{:end-column 42, :end-line 5438, :column 39, :line 5438, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5438, :column 34, :line 5438, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 5438, :column 35, :line 5438, :file "cljs/core.cljs"} len ^{:end-column 42, :end-line 5438, :column 39, :line 5438, :file "cljs/core.cljs"} arr]), :private true, :end-column 33, :end-line 5438, :column 8, :line 5438, :file "cljs/core.cljs"} array->transient-hash-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1843, :column 4, :line 1843, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1843, :column 5, :line 1843, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1843, :column 7, :line 1843, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1844, :column 4, :line 1844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1844, :column 5, :line 1844, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1844, :column 9, :line 1844, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1844, :column 11, :line 1844, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1839, :column 8, :line 1839, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1839, :column 16, :line 1839, :file "cljs/core.cljs"} >= ^{:arglists (^{:end-column 7, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1843, :column 4, :line 1843, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1843, :column 5, :line 1843, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1843, :column 7, :line 1843, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1844, :column 4, :line 1844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1844, :column 5, :line 1844, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1844, :column 9, :line 1844, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1844, :column 11, :line 1844, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1839, :column 8, :line 1839, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1839, :column 16, :line 1839, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1843, :column 5, :line 1843, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1843, :column 7, :line 1843, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1844, :column 5, :line 1844, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1844, :column 11, :line 1844, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1842, :column 4, :line 1842, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1842, :column 5, :line 1842, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1843, :column 4, :line 1843, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1843, :column 5, :line 1843, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1843, :column 7, :line 1843, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1844, :column 4, :line 1844, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1844, :column 5, :line 1844, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1844, :column 7, :line 1844, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1844, :column 9, :line 1844, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1844, :column 11, :line 1844, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 15, :end-line 1839, :column 8, :line 1839, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1839, :column 16, :line 1839, :file "cljs/core.cljs"} >=, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 26, :end-line 7295, :column 10, :line 7295, :file "cljs/core.cljs"} ->TransientHashSet ^{:arglists ([^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 26, :end-line 7295, :column 10, :line 7295, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientHashSet [^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 51, :end-line 7295, :column 38, :line 7295, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 26, :end-line 7295, :column 10, :line 7295, :file "cljs/core.cljs"} ->TransientHashSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3705, :column 4, :line 3705, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3705, :column 5, :line 3705, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3706, :column 4, :line 3706, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3706, :column 5, :line 3706, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3706, :column 7, :line 3706, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 16, :end-line 3703, :column 7, :line 3703, :file "cljs/core.cljs"} drop-last ^{:arglists (^{:end-column 7, :end-line 3705, :column 4, :line 3705, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3705, :column 5, :line 3705, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3706, :column 4, :line 3706, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3706, :column 5, :line 3706, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3706, :column 7, :line 3706, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 16, :end-line 3703, :column 7, :line 3703, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3705, :column 5, :line 3705, :file "cljs/core.cljs"} s] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3706, :column 5, :line 3706, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3706, :column 7, :line 3706, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3705, :column 4, :line 3705, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3705, :column 5, :line 3705, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3706, :column 4, :line 3706, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3706, :column 5, :line 3706, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3706, :column 7, :line 3706, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 16, :end-line 3703, :column 7, :line 3703, :file "cljs/core.cljs"} drop-last, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} ->ArrayIter ^{:arglists ([^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} ->ArrayIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object? ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} ->ArrayNodeSeq ^{:arglists ([^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayNodeSeq [^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 28, :end-line 6006, :column 24, :line 6006, :file "cljs/core.cljs"} meta ^{:end-column 34, :end-line 6006, :column 29, :line 6006, :file "cljs/core.cljs"} nodes ^{:end-column 36, :end-line 6006, :column 35, :line 6006, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 6006, :column 37, :line 6006, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 55, :end-line 6006, :column 49, :line 6006, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 22, :end-line 6006, :column 10, :line 6006, :file "cljs/core.cljs"} ->ArrayNodeSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 6737, :column 24, :line 6737, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6737, :column 25, :line 6737, :file "cljs/core.cljs"} left ^{:end-column 35, :end-line 6737, :column 30, :line 6737, :file "cljs/core.cljs"} right]), :private true, :end-column 23, :end-line 6737, :column 8, :line 6737, :file "cljs/core.cljs"} tree-map-append ^{:arglists (^{:end-column 36, :end-line 6737, :column 24, :line 6737, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6737, :column 25, :line 6737, :file "cljs/core.cljs"} left ^{:end-column 35, :end-line 6737, :column 30, :line 6737, :file "cljs/core.cljs"} right]), :private true, :end-column 23, :end-line 6737, :column 8, :line 6737, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 6737, :column 25, :line 6737, :file "cljs/core.cljs"} left ^{:end-column 35, :end-line 6737, :column 30, :line 6737, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 6737, :column 24, :line 6737, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6737, :column 25, :line 6737, :file "cljs/core.cljs"} left ^{:end-column 35, :end-line 6737, :column 30, :line 6737, :file "cljs/core.cljs"} right]), :private true, :end-column 23, :end-line 6737, :column 8, :line 6737, :file "cljs/core.cljs"} tree-map-append, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2979, :column 3, :line 2979, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 16, :end-line 2977, :column 7, :line 2977, :file "cljs/core.cljs"} not-empty ^{:arglists (^{:end-column 9, :end-line 2979, :column 3, :line 2979, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 16, :end-line 2977, :column 7, :line 2977, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2979, :column 3, :line 2979, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2979, :column 4, :line 2979, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 16, :end-line 2977, :column 7, :line 2977, :file "cljs/core.cljs"} not-empty, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7483, :column 3, :line 7483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 15, :end-line 7481, :column 7, :line 7481, :file "cljs/core.cljs"} distinct ^{:arglists (^{:end-column 9, :end-line 7483, :column 3, :line 7483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 15, :end-line 7481, :column 7, :line 7481, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7483, :column 3, :line 7483, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7483, :column 4, :line 7483, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 15, :end-line 7481, :column 7, :line 7481, :file "cljs/core.cljs"} distinct, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3923, :column 4, :line 3923, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3923, :column 5, :line 3923, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3923, :column 7, :line 3923, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3925, :column 4, :line 3925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3925, :column 5, :line 3925, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3925, :column 7, :line 3925, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3925, :column 12, :line 3925, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3931, :column 4, :line 3931, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3931, :column 5, :line 3931, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3931, :column 7, :line 3931, :file "cljs/core.cljs"} step ^{:end-column 15, :end-line 3931, :column 12, :line 3931, :file "cljs/core.cljs"} pad ^{:end-column 20, :end-line 3931, :column 16, :line 3931, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 16, :end-line 3917, :column 7, :line 3917, :file "cljs/core.cljs"} partition ^{:arglists (^{:end-column 12, :end-line 3923, :column 4, :line 3923, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3923, :column 5, :line 3923, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3923, :column 7, :line 3923, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3925, :column 4, :line 3925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3925, :column 5, :line 3925, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3925, :column 7, :line 3925, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3925, :column 12, :line 3925, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3931, :column 4, :line 3931, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3931, :column 5, :line 3931, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3931, :column 7, :line 3931, :file "cljs/core.cljs"} step ^{:end-column 15, :end-line 3931, :column 12, :line 3931, :file "cljs/core.cljs"} pad ^{:end-column 20, :end-line 3931, :column 16, :line 3931, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 16, :end-line 3917, :column 7, :line 3917, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3923, :column 5, :line 3923, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3923, :column 7, :line 3923, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3925, :column 5, :line 3925, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3925, :column 7, :line 3925, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3925, :column 12, :line 3925, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3931, :column 5, :line 3931, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3931, :column 7, :line 3931, :file "cljs/core.cljs"} step ^{:end-column 15, :end-line 3931, :column 12, :line 3931, :file "cljs/core.cljs"} pad ^{:end-column 20, :end-line 3931, :column 16, :line 3931, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3923, :column 4, :line 3923, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3923, :column 5, :line 3923, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3923, :column 7, :line 3923, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3925, :column 4, :line 3925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3925, :column 5, :line 3925, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3925, :column 7, :line 3925, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3925, :column 12, :line 3925, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3931, :column 4, :line 3931, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3931, :column 5, :line 3931, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3931, :column 7, :line 3931, :file "cljs/core.cljs"} step ^{:end-column 15, :end-line 3931, :column 12, :line 3931, :file "cljs/core.cljs"} pad ^{:end-column 20, :end-line 3931, :column 16, :line 3931, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 16, :end-line 3917, :column 7, :line 3917, :file "cljs/core.cljs"} partition, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]], ^{:end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]], ^{:end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]], ^{:end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 22, :end-line 8742, :column 14, :line 8742, :file "cljs/core.cljs"} IMultiFn ^{:impls (cljs.core/MultiFn), :protocol-info {:methods {^{:end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]], ^{:end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]], ^{:end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]], ^{:end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 22, :end-line 8742, :column 14, :line 8742, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 8743, :column 4, :line 8743, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8743, :column 11, :line 8743, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 8743, :column 12, :line 8743, :file "cljs/core.cljs"} mf]], ^{:end-column 15, :end-line 8744, :column 4, :line 8744, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8744, :column 16, :line 8744, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8744, :column 17, :line 8744, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8744, :column 20, :line 8744, :file "cljs/core.cljs"} dispatch-val ^{:end-column 39, :end-line 8744, :column 33, :line 8744, :file "cljs/core.cljs"} method]], ^{:end-column 18, :end-line 8745, :column 4, :line 8745, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8745, :column 19, :line 8745, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8745, :column 20, :line 8745, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8745, :column 23, :line 8745, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 18, :end-line 8746, :column 4, :line 8746, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8746, :column 19, :line 8746, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 8746, :column 20, :line 8746, :file "cljs/core.cljs"} mf ^{:end-column 35, :end-line 8746, :column 23, :line 8746, :file "cljs/core.cljs"} dispatch-val ^{:end-column 50, :end-line 8746, :column 36, :line 8746, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 12, :end-line 8748, :column 4, :line 8748, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8748, :column 13, :line 8748, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8748, :column 14, :line 8748, :file "cljs/core.cljs"} mf]], ^{:end-column 12, :end-line 8749, :column 4, :line 8749, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8749, :column 13, :line 8749, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8749, :column 14, :line 8749, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 22, :end-line 8742, :column 14, :line 8742, :file "cljs/core.cljs"} IMultiFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1961, :column 20, :line 1961, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1961, :column 21, :line 1961, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1961, :column 16, :line 1961, :file "cljs/core.cljs"} fix ^{:arglists (^{:end-column 23, :end-line 1961, :column 20, :line 1961, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1961, :column 21, :line 1961, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1961, :column 16, :line 1961, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1961, :column 21, :line 1961, :file "cljs/core.cljs"} q]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1961, :column 20, :line 1961, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1961, :column 21, :line 1961, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 15, :end-line 1961, :column 9, :line 1961, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1961, :column 16, :line 1961, :file "cljs/core.cljs"} fix, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} EmptyList {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 19, :end-line 2266, :column 10, :line 2266, :file "cljs/core.cljs"} EmptyList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 2266, :column 20, :line 2266, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2266, :column 21, :line 2266, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 26, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} IAssociative ^{:impls (cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 26, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 8, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 275, :column 16, :line 275, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 275, :column 17, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 275, :column 22, :line 275, :file "cljs/core.cljs"} k ^{:end-column 25, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 26, :end-line 272, :column 14, :line 272, :file "cljs/core.cljs"} IAssociative, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2049, :column 3, :line 2049, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2049, :column 4, :line 2049, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2049, :column 6, :line 2049, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 15, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} bit-flip ^{:arglists (^{:end-column 8, :end-line 2049, :column 3, :line 2049, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2049, :column 4, :line 2049, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2049, :column 6, :line 2049, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 15, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2049, :column 4, :line 2049, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2049, :column 6, :line 2049, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2049, :column 3, :line 2049, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2049, :column 4, :line 2049, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2049, :column 6, :line 2049, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 15, :end-line 2047, :column 7, :line 2047, :file "cljs/core.cljs"} bit-flip, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2725, :column 10, :line 2725, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} long-array ^{:arglists (^{:end-column 17, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2725, :column 10, :line 2725, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 9, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2725, :column 10, :line 2725, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2721, :column 5, :line 2721, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2725, :column 4, :line 2725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2725, :column 5, :line 2725, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2725, :column 10, :line 2725, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2720, :column 7, :line 2720, :file "cljs/core.cljs"} long-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8632, :column 4, :line 8632, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8632, :column 5, :line 8632, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8633, :column 4, :line 8633, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8633, :column 5, :line 8633, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8633, :column 7, :line 8633, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 18, :end-line 8626, :column 7, :line 8626, :file "cljs/core.cljs"} descendants ^{:arglists (^{:end-column 9, :end-line 8632, :column 4, :line 8632, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8632, :column 5, :line 8632, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8633, :column 4, :line 8633, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8633, :column 5, :line 8633, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8633, :column 7, :line 8633, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 18, :end-line 8626, :column 7, :line 8626, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8632, :column 5, :line 8632, :file "cljs/core.cljs"} tag] [^{:end-column 6, :end-line 8633, :column 5, :line 8633, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8633, :column 7, :line 8633, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8632, :column 4, :line 8632, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8632, :column 5, :line 8632, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8633, :column 4, :line 8633, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8633, :column 5, :line 8633, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8633, :column 7, :line 8633, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 18, :end-line 8626, :column 7, :line 8626, :file "cljs/core.cljs"} descendants, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 436, :column 22, :line 436, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 436, :column 23, :line 436, :file "cljs/core.cljs"} a ^{:end-column 26, :end-line 436, :column 25, :line 436, :file "cljs/core.cljs"} b]), :tag ^{:end-column 16, :end-line 436, :column 10, :line 436, :file "cljs/core.cljs"} number, :end-column 21, :end-line 436, :column 17, :line 436, :file "cljs/core.cljs"} imul ^{:arglists (^{:end-column 27, :end-line 437, :column 22, :line 437, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 437, :column 23, :line 437, :file "cljs/core.cljs"} a ^{:end-column 26, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} b]), :tag ^{:end-column 16, :end-line 437, :column 10, :line 437, :file "cljs/core.cljs"} number, :end-column 21, :end-line 437, :column 17, :line 437, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 437, :column 23, :line 437, :file "cljs/core.cljs"} a ^{:end-column 26, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 437, :column 22, :line 437, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 437, :column 23, :line 437, :file "cljs/core.cljs"} a ^{:end-column 26, :end-line 437, :column 25, :line 437, :file "cljs/core.cljs"} b]), :tag ^{:end-column 16, :end-line 437, :column 10, :line 437, :file "cljs/core.cljs"} number, :end-column 21, :end-line 437, :column 17, :line 437, :file "cljs/core.cljs"} imul, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} ->Delay ^{:arglists ([^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} {:arglists (^cljs.core/Delay [^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 28, :end-line 8345, :column 27, :line 8345, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 44, :end-line 8345, :column 39, :line 8345, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 15, :end-line 8345, :column 10, :line 8345, :file "cljs/core.cljs"} ->Delay, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} pv ^{:end-column 23, :end-line 4082, :column 22, :line 4082, :file "cljs/core.cljs"} i]), :private true, :end-column 17, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} array-for ^{:arglists (^{:end-column 24, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} pv ^{:end-column 23, :end-line 4082, :column 22, :line 4082, :file "cljs/core.cljs"} i]), :private true, :end-column 17, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} pv ^{:end-column 23, :end-line 4082, :column 22, :line 4082, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 4082, :column 18, :line 4082, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4082, :column 19, :line 4082, :file "cljs/core.cljs"} pv ^{:end-column 23, :end-line 4082, :column 22, :line 4082, :file "cljs/core.cljs"} i]), :private true, :end-column 17, :end-line 4082, :column 8, :line 4082, :file "cljs/core.cljs"} array-for, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7162, :column 3, :line 7162, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7162, :column 4, :line 7162, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 7162, :column 6, :line 7162, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 12, :end-line 7158, :column 7, :line 7158, :file "cljs/core.cljs"} merge ^{:arglists (^{:end-column 11, :end-line 7162, :column 3, :line 7162, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7162, :column 4, :line 7162, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 7162, :column 6, :line 7162, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 12, :end-line 7158, :column 7, :line 7158, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 7162, :column 6, :line 7162, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7162, :column 3, :line 7162, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7162, :column 4, :line 7162, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 7162, :column 6, :line 7162, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 12, :end-line 7158, :column 7, :line 7158, :file "cljs/core.cljs"} merge, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 22, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} ISeqable ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq cljs.core/ES6IteratorSeq), :protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 22, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 22, :end-line 319, :column 14, :line 319, :file "cljs/core.cljs"} ISeqable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1997, :column 3, :line 1997, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1997, :column 4, :line 1997, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 1997, :column 6, :line 1997, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 13, :end-line 1995, :column 7, :line 1995, :file "cljs/core.cljs"} js-mod ^{:arglists (^{:end-column 8, :end-line 1997, :column 3, :line 1997, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1997, :column 4, :line 1997, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 1997, :column 6, :line 1997, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 13, :end-line 1995, :column 7, :line 1995, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 1997, :column 4, :line 1997, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 1997, :column 6, :line 1997, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1997, :column 3, :line 1997, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1997, :column 4, :line 1997, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 1997, :column 6, :line 1997, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 13, :end-line 1995, :column 7, :line 1995, :file "cljs/core.cljs"} js-mod, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1538, :column 3, :line 1538, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 15, :end-line 1536, :column 8, :line 1536, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1536, :column 16, :line 1536, :file "cljs/core.cljs"} integer? ^{:arglists (^{:end-column 6, :end-line 1538, :column 3, :line 1538, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 15, :end-line 1536, :column 8, :line 1536, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1536, :column 16, :line 1536, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1538, :column 3, :line 1538, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1538, :column 4, :line 1538, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 15, :end-line 1536, :column 8, :line 1536, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1536, :column 16, :line 1536, :file "cljs/core.cljs"} integer?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} MetaFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 16, :end-line 1322, :column 10, :line 1322, :file "cljs/core.cljs"} MetaFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 27, :end-line 1322, :column 17, :line 1322, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 1322, :column 18, :line 1322, :file "cljs/core.cljs"} afn ^{:end-column 26, :end-line 1322, :column 22, :line 1322, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 12, :end-line 3898, :column 4, :line 3898, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3898, :column 5, :line 3898, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3898, :column 7, :line 3898, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3901, :column 4, :line 3901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3901, :column 5, :line 3901, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3901, :column 7, :line 3901, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3901, :column 10, :line 3901, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3903, :column 4, :line 3903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3903, :column 5, :line 3903, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3903, :column 7, :line 3903, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3903, :column 10, :line 3903, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3903, :column 13, :line 3903, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3905, :column 4, :line 3905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3905, :column 5, :line 3905, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3905, :column 7, :line 3905, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3905, :column 10, :line 3905, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3905, :column 13, :line 3905, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3905, :column 16, :line 3905, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3905, :column 18, :line 3905, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 3892, :column 7, :line 3892, :file "cljs/core.cljs"} mapv ^{:arglists (^{:end-column 12, :end-line 3898, :column 4, :line 3898, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3898, :column 5, :line 3898, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3898, :column 7, :line 3898, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3901, :column 4, :line 3901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3901, :column 5, :line 3901, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3901, :column 7, :line 3901, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3901, :column 10, :line 3901, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3903, :column 4, :line 3903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3903, :column 5, :line 3903, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3903, :column 7, :line 3903, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3903, :column 10, :line 3903, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3903, :column 13, :line 3903, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3905, :column 4, :line 3905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3905, :column 5, :line 3905, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3905, :column 7, :line 3905, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3905, :column 10, :line 3905, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3905, :column 13, :line 3905, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3905, :column 16, :line 3905, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3905, :column 18, :line 3905, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 3892, :column 7, :line 3892, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 6, :end-line 3898, :column 5, :line 3898, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3898, :column 7, :line 3898, :file "cljs/core.cljs"} coll] [^{:end-column 6, :end-line 3901, :column 5, :line 3901, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3901, :column 7, :line 3901, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3901, :column 10, :line 3901, :file "cljs/core.cljs"} c2] [^{:end-column 6, :end-line 3903, :column 5, :line 3903, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3903, :column 7, :line 3903, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3903, :column 10, :line 3903, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3903, :column 13, :line 3903, :file "cljs/core.cljs"} c3] [^{:end-column 6, :end-line 3905, :column 5, :line 3905, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3905, :column 7, :line 3905, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3905, :column 10, :line 3905, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3905, :column 13, :line 3905, :file "cljs/core.cljs"} c3 & ^{:end-column 23, :end-line 3905, :column 18, :line 3905, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3898, :column 4, :line 3898, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3898, :column 5, :line 3898, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3898, :column 7, :line 3898, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3901, :column 4, :line 3901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3901, :column 5, :line 3901, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3901, :column 7, :line 3901, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3901, :column 10, :line 3901, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3903, :column 4, :line 3903, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3903, :column 5, :line 3903, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3903, :column 7, :line 3903, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3903, :column 10, :line 3903, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3903, :column 13, :line 3903, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3905, :column 4, :line 3905, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3905, :column 5, :line 3905, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3905, :column 7, :line 3905, :file "cljs/core.cljs"} c1 ^{:end-column 12, :end-line 3905, :column 10, :line 3905, :file "cljs/core.cljs"} c2 ^{:end-column 15, :end-line 3905, :column 13, :line 3905, :file "cljs/core.cljs"} c3 ^{:end-column 17, :end-line 3905, :column 16, :line 3905, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3905, :column 18, :line 3905, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 11, :end-line 3892, :column 7, :line 3892, :file "cljs/core.cljs"} mapv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7551, :column 4, :line 7551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7551, :column 5, :line 7551, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7571, :column 4, :line 7571, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7571, :column 5, :line 7571, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7571, :column 7, :line 7571, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7573, :column 4, :line 7573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7573, :column 5, :line 7573, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7573, :column 7, :line 7573, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 7573, :column 12, :line 7573, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 20, :end-line 7547, :column 7, :line 7547, :file "cljs/core.cljs"} partition-all ^{:arglists (^{:end-column 7, :end-line 7551, :column 4, :line 7551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7551, :column 5, :line 7551, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7571, :column 4, :line 7571, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7571, :column 5, :line 7571, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7571, :column 7, :line 7571, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7573, :column 4, :line 7573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7573, :column 5, :line 7573, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7573, :column 7, :line 7573, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 7573, :column 12, :line 7573, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 20, :end-line 7547, :column 7, :line 7547, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7551, :column 5, :line 7551, :file "cljs/core.cljs"} n] [^{:end-column 6, :end-line 7571, :column 5, :line 7571, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7571, :column 7, :line 7571, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 6, :end-line 7573, :column 5, :line 7573, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7573, :column 7, :line 7573, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 7573, :column 12, :line 7573, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7551, :column 4, :line 7551, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7551, :column 5, :line 7551, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7571, :column 4, :line 7571, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7571, :column 5, :line 7571, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7571, :column 7, :line 7571, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7573, :column 4, :line 7573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7573, :column 5, :line 7573, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 7573, :column 7, :line 7573, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 7573, :column 12, :line 7573, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 20, :end-line 7547, :column 7, :line 7547, :file "cljs/core.cljs"} partition-all, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7771, :column 4, :line 7771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7771, :column 5, :line 7771, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7800, :column 4, :line 7800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7800, :column 5, :line 7800, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7800, :column 7, :line 7800, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 19, :end-line 7767, :column 7, :line 7767, :file "cljs/core.cljs"} partition-by ^{:arglists (^{:end-column 7, :end-line 7771, :column 4, :line 7771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7771, :column 5, :line 7771, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7800, :column 4, :line 7800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7800, :column 5, :line 7800, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7800, :column 7, :line 7800, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 19, :end-line 7767, :column 7, :line 7767, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 7771, :column 5, :line 7771, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 6, :end-line 7800, :column 5, :line 7800, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7800, :column 7, :line 7800, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7771, :column 4, :line 7771, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7771, :column 5, :line 7771, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7800, :column 4, :line 7800, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7800, :column 5, :line 7800, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 7800, :column 7, :line 7800, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 19, :end-line 7767, :column 7, :line 7767, :file "cljs/core.cljs"} partition-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 47, :end-line 5073, :column 38, :line 5073, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5073, :column 39, :line 5073, :file "cljs/core.cljs"} arr ^{:end-column 44, :end-line 5073, :column 43, :line 5073, :file "cljs/core.cljs"} m ^{:end-column 46, :end-line 5073, :column 45, :line 5073, :file "cljs/core.cljs"} k]), :private true, :end-column 37, :end-line 5073, :column 8, :line 5073, :file "cljs/core.cljs"} array-map-index-of-identical? ^{:arglists (^{:end-column 47, :end-line 5073, :column 38, :line 5073, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5073, :column 39, :line 5073, :file "cljs/core.cljs"} arr ^{:end-column 44, :end-line 5073, :column 43, :line 5073, :file "cljs/core.cljs"} m ^{:end-column 46, :end-line 5073, :column 45, :line 5073, :file "cljs/core.cljs"} k]), :private true, :end-column 37, :end-line 5073, :column 8, :line 5073, :file "cljs/core.cljs"} {:arglists ([^{:end-column 42, :end-line 5073, :column 39, :line 5073, :file "cljs/core.cljs"} arr ^{:end-column 44, :end-line 5073, :column 43, :line 5073, :file "cljs/core.cljs"} m ^{:end-column 46, :end-line 5073, :column 45, :line 5073, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 47, :end-line 5073, :column 38, :line 5073, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5073, :column 39, :line 5073, :file "cljs/core.cljs"} arr ^{:end-column 44, :end-line 5073, :column 43, :line 5073, :file "cljs/core.cljs"} m ^{:end-column 46, :end-line 5073, :column 45, :line 5073, :file "cljs/core.cljs"} k]), :private true, :end-column 37, :end-line 5073, :column 8, :line 5073, :file "cljs/core.cljs"} array-map-index-of-identical?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 25, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} ISequential ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 25, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 25, :end-line 322, :column 14, :line 322, :file "cljs/core.cljs"} ISequential, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} ->LazySeq ^{:arglists ([^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 2474, :column 19, :line 2474, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 36, :end-line 2474, :column 34, :line 2474, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 48, :end-line 2474, :column 47, :line 2474, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 65, :end-line 2474, :column 59, :line 2474, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 2474, :column 10, :line 2474, :file "cljs/core.cljs"} ->LazySeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 4848, :column 3, :line 4848, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 4848, :column 4, :line 4848, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 4848, :column 6, :line 4848, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 17, :end-line 4845, :column 8, :line 4845, :file "cljs/core.cljs"} equiv-map ^{:arglists (^{:end-column 8, :end-line 4848, :column 3, :line 4848, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 4848, :column 4, :line 4848, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 4848, :column 6, :line 4848, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 17, :end-line 4845, :column 8, :line 4845, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 4848, :column 4, :line 4848, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 4848, :column 6, :line 4848, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 4848, :column 3, :line 4848, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 4848, :column 4, :line 4848, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 4848, :column 6, :line 4848, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 17, :end-line 4845, :column 8, :line 4845, :file "cljs/core.cljs"} equiv-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2761, :column 4, :line 2761, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2761, :column 5, :line 2761, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2765, :column 4, :line 2765, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2765, :column 5, :line 2765, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2765, :column 10, :line 2765, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2760, :column 7, :line 2760, :file "cljs/core.cljs"} object-array ^{:arglists (^{:end-column 17, :end-line 2761, :column 4, :line 2761, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2761, :column 5, :line 2761, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2765, :column 4, :line 2765, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2765, :column 5, :line 2765, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2765, :column 10, :line 2765, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2760, :column 7, :line 2760, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2761, :column 5, :line 2761, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 9, :end-line 2765, :column 5, :line 2765, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2765, :column 10, :line 2765, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2761, :column 4, :line 2761, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2761, :column 5, :line 2761, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2765, :column 4, :line 2765, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2765, :column 5, :line 2765, :file "cljs/core.cljs"} size ^{:end-column 25, :end-line 2765, :column 10, :line 2765, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 19, :end-line 2760, :column 7, :line 2760, :file "cljs/core.cljs"} object-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 76, :column 20, :line 76, :file "cljs/core.cljs"} Keyword {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 17, :end-line 2413, :column 10, :line 2413, :file "cljs/core.cljs"} Keyword, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 47, :end-line 2413, :column 18, :line 2413, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2413, :column 19, :line 2413, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 2413, :column 22, :line 2413, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 2413, :column 27, :line 2413, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 46, :end-line 2413, :column 41, :line 2413, :file "cljs/core.cljs"} _hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 16, :end-line 8641, :column 4, :line 8641, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8641, :column 5, :line 8641, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8641, :column 9, :line 8641, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8645, :column 4, :line 8645, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8645, :column 5, :line 8645, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8645, :column 7, :line 8645, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8645, :column 11, :line 8645, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 13, :end-line 8635, :column 7, :line 8635, :file "cljs/core.cljs"} derive ^{:arglists (^{:end-column 16, :end-line 8641, :column 4, :line 8641, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8641, :column 5, :line 8641, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8641, :column 9, :line 8641, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8645, :column 4, :line 8645, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8645, :column 5, :line 8645, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8645, :column 7, :line 8645, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8645, :column 11, :line 8645, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 13, :end-line 8635, :column 7, :line 8635, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 8, :end-line 8641, :column 5, :line 8641, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8641, :column 9, :line 8641, :file "cljs/core.cljs"} parent] [^{:end-column 6, :end-line 8645, :column 5, :line 8645, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8645, :column 7, :line 8645, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8645, :column 11, :line 8645, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8641, :column 4, :line 8641, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8641, :column 5, :line 8641, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8641, :column 9, :line 8641, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8645, :column 4, :line 8645, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8645, :column 5, :line 8645, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8645, :column 7, :line 8645, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8645, :column 11, :line 8645, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 13, :end-line 8635, :column 7, :line 8635, :file "cljs/core.cljs"} derive, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 3033, :column 16, :line 3033, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3033, :column 17, :line 3033, :file "cljs/core.cljs"} coll]), :end-column 15, :end-line 3033, :column 7, :line 3033, :file "cljs/core.cljs"} seq-iter ^{:arglists (^{:end-column 22, :end-line 3033, :column 16, :line 3033, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3033, :column 17, :line 3033, :file "cljs/core.cljs"} coll]), :end-column 15, :end-line 3033, :column 7, :line 3033, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:end-column 21, :end-line 3033, :column 17, :line 3033, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 3033, :column 16, :line 3033, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3033, :column 17, :line 3033, :file "cljs/core.cljs"} coll]), :end-column 15, :end-line 3033, :column 7, :line 3033, :file "cljs/core.cljs"} seq-iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]], ^{:end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} IChunkedSeq ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons), :protocol-info {:methods {^{:end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]], ^{:end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 18, :end-line 387, :column 4, :line 387, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 387, :column 19, :line 387, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 387, :column 20, :line 387, :file "cljs/core.cljs"} coll]], ^{:end-column 17, :end-line 388, :column 4, :line 388, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 388, :column 18, :line 388, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 388, :column 19, :line 388, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 25, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} IChunkedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 9036, :column 32, :line 9036, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 9036, :column 33, :line 9036, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 9036, :column 8, :line 9036, :file "cljs/core.cljs"} boolean, :end-column 31, :end-line 9036, :column 16, :line 9036, :file "cljs/core.cljs"} special-symbol? ^{:arglists (^{:end-column 35, :end-line 9036, :column 32, :line 9036, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 9036, :column 33, :line 9036, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 9036, :column 8, :line 9036, :file "cljs/core.cljs"} boolean, :end-column 31, :end-line 9036, :column 16, :line 9036, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 34, :end-line 9036, :column 33, :line 9036, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 9036, :column 32, :line 9036, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 9036, :column 33, :line 9036, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 9036, :column 8, :line 9036, :file "cljs/core.cljs"} boolean, :end-column 31, :end-line 9036, :column 16, :line 9036, :file "cljs/core.cljs"} special-symbol?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8623, :column 5, :line 8623, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8624, :column 5, :line 8624, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8624, :column 7, :line 8624, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 16, :end-line 8618, :column 7, :line 8618, :file "cljs/core.cljs"} ancestors ^{:arglists (^{:end-column 9, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8623, :column 5, :line 8623, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8624, :column 5, :line 8624, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8624, :column 7, :line 8624, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 16, :end-line 8618, :column 7, :line 8618, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8623, :column 5, :line 8623, :file "cljs/core.cljs"} tag] [^{:end-column 6, :end-line 8624, :column 5, :line 8624, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8624, :column 7, :line 8624, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8623, :column 5, :line 8623, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8624, :column 5, :line 8624, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8624, :column 7, :line 8624, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 16, :end-line 8618, :column 7, :line 8618, :file "cljs/core.cljs"} ancestors, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7607, :column 4, :line 7607, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7607, :column 5, :line 7607, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7607, :column 8, :line 7607, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7607, :column 13, :line 7607, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7613, :column 4, :line 7613, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7613, :column 5, :line 7613, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7613, :column 8, :line 7613, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7613, :column 19, :line 7613, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7613, :column 29, :line 7613, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7613, :column 38, :line 7613, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 13, :end-line 7603, :column 7, :line 7603, :file "cljs/core.cljs"} subseq ^{:arglists (^{:end-column 17, :end-line 7607, :column 4, :line 7607, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7607, :column 5, :line 7607, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7607, :column 8, :line 7607, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7607, :column 13, :line 7607, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7613, :column 4, :line 7613, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7613, :column 5, :line 7613, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7613, :column 8, :line 7613, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7613, :column 19, :line 7613, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7613, :column 29, :line 7613, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7613, :column 38, :line 7613, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 13, :end-line 7603, :column 7, :line 7603, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7607, :column 5, :line 7607, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7607, :column 8, :line 7607, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7607, :column 13, :line 7607, :file "cljs/core.cljs"} key] [^{:end-column 7, :end-line 7613, :column 5, :line 7613, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7613, :column 8, :line 7613, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7613, :column 19, :line 7613, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7613, :column 29, :line 7613, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7613, :column 38, :line 7613, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7607, :column 4, :line 7607, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7607, :column 5, :line 7607, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7607, :column 8, :line 7607, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7607, :column 13, :line 7607, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7613, :column 4, :line 7613, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7613, :column 5, :line 7613, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7613, :column 8, :line 7613, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7613, :column 19, :line 7613, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7613, :column 29, :line 7613, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7613, :column 38, :line 7613, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 13, :end-line 7603, :column 7, :line 7603, :file "cljs/core.cljs"} subseq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 25, :end-line 3045, :column 10, :line 3045, :file "cljs/core.cljs"} LazyTransformer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 3124, :column 10, :line 3124, :file "cljs/core.cljs"} LazyTransformer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 81, :end-line 3124, :column 26, :line 3124, :file "cljs/core.cljs"} [^{:mutable true, :end-column 44, :end-line 3124, :column 37, :line 3124, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 60, :end-line 3124, :column 55, :line 3124, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 75, :end-line 3124, :column 71, :line 3124, :file "cljs/core.cljs"} rest ^{:end-column 80, :end-line 3124, :column 76, :line 3124, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8332, :column 4, :line 8332, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8333, :column 4, :line 8333, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8333, :column 5, :line 8333, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 13, :end-line 8328, :column 7, :line 8328, :file "cljs/core.cljs"} gensym ^{:arglists (^{:end-column 6, :end-line 8332, :column 4, :line 8332, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8333, :column 4, :line 8333, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8333, :column 5, :line 8333, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 13, :end-line 8328, :column 7, :line 8328, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 18, :end-line 8333, :column 5, :line 8333, :file "cljs/core.cljs"} prefix-string]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8332, :column 4, :line 8332, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8333, :column 4, :line 8333, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8333, :column 5, :line 8333, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 13, :end-line 8328, :column 7, :line 8328, :file "cljs/core.cljs"} gensym, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next ^{:arglists (^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 267, :column 22, :line 267, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 267, :column 23, :line 267, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 15, :end-line 267, :column 5, :line 267, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 267, :column 16, :line 267, :file "cljs/core.cljs"} -next, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} ->HashCollisionNode ^{:arglists ([^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} {:arglists (^cljs.core/HashCollisionNode [^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} ->HashCollisionNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8359, :column 3, :line 8359, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 15, :end-line 8357, :column 8, :line 8357, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 8357, :column 16, :line 8357, :file "cljs/core.cljs"} delay? ^{:arglists (^{:end-column 6, :end-line 8359, :column 3, :line 8359, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 15, :end-line 8357, :column 8, :line 8357, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 8357, :column 16, :line 8357, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8359, :column 3, :line 8359, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 15, :end-line 8357, :column 8, :line 8357, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 8357, :column 16, :line 8357, :file "cljs/core.cljs"} delay?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 5449, :column 10, :line 5449, :file "cljs/core.cljs"} create-inode-seq ^{:arglists (^{:end-column 11, :end-line 5990, :column 4, :line 5990, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5990, :column 5, :line 5990, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5992, :column 4, :line 5992, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5992, :column 5, :line 5992, :file "cljs/core.cljs"} nodes ^{:end-column 12, :end-line 5992, :column 11, :line 5992, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 5992, :column 13, :line 5992, :file "cljs/core.cljs"} s]), :private true, :end-column 24, :end-line 5989, :column 8, :line 5989, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 5990, :column 5, :line 5990, :file "cljs/core.cljs"} nodes] [^{:end-column 10, :end-line 5992, :column 5, :line 5992, :file "cljs/core.cljs"} nodes ^{:end-column 12, :end-line 5992, :column 11, :line 5992, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 5992, :column 13, :line 5992, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5990, :column 4, :line 5990, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5990, :column 5, :line 5990, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5992, :column 4, :line 5992, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5992, :column 5, :line 5992, :file "cljs/core.cljs"} nodes ^{:end-column 12, :end-line 5992, :column 11, :line 5992, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 5992, :column 13, :line 5992, :file "cljs/core.cljs"} s]), :private true, :end-column 24, :end-line 5989, :column 8, :line 5989, :file "cljs/core.cljs"} create-inode-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3874, :column 3, :line 3874, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3874, :column 4, :line 3874, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 14, :end-line 3870, :column 7, :line 3870, :file "cljs/core.cljs"} flatten ^{:arglists (^{:end-column 6, :end-line 3874, :column 3, :line 3874, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3874, :column 4, :line 3874, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 14, :end-line 3870, :column 7, :line 3870, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 5, :end-line 3874, :column 4, :line 3874, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3874, :column 3, :line 3874, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3874, :column 4, :line 3874, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 14, :end-line 3870, :column 7, :line 3870, :file "cljs/core.cljs"} flatten, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc ^{:arglists (^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 279, :column 17, :line 279, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 279, :column 18, :line 279, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 279, :column 23, :line 279, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 8, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -dissoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1992, :column 15, :line 1992, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1992, :column 16, :line 1992, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1992, :column 7, :line 1992, :file "cljs/core.cljs"} doubles ^{:arglists (^{:end-column 18, :end-line 1992, :column 15, :line 1992, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1992, :column 16, :line 1992, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1992, :column 7, :line 1992, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1992, :column 16, :line 1992, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1992, :column 15, :line 1992, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1992, :column 16, :line 1992, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1992, :column 7, :line 1992, :file "cljs/core.cljs"} doubles, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key? ^{:arglists (^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 273, :column 28, :line 273, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 273, :column 29, :line 273, :file "cljs/core.cljs"} coll ^{:end-column 35, :end-line 273, :column 34, :line 273, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 12, :end-line 273, :column 5, :line 273, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 273, :column 13, :line 273, :file "cljs/core.cljs"} -contains-key?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8321, :column 3, :line 8321, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8321, :column 9, :line 8321, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 19, :end-line 8317, :column 7, :line 8317, :file "cljs/core.cljs"} remove-watch ^{:arglists (^{:end-column 13, :end-line 8321, :column 3, :line 8321, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8321, :column 9, :line 8321, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 19, :end-line 8317, :column 7, :line 8317, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8321, :column 9, :line 8321, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8321, :column 3, :line 8321, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} iref ^{:end-column 12, :end-line 8321, :column 9, :line 8321, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 19, :end-line 8317, :column 7, :line 8317, :file "cljs/core.cljs"} remove-watch, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 9000, :column 4, :line 9000, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9000, :column 5, :line 9000, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9000, :column 9, :line 9000, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 9002, :column 4, :line 9002, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9002, :column 5, :line 9002, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9002, :column 9, :line 9002, :file "cljs/core.cljs"} map ^{:end-column 18, :end-line 9002, :column 13, :line 9002, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 14, :end-line 8996, :column 7, :line 8996, :file "cljs/core.cljs"} ex-info ^{:arglists (^{:end-column 13, :end-line 9000, :column 4, :line 9000, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9000, :column 5, :line 9000, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9000, :column 9, :line 9000, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 9002, :column 4, :line 9002, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9002, :column 5, :line 9002, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9002, :column 9, :line 9002, :file "cljs/core.cljs"} map ^{:end-column 18, :end-line 9002, :column 13, :line 9002, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 14, :end-line 8996, :column 7, :line 8996, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 8, :end-line 9000, :column 5, :line 9000, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9000, :column 9, :line 9000, :file "cljs/core.cljs"} map] ^cljs.core/ExceptionInfo [^{:end-column 8, :end-line 9002, :column 5, :line 9002, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9002, :column 9, :line 9002, :file "cljs/core.cljs"} map ^{:end-column 18, :end-line 9002, :column 13, :line 9002, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 9000, :column 4, :line 9000, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9000, :column 5, :line 9000, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9000, :column 9, :line 9000, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 9002, :column 4, :line 9002, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9002, :column 5, :line 9002, :file "cljs/core.cljs"} msg ^{:end-column 12, :end-line 9002, :column 9, :line 9002, :file "cljs/core.cljs"} map ^{:end-column 18, :end-line 9002, :column 13, :line 9002, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 14, :end-line 8996, :column 7, :line 8996, :file "cljs/core.cljs"} ex-info, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1533, :column 21, :line 1533, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1533, :column 22, :line 1533, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1533, :column 8, :line 1533, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1533, :column 16, :line 1533, :file "cljs/core.cljs"} ifn? ^{:arglists (^{:end-column 24, :end-line 1533, :column 21, :line 1533, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1533, :column 22, :line 1533, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1533, :column 8, :line 1533, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1533, :column 16, :line 1533, :file "cljs/core.cljs"} {:arglists (^^{:end-column 15, :end-line 1320, :column 8, :line 1320, :file "cljs/core.cljs"} boolean [^{:end-column 23, :end-line 1533, :column 22, :line 1533, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1533, :column 21, :line 1533, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1533, :column 22, :line 1533, :file "cljs/core.cljs"} f]), :tag ^{:end-column 15, :end-line 1533, :column 8, :line 1533, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1533, :column 16, :line 1533, :file "cljs/core.cljs"} ifn?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 397, :column 14, :line 397, :file "cljs/core.cljs"} IAtom ^{:impls (cljs.core/Atom), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 397, :column 14, :line 397, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 397, :column 14, :line 397, :file "cljs/core.cljs"} IAtom, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} ->PersistentQueue ^{:arglists ([^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentQueue [^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} ->PersistentQueue, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]], ^{:end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]], ^{:end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 24, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} IWatchable ^{:impls (cljs.core/Atom), :protocol-info {:methods {^{:end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]], ^{:end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]], ^{:end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 24, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 19, :end-line 356, :column 4, :line 356, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 356, :column 20, :line 356, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 356, :column 21, :line 356, :file "cljs/core.cljs"} this ^{:end-column 32, :end-line 356, :column 26, :line 356, :file "cljs/core.cljs"} oldval ^{:end-column 39, :end-line 356, :column 33, :line 356, :file "cljs/core.cljs"} newval]], ^{:end-column 14, :end-line 357, :column 4, :line 357, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 357, :column 15, :line 357, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 357, :column 16, :line 357, :file "cljs/core.cljs"} this ^{:end-column 24, :end-line 357, :column 21, :line 357, :file "cljs/core.cljs"} key ^{:end-column 26, :end-line 357, :column 25, :line 357, :file "cljs/core.cljs"} f]], ^{:end-column 17, :end-line 358, :column 4, :line 358, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 358, :column 18, :line 358, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 358, :column 19, :line 358, :file "cljs/core.cljs"} this ^{:end-column 27, :end-line 358, :column 24, :line 358, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 24, :end-line 355, :column 14, :line 355, :file "cljs/core.cljs"} IWatchable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} ->Stepper ^{:arglists ([^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} ->Stepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 4016, :column 22, :line 4016, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4016, :column 23, :line 4016, :file "cljs/core.cljs"} edit]), :private true, :end-column 21, :end-line 4016, :column 8, :line 4016, :file "cljs/core.cljs"} pv-fresh-node ^{:arglists (^{:end-column 28, :end-line 4016, :column 22, :line 4016, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4016, :column 23, :line 4016, :file "cljs/core.cljs"} edit]), :private true, :end-column 21, :end-line 4016, :column 8, :line 4016, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 4016, :column 23, :line 4016, :file "cljs/core.cljs"} edit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 4016, :column 22, :line 4016, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4016, :column 23, :line 4016, :file "cljs/core.cljs"} edit]), :private true, :end-column 21, :end-line 4016, :column 8, :line 4016, :file "cljs/core.cljs"} pv-fresh-node, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 4346, :column 10, :line 4346, :file "cljs/core.cljs"} subvec ^{:arglists (^{:end-column 13, :end-line 4545, :column 4, :line 4545, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4545, :column 5, :line 4545, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4545, :column 7, :line 4545, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4547, :column 4, :line 4547, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4547, :column 5, :line 4547, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4547, :column 7, :line 4547, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 4547, :column 13, :line 4547, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 13, :end-line 4539, :column 7, :line 4539, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 4545, :column 5, :line 4545, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4545, :column 7, :line 4545, :file "cljs/core.cljs"} start] ^cljs.core/Subvec [^{:end-column 6, :end-line 4547, :column 5, :line 4547, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4547, :column 7, :line 4547, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 4547, :column 13, :line 4547, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 4545, :column 4, :line 4545, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4545, :column 5, :line 4545, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4545, :column 7, :line 4545, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4547, :column 4, :line 4547, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4547, :column 5, :line 4547, :file "cljs/core.cljs"} v ^{:end-column 12, :end-line 4547, :column 7, :line 4547, :file "cljs/core.cljs"} start ^{:end-column 16, :end-line 4547, :column 13, :line 4547, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 13, :end-line 4539, :column 7, :line 4539, :file "cljs/core.cljs"} subvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop! ^{:arglists (^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 375, :column 15, :line 375, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 375, :column 16, :line 375, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 375, :column 5, :line 375, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 375, :column 9, :line 375, :file "cljs/core.cljs"} -pop!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3299, :column 4, :line 3299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3299, :column 5, :line 3299, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3300, :column 4, :line 3300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3300, :column 5, :line 3300, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3300, :column 7, :line 3300, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3302, :column 4, :line 3302, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3302, :column 5, :line 3302, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3302, :column 7, :line 3302, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3302, :column 12, :line 3302, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3304, :column 4, :line 3304, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3304, :column 5, :line 3304, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3304, :column 7, :line 3304, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3304, :column 12, :line 3304, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3304, :column 17, :line 3304, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3306, :column 4, :line 3306, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3306, :column 5, :line 3306, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3306, :column 7, :line 3306, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3306, :column 12, :line 3306, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3306, :column 17, :line 3306, :file "cljs/core.cljs"} arg3 ^{:end-column 23, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} & ^{:end-column 28, :end-line 3306, :column 24, :line 3306, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 14, :end-line 3295, :column 7, :line 3295, :file "cljs/core.cljs"} partial ^{:arglists (^{:end-column 7, :end-line 3299, :column 4, :line 3299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3299, :column 5, :line 3299, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3300, :column 4, :line 3300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3300, :column 5, :line 3300, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3300, :column 7, :line 3300, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3302, :column 4, :line 3302, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3302, :column 5, :line 3302, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3302, :column 7, :line 3302, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3302, :column 12, :line 3302, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3304, :column 4, :line 3304, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3304, :column 5, :line 3304, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3304, :column 7, :line 3304, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3304, :column 12, :line 3304, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3304, :column 17, :line 3304, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3306, :column 4, :line 3306, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3306, :column 5, :line 3306, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3306, :column 7, :line 3306, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3306, :column 12, :line 3306, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3306, :column 17, :line 3306, :file "cljs/core.cljs"} arg3 ^{:end-column 23, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} & ^{:end-column 28, :end-line 3306, :column 24, :line 3306, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 14, :end-line 3295, :column 7, :line 3295, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3299, :column 5, :line 3299, :file "cljs/core.cljs"} f] ^function [^{:end-column 6, :end-line 3300, :column 5, :line 3300, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3300, :column 7, :line 3300, :file "cljs/core.cljs"} arg1] ^function [^{:end-column 6, :end-line 3302, :column 5, :line 3302, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3302, :column 7, :line 3302, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3302, :column 12, :line 3302, :file "cljs/core.cljs"} arg2] ^function [^{:end-column 6, :end-line 3304, :column 5, :line 3304, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3304, :column 7, :line 3304, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3304, :column 12, :line 3304, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3304, :column 17, :line 3304, :file "cljs/core.cljs"} arg3] ^function [^{:end-column 6, :end-line 3306, :column 5, :line 3306, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3306, :column 7, :line 3306, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3306, :column 12, :line 3306, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3306, :column 17, :line 3306, :file "cljs/core.cljs"} arg3 & ^{:end-column 28, :end-line 3306, :column 24, :line 3306, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3299, :column 4, :line 3299, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3299, :column 5, :line 3299, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3300, :column 4, :line 3300, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3300, :column 5, :line 3300, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3300, :column 7, :line 3300, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3302, :column 4, :line 3302, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3302, :column 5, :line 3302, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3302, :column 7, :line 3302, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3302, :column 12, :line 3302, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3304, :column 4, :line 3304, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3304, :column 5, :line 3304, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3304, :column 7, :line 3304, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3304, :column 12, :line 3304, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3304, :column 17, :line 3304, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3306, :column 4, :line 3306, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3306, :column 5, :line 3306, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3306, :column 7, :line 3306, :file "cljs/core.cljs"} arg1 ^{:end-column 16, :end-line 3306, :column 12, :line 3306, :file "cljs/core.cljs"} arg2 ^{:end-column 21, :end-line 3306, :column 17, :line 3306, :file "cljs/core.cljs"} arg3 ^{:end-column 23, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} & ^{:end-column 28, :end-line 3306, :column 24, :line 3306, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 14, :end-line 3295, :column 7, :line 3295, :file "cljs/core.cljs"} partial, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} chunked-seq? ^{:arglists (^{:end-column 6, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1470, :column 3, :line 1470, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1470, :column 4, :line 1470, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} chunked-seq?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3760, :column 3, :line 3760, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3760, :column 4, :line 3760, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 3760, :column 6, :line 3760, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 16, :end-line 3758, :column 7, :line 3758, :file "cljs/core.cljs"} replicate ^{:arglists (^{:end-column 8, :end-line 3760, :column 3, :line 3760, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3760, :column 4, :line 3760, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 3760, :column 6, :line 3760, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 16, :end-line 3758, :column 7, :line 3758, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 5, :end-line 3760, :column 4, :line 3760, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 3760, :column 6, :line 3760, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3760, :column 3, :line 3760, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3760, :column 4, :line 3760, :file "cljs/core.cljs"} n ^{:end-column 7, :end-line 3760, :column 6, :line 3760, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 16, :end-line 3758, :column 7, :line 3758, :file "cljs/core.cljs"} replicate, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} PersistentQueue {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 25, :end-line 4778, :column 10, :line 4778, :file "cljs/core.cljs"} PersistentQueue, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 4778, :column 26, :line 4778, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4778, :column 27, :line 4778, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4778, :column 32, :line 4778, :file "cljs/core.cljs"} count ^{:end-column 43, :end-line 4778, :column 38, :line 4778, :file "cljs/core.cljs"} front ^{:end-column 48, :end-line 4778, :column 44, :line 4778, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 65, :end-line 4778, :column 59, :line 4778, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 9, :end-line 7531, :column 4, :line 7531, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7531, :column 5, :line 7531, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7531, :column 7, :line 7531, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7532, :column 4, :line 7532, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7532, :column 5, :line 7532, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7532, :column 7, :line 7532, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7532, :column 9, :line 7532, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7533, :column 7, :line 7533, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7533, :column 9, :line 7533, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7533, :column 11, :line 7533, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7533, :column 13, :line 7533, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 14, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} min-key ^{:arglists (^{:end-column 9, :end-line 7531, :column 4, :line 7531, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7531, :column 5, :line 7531, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7531, :column 7, :line 7531, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7532, :column 4, :line 7532, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7532, :column 5, :line 7532, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7532, :column 7, :line 7532, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7532, :column 9, :line 7532, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7533, :column 7, :line 7533, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7533, :column 9, :line 7533, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7533, :column 11, :line 7533, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7533, :column 13, :line 7533, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 14, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7531, :column 5, :line 7531, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7531, :column 7, :line 7531, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 7532, :column 5, :line 7532, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7532, :column 7, :line 7532, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7532, :column 9, :line 7532, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7533, :column 7, :line 7533, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7533, :column 9, :line 7533, :file "cljs/core.cljs"} y & ^{:end-column 17, :end-line 7533, :column 13, :line 7533, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7531, :column 4, :line 7531, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7531, :column 5, :line 7531, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7531, :column 7, :line 7531, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7532, :column 4, :line 7532, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7532, :column 5, :line 7532, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7532, :column 7, :line 7532, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7532, :column 9, :line 7532, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7533, :column 4, :line 7533, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7533, :column 5, :line 7533, :file "cljs/core.cljs"} k ^{:end-column 8, :end-line 7533, :column 7, :line 7533, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 7533, :column 9, :line 7533, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 7533, :column 11, :line 7533, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 7533, :column 13, :line 7533, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 14, :end-line 7529, :column 7, :line 7529, :file "cljs/core.cljs"} min-key, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2182, :column 18, :line 2182, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2182, :column 19, :line 2182, :file "cljs/core.cljs"} s]), :private true, :end-column 17, :end-line 2182, :column 8, :line 2182, :file "cljs/core.cljs"} hash-iset ^{:arglists (^{:end-column 21, :end-line 2182, :column 18, :line 2182, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2182, :column 19, :line 2182, :file "cljs/core.cljs"} s]), :private true, :end-column 17, :end-line 2182, :column 8, :line 2182, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 20, :end-line 2182, :column 19, :line 2182, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2182, :column 18, :line 2182, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2182, :column 19, :line 2182, :file "cljs/core.cljs"} s]), :private true, :end-column 17, :end-line 2182, :column 8, :line 2182, :file "cljs/core.cljs"} hash-iset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 14, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} reduced ^{:arglists (^{:end-column 6, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 14, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 5, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 822, :column 3, :line 822, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 822, :column 4, :line 822, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 14, :end-line 820, :column 7, :line 820, :file "cljs/core.cljs"} reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7901, :column 3, :line 7901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7901, :column 4, :line 7901, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 17, :end-line 7899, :column 7, :line 7899, :file "cljs/core.cljs"} re-matches ^{:arglists (^{:end-column 9, :end-line 7901, :column 3, :line 7901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7901, :column 4, :line 7901, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 17, :end-line 7899, :column 7, :line 7899, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7901, :column 4, :line 7901, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7901, :column 3, :line 7901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7901, :column 4, :line 7901, :file "cljs/core.cljs"} re ^{:end-column 8, :end-line 7901, :column 7, :line 7901, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 17, :end-line 7899, :column 7, :line 7899, :file "cljs/core.cljs"} re-matches, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6987, :column 3, :line 6987, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6987, :column 4, :line 6987, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6987, :column 6, :line 6987, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 16, :end-line 6984, :column 7, :line 6984, :file "cljs/core.cljs"} array-map ^{:arglists (^{:end-column 14, :end-line 6987, :column 3, :line 6987, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6987, :column 4, :line 6987, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6987, :column 6, :line 6987, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 16, :end-line 6984, :column 7, :line 6984, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 13, :end-line 6987, :column 6, :line 6987, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6987, :column 3, :line 6987, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6987, :column 4, :line 6987, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6987, :column 6, :line 6987, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 16, :end-line 6984, :column 7, :line 6984, :file "cljs/core.cljs"} array-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} ITransientSet ^{:impls (cljs.core/TransientHashSet), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 377, :column 14, :line 377, :file "cljs/core.cljs"} ITransientSet, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 43, :end-line 151, :column 3, :line 151, :file "cljs/core.cljs"} ITER_SYMBOL ^{:end-column 33, :end-line 152, :column 3, :line 152, :file "cljs/core.cljs"} {:tag string, :op :var, :name ^{:end-column 33, :end-line 152, :column 3, :line 152, :file "cljs/core.cljs"} ITER_SYMBOL, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1883, :column 30, :line 1883, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1883, :column 31, :line 1883, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1883, :column 8, :line 1883, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1883, :column 15, :line 1883, :file "cljs/core.cljs"} unchecked-byte ^{:arglists (^{:end-column 33, :end-line 1883, :column 30, :line 1883, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1883, :column 31, :line 1883, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1883, :column 8, :line 1883, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1883, :column 15, :line 1883, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 1883, :column 31, :line 1883, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1883, :column 30, :line 1883, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1883, :column 31, :line 1883, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1883, :column 8, :line 1883, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1883, :column 15, :line 1883, :file "cljs/core.cljs"} unchecked-byte, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 5508, :column 10, :line 5508, :file "cljs/core.cljs"} ArrayNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 5721, :column 10, :line 5721, :file "cljs/core.cljs"} ArrayNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 5721, :column 20, :line 5721, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5721, :column 21, :line 5721, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 39, :end-line 5721, :column 36, :line 5721, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 53, :end-line 5721, :column 50, :line 5721, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists ([^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 4348, :column 10, :line 4348, :file "cljs/core.cljs"} ->ChunkedSeq ^{:arglists ([^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 4348, :column 10, :line 4348, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 4348, :column 22, :line 4348, :file "cljs/core.cljs"} vec ^{:end-column 30, :end-line 4348, :column 26, :line 4348, :file "cljs/core.cljs"} node ^{:end-column 32, :end-line 4348, :column 31, :line 4348, :file "cljs/core.cljs"} i ^{:end-column 36, :end-line 4348, :column 33, :line 4348, :file "cljs/core.cljs"} off ^{:end-column 41, :end-line 4348, :column 37, :line 4348, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 58, :end-line 4348, :column 52, :line 4348, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 4348, :column 10, :line 4348, :file "cljs/core.cljs"} ->ChunkedSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3535, :column 4, :line 3535, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3535, :column 5, :line 3535, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3543, :column 4, :line 3543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3543, :column 5, :line 3543, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3543, :column 8, :line 3543, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3551, :column 4, :line 3551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3551, :column 5, :line 3551, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3551, :column 8, :line 3551, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3551, :column 11, :line 3551, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3559, :column 4, :line 3559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3559, :column 5, :line 3559, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3559, :column 8, :line 3559, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3559, :column 11, :line 3559, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3559, :column 14, :line 3559, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3559, :column 16, :line 3559, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 17, :end-line 3530, :column 7, :line 3530, :file "cljs/core.cljs"} every-pred ^{:arglists (^{:end-column 7, :end-line 3535, :column 4, :line 3535, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3535, :column 5, :line 3535, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3543, :column 4, :line 3543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3543, :column 5, :line 3543, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3543, :column 8, :line 3543, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3551, :column 4, :line 3551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3551, :column 5, :line 3551, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3551, :column 8, :line 3551, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3551, :column 11, :line 3551, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3559, :column 4, :line 3559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3559, :column 5, :line 3559, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3559, :column 8, :line 3559, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3559, :column 11, :line 3559, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3559, :column 14, :line 3559, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3559, :column 16, :line 3559, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 17, :end-line 3530, :column 7, :line 3530, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3535, :column 5, :line 3535, :file "cljs/core.cljs"} p] ^function [^{:end-column 7, :end-line 3543, :column 5, :line 3543, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3543, :column 8, :line 3543, :file "cljs/core.cljs"} p2] ^function [^{:end-column 7, :end-line 3551, :column 5, :line 3551, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3551, :column 8, :line 3551, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3551, :column 11, :line 3551, :file "cljs/core.cljs"} p3] ^function [^{:end-column 7, :end-line 3559, :column 5, :line 3559, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3559, :column 8, :line 3559, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3559, :column 11, :line 3559, :file "cljs/core.cljs"} p3 & ^{:end-column 18, :end-line 3559, :column 16, :line 3559, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3535, :column 4, :line 3535, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3535, :column 5, :line 3535, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3543, :column 4, :line 3543, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3543, :column 5, :line 3543, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3543, :column 8, :line 3543, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3551, :column 4, :line 3551, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3551, :column 5, :line 3551, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3551, :column 8, :line 3551, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3551, :column 11, :line 3551, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3559, :column 4, :line 3559, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3559, :column 5, :line 3559, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3559, :column 8, :line 3559, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3559, :column 11, :line 3559, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3559, :column 14, :line 3559, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3559, :column 16, :line 3559, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 17, :end-line 3530, :column 7, :line 3530, :file "cljs/core.cljs"} every-pred, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 5177, :column 10, :line 5177, :file "cljs/core.cljs"} keys ^{:arglists (^{:end-column 13, :end-line 7081, :column 3, :line 7081, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7081, :column 4, :line 7081, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 11, :end-line 7079, :column 7, :line 7079, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 7081, :column 4, :line 7081, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7081, :column 3, :line 7081, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 7081, :column 4, :line 7081, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 11, :end-line 7079, :column 7, :line 7079, :file "cljs/core.cljs"} keys, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 34, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 23, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 34, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 23, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} {:arglists (^js/Error [^{:end-column 30, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 34, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 34, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 23, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} PersistentArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 28, :end-line 5188, :column 10, :line 5188, :file "cljs/core.cljs"} PersistentArrayMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 5188, :column 29, :line 5188, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5188, :column 30, :line 5188, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5188, :column 35, :line 5188, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 5188, :column 39, :line 5188, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 59, :end-line 5188, :column 53, :line 5188, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 1565, :column 4, :line 1565, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1565, :column 5, :line 1565, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1566, :column 4, :line 1566, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1566, :column 5, :line 1566, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1566, :column 7, :line 1566, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1567, :column 4, :line 1567, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1567, :column 5, :line 1567, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1567, :column 7, :line 1567, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1567, :column 9, :line 1567, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1567, :column 11, :line 1567, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 15, :end-line 1563, :column 8, :line 1563, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1563, :column 16, :line 1563, :file "cljs/core.cljs"} distinct? ^{:arglists (^{:end-column 7, :end-line 1565, :column 4, :line 1565, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1565, :column 5, :line 1565, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1566, :column 4, :line 1566, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1566, :column 5, :line 1566, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1566, :column 7, :line 1566, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1567, :column 4, :line 1567, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1567, :column 5, :line 1567, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1567, :column 7, :line 1567, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1567, :column 9, :line 1567, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1567, :column 11, :line 1567, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 15, :end-line 1563, :column 8, :line 1563, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1563, :column 16, :line 1563, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1565, :column 5, :line 1565, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 6, :end-line 1566, :column 5, :line 1566, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1566, :column 7, :line 1566, :file "cljs/core.cljs"} y] ^boolean [^{:end-column 6, :end-line 1567, :column 5, :line 1567, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1567, :column 7, :line 1567, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1567, :column 11, :line 1567, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1565, :column 4, :line 1565, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1565, :column 5, :line 1565, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1566, :column 4, :line 1566, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1566, :column 5, :line 1566, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1566, :column 7, :line 1566, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1567, :column 4, :line 1567, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1567, :column 5, :line 1567, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1567, :column 7, :line 1567, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1567, :column 9, :line 1567, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1567, :column 11, :line 1567, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 15, :end-line 1563, :column 8, :line 1563, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1563, :column 16, :line 1563, :file "cljs/core.cljs"} distinct?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 42, :end-line 4843, :column 1, :line 4843, :file "cljs/core.cljs"} never-equiv ^{:private true, :end-column 42, :end-line 4843, :column 1, :line 4843, :file "cljs/core.cljs"} {:tag cljs.core/NeverEquiv, :op :var, :name ^{:private true, :end-column 42, :end-line 4843, :column 1, :line 4843, :file "cljs/core.cljs"} never-equiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} Stepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3050, :column 10, :line 3050, :file "cljs/core.cljs"} Stepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 30, :end-line 3050, :column 18, :line 3050, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3050, :column 19, :line 3050, :file "cljs/core.cljs"} xform ^{:end-column 29, :end-line 3050, :column 25, :line 3050, :file "cljs/core.cljs"} iter], :protocols #{Object}}, ^{:arglists (^{:end-column 34, :end-line 1885, :column 31, :line 1885, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1885, :column 32, :line 1885, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1885, :column 8, :line 1885, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1885, :column 15, :line 1885, :file "cljs/core.cljs"} unchecked-short ^{:arglists (^{:end-column 34, :end-line 1885, :column 31, :line 1885, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1885, :column 32, :line 1885, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1885, :column 8, :line 1885, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1885, :column 15, :line 1885, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1885, :column 32, :line 1885, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1885, :column 31, :line 1885, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1885, :column 32, :line 1885, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1885, :column 8, :line 1885, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1885, :column 15, :line 1885, :file "cljs/core.cljs"} unchecked-short, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} ->Range ^{:arglists ([^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} {:arglists (^cljs.core/Range [^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} ->Range, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8957, :column 3, :line 8957, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8957, :column 4, :line 8957, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 14, :end-line 8955, :column 7, :line 8955, :file "cljs/core.cljs"} methods ^{:arglists (^{:end-column 12, :end-line 8957, :column 3, :line 8957, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8957, :column 4, :line 8957, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 14, :end-line 8955, :column 7, :line 8955, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8957, :column 4, :line 8957, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8957, :column 3, :line 8957, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8957, :column 4, :line 8957, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 14, :end-line 8955, :column 7, :line 8955, :file "cljs/core.cljs"} methods, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3250, :column 3, :line 3250, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3248, :column 8, :line 3248, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 3248, :column 16, :line 3248, :file "cljs/core.cljs"} odd? ^{:arglists (^{:end-column 6, :end-line 3250, :column 3, :line 3250, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3248, :column 8, :line 3248, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 3248, :column 16, :line 3248, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3250, :column 3, :line 3250, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3250, :column 4, :line 3250, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 15, :end-line 3248, :column 8, :line 3248, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 3248, :column 16, :line 3248, :file "cljs/core.cljs"} odd?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 20, :end-line 2559, :column 10, :line 2559, :file "cljs/core.cljs"} ->ArrayChunk ^{:arglists ([^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 20, :end-line 2559, :column 10, :line 2559, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 20, :end-line 2559, :column 10, :line 2559, :file "cljs/core.cljs"} ->ArrayChunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 3047, :column 24, :line 3047, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3047, :column 25, :line 3047, :file "cljs/core.cljs"} stepper]), :end-column 23, :end-line 3047, :column 7, :line 3047, :file "cljs/core.cljs"} lazy-transformer ^{:arglists (^{:end-column 33, :end-line 3047, :column 24, :line 3047, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3047, :column 25, :line 3047, :file "cljs/core.cljs"} stepper]), :end-column 23, :end-line 3047, :column 7, :line 3047, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:end-column 32, :end-line 3047, :column 25, :line 3047, :file "cljs/core.cljs"} stepper]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 3047, :column 24, :line 3047, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3047, :column 25, :line 3047, :file "cljs/core.cljs"} stepper]), :end-column 23, :end-line 3047, :column 7, :line 3047, :file "cljs/core.cljs"} lazy-transformer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 849, :column 4, :line 849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 849, :column 5, :line 849, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 849, :column 12, :line 849, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 860, :column 4, :line 860, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 860, :column 5, :line 860, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 860, :column 12, :line 860, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 860, :column 14, :line 860, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 869, :column 4, :line 869, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 869, :column 5, :line 869, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 869, :column 12, :line 869, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 869, :column 14, :line 869, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 869, :column 18, :line 869, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 17, :end-line 846, :column 8, :line 846, :file "cljs/core.cljs"} ci-reduce ^{:arglists (^{:end-column 14, :end-line 849, :column 4, :line 849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 849, :column 5, :line 849, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 849, :column 12, :line 849, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 860, :column 4, :line 860, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 860, :column 5, :line 860, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 860, :column 12, :line 860, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 860, :column 14, :line 860, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 869, :column 4, :line 869, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 869, :column 5, :line 869, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 869, :column 12, :line 869, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 869, :column 14, :line 869, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 869, :column 18, :line 869, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 17, :end-line 846, :column 8, :line 846, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 849, :column 5, :line 849, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 849, :column 12, :line 849, :file "cljs/core.cljs"} f] [^{:end-column 11, :end-line 860, :column 5, :line 860, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 860, :column 12, :line 860, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 860, :column 14, :line 860, :file "cljs/core.cljs"} val] [^{:end-column 11, :end-line 869, :column 5, :line 869, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 869, :column 12, :line 869, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 869, :column 14, :line 869, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 869, :column 18, :line 869, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 849, :column 4, :line 849, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 849, :column 5, :line 849, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 849, :column 12, :line 849, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 860, :column 4, :line 860, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 860, :column 5, :line 860, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 860, :column 12, :line 860, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 860, :column 14, :line 860, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 869, :column 4, :line 869, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 869, :column 5, :line 869, :file "cljs/core.cljs"} cicoll ^{:end-column 13, :end-line 869, :column 12, :line 869, :file "cljs/core.cljs"} f ^{:end-column 17, :end-line 869, :column 14, :line 869, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 869, :column 18, :line 869, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 17, :end-line 846, :column 8, :line 846, :file "cljs/core.cljs"} ci-reduce, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3 ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method ^{:arglists (^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 8747, :column 16, :line 8747, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8747, :column 17, :line 8747, :file "cljs/core.cljs"} mf ^{:end-column 32, :end-line 8747, :column 20, :line 8747, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 15, :end-line 8747, :column 4, :line 8747, :file "cljs/core.cljs"} -get-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7811, :column 3, :line 7811, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7811, :column 4, :line 7811, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 18, :end-line 7808, :column 7, :line 7808, :file "cljs/core.cljs"} frequencies ^{:arglists (^{:end-column 9, :end-line 7811, :column 3, :line 7811, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7811, :column 4, :line 7811, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 18, :end-line 7808, :column 7, :line 7808, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [^{:end-column 8, :end-line 7811, :column 4, :line 7811, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7811, :column 3, :line 7811, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7811, :column 4, :line 7811, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 18, :end-line 7808, :column 7, :line 7808, :file "cljs/core.cljs"} frequencies, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1454, :column 3, :line 1454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1454, :column 4, :line 1454, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 15, :end-line 1452, :column 8, :line 1452, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1452, :column 16, :line 1452, :file "cljs/core.cljs"} reduceable? ^{:arglists (^{:end-column 6, :end-line 1454, :column 3, :line 1454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1454, :column 4, :line 1454, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 15, :end-line 1452, :column 8, :line 1452, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1452, :column 16, :line 1452, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1454, :column 4, :line 1454, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1454, :column 3, :line 1454, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1454, :column 4, :line 1454, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 15, :end-line 1452, :column 8, :line 1452, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1452, :column 16, :line 1452, :file "cljs/core.cljs"} reduceable?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 33, :end-line 493, :column 1, :line 493, :file "cljs/core.cljs"} string-hash-cache ^{:end-column 33, :end-line 493, :column 1, :line 493, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 33, :end-line 493, :column 1, :line 493, :file "cljs/core.cljs"} string-hash-cache, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7622, :column 4, :line 7622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7622, :column 5, :line 7622, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7622, :column 8, :line 7622, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7622, :column 13, :line 7622, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7628, :column 4, :line 7628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7628, :column 5, :line 7628, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7628, :column 8, :line 7628, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7628, :column 19, :line 7628, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7628, :column 29, :line 7628, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7628, :column 38, :line 7628, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7618, :column 7, :line 7618, :file "cljs/core.cljs"} rsubseq ^{:arglists (^{:end-column 17, :end-line 7622, :column 4, :line 7622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7622, :column 5, :line 7622, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7622, :column 8, :line 7622, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7622, :column 13, :line 7622, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7628, :column 4, :line 7628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7628, :column 5, :line 7628, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7628, :column 8, :line 7628, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7628, :column 19, :line 7628, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7628, :column 29, :line 7628, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7628, :column 38, :line 7628, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7618, :column 7, :line 7618, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7622, :column 5, :line 7622, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7622, :column 8, :line 7622, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7622, :column 13, :line 7622, :file "cljs/core.cljs"} key] [^{:end-column 7, :end-line 7628, :column 5, :line 7628, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7628, :column 8, :line 7628, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7628, :column 19, :line 7628, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7628, :column 29, :line 7628, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7628, :column 38, :line 7628, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7622, :column 4, :line 7622, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7622, :column 5, :line 7622, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7622, :column 8, :line 7622, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7622, :column 13, :line 7622, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7628, :column 4, :line 7628, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7628, :column 5, :line 7628, :file "cljs/core.cljs"} sc ^{:end-column 18, :end-line 7628, :column 8, :line 7628, :file "cljs/core.cljs"} start-test ^{:end-column 28, :end-line 7628, :column 19, :line 7628, :file "cljs/core.cljs"} start-key ^{:end-column 37, :end-line 7628, :column 29, :line 7628, :file "cljs/core.cljs"} end-test ^{:end-column 45, :end-line 7628, :column 38, :line 7628, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7618, :column 7, :line 7618, :file "cljs/core.cljs"} rsubseq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 10, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} inc ^{:arglists (^{:end-column 6, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 10, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 812, :column 3, :line 812, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 812, :column 4, :line 812, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 10, :end-line 810, :column 7, :line 810, :file "cljs/core.cljs"} inc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 16, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 16, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 16, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4895, :column 18, :line 4895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4895, :column 19, :line 4895, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 4895, :column 23, :line 4895, :file "cljs/core.cljs"} ks]), :private true, :end-column 17, :end-line 4895, :column 8, :line 4895, :file "cljs/core.cljs"} obj-clone ^{:arglists (^{:end-column 26, :end-line 4895, :column 18, :line 4895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4895, :column 19, :line 4895, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 4895, :column 23, :line 4895, :file "cljs/core.cljs"} ks]), :private true, :end-column 17, :end-line 4895, :column 8, :line 4895, :file "cljs/core.cljs"} {:arglists (^object [^{:end-column 22, :end-line 4895, :column 19, :line 4895, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 4895, :column 23, :line 4895, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4895, :column 18, :line 4895, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 4895, :column 19, :line 4895, :file "cljs/core.cljs"} obj ^{:end-column 25, :end-line 4895, :column 23, :line 4895, :file "cljs/core.cljs"} ks]), :private true, :end-column 17, :end-line 4895, :column 8, :line 4895, :file "cljs/core.cljs"} obj-clone, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 8962, :column 3, :line 8962, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8962, :column 4, :line 8962, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8962, :column 12, :line 8962, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 17, :end-line 8959, :column 7, :line 8959, :file "cljs/core.cljs"} get-method ^{:arglists (^{:end-column 25, :end-line 8962, :column 3, :line 8962, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8962, :column 4, :line 8962, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8962, :column 12, :line 8962, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 17, :end-line 8959, :column 7, :line 8959, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8962, :column 4, :line 8962, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8962, :column 12, :line 8962, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 8962, :column 3, :line 8962, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8962, :column 4, :line 8962, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8962, :column 12, :line 8962, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 17, :end-line 8959, :column 7, :line 8959, :file "cljs/core.cljs"} get-method, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 4060, :column 35, :line 4060, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4060, :column 36, :line 4060, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 4060, :column 38, :line 4060, :file "cljs/core.cljs"} cnt]), :private true, :end-column 34, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} vector-index-out-of-bounds ^{:arglists (^{:end-column 42, :end-line 4060, :column 35, :line 4060, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4060, :column 36, :line 4060, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 4060, :column 38, :line 4060, :file "cljs/core.cljs"} cnt]), :private true, :end-column 34, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 37, :end-line 4060, :column 36, :line 4060, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 4060, :column 38, :line 4060, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 4060, :column 35, :line 4060, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4060, :column 36, :line 4060, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 4060, :column 38, :line 4060, :file "cljs/core.cljs"} cnt]), :private true, :end-column 34, :end-line 4060, :column 8, :line 4060, :file "cljs/core.cljs"} vector-index-out-of-bounds, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 5025, :column 28, :line 5025, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5025, :column 29, :line 5025, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 5025, :column 7, :line 5025, :file "cljs/core.cljs"} es6-entries-iterator ^{:arglists (^{:end-column 34, :end-line 5025, :column 28, :line 5025, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5025, :column 29, :line 5025, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 5025, :column 7, :line 5025, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6EntriesIterator [^{:end-column 33, :end-line 5025, :column 29, :line 5025, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 5025, :column 28, :line 5025, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5025, :column 29, :line 5025, :file "cljs/core.cljs"} coll]), :end-column 27, :end-line 5025, :column 7, :line 5025, :file "cljs/core.cljs"} es6-entries-iterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2044, :column 6, :line 2044, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 16, :end-line 2042, :column 7, :line 2042, :file "cljs/core.cljs"} bit-clear ^{:arglists (^{:end-column 8, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2044, :column 6, :line 2044, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 16, :end-line 2042, :column 7, :line 2042, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2044, :column 6, :line 2044, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2044, :column 6, :line 2044, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 16, :end-line 2042, :column 7, :line 2042, :file "cljs/core.cljs"} bit-clear, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} Range {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 7644, :column 10, :line 7644, :file "cljs/core.cljs"} Range, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 7644, :column 16, :line 7644, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7644, :column 17, :line 7644, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 7644, :column 22, :line 7644, :file "cljs/core.cljs"} start ^{:end-column 31, :end-line 7644, :column 28, :line 7644, :file "cljs/core.cljs"} end ^{:end-column 36, :end-line 7644, :column 32, :line 7644, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 53, :end-line 7644, :column 47, :line 7644, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 10, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3831, :column 4, :line 3831, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3831, :column 5, :line 3831, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3831, :column 10, :line 3831, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3818, :column 7, :line 3818, :file "cljs/core.cljs"} filter ^{:arglists (^{:end-column 10, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3831, :column 4, :line 3831, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3831, :column 5, :line 3831, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3831, :column 10, :line 3831, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3818, :column 7, :line 3818, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 9, :end-line 3831, :column 5, :line 3831, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3831, :column 10, :line 3831, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3831, :column 4, :line 3831, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3831, :column 5, :line 3831, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3831, :column 10, :line 3831, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 13, :end-line 3818, :column 7, :line 3818, :file "cljs/core.cljs"} filter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} ->PersistentTreeMapSeq ^{:arglists ([^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 36, :end-line 6312, :column 32, :line 6312, :file "cljs/core.cljs"} meta ^{:end-column 42, :end-line 6312, :column 37, :line 6312, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 51, :end-line 6312, :column 44, :line 6312, :file "cljs/core.cljs"} boolean, :end-column 62, :end-line 6312, :column 52, :line 6312, :file "cljs/core.cljs"} ascending? ^{:end-column 66, :end-line 6312, :column 63, :line 6312, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 83, :end-line 6312, :column 77, :line 6312, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 30, :end-line 6312, :column 10, :line 6312, :file "cljs/core.cljs"} ->PersistentTreeMapSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 48, :end-line 5449, :column 27, :line 5449, :file "cljs/core.cljs"} create-array-node-seq ^{:arglists (^{:end-column 11, :end-line 6046, :column 4, :line 6046, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6046, :column 5, :line 6046, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 6047, :column 4, :line 6047, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6047, :column 5, :line 6047, :file "cljs/core.cljs"} meta ^{:end-column 15, :end-line 6047, :column 10, :line 6047, :file "cljs/core.cljs"} nodes ^{:end-column 17, :end-line 6047, :column 16, :line 6047, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 6047, :column 18, :line 6047, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 6045, :column 8, :line 6045, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 6046, :column 5, :line 6046, :file "cljs/core.cljs"} nodes] [^{:end-column 9, :end-line 6047, :column 5, :line 6047, :file "cljs/core.cljs"} meta ^{:end-column 15, :end-line 6047, :column 10, :line 6047, :file "cljs/core.cljs"} nodes ^{:end-column 17, :end-line 6047, :column 16, :line 6047, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 6047, :column 18, :line 6047, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 6046, :column 4, :line 6046, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 6046, :column 5, :line 6046, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 6047, :column 4, :line 6047, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 6047, :column 5, :line 6047, :file "cljs/core.cljs"} meta ^{:end-column 15, :end-line 6047, :column 10, :line 6047, :file "cljs/core.cljs"} nodes ^{:end-column 17, :end-line 6047, :column 16, :line 6047, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 6047, :column 18, :line 6047, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 6045, :column 8, :line 6045, :file "cljs/core.cljs"} create-array-node-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n! ^{:arglists (^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 374, :column 19, :line 374, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 374, :column 20, :line 374, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 374, :column 26, :line 374, :file "cljs/core.cljs"} n ^{:end-column 31, :end-line 374, :column 28, :line 374, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 8, :end-line 374, :column 5, :line 374, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 374, :column 9, :line 374, :file "cljs/core.cljs"} -assoc-n!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 23, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} IWithMeta ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/MetaFn cljs.core/RSeq cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 23, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 305, :column 5, :line 305, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 305, :column 9, :line 305, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 305, :column 20, :line 305, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 305, :column 21, :line 305, :file "cljs/core.cljs"} o ^{:end-column 27, :end-line 305, :column 23, :line 305, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 23, :end-line 304, :column 14, :line 304, :file "cljs/core.cljs"} IWithMeta, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 490, :column 10, :line 490, :file "cljs/core.cljs"} list ^{:arglists (^{:end-column 18, :end-line 2335, :column 12, :line 2335, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 2335, :column 13, :line 2335, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 2335, :column 15, :line 2335, :file "cljs/core.cljs"} xs]), :end-column 11, :end-line 2335, :column 7, :line 2335, :file "cljs/core.cljs"} {:arglists (^^{:end-column 39, :end-line 2345, :column 29, :line 2345, :file "cljs/core.cljs"} not-native [& ^{:end-column 17, :end-line 2335, :column 15, :line 2335, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2335, :column 12, :line 2335, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 2335, :column 13, :line 2335, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 2335, :column 15, :line 2335, :file "cljs/core.cljs"} xs]), :end-column 11, :end-line 2335, :column 7, :line 2335, :file "cljs/core.cljs"} list, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1772, :column 15, :line 1772, :file "cljs/core.cljs"} + ^{:arglists (^{:end-column 6, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1772, :column 15, :line 1772, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 6, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^number [^{:end-column 6, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1774, :column 4, :line 1774, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 14, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} number, :end-column 16, :end-line 1772, :column 15, :line 1772, :file "cljs/core.cljs"} +, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} IndexedSeqIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 920, :column 10, :line 920, :file "cljs/core.cljs"} IndexedSeqIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 920, :column 29, :line 920, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 920, :column 30, :line 920, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 45, :end-line 920, :column 44, :line 920, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 14, :end-line 7764, :column 3, :line 7764, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7764, :column 4, :line 7764, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 7764, :column 9, :line 7764, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 17, :end-line 7762, :column 7, :line 7762, :file "cljs/core.cljs"} split-with ^{:arglists (^{:end-column 14, :end-line 7764, :column 3, :line 7764, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7764, :column 4, :line 7764, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 7764, :column 9, :line 7764, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 17, :end-line 7762, :column 7, :line 7762, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 8, :end-line 7764, :column 4, :line 7764, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 7764, :column 9, :line 7764, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7764, :column 3, :line 7764, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7764, :column 4, :line 7764, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 7764, :column 9, :line 7764, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 17, :end-line 7762, :column 7, :line 7762, :file "cljs/core.cljs"} split-with, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} ->VectorNode ^{:arglists ([^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 4014, :column 22, :line 4014, :file "cljs/core.cljs"} edit ^{:end-column 30, :end-line 4014, :column 27, :line 4014, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 20, :end-line 4014, :column 10, :line 4014, :file "cljs/core.cljs"} ->VectorNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 188, :column 4, :line 188, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 188, :column 5, :line 188, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 188, :column 11, :line 188, :file "cljs/core.cljs"} i ^{:end-column 16, :end-line 188, :column 13, :line 188, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 5, :line 190, :file "cljs/core.cljs"} array ^{:end-column 14, :end-line 190, :column 11, :line 190, :file "cljs/core.cljs"} idx ^{:end-column 19, :end-line 190, :column 15, :line 190, :file "cljs/core.cljs"} idx2 ^{:end-column 21, :end-line 190, :column 20, :line 190, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 190, :column 22, :line 190, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 11, :end-line 186, :column 7, :line 186, :file "cljs/core.cljs"} aset ^{:arglists (^{:end-column 17, :end-line 188, :column 4, :line 188, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 188, :column 5, :line 188, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 188, :column 11, :line 188, :file "cljs/core.cljs"} i ^{:end-column 16, :end-line 188, :column 13, :line 188, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 5, :line 190, :file "cljs/core.cljs"} array ^{:end-column 14, :end-line 190, :column 11, :line 190, :file "cljs/core.cljs"} idx ^{:end-column 19, :end-line 190, :column 15, :line 190, :file "cljs/core.cljs"} idx2 ^{:end-column 21, :end-line 190, :column 20, :line 190, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 190, :column 22, :line 190, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 11, :end-line 186, :column 7, :line 186, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 188, :column 5, :line 188, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 188, :column 11, :line 188, :file "cljs/core.cljs"} i ^{:end-column 16, :end-line 188, :column 13, :line 188, :file "cljs/core.cljs"} val] [^{:end-column 10, :end-line 190, :column 5, :line 190, :file "cljs/core.cljs"} array ^{:end-column 14, :end-line 190, :column 11, :line 190, :file "cljs/core.cljs"} idx ^{:end-column 19, :end-line 190, :column 15, :line 190, :file "cljs/core.cljs"} idx2 & ^{:end-column 26, :end-line 190, :column 22, :line 190, :file "cljs/core.cljs"} idxv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 188, :column 4, :line 188, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 188, :column 5, :line 188, :file "cljs/core.cljs"} array ^{:end-column 12, :end-line 188, :column 11, :line 188, :file "cljs/core.cljs"} i ^{:end-column 16, :end-line 188, :column 13, :line 188, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 5, :line 190, :file "cljs/core.cljs"} array ^{:end-column 14, :end-line 190, :column 11, :line 190, :file "cljs/core.cljs"} idx ^{:end-column 19, :end-line 190, :column 15, :line 190, :file "cljs/core.cljs"} idx2 ^{:end-column 21, :end-line 190, :column 20, :line 190, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 190, :column 22, :line 190, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 11, :end-line 186, :column 7, :line 186, :file "cljs/core.cljs"} aset, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 428, :column 31, :line 428, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 428, :column 32, :line 428, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 428, :column 34, :line 428, :file "cljs/core.cljs"} n]), :tag ^{:end-column 14, :end-line 428, :column 8, :line 428, :file "cljs/core.cljs"} number, :end-column 30, :end-line 428, :column 15, :line 428, :file "cljs/core.cljs"} int-rotate-left ^{:arglists (^{:end-column 36, :end-line 428, :column 31, :line 428, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 428, :column 32, :line 428, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 428, :column 34, :line 428, :file "cljs/core.cljs"} n]), :tag ^{:end-column 14, :end-line 428, :column 8, :line 428, :file "cljs/core.cljs"} number, :end-column 30, :end-line 428, :column 15, :line 428, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 33, :end-line 428, :column 32, :line 428, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 428, :column 34, :line 428, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 428, :column 31, :line 428, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 428, :column 32, :line 428, :file "cljs/core.cljs"} x ^{:end-column 35, :end-line 428, :column 34, :line 428, :file "cljs/core.cljs"} n]), :tag ^{:end-column 14, :end-line 428, :column 8, :line 428, :file "cljs/core.cljs"} number, :end-column 30, :end-line 428, :column 15, :line 428, :file "cljs/core.cljs"} int-rotate-left, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2462, :column 4, :line 2462, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2462, :column 5, :line 2462, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2471, :column 4, :line 2471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2471, :column 5, :line 2471, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 2471, :column 8, :line 2471, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 14, :end-line 2459, :column 7, :line 2459, :file "cljs/core.cljs"} keyword ^{:arglists (^{:end-column 10, :end-line 2462, :column 4, :line 2462, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2462, :column 5, :line 2462, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2471, :column 4, :line 2471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2471, :column 5, :line 2471, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 2471, :column 8, :line 2471, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 14, :end-line 2459, :column 7, :line 2459, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2462, :column 5, :line 2462, :file "cljs/core.cljs"} name] ^cljs.core/Keyword [^{:end-column 7, :end-line 2471, :column 5, :line 2471, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 2471, :column 8, :line 2471, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2462, :column 4, :line 2462, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2462, :column 5, :line 2462, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2471, :column 4, :line 2471, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2471, :column 5, :line 2471, :file "cljs/core.cljs"} ns ^{:end-column 12, :end-line 2471, :column 8, :line 2471, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 14, :end-line 2459, :column 7, :line 2459, :file "cljs/core.cljs"} keyword, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} ->Cons ^{:arglists ([^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 20, :end-line 2350, :column 16, :line 2350, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2350, :column 21, :line 2350, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2350, :column 27, :line 2350, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 48, :end-line 2350, :column 42, :line 2350, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2350, :column 10, :line 2350, :file "cljs/core.cljs"} ->Cons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 6365, :column 28, :line 6365, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6365, :column 29, :line 6365, :file "cljs/core.cljs"} tree ^{:end-column 44, :end-line 6365, :column 34, :line 6365, :file "cljs/core.cljs"} ascending? ^{:end-column 48, :end-line 6365, :column 45, :line 6365, :file "cljs/core.cljs"} cnt]), :private true, :end-column 27, :end-line 6365, :column 8, :line 6365, :file "cljs/core.cljs"} create-tree-map-seq ^{:arglists (^{:end-column 49, :end-line 6365, :column 28, :line 6365, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6365, :column 29, :line 6365, :file "cljs/core.cljs"} tree ^{:end-column 44, :end-line 6365, :column 34, :line 6365, :file "cljs/core.cljs"} ascending? ^{:end-column 48, :end-line 6365, :column 45, :line 6365, :file "cljs/core.cljs"} cnt]), :private true, :end-column 27, :end-line 6365, :column 8, :line 6365, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 33, :end-line 6365, :column 29, :line 6365, :file "cljs/core.cljs"} tree ^{:end-column 44, :end-line 6365, :column 34, :line 6365, :file "cljs/core.cljs"} ascending? ^{:end-column 48, :end-line 6365, :column 45, :line 6365, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 6365, :column 28, :line 6365, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6365, :column 29, :line 6365, :file "cljs/core.cljs"} tree ^{:end-column 44, :end-line 6365, :column 34, :line 6365, :file "cljs/core.cljs"} ascending? ^{:end-column 48, :end-line 6365, :column 45, :line 6365, :file "cljs/core.cljs"} cnt]), :private true, :end-column 27, :end-line 6365, :column 8, :line 6365, :file "cljs/core.cljs"} create-tree-map-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 25, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} ICollection ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 25, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 252, :column 5, :line 252, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 252, :column 9, :line 252, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 252, :column 15, :line 252, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 252, :column 16, :line 252, :file "cljs/core.cljs"} coll ^{:end-column 22, :end-line 252, :column 21, :line 252, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 25, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} ICollection, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3105, :column 4, :line 3105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3105, :column 5, :line 3105, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3105, :column 11, :line 3105, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3108, :column 5, :line 3108, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3108, :column 11, :line 3108, :file "cljs/core.cljs"} iters ^{:end-column 22, :end-line 3108, :column 17, :line 3108, :file "cljs/core.cljs"} nexts]), :end-column 20, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} multi-stepper ^{:arglists (^{:end-column 17, :end-line 3105, :column 4, :line 3105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3105, :column 5, :line 3105, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3105, :column 11, :line 3105, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3108, :column 5, :line 3108, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3108, :column 11, :line 3108, :file "cljs/core.cljs"} iters ^{:end-column 22, :end-line 3108, :column 17, :line 3108, :file "cljs/core.cljs"} nexts]), :end-column 20, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 3105, :column 5, :line 3105, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3105, :column 11, :line 3105, :file "cljs/core.cljs"} iters] ^cljs.core/MultiStepper [^{:end-column 10, :end-line 3108, :column 5, :line 3108, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3108, :column 11, :line 3108, :file "cljs/core.cljs"} iters ^{:end-column 22, :end-line 3108, :column 17, :line 3108, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3105, :column 4, :line 3105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3105, :column 5, :line 3105, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3105, :column 11, :line 3105, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3108, :column 4, :line 3108, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3108, :column 5, :line 3108, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3108, :column 11, :line 3108, :file "cljs/core.cljs"} iters ^{:end-column 22, :end-line 3108, :column 17, :line 3108, :file "cljs/core.cljs"} nexts]), :end-column 20, :end-line 3104, :column 7, :line 3104, :file "cljs/core.cljs"} multi-stepper, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1988, :column 13, :line 1988, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1988, :column 14, :line 1988, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1988, :column 7, :line 1988, :file "cljs/core.cljs"} chars ^{:arglists (^{:end-column 16, :end-line 1988, :column 13, :line 1988, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1988, :column 14, :line 1988, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1988, :column 7, :line 1988, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1988, :column 14, :line 1988, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1988, :column 13, :line 1988, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1988, :column 14, :line 1988, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1988, :column 7, :line 1988, :file "cljs/core.cljs"} chars, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2129, :column 4, :line 2129, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2130, :column 4, :line 2130, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2130, :column 5, :line 2130, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2133, :column 4, :line 2133, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2133, :column 5, :line 2133, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2133, :column 7, :line 2133, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 2133, :column 9, :line 2133, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 10, :end-line 2125, :column 7, :line 2125, :file "cljs/core.cljs"} str ^{:arglists (^{:end-column 6, :end-line 2129, :column 4, :line 2129, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2130, :column 4, :line 2130, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2130, :column 5, :line 2130, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2133, :column 4, :line 2133, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2133, :column 5, :line 2133, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2133, :column 7, :line 2133, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 2133, :column 9, :line 2133, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 10, :end-line 2125, :column 7, :line 2125, :file "cljs/core.cljs"} {:arglists (^string [] [^{:end-column 6, :end-line 2130, :column 5, :line 2130, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 2133, :column 5, :line 2133, :file "cljs/core.cljs"} x & ^{:end-column 11, :end-line 2133, :column 9, :line 2133, :file "cljs/core.cljs"} ys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2129, :column 4, :line 2129, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2130, :column 4, :line 2130, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2130, :column 5, :line 2130, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2133, :column 4, :line 2133, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2133, :column 5, :line 2133, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2133, :column 7, :line 2133, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 2133, :column 9, :line 2133, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 10, :end-line 2125, :column 7, :line 2125, :file "cljs/core.cljs"} str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 684, :column 3, :line 684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 684, :column 4, :line 684, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 681, :column 12, :line 681, :file "cljs/core.cljs"} next ^{:arglists (^{:end-column 9, :end-line 684, :column 3, :line 684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 684, :column 4, :line 684, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 681, :column 12, :line 681, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 684, :column 4, :line 684, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 684, :column 3, :line 684, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 684, :column 4, :line 684, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 11, :end-line 681, :column 8, :line 681, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 681, :column 12, :line 681, :file "cljs/core.cljs"} next, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 18, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} ASeq ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Cons cljs.core/List cljs.core/IndexedSeq), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 18, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 18, :end-line 260, :column 14, :line 260, :file "cljs/core.cljs"} ASeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 39, :end-line 8064, :column 21, :line 8064, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 8064, :column 22, :line 8064, :file "cljs/core.cljs"} objs ^{:end-column 33, :end-line 8064, :column 27, :line 8064, :file "cljs/core.cljs"} writer ^{:end-column 38, :end-line 8064, :column 34, :line 8064, :file "cljs/core.cljs"} opts]), :end-column 20, :end-line 8064, :column 7, :line 8064, :file "cljs/core.cljs"} pr-seq-writer ^{:arglists (^{:end-column 39, :end-line 8064, :column 21, :line 8064, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 8064, :column 22, :line 8064, :file "cljs/core.cljs"} objs ^{:end-column 33, :end-line 8064, :column 27, :line 8064, :file "cljs/core.cljs"} writer ^{:end-column 38, :end-line 8064, :column 34, :line 8064, :file "cljs/core.cljs"} opts]), :end-column 20, :end-line 8064, :column 7, :line 8064, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 8064, :column 22, :line 8064, :file "cljs/core.cljs"} objs ^{:end-column 33, :end-line 8064, :column 27, :line 8064, :file "cljs/core.cljs"} writer ^{:end-column 38, :end-line 8064, :column 34, :line 8064, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 39, :end-line 8064, :column 21, :line 8064, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 8064, :column 22, :line 8064, :file "cljs/core.cljs"} objs ^{:end-column 33, :end-line 8064, :column 27, :line 8064, :file "cljs/core.cljs"} writer ^{:end-column 38, :end-line 8064, :column 34, :line 8064, :file "cljs/core.cljs"} opts]), :end-column 20, :end-line 8064, :column 7, :line 8064, :file "cljs/core.cljs"} pr-seq-writer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} SeqIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 17, :end-line 3015, :column 10, :line 3015, :file "cljs/core.cljs"} SeqIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 50, :end-line 3015, :column 18, :line 3015, :file "cljs/core.cljs"} [^{:mutable true, :end-column 33, :end-line 3015, :column 29, :line 3015, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 49, :end-line 3015, :column 44, :line 3015, :file "cljs/core.cljs"} _next], :protocols #{Object}}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 17, :end-line 217, :column 14, :line 217, :file "cljs/core.cljs"} IFn ^{:impls (cljs.core/MultiFn cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/Keyword cljs.core/MetaFn cljs.core/Symbol), :protocol-info {:methods {^{:end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 17, :end-line 217, :column 14, :line 217, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 17, :end-line 217, :column 14, :line 217, :file "cljs/core.cljs"} IFn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7896, :column 15, :line 7896, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7896, :column 16, :line 7896, :file "cljs/core.cljs"} o]), :end-column 14, :end-line 7896, :column 7, :line 7896, :file "cljs/core.cljs"} regexp? ^{:arglists (^{:end-column 18, :end-line 7896, :column 15, :line 7896, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7896, :column 16, :line 7896, :file "cljs/core.cljs"} o]), :end-column 14, :end-line 7896, :column 7, :line 7896, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 17, :end-line 7896, :column 16, :line 7896, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7896, :column 15, :line 7896, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 7896, :column 16, :line 7896, :file "cljs/core.cljs"} o]), :end-column 14, :end-line 7896, :column 7, :line 7896, :file "cljs/core.cljs"} regexp?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 777, :column 10, :line 777, :file "cljs/core.cljs"} hash-map ^{:arglists (^{:end-column 14, :end-line 6978, :column 3, :line 6978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6978, :column 4, :line 6978, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6978, :column 6, :line 6978, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 15, :end-line 6975, :column 7, :line 6975, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 365, :column 5, :line 365, :file "cljs/core.cljs"} clj [& ^{:end-column 13, :end-line 6978, :column 6, :line 6978, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6978, :column 3, :line 6978, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 6978, :column 4, :line 6978, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 6978, :column 6, :line 6978, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 15, :end-line 6975, :column 7, :line 6975, :file "cljs/core.cljs"} hash-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8673, :column 4, :line 8673, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8673, :column 5, :line 8673, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8673, :column 9, :line 8673, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8676, :column 4, :line 8676, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8676, :column 5, :line 8676, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8676, :column 7, :line 8676, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8676, :column 11, :line 8676, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 15, :end-line 8669, :column 7, :line 8669, :file "cljs/core.cljs"} underive ^{:arglists (^{:end-column 16, :end-line 8673, :column 4, :line 8673, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8673, :column 5, :line 8673, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8673, :column 9, :line 8673, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8676, :column 4, :line 8676, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8676, :column 5, :line 8676, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8676, :column 7, :line 8676, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8676, :column 11, :line 8676, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 15, :end-line 8669, :column 7, :line 8669, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 8, :end-line 8673, :column 5, :line 8673, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8673, :column 9, :line 8673, :file "cljs/core.cljs"} parent] [^{:end-column 6, :end-line 8676, :column 5, :line 8676, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8676, :column 7, :line 8676, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8676, :column 11, :line 8676, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8673, :column 4, :line 8673, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8673, :column 5, :line 8673, :file "cljs/core.cljs"} tag ^{:end-column 15, :end-line 8673, :column 9, :line 8673, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8676, :column 4, :line 8676, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8676, :column 5, :line 8676, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8676, :column 7, :line 8676, :file "cljs/core.cljs"} tag ^{:end-column 17, :end-line 8676, :column 11, :line 8676, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 15, :end-line 8669, :column 7, :line 8669, :file "cljs/core.cljs"} underive, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1488, :column 4, :line 1488, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1488, :column 5, :line 1488, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1488, :column 10, :line 1488, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1488, :column 12, :line 1488, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1488, :column 15, :line 1488, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1488, :column 17, :line 1488, :file "cljs/core.cljs"} len]), :private true, :end-column 18, :end-line 1487, :column 8, :line 1487, :file "cljs/core.cljs"} array-copy ^{:arglists (^{:end-column 21, :end-line 1488, :column 4, :line 1488, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1488, :column 5, :line 1488, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1488, :column 10, :line 1488, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1488, :column 12, :line 1488, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1488, :column 15, :line 1488, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1488, :column 17, :line 1488, :file "cljs/core.cljs"} len]), :private true, :end-column 18, :end-line 1487, :column 8, :line 1487, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1488, :column 5, :line 1488, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1488, :column 10, :line 1488, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1488, :column 12, :line 1488, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1488, :column 15, :line 1488, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1488, :column 17, :line 1488, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1488, :column 4, :line 1488, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1488, :column 5, :line 1488, :file "cljs/core.cljs"} from ^{:end-column 11, :end-line 1488, :column 10, :line 1488, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 1488, :column 12, :line 1488, :file "cljs/core.cljs"} to ^{:end-column 16, :end-line 1488, :column 15, :line 1488, :file "cljs/core.cljs"} j ^{:end-column 20, :end-line 1488, :column 17, :line 1488, :file "cljs/core.cljs"} len]), :private true, :end-column 18, :end-line 1487, :column 8, :line 1487, :file "cljs/core.cljs"} array-copy, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4873, :column 29, :line 4873, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4873, :column 30, :line 4873, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 4873, :column 32, :line 4873, :file "cljs/core.cljs"} b]), :private true, :end-column 28, :end-line 4873, :column 8, :line 4873, :file "cljs/core.cljs"} obj-map-compare-keys ^{:arglists (^{:end-column 34, :end-line 4873, :column 29, :line 4873, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4873, :column 30, :line 4873, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 4873, :column 32, :line 4873, :file "cljs/core.cljs"} b]), :private true, :end-column 28, :end-line 4873, :column 8, :line 4873, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 4873, :column 30, :line 4873, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 4873, :column 32, :line 4873, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4873, :column 29, :line 4873, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4873, :column 30, :line 4873, :file "cljs/core.cljs"} a ^{:end-column 33, :end-line 4873, :column 32, :line 4873, :file "cljs/core.cljs"} b]), :private true, :end-column 28, :end-line 4873, :column 8, :line 4873, :file "cljs/core.cljs"} obj-map-compare-keys, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset! ^{:arglists (^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 400, :column 12, :line 400, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 400, :column 13, :line 400, :file "cljs/core.cljs"} o ^{:end-column 24, :end-line 400, :column 15, :line 400, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 11, :end-line 400, :column 4, :line 400, :file "cljs/core.cljs"} -reset!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest ^{:arglists (^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 264, :column 15, :line 264, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 8, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -rest, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2981, :column 16, :line 2981, :file "cljs/core.cljs"} []), :end-column 15, :end-line 2981, :column 7, :line 2981, :file "cljs/core.cljs"} nil-iter ^{:arglists (^{:end-column 18, :end-line 2981, :column 16, :line 2981, :file "cljs/core.cljs"} []), :end-column 15, :end-line 2981, :column 7, :line 2981, :file "cljs/core.cljs"} {:arglists (^cljs.core/t8410 []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2981, :column 16, :line 2981, :file "cljs/core.cljs"} []), :end-column 15, :end-line 2981, :column 7, :line 2981, :file "cljs/core.cljs"} nil-iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 4131, :column 31, :line 4131, :file "cljs/core.cljs"} pr-writer ^{:arglists (^{:end-column 20, :end-line 7997, :column 3, :line 7997, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7997, :column 4, :line 7997, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 7997, :column 8, :line 7997, :file "cljs/core.cljs"} writer ^{:end-column 19, :end-line 7997, :column 15, :line 7997, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 17, :end-line 7993, :column 8, :line 7993, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7997, :column 4, :line 7997, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 7997, :column 8, :line 7997, :file "cljs/core.cljs"} writer ^{:end-column 19, :end-line 7997, :column 15, :line 7997, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7997, :column 3, :line 7997, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7997, :column 4, :line 7997, :file "cljs/core.cljs"} obj ^{:end-column 14, :end-line 7997, :column 8, :line 7997, :file "cljs/core.cljs"} writer ^{:end-column 19, :end-line 7997, :column 15, :line 7997, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 17, :end-line 7993, :column 8, :line 7993, :file "cljs/core.cljs"} pr-writer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1509, :column 3, :line 1509, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1509, :column 4, :line 1509, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 15, :end-line 1507, :column 8, :line 1507, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1507, :column 16, :line 1507, :file "cljs/core.cljs"} false? ^{:arglists (^{:end-column 6, :end-line 1509, :column 3, :line 1509, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1509, :column 4, :line 1509, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 15, :end-line 1507, :column 8, :line 1507, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1507, :column 16, :line 1507, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1509, :column 4, :line 1509, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1509, :column 3, :line 1509, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1509, :column 4, :line 1509, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 15, :end-line 1507, :column 8, :line 1507, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1507, :column 16, :line 1507, :file "cljs/core.cljs"} false?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} RangedIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} RangedIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 79, :end-line 4111, :column 25, :line 4111, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end], :protocols #{Object}}, ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably* ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1990, :column 12, :line 1990, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 1990, :column 13, :line 1990, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} ints ^{:arglists (^{:end-column 15, :end-line 1990, :column 12, :line 1990, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 1990, :column 13, :line 1990, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 1990, :column 13, :line 1990, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1990, :column 12, :line 1990, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 1990, :column 13, :line 1990, :file "cljs/core.cljs"} x]), :end-column 11, :end-line 1990, :column 7, :line 1990, :file "cljs/core.cljs"} ints, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3574, :column 4, :line 3574, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3574, :column 5, :line 3574, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3582, :column 4, :line 3582, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3582, :column 5, :line 3582, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3582, :column 8, :line 3582, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3590, :column 4, :line 3590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3590, :column 5, :line 3590, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3590, :column 8, :line 3590, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3590, :column 11, :line 3590, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3598, :column 8, :line 3598, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3598, :column 11, :line 3598, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3598, :column 14, :line 3598, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3598, :column 16, :line 3598, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 14, :end-line 3569, :column 7, :line 3569, :file "cljs/core.cljs"} some-fn ^{:arglists (^{:end-column 7, :end-line 3574, :column 4, :line 3574, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3574, :column 5, :line 3574, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3582, :column 4, :line 3582, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3582, :column 5, :line 3582, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3582, :column 8, :line 3582, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3590, :column 4, :line 3590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3590, :column 5, :line 3590, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3590, :column 8, :line 3590, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3590, :column 11, :line 3590, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3598, :column 8, :line 3598, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3598, :column 11, :line 3598, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3598, :column 14, :line 3598, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3598, :column 16, :line 3598, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 14, :end-line 3569, :column 7, :line 3569, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3574, :column 5, :line 3574, :file "cljs/core.cljs"} p] ^function [^{:end-column 7, :end-line 3582, :column 5, :line 3582, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3582, :column 8, :line 3582, :file "cljs/core.cljs"} p2] ^function [^{:end-column 7, :end-line 3590, :column 5, :line 3590, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3590, :column 8, :line 3590, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3590, :column 11, :line 3590, :file "cljs/core.cljs"} p3] ^function [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3598, :column 8, :line 3598, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3598, :column 11, :line 3598, :file "cljs/core.cljs"} p3 & ^{:end-column 18, :end-line 3598, :column 16, :line 3598, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3574, :column 4, :line 3574, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3574, :column 5, :line 3574, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3582, :column 4, :line 3582, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3582, :column 5, :line 3582, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3582, :column 8, :line 3582, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3590, :column 4, :line 3590, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3590, :column 5, :line 3590, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3590, :column 8, :line 3590, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3590, :column 11, :line 3590, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3598, :column 4, :line 3598, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3598, :column 5, :line 3598, :file "cljs/core.cljs"} p1 ^{:end-column 10, :end-line 3598, :column 8, :line 3598, :file "cljs/core.cljs"} p2 ^{:end-column 13, :end-line 3598, :column 11, :line 3598, :file "cljs/core.cljs"} p3 ^{:end-column 15, :end-line 3598, :column 14, :line 3598, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 3598, :column 16, :line 3598, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 14, :end-line 3569, :column 7, :line 3569, :file "cljs/core.cljs"} some-fn, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline* ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 1639, :column 10, :line 1639, :file "cljs/core.cljs"} to-array ^{:arglists (^{:end-column 6, :end-line 2681, :column 3, :line 2681, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 15, :end-line 2679, :column 7, :line 2679, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 5, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2681, :column 3, :line 2681, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2681, :column 4, :line 2681, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 15, :end-line 2679, :column 7, :line 2679, :file "cljs/core.cljs"} to-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 4430, :column 10, :line 4430, :file "cljs/core.cljs"} build-subvec ^{:arglists (^{:end-column 46, :end-line 4528, :column 21, :line 4528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4528, :column 22, :line 4528, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4528, :column 27, :line 4528, :file "cljs/core.cljs"} v ^{:end-column 34, :end-line 4528, :column 29, :line 4528, :file "cljs/core.cljs"} start ^{:end-column 38, :end-line 4528, :column 35, :line 4528, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 4528, :column 39, :line 4528, :file "cljs/core.cljs"} __hash]), :private true, :end-column 20, :end-line 4528, :column 8, :line 4528, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 26, :end-line 4528, :column 22, :line 4528, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4528, :column 27, :line 4528, :file "cljs/core.cljs"} v ^{:end-column 34, :end-line 4528, :column 29, :line 4528, :file "cljs/core.cljs"} start ^{:end-column 38, :end-line 4528, :column 35, :line 4528, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 4528, :column 39, :line 4528, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 4528, :column 21, :line 4528, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4528, :column 22, :line 4528, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4528, :column 27, :line 4528, :file "cljs/core.cljs"} v ^{:end-column 34, :end-line 4528, :column 29, :line 4528, :file "cljs/core.cljs"} start ^{:end-column 38, :end-line 4528, :column 35, :line 4528, :file "cljs/core.cljs"} end ^{:end-column 45, :end-line 4528, :column 39, :line 4528, :file "cljs/core.cljs"} __hash]), :private true, :end-column 20, :end-line 4528, :column 8, :line 4528, :file "cljs/core.cljs"} build-subvec, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2407, :column 22, :line 2407, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2407, :column 23, :line 2407, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2407, :column 8, :line 2407, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2407, :column 16, :line 2407, :file "cljs/core.cljs"} list? ^{:arglists (^{:end-column 25, :end-line 2407, :column 22, :line 2407, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2407, :column 23, :line 2407, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2407, :column 8, :line 2407, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2407, :column 16, :line 2407, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 24, :end-line 2407, :column 23, :line 2407, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2407, :column 22, :line 2407, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2407, :column 23, :line 2407, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 2407, :column 8, :line 2407, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2407, :column 16, :line 2407, :file "cljs/core.cljs"} list?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 6794, :column 24, :line 6794, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6794, :column 25, :line 6794, :file "cljs/core.cljs"} comp ^{:end-column 34, :end-line 6794, :column 30, :line 6794, :file "cljs/core.cljs"} tree ^{:end-column 36, :end-line 6794, :column 35, :line 6794, :file "cljs/core.cljs"} k ^{:end-column 42, :end-line 6794, :column 37, :line 6794, :file "cljs/core.cljs"} found]), :private true, :end-column 23, :end-line 6794, :column 8, :line 6794, :file "cljs/core.cljs"} tree-map-remove ^{:arglists (^{:end-column 43, :end-line 6794, :column 24, :line 6794, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6794, :column 25, :line 6794, :file "cljs/core.cljs"} comp ^{:end-column 34, :end-line 6794, :column 30, :line 6794, :file "cljs/core.cljs"} tree ^{:end-column 36, :end-line 6794, :column 35, :line 6794, :file "cljs/core.cljs"} k ^{:end-column 42, :end-line 6794, :column 37, :line 6794, :file "cljs/core.cljs"} found]), :private true, :end-column 23, :end-line 6794, :column 8, :line 6794, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 6794, :column 25, :line 6794, :file "cljs/core.cljs"} comp ^{:end-column 34, :end-line 6794, :column 30, :line 6794, :file "cljs/core.cljs"} tree ^{:end-column 36, :end-line 6794, :column 35, :line 6794, :file "cljs/core.cljs"} k ^{:end-column 42, :end-line 6794, :column 37, :line 6794, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 6794, :column 24, :line 6794, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 6794, :column 25, :line 6794, :file "cljs/core.cljs"} comp ^{:end-column 34, :end-line 6794, :column 30, :line 6794, :file "cljs/core.cljs"} tree ^{:end-column 36, :end-line 6794, :column 35, :line 6794, :file "cljs/core.cljs"} k ^{:end-column 42, :end-line 6794, :column 37, :line 6794, :file "cljs/core.cljs"} found]), :private true, :end-column 23, :end-line 6794, :column 8, :line 6794, :file "cljs/core.cljs"} tree-map-remove, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} HashCollisionNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 27, :end-line 5827, :column 10, :line 5827, :file "cljs/core.cljs"} HashCollisionNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 43, :end-line 5830, :column 28, :line 5827, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 5827, :column 29, :line 5827, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 53, :end-line 5828, :column 39, :line 5828, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 42, :end-line 5829, :column 39, :line 5829, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 5830, :column 39, :line 5830, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array? ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8696, :column 3, :line 8696, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8696, :column 4, :line 8696, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8696, :column 6, :line 8696, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8696, :column 8, :line 8696, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 16, :end-line 8695, :column 8, :line 8695, :file "cljs/core.cljs"} prefers* ^{:arglists (^{:end-column 21, :end-line 8696, :column 3, :line 8696, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8696, :column 4, :line 8696, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8696, :column 6, :line 8696, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8696, :column 8, :line 8696, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 16, :end-line 8695, :column 8, :line 8695, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 8696, :column 4, :line 8696, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8696, :column 6, :line 8696, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8696, :column 8, :line 8696, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8696, :column 3, :line 8696, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8696, :column 4, :line 8696, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 8696, :column 6, :line 8696, :file "cljs/core.cljs"} y ^{:end-column 20, :end-line 8696, :column 8, :line 8696, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 16, :end-line 8695, :column 8, :line 8695, :file "cljs/core.cljs"} prefers*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 628, :column 13, :line 628, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 628, :column 14, :line 628, :file "cljs/core.cljs"} value]), :end-column 12, :end-line 628, :column 7, :line 628, :file "cljs/core.cljs"} clone ^{:arglists (^{:end-column 20, :end-line 628, :column 13, :line 628, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 628, :column 14, :line 628, :file "cljs/core.cljs"} value]), :end-column 12, :end-line 628, :column 7, :line 628, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 243, :column 5, :line 243, :file "cljs/core.cljs"} clj [^{:end-column 19, :end-line 628, :column 14, :line 628, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 628, :column 13, :line 628, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 628, :column 14, :line 628, :file "cljs/core.cljs"} value]), :end-column 12, :end-line 628, :column 7, :line 628, :file "cljs/core.cljs"} clone, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4859, :column 19, :line 4859, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4859, :column 20, :line 4859, :file "cljs/core.cljs"} incr ^{:end-column 26, :end-line 4859, :column 25, :line 4859, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4859, :column 27, :line 4859, :file "cljs/core.cljs"} array]), :private true, :end-column 18, :end-line 4859, :column 8, :line 4859, :file "cljs/core.cljs"} scan-array ^{:arglists (^{:end-column 33, :end-line 4859, :column 19, :line 4859, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4859, :column 20, :line 4859, :file "cljs/core.cljs"} incr ^{:end-column 26, :end-line 4859, :column 25, :line 4859, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4859, :column 27, :line 4859, :file "cljs/core.cljs"} array]), :private true, :end-column 18, :end-line 4859, :column 8, :line 4859, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 4859, :column 20, :line 4859, :file "cljs/core.cljs"} incr ^{:end-column 26, :end-line 4859, :column 25, :line 4859, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4859, :column 27, :line 4859, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4859, :column 19, :line 4859, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4859, :column 20, :line 4859, :file "cljs/core.cljs"} incr ^{:end-column 26, :end-line 4859, :column 25, :line 4859, :file "cljs/core.cljs"} k ^{:end-column 32, :end-line 4859, :column 27, :line 4859, :file "cljs/core.cljs"} array]), :private true, :end-column 18, :end-line 4859, :column 8, :line 4859, :file "cljs/core.cljs"} scan-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2054, :column 3, :line 2054, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2054, :column 4, :line 2054, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 14, :end-line 2052, :column 7, :line 2052, :file "cljs/core.cljs"} bit-not ^{:arglists (^{:end-column 6, :end-line 2054, :column 3, :line 2054, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2054, :column 4, :line 2054, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 14, :end-line 2052, :column 7, :line 2052, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 5, :end-line 2054, :column 4, :line 2054, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2054, :column 3, :line 2054, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2054, :column 4, :line 2054, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 14, :end-line 2052, :column 7, :line 2052, :file "cljs/core.cljs"} bit-not, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7985, :column 3, :line 7985, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7985, :column 4, :line 7985, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 7984, :column 17, :line 7984, :file "cljs/core.cljs"} quote-string ^{:arglists (^{:end-column 6, :end-line 7985, :column 3, :line 7985, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7985, :column 4, :line 7985, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 7984, :column 17, :line 7984, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 7985, :column 4, :line 7985, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7985, :column 3, :line 7985, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 7985, :column 4, :line 7985, :file "cljs/core.cljs"} s]), :private true, :end-column 29, :end-line 7984, :column 17, :line 7984, :file "cljs/core.cljs"} quote-string, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1869, :column 8, :line 1869, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1869, :column 15, :line 1869, :file "cljs/core.cljs"} byte ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1869, :column 8, :line 1869, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1869, :column 15, :line 1869, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1869, :column 20, :line 1869, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1869, :column 21, :line 1869, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1869, :column 8, :line 1869, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1869, :column 15, :line 1869, :file "cljs/core.cljs"} byte, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1857, :column 5, :line 1857, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1858, :column 7, :line 1858, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1859, :column 9, :line 1859, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1859, :column 11, :line 1859, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 14, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} max ^{:arglists (^{:end-column 7, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1857, :column 5, :line 1857, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1858, :column 7, :line 1858, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1859, :column 9, :line 1859, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1859, :column 11, :line 1859, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 14, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1857, :column 5, :line 1857, :file "cljs/core.cljs"} x] [^{:end-column 6, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1858, :column 7, :line 1858, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 1859, :column 11, :line 1859, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1857, :column 5, :line 1857, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1858, :column 7, :line 1858, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 1859, :column 9, :line 1859, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1859, :column 11, :line 1859, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 14, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 18, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} max, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 25, :end-line 380, :column 14, :line 380, :file "cljs/core.cljs"} IComparable ^{:impls (cljs.core/Symbol cljs.core/Keyword cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 25, :end-line 380, :column 14, :line 380, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 11, :end-line 381, :column 5, :line 381, :file "cljs/core.cljs"} number, :end-column 20, :end-line 381, :column 12, :line 381, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 381, :column 21, :line 381, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 381, :column 22, :line 381, :file "cljs/core.cljs"} x ^{:end-column 25, :end-line 381, :column 24, :line 381, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 25, :end-line 380, :column 14, :line 380, :file "cljs/core.cljs"} IComparable, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2093, :column 4, :line 2093, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2093, :column 5, :line 2093, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2094, :column 4, :line 2094, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2094, :column 5, :line 2094, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2094, :column 7, :line 2094, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2095, :column 4, :line 2095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2095, :column 5, :line 2095, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2095, :column 7, :line 2095, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2095, :column 9, :line 2095, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2095, :column 11, :line 2095, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 15, :end-line 2089, :column 8, :line 2089, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 2089, :column 16, :line 2089, :file "cljs/core.cljs"} == ^{:arglists (^{:end-column 7, :end-line 2093, :column 4, :line 2093, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2093, :column 5, :line 2093, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2094, :column 4, :line 2094, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2094, :column 5, :line 2094, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2094, :column 7, :line 2094, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2095, :column 4, :line 2095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2095, :column 5, :line 2095, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2095, :column 7, :line 2095, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2095, :column 9, :line 2095, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2095, :column 11, :line 2095, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 15, :end-line 2089, :column 8, :line 2089, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 2089, :column 16, :line 2089, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 2093, :column 5, :line 2093, :file "cljs/core.cljs"} x] ^^{:end-column 12, :end-line 314, :column 5, :line 314, :file "cljs/core.cljs"} boolean [^{:end-column 6, :end-line 2094, :column 5, :line 2094, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2094, :column 7, :line 2094, :file "cljs/core.cljs"} y] [^{:end-column 6, :end-line 2095, :column 5, :line 2095, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2095, :column 7, :line 2095, :file "cljs/core.cljs"} y & ^{:end-column 15, :end-line 2095, :column 11, :line 2095, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2093, :column 4, :line 2093, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2093, :column 5, :line 2093, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2094, :column 4, :line 2094, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2094, :column 5, :line 2094, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2094, :column 7, :line 2094, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2095, :column 4, :line 2095, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2095, :column 5, :line 2095, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2095, :column 7, :line 2095, :file "cljs/core.cljs"} y ^{:end-column 10, :end-line 2095, :column 9, :line 2095, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 2095, :column 11, :line 2095, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 15, :end-line 2089, :column 8, :line 2089, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 2089, :column 16, :line 2089, :file "cljs/core.cljs"} ==, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8615, :column 4, :line 8615, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8615, :column 5, :line 8615, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8616, :column 4, :line 8616, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8616, :column 5, :line 8616, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8616, :column 7, :line 8616, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 14, :end-line 8610, :column 7, :line 8610, :file "cljs/core.cljs"} parents ^{:arglists (^{:end-column 9, :end-line 8615, :column 4, :line 8615, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8615, :column 5, :line 8615, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8616, :column 4, :line 8616, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8616, :column 5, :line 8616, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8616, :column 7, :line 8616, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 14, :end-line 8610, :column 7, :line 8610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 8615, :column 5, :line 8615, :file "cljs/core.cljs"} tag] [^{:end-column 6, :end-line 8616, :column 5, :line 8616, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8616, :column 7, :line 8616, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8615, :column 4, :line 8615, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 8615, :column 5, :line 8615, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8616, :column 4, :line 8616, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8616, :column 5, :line 8616, :file "cljs/core.cljs"} h ^{:end-column 10, :end-line 8616, :column 7, :line 8616, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 14, :end-line 8610, :column 7, :line 8610, :file "cljs/core.cljs"} parents, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1136, :column 3, :line 1136, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1136, :column 4, :line 1136, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 12, :end-line 1133, :column 7, :line 1133, :file "cljs/core.cljs"} count ^{:arglists (^{:end-column 9, :end-line 1136, :column 3, :line 1136, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1136, :column 4, :line 1136, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 12, :end-line 1133, :column 7, :line 1133, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1136, :column 4, :line 1136, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1136, :column 3, :line 1136, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1136, :column 4, :line 1136, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 12, :end-line 1133, :column 7, :line 1133, :file "cljs/core.cljs"} count, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin! ^{:arglists (^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 378, :column 19, :line 378, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 378, :column 20, :line 378, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 378, :column 26, :line 378, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 8, :end-line 378, :column 5, :line 378, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 378, :column 9, :line 378, :file "cljs/core.cljs"} -disjoin!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 6200, :column 10, :line 6200, :file "cljs/core.cljs"} ->TransientHashMap ^{:arglists ([^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 6200, :column 10, :line 6200, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientHashMap [^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :tag ^{:end-column 46, :end-line 6200, :column 39, :line 6200, :file "cljs/core.cljs"} boolean, :end-column 51, :end-line 6200, :column 47, :line 6200, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 42, :end-line 6201, :column 38, :line 6201, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 43, :end-line 6202, :column 38, :line 6202, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 46, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 55, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 45, :end-line 6204, :column 38, :line 6204, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 6200, :column 10, :line 6200, :file "cljs/core.cljs"} ->TransientHashMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 2540, :column 10, :line 2540, :file "cljs/core.cljs"} ArrayChunk {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 20, :end-line 2559, :column 10, :line 2559, :file "cljs/core.cljs"} ArrayChunk, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 34, :end-line 2559, :column 21, :line 2559, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2559, :column 22, :line 2559, :file "cljs/core.cljs"} arr ^{:end-column 29, :end-line 2559, :column 26, :line 2559, :file "cljs/core.cljs"} off ^{:end-column 33, :end-line 2559, :column 30, :line 2559, :file "cljs/core.cljs"} end], :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}}, ^{:arglists (^{:end-column 26, :end-line 7015, :column 4, :line 7015, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7015, :column 5, :line 7015, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7015, :column 16, :line 7015, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 7015, :column 18, :line 7015, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 20, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} sorted-map-by ^{:arglists (^{:end-column 26, :end-line 7015, :column 4, :line 7015, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7015, :column 5, :line 7015, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7015, :column 16, :line 7015, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 7015, :column 18, :line 7015, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 20, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 15, :end-line 7015, :column 5, :line 7015, :file "cljs/core.cljs"} comparator & ^{:end-column 25, :end-line 7015, :column 18, :line 7015, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 7015, :column 4, :line 7015, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 7015, :column 5, :line 7015, :file "cljs/core.cljs"} comparator ^{:end-column 17, :end-line 7015, :column 16, :line 7015, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 7015, :column 18, :line 7015, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 20, :end-line 7012, :column 7, :line 7012, :file "cljs/core.cljs"} sorted-map-by, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 177, :column 10, :line 177, :file "cljs/core.cljs"} apply ^{:arglists (^{:end-column 12, :end-line 2908, :column 4, :line 2908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2908, :column 5, :line 2908, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2908, :column 7, :line 2908, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2916, :column 4, :line 2916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2916, :column 5, :line 2916, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2916, :column 7, :line 2916, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 2916, :column 9, :line 2916, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2925, :column 4, :line 2925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2925, :column 5, :line 2925, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2925, :column 7, :line 2925, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2925, :column 9, :line 2925, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 2925, :column 11, :line 2925, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2934, :column 4, :line 2934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2934, :column 5, :line 2934, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2934, :column 7, :line 2934, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2934, :column 9, :line 2934, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 2934, :column 11, :line 2934, :file "cljs/core.cljs"} z ^{:end-column 17, :end-line 2934, :column 13, :line 2934, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2943, :column 4, :line 2943, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2943, :column 5, :line 2943, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2943, :column 7, :line 2943, :file "cljs/core.cljs"} a ^{:end-column 10, :end-line 2943, :column 9, :line 2943, :file "cljs/core.cljs"} b ^{:end-column 12, :end-line 2943, :column 11, :line 2943, :file "cljs/core.cljs"} c ^{:end-column 14, :end-line 2943, :column 13, :line 2943, :file "cljs/core.cljs"} d ^{:end-column 16, :end-line 2943, :column 15, :line 2943, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2943, :column 17, :line 2943, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 12, :end-line 2905, :column 7, :line 2905, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 2908, :column 5, :line 2908, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2908, :column 7, :line 2908, :file "cljs/core.cljs"} args] [^{:end-column 6, :end-line 2916, :column 5, :line 2916, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2916, :column 7, :line 2916, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 2916, :column 9, :line 2916, :file "cljs/core.cljs"} args] [^{:end-column 6, :end-line 2925, :column 5, :line 2925, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2925, :column 7, :line 2925, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2925, :column 9, :line 2925, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 2925, :column 11, :line 2925, :file "cljs/core.cljs"} args] [^{:end-column 6, :end-line 2934, :column 5, :line 2934, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2934, :column 7, :line 2934, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2934, :column 9, :line 2934, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 2934, :column 11, :line 2934, :file "cljs/core.cljs"} z ^{:end-column 17, :end-line 2934, :column 13, :line 2934, :file "cljs/core.cljs"} args] [^{:end-column 6, :end-line 2943, :column 5, :line 2943, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2943, :column 7, :line 2943, :file "cljs/core.cljs"} a ^{:end-column 10, :end-line 2943, :column 9, :line 2943, :file "cljs/core.cljs"} b ^{:end-column 12, :end-line 2943, :column 11, :line 2943, :file "cljs/core.cljs"} c ^{:end-column 14, :end-line 2943, :column 13, :line 2943, :file "cljs/core.cljs"} d & ^{:end-column 21, :end-line 2943, :column 17, :line 2943, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2908, :column 4, :line 2908, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2908, :column 5, :line 2908, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 2908, :column 7, :line 2908, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2916, :column 4, :line 2916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2916, :column 5, :line 2916, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2916, :column 7, :line 2916, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 2916, :column 9, :line 2916, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2925, :column 4, :line 2925, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2925, :column 5, :line 2925, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2925, :column 7, :line 2925, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2925, :column 9, :line 2925, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 2925, :column 11, :line 2925, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2934, :column 4, :line 2934, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2934, :column 5, :line 2934, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2934, :column 7, :line 2934, :file "cljs/core.cljs"} x ^{:end-column 10, :end-line 2934, :column 9, :line 2934, :file "cljs/core.cljs"} y ^{:end-column 12, :end-line 2934, :column 11, :line 2934, :file "cljs/core.cljs"} z ^{:end-column 17, :end-line 2934, :column 13, :line 2934, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2943, :column 4, :line 2943, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2943, :column 5, :line 2943, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 2943, :column 7, :line 2943, :file "cljs/core.cljs"} a ^{:end-column 10, :end-line 2943, :column 9, :line 2943, :file "cljs/core.cljs"} b ^{:end-column 12, :end-line 2943, :column 11, :line 2943, :file "cljs/core.cljs"} c ^{:end-column 14, :end-line 2943, :column 13, :line 2943, :file "cljs/core.cljs"} d ^{:end-column 16, :end-line 2943, :column 15, :line 2943, :file "cljs/core.cljs"} & ^{:end-column 21, :end-line 2943, :column 17, :line 2943, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 12, :end-line 2905, :column 7, :line 2905, :file "cljs/core.cljs"} apply, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 8582, :column 29, :line 8582, :file "cljs/core.cljs"} []), :private true, :end-column 28, :end-line 8582, :column 8, :line 8582, :file "cljs/core.cljs"} get-global-hierarchy ^{:arglists (^{:end-column 31, :end-line 8582, :column 29, :line 8582, :file "cljs/core.cljs"} []), :private true, :end-column 28, :end-line 8582, :column 8, :line 8582, :file "cljs/core.cljs"} {:arglists ([]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 8582, :column 29, :line 8582, :file "cljs/core.cljs"} []), :private true, :end-column 28, :end-line 8582, :column 8, :line 8582, :file "cljs/core.cljs"} get-global-hierarchy, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 508, :column 32, :line 508, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 508, :column 33, :line 508, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} add-to-string-hash-cache ^{:arglists (^{:end-column 35, :end-line 508, :column 32, :line 508, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 508, :column 33, :line 508, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 34, :end-line 508, :column 33, :line 508, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 508, :column 32, :line 508, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 508, :column 33, :line 508, :file "cljs/core.cljs"} k]), :end-column 31, :end-line 508, :column 7, :line 508, :file "cljs/core.cljs"} add-to-string-hash-cache, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 8450, :column 10, :line 8450, :file "cljs/core.cljs"} clj->js ^{:arglists (^{:end-column 7, :end-line 8466, :column 4, :line 8466, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8466, :column 5, :line 8466, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 14, :end-line 8462, :column 7, :line 8462, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8466, :column 5, :line 8466, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8466, :column 4, :line 8466, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8466, :column 5, :line 8466, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 14, :end-line 8462, :column 7, :line 8462, :file "cljs/core.cljs"} clj->js, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5116, :column 10, :line 5116, :file "cljs/core.cljs"} TransientArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 5368, :column 10, :line 5368, :file "cljs/core.cljs"} TransientArrayMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 5370, :column 28, :line 5368, :file "cljs/core.cljs"} [^{:mutable true, :end-column 48, :end-line 5368, :column 39, :line 5368, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 42, :end-line 5369, :column 39, :line 5369, :file "cljs/core.cljs"} len ^{:end-column 32, :end-line 5370, :column 29, :line 5370, :file "cljs/core.cljs"} arr], :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists ([^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 25, :end-line 4605, :column 10, :line 4605, :file "cljs/core.cljs"} ->TransientVector ^{:arglists ([^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 25, :end-line 4605, :column 10, :line 4605, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientVector [^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 40, :end-line 4605, :column 37, :line 4605, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 42, :end-line 4606, :column 37, :line 4606, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 41, :end-line 4607, :column 37, :line 4607, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 41, :end-line 4608, :column 37, :line 4608, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 25, :end-line 4605, :column 10, :line 4605, :file "cljs/core.cljs"} ->TransientVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} IChunkedNext ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons), :protocol-info {:methods {^{:end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 17, :end-line 391, :column 4, :line 391, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 391, :column 18, :line 391, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 391, :column 19, :line 391, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 390, :column 14, :line 390, :file "cljs/core.cljs"} IChunkedNext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3790, :column 3, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} sep ^{:end-column 12, :end-line 3790, :column 8, :line 3790, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 16, :end-line 3788, :column 7, :line 3788, :file "cljs/core.cljs"} interpose ^{:arglists (^{:end-column 13, :end-line 3790, :column 3, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} sep ^{:end-column 12, :end-line 3790, :column 8, :line 3790, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 16, :end-line 3788, :column 7, :line 3788, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} sep ^{:end-column 12, :end-line 3790, :column 8, :line 3790, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3790, :column 3, :line 3790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3790, :column 4, :line 3790, :file "cljs/core.cljs"} sep ^{:end-column 12, :end-line 3790, :column 8, :line 3790, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 16, :end-line 3788, :column 7, :line 3788, :file "cljs/core.cljs"} interpose, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 19, :end-line 6471, :column 10, :line 6471, :file "cljs/core.cljs"} ->BlackNode ^{:arglists ([^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 19, :end-line 6471, :column 10, :line 6471, :file "cljs/core.cljs"} {:arglists (^cljs.core/BlackNode [^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 6471, :column 21, :line 6471, :file "cljs/core.cljs"} key ^{:end-column 28, :end-line 6471, :column 25, :line 6471, :file "cljs/core.cljs"} val ^{:end-column 33, :end-line 6471, :column 29, :line 6471, :file "cljs/core.cljs"} left ^{:end-column 39, :end-line 6471, :column 34, :line 6471, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 56, :end-line 6471, :column 50, :line 6471, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 19, :end-line 6471, :column 10, :line 6471, :file "cljs/core.cljs"} ->BlackNode, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 814, :column 10, :line 814, :file "cljs/core.cljs"} deref ^{:declared true, :end-column 78, :end-line 5449, :column 73, :line 5449, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 78, :end-line 5449, :column 73, :line 5449, :file "cljs/core.cljs"} deref, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4019, :column 16, :line 4019, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4019, :column 17, :line 4019, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4019, :column 22, :line 4019, :file "cljs/core.cljs"} idx]), :private true, :end-column 15, :end-line 4019, :column 8, :line 4019, :file "cljs/core.cljs"} pv-aget ^{:arglists (^{:end-column 26, :end-line 4019, :column 16, :line 4019, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4019, :column 17, :line 4019, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4019, :column 22, :line 4019, :file "cljs/core.cljs"} idx]), :private true, :end-column 15, :end-line 4019, :column 8, :line 4019, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 4019, :column 17, :line 4019, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4019, :column 22, :line 4019, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4019, :column 16, :line 4019, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4019, :column 17, :line 4019, :file "cljs/core.cljs"} node ^{:end-column 25, :end-line 4019, :column 22, :line 4019, :file "cljs/core.cljs"} idx]), :private true, :end-column 15, :end-line 4019, :column 8, :line 4019, :file "cljs/core.cljs"} pv-aget, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 1295, :column 4, :line 1295, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1295, :column 5, :line 1295, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1295, :column 10, :line 1295, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1295, :column 12, :line 1295, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1299, :column 5, :line 1299, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1299, :column 10, :line 1299, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1299, :column 12, :line 1299, :file "cljs/core.cljs"} v ^{:end-column 15, :end-line 1299, :column 14, :line 1299, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 1299, :column 16, :line 1299, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 12, :end-line 1290, :column 7, :line 1290, :file "cljs/core.cljs"} assoc ^{:arglists (^{:end-column 14, :end-line 1295, :column 4, :line 1295, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1295, :column 5, :line 1295, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1295, :column 10, :line 1295, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1295, :column 12, :line 1295, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1299, :column 5, :line 1299, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1299, :column 10, :line 1299, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1299, :column 12, :line 1299, :file "cljs/core.cljs"} v ^{:end-column 15, :end-line 1299, :column 14, :line 1299, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 1299, :column 16, :line 1299, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 12, :end-line 1290, :column 7, :line 1290, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1295, :column 5, :line 1295, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1295, :column 10, :line 1295, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1295, :column 12, :line 1295, :file "cljs/core.cljs"} v] [^{:end-column 9, :end-line 1299, :column 5, :line 1299, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1299, :column 10, :line 1299, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1299, :column 12, :line 1299, :file "cljs/core.cljs"} v & ^{:end-column 19, :end-line 1299, :column 16, :line 1299, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 1295, :column 4, :line 1295, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1295, :column 5, :line 1295, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1295, :column 10, :line 1295, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1295, :column 12, :line 1295, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1299, :column 4, :line 1299, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1299, :column 5, :line 1299, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1299, :column 10, :line 1299, :file "cljs/core.cljs"} k ^{:end-column 13, :end-line 1299, :column 12, :line 1299, :file "cljs/core.cljs"} v ^{:end-column 15, :end-line 1299, :column 14, :line 1299, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 1299, :column 16, :line 1299, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 12, :end-line 1290, :column 7, :line 1290, :file "cljs/core.cljs"} assoc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2836, :column 3, :line 2836, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2836, :column 4, :line 2836, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 16, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} transient ^{:arglists (^{:end-column 9, :end-line 2836, :column 3, :line 2836, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2836, :column 4, :line 2836, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 16, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} {:arglists (^^{:end-column 8, :end-line 361, :column 5, :line 361, :file "cljs/core.cljs"} clj [^{:end-column 8, :end-line 2836, :column 4, :line 2836, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2836, :column 3, :line 2836, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2836, :column 4, :line 2836, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 16, :end-line 2834, :column 7, :line 2834, :file "cljs/core.cljs"} transient, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin ^{:arglists (^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 286, :column 18, :line 286, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 286, :column 19, :line 286, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 286, :column 24, :line 286, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 8, :end-line 286, :column 5, :line 286, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 286, :column 9, :line 286, :file "cljs/core.cljs"} -disjoin, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2655, :column 18, :line 2655, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2655, :column 19, :line 2655, :file "cljs/core.cljs"} chunk ^{:end-column 29, :end-line 2655, :column 25, :line 2655, :file "cljs/core.cljs"} rest]), :end-column 17, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} chunk-cons ^{:arglists (^{:end-column 30, :end-line 2655, :column 18, :line 2655, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2655, :column 19, :line 2655, :file "cljs/core.cljs"} chunk ^{:end-column 29, :end-line 2655, :column 25, :line 2655, :file "cljs/core.cljs"} rest]), :end-column 17, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 2655, :column 19, :line 2655, :file "cljs/core.cljs"} chunk ^{:end-column 29, :end-line 2655, :column 25, :line 2655, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2655, :column 18, :line 2655, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2655, :column 19, :line 2655, :file "cljs/core.cljs"} chunk ^{:end-column 29, :end-line 2655, :column 25, :line 2655, :file "cljs/core.cljs"} rest]), :end-column 17, :end-line 2655, :column 7, :line 2655, :file "cljs/core.cljs"} chunk-cons, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} ArrayIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 3000, :column 10, :line 3000, :file "cljs/core.cljs"} ArrayIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 37, :end-line 3000, :column 20, :line 3000, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 3000, :column 21, :line 3000, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 36, :end-line 3000, :column 35, :line 3000, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 9, :end-line 9032, :column 3, :line 9032, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9032, :column 4, :line 9032, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 17, :end-line 9030, :column 7, :line 9030, :file "cljs/core.cljs"} comparator ^{:arglists (^{:end-column 9, :end-line 9032, :column 3, :line 9032, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9032, :column 4, :line 9032, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 17, :end-line 9030, :column 7, :line 9030, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 8, :end-line 9032, :column 4, :line 9032, :file "cljs/core.cljs"} pred]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 9032, :column 3, :line 9032, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 9032, :column 4, :line 9032, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 17, :end-line 9030, :column 7, :line 9030, :file "cljs/core.cljs"} comparator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7006, :column 4, :line 7006, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7006, :column 5, :line 7006, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7006, :column 7, :line 7006, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 17, :end-line 7003, :column 7, :line 7003, :file "cljs/core.cljs"} sorted-map ^{:arglists (^{:end-column 15, :end-line 7006, :column 4, :line 7006, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7006, :column 5, :line 7006, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7006, :column 7, :line 7006, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 17, :end-line 7003, :column 7, :line 7003, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 14, :end-line 7006, :column 7, :line 7006, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7006, :column 4, :line 7006, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7006, :column 5, :line 7006, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 7006, :column 7, :line 7006, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 17, :end-line 7003, :column 7, :line 7003, :file "cljs/core.cljs"} sorted-map, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3721, :column 4, :line 3721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3721, :column 5, :line 3721, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3734, :column 4, :line 3734, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3734, :column 5, :line 3734, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3734, :column 10, :line 3734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 17, :end-line 3717, :column 7, :line 3717, :file "cljs/core.cljs"} drop-while ^{:arglists (^{:end-column 10, :end-line 3721, :column 4, :line 3721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3721, :column 5, :line 3721, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3734, :column 4, :line 3734, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3734, :column 5, :line 3734, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3734, :column 10, :line 3734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 17, :end-line 3717, :column 7, :line 3717, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 3721, :column 5, :line 3721, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 9, :end-line 3734, :column 5, :line 3734, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3734, :column 10, :line 3734, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3721, :column 4, :line 3721, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3721, :column 5, :line 3721, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3734, :column 4, :line 3734, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3734, :column 5, :line 3734, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3734, :column 10, :line 3734, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 17, :end-line 3717, :column 7, :line 3717, :file "cljs/core.cljs"} drop-while, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]], ^{:end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 21, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} IWriter ^{:impls (cljs.core/StringBufferWriter), :protocol-info {:methods {^{:end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]], ^{:end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 21, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 341, :column 4, :line 341, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 341, :column 11, :line 341, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 341, :column 12, :line 341, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 341, :column 19, :line 341, :file "cljs/core.cljs"} s]], ^{:end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 21, :end-line 340, :column 14, :line 340, :file "cljs/core.cljs"} IWriter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} KeySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7022, :column 10, :line 7022, :file "cljs/core.cljs"} KeySeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 7022, :column 17, :line 7022, :file "cljs/core.cljs"} [^{:tag ^{:end-column 29, :end-line 7022, :column 19, :line 7022, :file "cljs/core.cljs"} not-native, :end-column 34, :end-line 7022, :column 30, :line 7022, :file "cljs/core.cljs"} mseq ^{:end-column 40, :end-line 7022, :column 35, :line 7022, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8370, :column 3, :line 8370, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8370, :column 4, :line 8370, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 15, :end-line 8368, :column 8, :line 8368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 8368, :column 16, :line 8368, :file "cljs/core.cljs"} realized? ^{:arglists (^{:end-column 6, :end-line 8370, :column 3, :line 8370, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8370, :column 4, :line 8370, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 15, :end-line 8368, :column 8, :line 8368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 8368, :column 16, :line 8368, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} boolean [^{:end-column 5, :end-line 8370, :column 4, :line 8370, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8370, :column 3, :line 8370, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8370, :column 4, :line 8370, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 15, :end-line 8368, :column 8, :line 8368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 8368, :column 16, :line 8368, :file "cljs/core.cljs"} realized?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5051, :column 36, :line 5051, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 5051, :column 37, :line 5051, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 5051, :column 41, :line 5051, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 5051, :column 43, :line 5051, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 5051, :column 8, :line 5051, :file "cljs/core.cljs"} array-map-index-of-keyword? ^{:arglists (^{:end-column 45, :end-line 5051, :column 36, :line 5051, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 5051, :column 37, :line 5051, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 5051, :column 41, :line 5051, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 5051, :column 43, :line 5051, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 5051, :column 8, :line 5051, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 5051, :column 37, :line 5051, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 5051, :column 41, :line 5051, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 5051, :column 43, :line 5051, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5051, :column 36, :line 5051, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 5051, :column 37, :line 5051, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 5051, :column 41, :line 5051, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 5051, :column 43, :line 5051, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 5051, :column 8, :line 5051, :file "cljs/core.cljs"} array-map-index-of-keyword?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn* ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 9, :end-line 25, :column 8, :line 25, :file "cljs/core.cljs"} _]), :tag function, :op :var, :name ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 490, :column 24, :line 490, :file "cljs/core.cljs"} compare ^{:arglists (^{:end-column 8, :end-line 1594, :column 3, :line 1594, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1594, :column 4, :line 1594, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 1594, :column 6, :line 1594, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 14, :end-line 1589, :column 8, :line 1589, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1589, :column 15, :line 1589, :file "cljs/core.cljs"} {:arglists ([^{:end-column 5, :end-line 1594, :column 4, :line 1594, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 1594, :column 6, :line 1594, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1594, :column 3, :line 1594, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1594, :column 4, :line 1594, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 1594, :column 6, :line 1594, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 14, :end-line 1589, :column 8, :line 1589, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1589, :column 15, :line 1589, :file "cljs/core.cljs"} compare, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3255, :column 3, :line 3255, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3255, :column 4, :line 3255, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 15, :end-line 3252, :column 8, :line 3252, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3252, :column 16, :line 3252, :file "cljs/core.cljs"} complement ^{:arglists (^{:end-column 6, :end-line 3255, :column 3, :line 3255, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3255, :column 4, :line 3255, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 15, :end-line 3252, :column 8, :line 3252, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3252, :column 16, :line 3252, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 3255, :column 4, :line 3255, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3255, :column 3, :line 3255, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3255, :column 4, :line 3255, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 15, :end-line 3252, :column 8, :line 3252, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 3252, :column 16, :line 3252, :file "cljs/core.cljs"} complement, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 41, :end-line 1505, :column 1, :line 1505, :file "cljs/core.cljs"} lookup-sentinel ^{:private true, :end-column 41, :end-line 1505, :column 1, :line 1505, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 41, :end-line 1505, :column 1, :line 1505, :file "cljs/core.cljs"} lookup-sentinel, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc! ^{:arglists (^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 368, :column 17, :line 368, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 368, :column 18, :line 368, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 368, :column 24, :line 368, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 368, :column 28, :line 368, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 8, :end-line 368, :column 5, :line 368, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 368, :column 9, :line 368, :file "cljs/core.cljs"} -assoc!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup* ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} {:op :var, :name ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2997, :column 19, :line 2997, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2997, :column 20, :line 2997, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} string-iter ^{:arglists (^{:end-column 22, :end-line 2997, :column 19, :line 2997, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2997, :column 20, :line 2997, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 21, :end-line 2997, :column 20, :line 2997, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2997, :column 19, :line 2997, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2997, :column 20, :line 2997, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2997, :column 7, :line 2997, :file "cljs/core.cljs"} string-iter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js ^{:arglists (^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8447, :column 13, :line 8447, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8447, :column 14, :line 8447, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 12, :end-line 8447, :column 4, :line 8447, :file "cljs/core.cljs"} -key->js, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} IDeref ^{:impls (cljs.core/Delay cljs.core/Atom cljs.core/Reduced), :protocol-info {:methods {^{:end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 296, :column 3, :line 296, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 296, :column 10, :line 296, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 296, :column 11, :line 296, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 295, :column 14, :line 295, :file "cljs/core.cljs"} IDeref, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1584, :column 3, :line 1584, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1584, :column 4, :line 1584, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 11, :end-line 1581, :column 8, :line 1581, :file "cljs/core.cljs"} seq, :end-column 20, :end-line 1581, :column 12, :line 1581, :file "cljs/core.cljs"} sequence ^{:arglists (^{:end-column 10, :end-line 3205, :column 4, :line 3205, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3205, :column 5, :line 3205, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3209, :column 4, :line 3209, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3209, :column 5, :line 3209, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3209, :column 11, :line 3209, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3211, :column 4, :line 3211, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3211, :column 5, :line 3211, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3211, :column 11, :line 3211, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 3211, :column 16, :line 3211, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3211, :column 18, :line 3211, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 15, :end-line 3196, :column 7, :line 3196, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3205, :column 5, :line 3205, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 3209, :column 5, :line 3209, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3209, :column 11, :line 3209, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 3211, :column 5, :line 3211, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3211, :column 11, :line 3211, :file "cljs/core.cljs"} coll & ^{:end-column 23, :end-line 3211, :column 18, :line 3211, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3205, :column 4, :line 3205, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3205, :column 5, :line 3205, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3209, :column 4, :line 3209, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3209, :column 5, :line 3209, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3209, :column 11, :line 3209, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3211, :column 4, :line 3211, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3211, :column 5, :line 3211, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 3211, :column 11, :line 3211, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 3211, :column 16, :line 3211, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 3211, :column 18, :line 3211, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 15, :end-line 3196, :column 7, :line 3196, :file "cljs/core.cljs"} sequence, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3264, :column 3, :line 3264, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3264, :column 4, :line 3264, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 17, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} constantly ^{:arglists (^{:end-column 6, :end-line 3264, :column 3, :line 3264, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3264, :column 4, :line 3264, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 17, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 5, :end-line 3264, :column 4, :line 3264, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3264, :column 3, :line 3264, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 3264, :column 4, :line 3264, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 17, :end-line 3262, :column 7, :line 3262, :file "cljs/core.cljs"} constantly, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} ->RangedIterator ^{:arglists ([^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangedIterator [^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 37, :end-line 4111, :column 36, :line 4111, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 52, :end-line 4111, :column 48, :line 4111, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 66, :end-line 4111, :column 63, :line 4111, :file "cljs/core.cljs"} arr ^{:end-column 68, :end-line 4111, :column 67, :line 4111, :file "cljs/core.cljs"} v ^{:end-column 74, :end-line 4111, :column 69, :line 4111, :file "cljs/core.cljs"} start ^{:end-column 78, :end-line 4111, :column 75, :line 4111, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 4111, :column 10, :line 4111, :file "cljs/core.cljs"} ->RangedIterator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 52, :end-line 4131, :column 41, :line 4131, :file "cljs/core.cljs"} chunked-seq ^{:arglists (^{:end-column 15, :end-line 4425, :column 4, :line 4425, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4425, :column 5, :line 4425, :file "cljs/core.cljs"} vec ^{:end-column 10, :end-line 4425, :column 9, :line 4425, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 4425, :column 11, :line 4425, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4426, :column 4, :line 4426, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4426, :column 5, :line 4426, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4426, :column 9, :line 4426, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4426, :column 14, :line 4426, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4426, :column 16, :line 4426, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4427, :column 4, :line 4427, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4427, :column 5, :line 4427, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4427, :column 9, :line 4427, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4427, :column 14, :line 4427, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4427, :column 16, :line 4427, :file "cljs/core.cljs"} off ^{:end-column 24, :end-line 4427, :column 20, :line 4427, :file "cljs/core.cljs"} meta]), :end-column 18, :end-line 4424, :column 7, :line 4424, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 8, :end-line 4425, :column 5, :line 4425, :file "cljs/core.cljs"} vec ^{:end-column 10, :end-line 4425, :column 9, :line 4425, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 4425, :column 11, :line 4425, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 8, :end-line 4426, :column 5, :line 4426, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4426, :column 9, :line 4426, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4426, :column 14, :line 4426, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4426, :column 16, :line 4426, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 8, :end-line 4427, :column 5, :line 4427, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4427, :column 9, :line 4427, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4427, :column 14, :line 4427, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4427, :column 16, :line 4427, :file "cljs/core.cljs"} off ^{:end-column 24, :end-line 4427, :column 20, :line 4427, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 4425, :column 4, :line 4425, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4425, :column 5, :line 4425, :file "cljs/core.cljs"} vec ^{:end-column 10, :end-line 4425, :column 9, :line 4425, :file "cljs/core.cljs"} i ^{:end-column 14, :end-line 4425, :column 11, :line 4425, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4426, :column 4, :line 4426, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4426, :column 5, :line 4426, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4426, :column 9, :line 4426, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4426, :column 14, :line 4426, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4426, :column 16, :line 4426, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4427, :column 4, :line 4427, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 4427, :column 5, :line 4427, :file "cljs/core.cljs"} vec ^{:end-column 13, :end-line 4427, :column 9, :line 4427, :file "cljs/core.cljs"} node ^{:end-column 15, :end-line 4427, :column 14, :line 4427, :file "cljs/core.cljs"} i ^{:end-column 19, :end-line 4427, :column 16, :line 4427, :file "cljs/core.cljs"} off ^{:end-column 24, :end-line 4427, :column 20, :line 4427, :file "cljs/core.cljs"} meta]), :end-column 18, :end-line 4424, :column 7, :line 4424, :file "cljs/core.cljs"} chunked-seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]], ^{:end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]], ^{:end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 334, :column 14, :line 334, :file "cljs/core.cljs"} ISorted ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap), :protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]], ^{:end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]], ^{:end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 334, :column 14, :line 334, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 8, :end-line 335, :column 5, :line 335, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 335, :column 9, :line 335, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 335, :column 21, :line 335, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 335, :column 22, :line 335, :file "cljs/core.cljs"} coll ^{:end-column 37, :end-line 335, :column 27, :line 335, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 8, :end-line 336, :column 5, :line 336, :file "cljs/core.cljs"} clj, :end-column 25, :end-line 336, :column 9, :line 336, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 336, :column 26, :line 336, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 336, :column 27, :line 336, :file "cljs/core.cljs"} coll ^{:end-column 33, :end-line 336, :column 32, :line 336, :file "cljs/core.cljs"} k ^{:end-column 44, :end-line 336, :column 34, :line 336, :file "cljs/core.cljs"} ascending?]], ^{:end-column 14, :end-line 337, :column 4, :line 337, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 337, :column 15, :line 337, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 337, :column 16, :line 337, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 337, :column 21, :line 337, :file "cljs/core.cljs"} entry]], ^{:end-column 15, :end-line 338, :column 4, :line 338, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 338, :column 16, :line 338, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 338, :column 17, :line 338, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 334, :column 14, :line 334, :file "cljs/core.cljs"} ISorted, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 157, :column 4, :line 157, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 157, :column 5, :line 157, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 159, :column 5, :line 159, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 159, :column 10, :line 159, :file "cljs/core.cljs"} size]), :tag ^{:end-column 13, :end-line 156, :column 8, :line 156, :file "cljs/core.cljs"} array, :end-column 24, :end-line 156, :column 14, :line 156, :file "cljs/core.cljs"} make-array ^{:arglists (^{:end-column 10, :end-line 157, :column 4, :line 157, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 157, :column 5, :line 157, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 159, :column 5, :line 159, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 159, :column 10, :line 159, :file "cljs/core.cljs"} size]), :tag ^{:end-column 13, :end-line 156, :column 8, :line 156, :file "cljs/core.cljs"} array, :end-column 24, :end-line 156, :column 14, :line 156, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 9, :end-line 157, :column 5, :line 157, :file "cljs/core.cljs"} size] ^array [^{:end-column 9, :end-line 159, :column 5, :line 159, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 159, :column 10, :line 159, :file "cljs/core.cljs"} size]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 157, :column 4, :line 157, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 157, :column 5, :line 157, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 159, :column 5, :line 159, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 159, :column 10, :line 159, :file "cljs/core.cljs"} size]), :tag ^{:end-column 13, :end-line 156, :column 8, :line 156, :file "cljs/core.cljs"} array, :end-column 24, :end-line 156, :column 14, :line 156, :file "cljs/core.cljs"} make-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1989, :column 14, :line 1989, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1989, :column 15, :line 1989, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} shorts ^{:arglists (^{:end-column 17, :end-line 1989, :column 14, :line 1989, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1989, :column 15, :line 1989, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1989, :column 15, :line 1989, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1989, :column 14, :line 1989, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1989, :column 15, :line 1989, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} shorts, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if* ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} {:op :var, :name ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if*, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} ->RSeq ^{:arglists ([^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} {:arglists (^cljs.core/RSeq [^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 18, :end-line 1014, :column 16, :line 1014, :file "cljs/core.cljs"} ci ^{:end-column 20, :end-line 1014, :column 19, :line 1014, :file "cljs/core.cljs"} i ^{:end-column 25, :end-line 1014, :column 21, :line 1014, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 1014, :column 10, :line 1014, :file "cljs/core.cljs"} ->RSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 28, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print! ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 28, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} {:arglists (^function []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 28, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush ^{:arglists (^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 342, :column 11, :line 342, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 342, :column 12, :line 342, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 10, :end-line 342, :column 4, :line 342, :file "cljs/core.cljs"} -flush, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1747, :column 4, :line 1747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1747, :column 5, :line 1747, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1748, :column 4, :line 1748, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1748, :column 5, :line 1748, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 1748, :column 7, :line 1748, :file "cljs/core.cljs"} cf]), :end-column 17, :end-line 1746, :column 7, :line 1746, :file "cljs/core.cljs"} completing ^{:arglists (^{:end-column 7, :end-line 1747, :column 4, :line 1747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1747, :column 5, :line 1747, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1748, :column 4, :line 1748, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1748, :column 5, :line 1748, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 1748, :column 7, :line 1748, :file "cljs/core.cljs"} cf]), :end-column 17, :end-line 1746, :column 7, :line 1746, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1747, :column 5, :line 1747, :file "cljs/core.cljs"} f] ^function [^{:end-column 6, :end-line 1748, :column 5, :line 1748, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 1748, :column 7, :line 1748, :file "cljs/core.cljs"} cf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1747, :column 4, :line 1747, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1747, :column 5, :line 1747, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1748, :column 4, :line 1748, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1748, :column 5, :line 1748, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 1748, :column 7, :line 1748, :file "cljs/core.cljs"} cf]), :end-column 17, :end-line 1746, :column 7, :line 1746, :file "cljs/core.cljs"} completing, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 1939, :column 28, :line 1939, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1939, :column 29, :line 1939, :file "cljs/core.cljs"} x]), :end-column 27, :end-line 1939, :column 7, :line 1939, :file "cljs/core.cljs"} unchecked-negate-int ^{:arglists (^{:end-column 31, :end-line 1939, :column 28, :line 1939, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1939, :column 29, :line 1939, :file "cljs/core.cljs"} x]), :end-column 27, :end-line 1939, :column 7, :line 1939, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 30, :end-line 1939, :column 29, :line 1939, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1939, :column 28, :line 1939, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1939, :column 29, :line 1939, :file "cljs/core.cljs"} x]), :end-column 27, :end-line 1939, :column 7, :line 1939, :file "cljs/core.cljs"} unchecked-negate-int, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} ->PersistentVector ^{:arglists ([^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentVector [^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 32, :end-line 4133, :column 28, :line 4133, :file "cljs/core.cljs"} meta ^{:end-column 36, :end-line 4133, :column 33, :line 4133, :file "cljs/core.cljs"} cnt ^{:end-column 42, :end-line 4133, :column 37, :line 4133, :file "cljs/core.cljs"} shift ^{:end-column 47, :end-line 4133, :column 43, :line 4133, :file "cljs/core.cljs"} root ^{:end-column 52, :end-line 4133, :column 48, :line 4133, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 69, :end-line 4133, :column 63, :line 4133, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 26, :end-line 4133, :column 10, :line 4133, :file "cljs/core.cljs"} ->PersistentVector, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 777, :column 24, :line 777, :file "cljs/core.cljs"} equiv-sequential ^{:arglists (^{:end-column 8, :end-line 2150, :column 3, :line 2150, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2150, :column 4, :line 2150, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2150, :column 6, :line 2150, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 24, :end-line 2147, :column 8, :line 2147, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 2150, :column 4, :line 2150, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2150, :column 6, :line 2150, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2150, :column 3, :line 2150, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 2150, :column 4, :line 2150, :file "cljs/core.cljs"} x ^{:end-column 7, :end-line 2150, :column 6, :line 2150, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 24, :end-line 2147, :column 8, :line 2147, :file "cljs/core.cljs"} equiv-sequential, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 764, :column 8, :line 764, :file "cljs/core.cljs"} number, :end-column 34, :end-line 764, :column 15, :line 764, :file "cljs/core.cljs"} hash-unordered-coll ^{:arglists (^{:end-column 9, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 764, :column 8, :line 764, :file "cljs/core.cljs"} number, :end-column 34, :end-line 764, :column 15, :line 764, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 8, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 770, :column 3, :line 770, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 770, :column 4, :line 770, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 14, :end-line 764, :column 8, :line 764, :file "cljs/core.cljs"} number, :end-column 34, :end-line 764, :column 15, :line 764, :file "cljs/core.cljs"} hash-unordered-coll, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3755, :column 4, :line 3755, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3755, :column 5, :line 3755, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3756, :column 4, :line 3756, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3756, :column 5, :line 3756, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3756, :column 7, :line 3756, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 13, :end-line 3753, :column 7, :line 3753, :file "cljs/core.cljs"} repeat ^{:arglists (^{:end-column 7, :end-line 3755, :column 4, :line 3755, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3755, :column 5, :line 3755, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3756, :column 4, :line 3756, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3756, :column 5, :line 3756, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3756, :column 7, :line 3756, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 13, :end-line 3753, :column 7, :line 3753, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3755, :column 5, :line 3755, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 6, :end-line 3756, :column 5, :line 3756, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3756, :column 7, :line 3756, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3755, :column 4, :line 3755, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3755, :column 5, :line 3755, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3756, :column 4, :line 3756, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3756, :column 5, :line 3756, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3756, :column 7, :line 3756, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 13, :end-line 3753, :column 7, :line 3753, :file "cljs/core.cljs"} repeat, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1916, :column 21, :line 1916, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1916, :column 22, :line 1916, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1916, :column 7, :line 1916, :file "cljs/core.cljs"} unchecked-inc ^{:arglists (^{:end-column 24, :end-line 1916, :column 21, :line 1916, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1916, :column 22, :line 1916, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1916, :column 7, :line 1916, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 1916, :column 22, :line 1916, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1916, :column 21, :line 1916, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1916, :column 22, :line 1916, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 1916, :column 7, :line 1916, :file "cljs/core.cljs"} unchecked-inc, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2117, :column 3, :line 2117, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2117, :column 4, :line 2117, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 2117, :column 9, :line 2117, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 14, :end-line 2115, :column 7, :line 2115, :file "cljs/core.cljs"} nthnext ^{:arglists (^{:end-column 11, :end-line 2117, :column 3, :line 2117, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2117, :column 4, :line 2117, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 2117, :column 9, :line 2117, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 14, :end-line 2115, :column 7, :line 2115, :file "cljs/core.cljs"} {:arglists (^^{:end-column 11, :end-line 634, :column 8, :line 634, :file "cljs/core.cljs"} seq [^{:end-column 8, :end-line 2117, :column 4, :line 2117, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 2117, :column 9, :line 2117, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2117, :column 3, :line 2117, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2117, :column 4, :line 2117, :file "cljs/core.cljs"} coll ^{:end-column 10, :end-line 2117, :column 9, :line 2117, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 14, :end-line 2115, :column 7, :line 2115, :file "cljs/core.cljs"} nthnext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8374, :column 3, :line 8374, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8374, :column 4, :line 8374, :file "cljs/core.cljs"} rf]), :private true, :end-column 26, :end-line 8373, :column 8, :line 8373, :file "cljs/core.cljs"} preserving-reduced ^{:arglists (^{:end-column 7, :end-line 8374, :column 3, :line 8374, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8374, :column 4, :line 8374, :file "cljs/core.cljs"} rf]), :private true, :end-column 26, :end-line 8373, :column 8, :line 8373, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 8374, :column 4, :line 8374, :file "cljs/core.cljs"} rf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8374, :column 3, :line 8374, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8374, :column 4, :line 8374, :file "cljs/core.cljs"} rf]), :private true, :end-column 26, :end-line 8373, :column 8, :line 8373, :file "cljs/core.cljs"} preserving-reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3491, :column 3, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 20, :end-line 3489, :column 7, :line 3489, :file "cljs/core.cljs"} get-validator ^{:arglists (^{:end-column 9, :end-line 3491, :column 3, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 20, :end-line 3489, :column 7, :line 3489, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} iref]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3491, :column 3, :line 3491, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3491, :column 4, :line 3491, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 20, :end-line 3489, :column 7, :line 3489, :file "cljs/core.cljs"} get-validator, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} StringIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2988, :column 10, :line 2988, :file "cljs/core.cljs"} StringIter, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 36, :end-line 2988, :column 21, :line 2988, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2988, :column 22, :line 2988, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 35, :end-line 2988, :column 34, :line 2988, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number? ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj! ^{:arglists (^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 17, :line 364, :file "cljs/core.cljs"} tcoll ^{:end-column 26, :end-line 364, :column 23, :line 364, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 8, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -conj!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} ->PersistentArrayMapSeq ^{:arglists ([^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMapSeq [^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 36, :end-line 5118, :column 33, :line 5118, :file "cljs/core.cljs"} arr ^{:end-column 38, :end-line 5118, :column 37, :line 5118, :file "cljs/core.cljs"} i ^{:end-column 44, :end-line 5118, :column 39, :line 5118, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 5118, :column 10, :line 5118, :file "cljs/core.cljs"} ->PersistentArrayMapSeq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2672, :column 18, :line 2672, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2672, :column 19, :line 2672, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2672, :column 7, :line 2672, :file "cljs/core.cljs"} chunk-next ^{:arglists (^{:end-column 21, :end-line 2672, :column 18, :line 2672, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2672, :column 19, :line 2672, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2672, :column 7, :line 2672, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 2672, :column 19, :line 2672, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2672, :column 18, :line 2672, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2672, :column 19, :line 2672, :file "cljs/core.cljs"} s]), :end-column 17, :end-line 2672, :column 7, :line 2672, :file "cljs/core.cljs"} chunk-next, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} ArrayList {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 19, :end-line 7536, :column 10, :line 7536, :file "cljs/core.cljs"} ArrayList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 7536, :column 20, :line 7536, :file "cljs/core.cljs"} [^{:mutable true, :end-column 34, :end-line 7536, :column 31, :line 7536, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 11, :end-line 8132, :column 3, :line 8132, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8132, :column 4, :line 8132, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8132, :column 6, :line 8132, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 16, :end-line 8130, :column 7, :line 8130, :file "cljs/core.cljs"} print-str ^{:arglists (^{:end-column 11, :end-line 8132, :column 3, :line 8132, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8132, :column 4, :line 8132, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8132, :column 6, :line 8132, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 16, :end-line 8130, :column 7, :line 8130, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 10, :end-line 8132, :column 6, :line 8132, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8132, :column 3, :line 8132, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 8132, :column 4, :line 8132, :file "cljs/core.cljs"} & ^{:end-column 10, :end-line 8132, :column 6, :line 8132, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 16, :end-line 8130, :column 7, :line 8130, :file "cljs/core.cljs"} print-str, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3240, :column 3, :line 3240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3240, :column 4, :line 3240, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3240, :column 9, :line 3240, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 15, :end-line 3237, :column 8, :line 3237, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 3237, :column 16, :line 3237, :file "cljs/core.cljs"} not-any? ^{:arglists (^{:end-column 14, :end-line 3240, :column 3, :line 3240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3240, :column 4, :line 3240, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3240, :column 9, :line 3240, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 15, :end-line 3237, :column 8, :line 3237, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 3237, :column 16, :line 3237, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 8, :end-line 3240, :column 4, :line 3240, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3240, :column 9, :line 3240, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3240, :column 3, :line 3240, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3240, :column 4, :line 3240, :file "cljs/core.cljs"} pred ^{:end-column 13, :end-line 3240, :column 9, :line 3240, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 15, :end-line 3237, :column 8, :line 3237, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 3237, :column 16, :line 3237, :file "cljs/core.cljs"} not-any?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 47, :column 10, :line 47, :file "cljs/core.cljs"} into-array ^{:arglists (^{:end-column 10, :end-line 201, :column 4, :line 201, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 201, :column 5, :line 201, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 203, :column 5, :line 203, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 203, :column 10, :line 203, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 13, :end-line 200, :column 8, :line 200, :file "cljs/core.cljs"} array, :end-column 24, :end-line 200, :column 14, :line 200, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 201, :column 5, :line 201, :file "cljs/core.cljs"} aseq] [^{:end-column 9, :end-line 203, :column 5, :line 203, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 203, :column 10, :line 203, :file "cljs/core.cljs"} aseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 201, :column 4, :line 201, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 201, :column 5, :line 201, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 203, :column 4, :line 203, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 203, :column 5, :line 203, :file "cljs/core.cljs"} type ^{:end-column 14, :end-line 203, :column 10, :line 203, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 13, :end-line 200, :column 8, :line 200, :file "cljs/core.cljs"} array, :end-column 24, :end-line 200, :column 14, :line 200, :file "cljs/core.cljs"} into-array, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash ^{:arglists (^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 317, :column 10, :line 317, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 317, :column 11, :line 317, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 9, :end-line 317, :column 4, :line 317, :file "cljs/core.cljs"} -hash, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc! ^{:arglists (^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 371, :column 18, :line 371, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 371, :column 19, :line 371, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 371, :column 25, :line 371, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 8, :end-line 371, :column 5, :line 371, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 371, :column 9, :line 371, :file "cljs/core.cljs"} -dissoc!, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} ->Reduced ^{:arglists ([^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 816, :column 19, :line 816, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 17, :end-line 816, :column 10, :line 816, :file "cljs/core.cljs"} ->Reduced, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2556, :column 20, :line 2556, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2556, :column 21, :line 2556, :file "cljs/core.cljs"} capacity]), :end-column 19, :end-line 2556, :column 7, :line 2556, :file "cljs/core.cljs"} chunk-buffer ^{:arglists (^{:end-column 30, :end-line 2556, :column 20, :line 2556, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2556, :column 21, :line 2556, :file "cljs/core.cljs"} capacity]), :end-column 19, :end-line 2556, :column 7, :line 2556, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:end-column 29, :end-line 2556, :column 21, :line 2556, :file "cljs/core.cljs"} capacity]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2556, :column 20, :line 2556, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2556, :column 21, :line 2556, :file "cljs/core.cljs"} capacity]), :end-column 19, :end-line 2556, :column 7, :line 2556, :file "cljs/core.cljs"} chunk-buffer, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 15, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1525, :column 16, :line 1525, :file "cljs/core.cljs"} seqable? ^{:arglists (^{:end-column 6, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 15, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1525, :column 16, :line 1525, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 15, :end-line 1525, :column 8, :line 1525, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1525, :column 16, :line 1525, :file "cljs/core.cljs"} seqable?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 556, :column 24, :line 556, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 556, :column 25, :line 556, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 556, :column 8, :line 556, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 556, :column 16, :line 556, :file "cljs/core.cljs"} symbol? ^{:arglists (^{:end-column 27, :end-line 556, :column 24, :line 556, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 556, :column 25, :line 556, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 556, :column 8, :line 556, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 556, :column 16, :line 556, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 556, :column 25, :line 556, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 556, :column 24, :line 556, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 556, :column 25, :line 556, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 556, :column 8, :line 556, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 556, :column 16, :line 556, :file "cljs/core.cljs"} symbol?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 474, :column 39, :line 474, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 474, :column 40, :line 474, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 474, :column 8, :line 474, :file "cljs/core.cljs"} number, :end-column 38, :end-line 474, :column 15, :line 474, :file "cljs/core.cljs"} m3-hash-unencoded-chars ^{:arglists (^{:end-column 43, :end-line 474, :column 39, :line 474, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 474, :column 40, :line 474, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 474, :column 8, :line 474, :file "cljs/core.cljs"} number, :end-column 38, :end-line 474, :column 15, :line 474, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 42, :end-line 474, :column 40, :line 474, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 474, :column 39, :line 474, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 474, :column 40, :line 474, :file "cljs/core.cljs"} in]), :tag ^{:end-column 14, :end-line 474, :column 8, :line 474, :file "cljs/core.cljs"} number, :end-column 38, :end-line 474, :column 15, :line 474, :file "cljs/core.cljs"} m3-hash-unencoded-chars, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1884, :column 30, :line 1884, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1884, :column 31, :line 1884, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1884, :column 8, :line 1884, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1884, :column 15, :line 1884, :file "cljs/core.cljs"} unchecked-char ^{:arglists (^{:end-column 33, :end-line 1884, :column 30, :line 1884, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1884, :column 31, :line 1884, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1884, :column 8, :line 1884, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1884, :column 15, :line 1884, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 1884, :column 31, :line 1884, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1884, :column 30, :line 1884, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 1884, :column 31, :line 1884, :file "cljs/core.cljs"} x]), :tag ^{:end-column 14, :end-line 1884, :column 8, :line 1884, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1884, :column 15, :line 1884, :file "cljs/core.cljs"} unchecked-char, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} NeverEquiv {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 20, :end-line 4836, :column 10, :line 4836, :file "cljs/core.cljs"} NeverEquiv, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 4836, :column 21, :line 4836, :file "cljs/core.cljs"} [], :protocols #{Object cljs.core/IEquiv}}, ^{:arglists (^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke ^{:arglists (^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 230, :column 5, :line 230, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 230, :column 6, :line 230, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 230, :column 11, :line 230, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 230, :column 13, :line 230, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 230, :column 15, :line 230, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 230, :column 17, :line 230, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 230, :column 19, :line 230, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 230, :column 21, :line 230, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 230, :column 23, :line 230, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 230, :column 25, :line 230, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 230, :column 27, :line 230, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 230, :column 29, :line 230, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 230, :column 31, :line 230, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 231, :column 5, :line 231, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 231, :column 6, :line 231, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 231, :column 11, :line 231, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 231, :column 13, :line 231, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 231, :column 15, :line 231, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 231, :column 17, :line 231, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 231, :column 19, :line 231, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 231, :column 21, :line 231, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 231, :column 23, :line 231, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 231, :column 25, :line 231, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 231, :column 27, :line 231, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 231, :column 29, :line 231, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 231, :column 31, :line 231, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 231, :column 33, :line 231, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 232, :column 6, :line 232, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 232, :column 11, :line 232, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 232, :column 13, :line 232, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 232, :column 15, :line 232, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 232, :column 19, :line 232, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 232, :column 21, :line 232, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 232, :column 23, :line 232, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 232, :column 25, :line 232, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 232, :column 27, :line 232, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 232, :column 29, :line 232, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 232, :column 31, :line 232, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 232, :column 33, :line 232, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 232, :column 35, :line 232, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 233, :column 5, :line 233, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 233, :column 6, :line 233, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 233, :column 11, :line 233, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 233, :column 13, :line 233, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 233, :column 15, :line 233, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 233, :column 17, :line 233, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 233, :column 19, :line 233, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 233, :column 21, :line 233, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 233, :column 23, :line 233, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 233, :column 25, :line 233, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 233, :column 27, :line 233, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 233, :column 29, :line 233, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 233, :column 31, :line 233, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 233, :column 33, :line 233, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 233, :column 35, :line 233, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 233, :column 37, :line 233, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 234, :column 5, :line 234, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 234, :column 6, :line 234, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 234, :column 11, :line 234, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 234, :column 13, :line 234, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 234, :column 15, :line 234, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 234, :column 17, :line 234, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 234, :column 19, :line 234, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 234, :column 21, :line 234, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 234, :column 23, :line 234, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 234, :column 25, :line 234, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 234, :column 27, :line 234, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 234, :column 29, :line 234, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 234, :column 31, :line 234, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 234, :column 33, :line 234, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 234, :column 35, :line 234, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 234, :column 37, :line 234, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 234, :column 39, :line 234, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 235, :column 6, :line 235, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 235, :column 11, :line 235, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 235, :column 13, :line 235, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 235, :column 15, :line 235, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 235, :column 17, :line 235, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 235, :column 21, :line 235, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 235, :column 23, :line 235, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 235, :column 25, :line 235, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 235, :column 27, :line 235, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 235, :column 29, :line 235, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 235, :column 31, :line 235, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 235, :column 33, :line 235, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 235, :column 35, :line 235, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 235, :column 37, :line 235, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 235, :column 39, :line 235, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 235, :column 41, :line 235, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 236, :column 5, :line 236, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 236, :column 6, :line 236, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 236, :column 11, :line 236, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 236, :column 13, :line 236, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 236, :column 15, :line 236, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 236, :column 17, :line 236, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 236, :column 19, :line 236, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 236, :column 21, :line 236, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 236, :column 23, :line 236, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 236, :column 25, :line 236, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 236, :column 27, :line 236, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 236, :column 29, :line 236, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 236, :column 31, :line 236, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 236, :column 33, :line 236, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 236, :column 35, :line 236, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 236, :column 37, :line 236, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 236, :column 39, :line 236, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 236, :column 41, :line 236, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 236, :column 43, :line 236, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 237, :column 5, :line 237, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 237, :column 6, :line 237, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 237, :column 11, :line 237, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 237, :column 13, :line 237, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 237, :column 15, :line 237, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 237, :column 17, :line 237, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 237, :column 19, :line 237, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 237, :column 21, :line 237, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 237, :column 23, :line 237, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 237, :column 25, :line 237, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 237, :column 27, :line 237, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 237, :column 29, :line 237, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 237, :column 31, :line 237, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 237, :column 33, :line 237, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 237, :column 35, :line 237, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 237, :column 37, :line 237, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 237, :column 39, :line 237, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 237, :column 41, :line 237, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 237, :column 43, :line 237, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 237, :column 45, :line 237, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 238, :column 5, :line 238, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 238, :column 6, :line 238, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 238, :column 13, :line 238, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 238, :column 15, :line 238, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 238, :column 17, :line 238, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 238, :column 19, :line 238, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 238, :column 21, :line 238, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 238, :column 23, :line 238, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 238, :column 25, :line 238, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 238, :column 27, :line 238, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 238, :column 29, :line 238, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 238, :column 31, :line 238, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 238, :column 33, :line 238, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 238, :column 35, :line 238, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 238, :column 37, :line 238, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 238, :column 39, :line 238, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 238, :column 41, :line 238, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 238, :column 43, :line 238, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 238, :column 45, :line 238, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 238, :column 47, :line 238, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 239, :column 5, :line 239, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 239, :column 6, :line 239, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 239, :column 11, :line 239, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 239, :column 13, :line 239, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 239, :column 15, :line 239, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 239, :column 17, :line 239, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 239, :column 19, :line 239, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 239, :column 21, :line 239, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 239, :column 23, :line 239, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 239, :column 25, :line 239, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 239, :column 27, :line 239, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 239, :column 29, :line 239, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 239, :column 31, :line 239, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 239, :column 33, :line 239, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 239, :column 35, :line 239, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 239, :column 37, :line 239, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 239, :column 39, :line 239, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 239, :column 41, :line 239, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 239, :column 43, :line 239, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 239, :column 45, :line 239, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 239, :column 47, :line 239, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 239, :column 49, :line 239, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 240, :column 5, :line 240, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 240, :column 6, :line 240, :file "cljs/core.cljs"} this ^{:end-column 12, :end-line 240, :column 11, :line 240, :file "cljs/core.cljs"} a ^{:end-column 14, :end-line 240, :column 13, :line 240, :file "cljs/core.cljs"} b ^{:end-column 16, :end-line 240, :column 15, :line 240, :file "cljs/core.cljs"} c ^{:end-column 18, :end-line 240, :column 17, :line 240, :file "cljs/core.cljs"} d ^{:end-column 20, :end-line 240, :column 19, :line 240, :file "cljs/core.cljs"} e ^{:end-column 22, :end-line 240, :column 21, :line 240, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 240, :column 23, :line 240, :file "cljs/core.cljs"} g ^{:end-column 26, :end-line 240, :column 25, :line 240, :file "cljs/core.cljs"} h ^{:end-column 28, :end-line 240, :column 27, :line 240, :file "cljs/core.cljs"} i ^{:end-column 30, :end-line 240, :column 29, :line 240, :file "cljs/core.cljs"} j ^{:end-column 32, :end-line 240, :column 31, :line 240, :file "cljs/core.cljs"} k ^{:end-column 34, :end-line 240, :column 33, :line 240, :file "cljs/core.cljs"} l ^{:end-column 36, :end-line 240, :column 35, :line 240, :file "cljs/core.cljs"} m ^{:end-column 38, :end-line 240, :column 37, :line 240, :file "cljs/core.cljs"} n ^{:end-column 40, :end-line 240, :column 39, :line 240, :file "cljs/core.cljs"} o ^{:end-column 42, :end-line 240, :column 41, :line 240, :file "cljs/core.cljs"} p ^{:end-column 44, :end-line 240, :column 43, :line 240, :file "cljs/core.cljs"} q ^{:end-column 46, :end-line 240, :column 45, :line 240, :file "cljs/core.cljs"} r ^{:end-column 48, :end-line 240, :column 47, :line 240, :file "cljs/core.cljs"} s ^{:end-column 50, :end-line 240, :column 49, :line 240, :file "cljs/core.cljs"} t ^{:end-column 55, :end-line 240, :column 51, :line 240, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 11, :end-line 218, :column 4, :line 218, :file "cljs/core.cljs"} -invoke, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1428, :column 3, :line 1428, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1428, :column 4, :line 1428, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 15, :end-line 1426, :column 8, :line 1426, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1426, :column 16, :line 1426, :file "cljs/core.cljs"} coll? ^{:arglists (^{:end-column 6, :end-line 1428, :column 3, :line 1428, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1428, :column 4, :line 1428, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 15, :end-line 1426, :column 8, :line 1426, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1426, :column 16, :line 1426, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 5, :end-line 1428, :column 4, :line 1428, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1428, :column 3, :line 1428, :file "cljs/core.cljs"} [^{:end-column 5, :end-line 1428, :column 4, :line 1428, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 15, :end-line 1426, :column 8, :line 1426, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1426, :column 16, :line 1426, :file "cljs/core.cljs"} coll?, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3945, :column 4, :line 3945, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3945, :column 5, :line 3945, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3945, :column 7, :line 3945, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3947, :column 4, :line 3947, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3947, :column 5, :line 3947, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3947, :column 7, :line 3947, :file "cljs/core.cljs"} ks ^{:end-column 19, :end-line 3947, :column 10, :line 3947, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 13, :end-line 3939, :column 7, :line 3939, :file "cljs/core.cljs"} get-in ^{:arglists (^{:end-column 10, :end-line 3945, :column 4, :line 3945, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3945, :column 5, :line 3945, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3945, :column 7, :line 3945, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3947, :column 4, :line 3947, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3947, :column 5, :line 3947, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3947, :column 7, :line 3947, :file "cljs/core.cljs"} ks ^{:end-column 19, :end-line 3947, :column 10, :line 3947, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 13, :end-line 3939, :column 7, :line 3939, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3945, :column 5, :line 3945, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3945, :column 7, :line 3945, :file "cljs/core.cljs"} ks] [^{:end-column 6, :end-line 3947, :column 5, :line 3947, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3947, :column 7, :line 3947, :file "cljs/core.cljs"} ks ^{:end-column 19, :end-line 3947, :column 10, :line 3947, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3945, :column 4, :line 3945, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3945, :column 5, :line 3945, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3945, :column 7, :line 3945, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3947, :column 4, :line 3947, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3947, :column 5, :line 3947, :file "cljs/core.cljs"} m ^{:end-column 9, :end-line 3947, :column 7, :line 3947, :file "cljs/core.cljs"} ks ^{:end-column 19, :end-line 3947, :column 10, :line 3947, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 13, :end-line 3939, :column 7, :line 3939, :file "cljs/core.cljs"} get-in, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1086, :column 3, :line 1086, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1086, :column 4, :line 1086, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 12, :end-line 1084, :column 7, :line 1084, :file "cljs/core.cljs"} fnext ^{:arglists (^{:end-column 9, :end-line 1086, :column 3, :line 1086, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1086, :column 4, :line 1086, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 12, :end-line 1084, :column 7, :line 1084, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1086, :column 4, :line 1086, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1086, :column 3, :line 1086, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1086, :column 4, :line 1086, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 12, :end-line 1084, :column 7, :line 1084, :file "cljs/core.cljs"} fnext, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 325, :column 14, :line 325, :file "cljs/core.cljs"} IList ^{:impls (cljs.core/Cons cljs.core/EmptyList cljs.core/List), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 325, :column 14, :line 325, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 325, :column 14, :line 325, :file "cljs/core.cljs"} IList, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 34, :end-line 910, :column 30, :line 910, :file "cljs/core.cljs"} List {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 14, :end-line 2205, :column 10, :line 2205, :file "cljs/core.cljs"} List, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 2205, :column 15, :line 2205, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 2205, :column 16, :line 2205, :file "cljs/core.cljs"} meta ^{:end-column 26, :end-line 2205, :column 21, :line 2205, :file "cljs/core.cljs"} first ^{:end-column 31, :end-line 2205, :column 27, :line 2205, :file "cljs/core.cljs"} rest ^{:end-column 37, :end-line 2205, :column 32, :line 2205, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 54, :end-line 2205, :column 48, :line 2205, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val ^{:arglists (^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 283, :column 9, :line 283, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 283, :column 10, :line 283, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 8, :end-line 283, :column 4, :line 283, :file "cljs/core.cljs"} -val, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1987, :column 13, :line 1987, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1987, :column 14, :line 1987, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1987, :column 7, :line 1987, :file "cljs/core.cljs"} bytes ^{:arglists (^{:end-column 16, :end-line 1987, :column 13, :line 1987, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1987, :column 14, :line 1987, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1987, :column 7, :line 1987, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1987, :column 14, :line 1987, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1987, :column 13, :line 1987, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1987, :column 14, :line 1987, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1987, :column 7, :line 1987, :file "cljs/core.cljs"} bytes, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} ->ObjMap ^{:arglists ([^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} {:arglists (^cljs.core/ObjMap [^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 4905, :column 18, :line 4905, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 4905, :column 23, :line 4905, :file "cljs/core.cljs"} keys ^{:end-column 34, :end-line 4905, :column 28, :line 4905, :file "cljs/core.cljs"} strobj ^{:end-column 47, :end-line 4905, :column 35, :line 4905, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 64, :end-line 4905, :column 58, :line 4905, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 16, :end-line 4905, :column 10, :line 4905, :file "cljs/core.cljs"} ->ObjMap, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 564, :column 24, :line 564, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 564, :column 25, :line 564, :file "cljs/core.cljs"} a ^{:end-column 28, :end-line 564, :column 27, :line 564, :file "cljs/core.cljs"} b]), :private true, :end-column 23, :end-line 564, :column 8, :line 564, :file "cljs/core.cljs"} compare-symbols ^{:arglists (^{:end-column 29, :end-line 564, :column 24, :line 564, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 564, :column 25, :line 564, :file "cljs/core.cljs"} a ^{:end-column 28, :end-line 564, :column 27, :line 564, :file "cljs/core.cljs"} b]), :private true, :end-column 23, :end-line 564, :column 8, :line 564, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 564, :column 25, :line 564, :file "cljs/core.cljs"} a ^{:end-column 28, :end-line 564, :column 27, :line 564, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 564, :column 24, :line 564, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 564, :column 25, :line 564, :file "cljs/core.cljs"} a ^{:end-column 28, :end-line 564, :column 27, :line 564, :file "cljs/core.cljs"} b]), :private true, :end-column 23, :end-line 564, :column 8, :line 564, :file "cljs/core.cljs"} compare-symbols, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq ^{:arglists (^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 320, :column 21, :line 320, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 320, :column 22, :line 320, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 15, :end-line 320, :column 5, :line 320, :file "cljs/core.cljs"} clj-or-nil, :end-column 20, :end-line 320, :column 16, :line 320, :file "cljs/core.cljs"} -seq, :ns ^{:end-column 14, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}}, :aliases {}, :macro-mappings {unsafe-bit-and #=(var clojure.tools.analyzer.js.cljs.core/unsafe-bit-and), unchecked-remainder-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-remainder-int), when-first #=(var clojure.tools.analyzer.js.cljs.core/when-first), cond->> #=(var clojure.tools.analyzer.js.cljs.core/cond->>), bit-set #=(var clojure.tools.analyzer.js.cljs.core/bit-set), import-macros #=(var clojure.tools.analyzer.js.cljs.core/import-macros), while #=(var clojure.tools.analyzer.js.cljs.core/while), satisfies? #=(var clojure.tools.analyzer.js.cljs.core/satisfies?), unchecked-subtract-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-subtract-int), bit-shift-right #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-right), aget #=(var clojure.tools.analyzer.js.cljs.core/aget), specify #=(var clojure.tools.analyzer.js.cljs.core/specify), caching-hash #=(var clojure.tools.analyzer.js.cljs.core/caching-hash), bit-shift-left #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-left), coercive-not #=(var clojure.tools.analyzer.js.cljs.core/coercive-not), dec #=(var clojure.tools.analyzer.js.cljs.core/dec), < #=(var clojure.tools.analyzer.js.cljs.core/<), this-as #=(var clojure.tools.analyzer.js.cljs.core/this-as), .. #=(var clojure.tools.analyzer.js.cljs.core/..), delay #=(var clojure.tools.analyzer.js.cljs.core/delay), unchecked-negate #=(var clojure.tools.analyzer.js.cljs.core/unchecked-negate), simple-benchmark #=(var clojure.tools.analyzer.js.cljs.core/simple-benchmark), unchecked-inc-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-inc-int), js-str #=(var clojure.tools.analyzer.js.cljs.core/js-str), bit-shift-right-zero-fill #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-right-zero-fill), implements? #=(var clojure.tools.analyzer.js.cljs.core/implements?), pos? #=(var clojure.tools.analyzer.js.cljs.core/pos?), specify! #=(var clojure.tools.analyzer.js.cljs.core/specify!), if-not #=(var clojure.tools.analyzer.js.cljs.core/if-not), alength #=(var clojure.tools.analyzer.js.cljs.core/alength), bit-xor #=(var clojure.tools.analyzer.js.cljs.core/bit-xor), doseq #=(var clojure.tools.analyzer.js.cljs.core/doseq), unsigned-bit-shift-right #=(var clojure.tools.analyzer.js.cljs.core/unsigned-bit-shift-right), neg? #=(var clojure.tools.analyzer.js.cljs.core/neg?), unchecked-float #=(var clojure.tools.analyzer.js.cljs.core/unchecked-float), undefined? #=(var clojure.tools.analyzer.js.cljs.core/undefined?), deftype #=(var clojure.tools.analyzer.js.cljs.core/deftype), mask #=(var clojure.tools.analyzer.js.cljs.core/mask), when-let #=(var clojure.tools.analyzer.js.cljs.core/when-let), divide #=(var clojure.tools.analyzer.js.cljs.core/divide), coercive-boolean #=(var clojure.tools.analyzer.js.cljs.core/coercive-boolean), <= #=(var clojure.tools.analyzer.js.cljs.core/<=), if-some #=(var clojure.tools.analyzer.js.cljs.core/if-some), * #=(var clojure.tools.analyzer.js.cljs.core/*), min #=(var clojure.tools.analyzer.js.cljs.core/min), lazy-seq #=(var clojure.tools.analyzer.js.cljs.core/lazy-seq), js-delete #=(var clojure.tools.analyzer.js.cljs.core/js-delete), truth_ #=(var clojure.tools.analyzer.js.cljs.core/truth_), defcurried #=(var clojure.tools.analyzer.js.cljs.core/defcurried), let #=(var clojure.tools.analyzer.js.cljs.core/let), -> #=(var clojure.tools.analyzer.js.cljs.core/->), coercive-not= #=(var clojure.tools.analyzer.js.cljs.core/coercive-not=), doto #=(var clojure.tools.analyzer.js.cljs.core/doto), areduce #=(var clojure.tools.analyzer.js.cljs.core/areduce), double #=(var clojure.tools.analyzer.js.cljs.core/double), bit-and-not #=(var clojure.tools.analyzer.js.cljs.core/bit-and-not), unchecked-add-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-add-int), fn #=(var clojure.tools.analyzer.js.cljs.core/fn), short #=(var clojure.tools.analyzer.js.cljs.core/short), js-this #=(var clojure.tools.analyzer.js.cljs.core/js-this), unchecked-double #=(var clojure.tools.analyzer.js.cljs.core/unchecked-double), string? #=(var clojure.tools.analyzer.js.cljs.core/string?), js-arguments #=(var clojure.tools.analyzer.js.cljs.core/js-arguments), unchecked-multiply-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-multiply-int), as-> #=(var clojure.tools.analyzer.js.cljs.core/as->), when-not #=(var clojure.tools.analyzer.js.cljs.core/when-not), when #=(var clojure.tools.analyzer.js.cljs.core/when), int #=(var clojure.tools.analyzer.js.cljs.core/int), > #=(var clojure.tools.analyzer.js.cljs.core/>), keyword? #=(var clojure.tools.analyzer.js.cljs.core/keyword?), unchecked-multiply #=(var clojure.tools.analyzer.js.cljs.core/unchecked-multiply), gen-apply-to #=(var clojure.tools.analyzer.js.cljs.core/gen-apply-to), some->> #=(var clojure.tools.analyzer.js.cljs.core/some->>), unchecked-dec #=(var clojure.tools.analyzer.js.cljs.core/unchecked-dec), defn #=(var clojure.tools.analyzer.js.cljs.core/defn), float #=(var clojure.tools.analyzer.js.cljs.core/float), js-in #=(var clojure.tools.analyzer.js.cljs.core/js-in), es6-iterable #=(var clojure.tools.analyzer.js.cljs.core/es6-iterable), amap #=(var clojure.tools.analyzer.js.cljs.core/amap), declare #=(var clojure.tools.analyzer.js.cljs.core/declare), - #=(var clojure.tools.analyzer.js.cljs.core/-), hash-set #=(var clojure.tools.analyzer.js.cljs.core/hash-set), or #=(var clojure.tools.analyzer.js.cljs.core/or), assert-args #=(var clojure.tools.analyzer.js.cljs.core/assert-args), extend-type #=(var clojure.tools.analyzer.js.cljs.core/extend-type), bit-test #=(var clojure.tools.analyzer.js.cljs.core/bit-test), defmethod #=(var clojure.tools.analyzer.js.cljs.core/defmethod), time #=(var clojure.tools.analyzer.js.cljs.core/time), zero? #=(var clojure.tools.analyzer.js.cljs.core/zero?), unchecked-dec-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-dec-int), memfn #=(var clojure.tools.analyzer.js.cljs.core/memfn), js-obj #=(var clojure.tools.analyzer.js.cljs.core/js-obj), nil? #=(var clojure.tools.analyzer.js.cljs.core/nil?), extend-protocol #=(var clojure.tools.analyzer.js.cljs.core/extend-protocol), cond-> #=(var clojure.tools.analyzer.js.cljs.core/cond->), dotimes #=(var clojure.tools.analyzer.js.cljs.core/dotimes), bit-and #=(var clojure.tools.analyzer.js.cljs.core/bit-and), reify #=(var clojure.tools.analyzer.js.cljs.core/reify), instance? #=(var clojure.tools.analyzer.js.cljs.core/instance?), defonce #=(var clojure.tools.analyzer.js.cljs.core/defonce), unchecked-add #=(var clojure.tools.analyzer.js.cljs.core/unchecked-add), rfn #=(var clojure.tools.analyzer.js.cljs.core/rfn), identical? #=(var clojure.tools.analyzer.js.cljs.core/identical?), unchecked-divide-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-divide-int), defn- #=(var clojure.tools.analyzer.js.cljs.core/defn-), defprotocol #=(var clojure.tools.analyzer.js.cljs.core/defprotocol), unchecked-subtract #=(var clojure.tools.analyzer.js.cljs.core/unchecked-subtract), assert #=(var clojure.tools.analyzer.js.cljs.core/assert), true? #=(var clojure.tools.analyzer.js.cljs.core/true?), array #=(var clojure.tools.analyzer.js.cljs.core/array), letfn #=(var clojure.tools.analyzer.js.cljs.core/letfn), / #=(var clojure.tools.analyzer.js.cljs.core//), bitpos #=(var clojure.tools.analyzer.js.cljs.core/bitpos), bit-or #=(var clojure.tools.analyzer.js.cljs.core/bit-or), vector #=(var clojure.tools.analyzer.js.cljs.core/vector), >= #=(var clojure.tools.analyzer.js.cljs.core/>=), loop #=(var clojure.tools.analyzer.js.cljs.core/loop), bit-flip #=(var clojure.tools.analyzer.js.cljs.core/bit-flip), js-mod #=(var clojure.tools.analyzer.js.cljs.core/js-mod), with-out-str #=(var clojure.tools.analyzer.js.cljs.core/with-out-str), condp #=(var clojure.tools.analyzer.js.cljs.core/condp), cond #=(var clojure.tools.analyzer.js.cljs.core/cond), some-> #=(var clojure.tools.analyzer.js.cljs.core/some->), for #=(var clojure.tools.analyzer.js.cljs.core/for), binding #=(var clojure.tools.analyzer.js.cljs.core/binding), array-map #=(var clojure.tools.analyzer.js.cljs.core/array-map), unchecked-byte #=(var clojure.tools.analyzer.js.cljs.core/unchecked-byte), unchecked-short #=(var clojure.tools.analyzer.js.cljs.core/unchecked-short), inc #=(var clojure.tools.analyzer.js.cljs.core/inc), with-redefs #=(var clojure.tools.analyzer.js.cljs.core/with-redefs), bit-clear #=(var clojure.tools.analyzer.js.cljs.core/bit-clear), list #=(var clojure.tools.analyzer.js.cljs.core/list), + #=(var clojure.tools.analyzer.js.cljs.core/+), aset #=(var clojure.tools.analyzer.js.cljs.core/aset), defmulti #=(var clojure.tools.analyzer.js.cljs.core/defmulti), str #=(var clojure.tools.analyzer.js.cljs.core/str), coercive-= #=(var clojure.tools.analyzer.js.cljs.core/coercive-=), hash-map #=(var clojure.tools.analyzer.js.cljs.core/hash-map), if-let #=(var clojure.tools.analyzer.js.cljs.core/if-let), false? #=(var clojure.tools.analyzer.js.cljs.core/false?), case #=(var clojure.tools.analyzer.js.cljs.core/case), array? #=(var clojure.tools.analyzer.js.cljs.core/array?), exists? #=(var clojure.tools.analyzer.js.cljs.core/exists?), bit-not #=(var clojure.tools.analyzer.js.cljs.core/bit-not), byte #=(var clojure.tools.analyzer.js.cljs.core/byte), max #=(var clojure.tools.analyzer.js.cljs.core/max), == #=(var clojure.tools.analyzer.js.cljs.core/==), lazy-cat #=(var clojure.tools.analyzer.js.cljs.core/lazy-cat), comment #=(var clojure.tools.analyzer.js.cljs.core/comment), defrecord #=(var clojure.tools.analyzer.js.cljs.core/defrecord), make-array #=(var clojure.tools.analyzer.js.cljs.core/make-array), unchecked-negate-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-negate-int), unchecked-inc #=(var clojure.tools.analyzer.js.cljs.core/unchecked-inc), and #=(var clojure.tools.analyzer.js.cljs.core/and), number? #=(var clojure.tools.analyzer.js.cljs.core/number?), symbol? #=(var clojure.tools.analyzer.js.cljs.core/symbol?), when-some #=(var clojure.tools.analyzer.js.cljs.core/when-some), unchecked-char #=(var clojure.tools.analyzer.js.cljs.core/unchecked-char), ->> #=(var clojure.tools.analyzer.js.cljs.core/->>)}, :macro-aliases {}}, goog {:mappings {}, :js-namespace true, :ns goog}, Math {:mappings {}, :js-namespace true, :ns Math}}